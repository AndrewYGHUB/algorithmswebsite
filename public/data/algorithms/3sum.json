{
  "slug": "3sum",
  "name": "3sum",
  "categories": [
    "datastructures",
    "array"
  ],
  "body": {},
  "implementations": {
    "ruby": {
      "dir": "data_structures/arrays/3sum.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/arrays/3sum.rb",
      "code": "<span class=\"hljs-comment\"># Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] ..</span>\n<span class=\"hljs-comment\"># .. such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.</span>\n<span class=\"hljs-comment\"># Notice that the solution set must not contain duplicate triplets.</span>\n\n<span class=\"hljs-comment\"># Example 1:</span>\n<span class=\"hljs-comment\"># Input: nums = [-1,0,1,2,-1,-4]</span>\n<span class=\"hljs-comment\"># Output: [[-1,-1,2],[-1,0,1]]</span>\n\n<span class=\"hljs-comment\"># Example 2:</span>\n<span class=\"hljs-comment\"># Input: nums = []</span>\n<span class=\"hljs-comment\"># Output: []</span>\n\n<span class=\"hljs-comment\"># Example 3:</span>\n<span class=\"hljs-comment\"># Input: nums = [0]</span>\n<span class=\"hljs-comment\"># Output: []</span>\n\n<span class=\"hljs-comment\"># Constraints:</span>\n<span class=\"hljs-comment\"># 0 &lt;= nums.length &lt;= 3000</span>\n<span class=\"hljs-comment\">#-105 &lt;= nums[i] &lt;= 105</span>\n\n<span class=\"hljs-comment\"># Two Pointer Approach - O(n) Time / O(1) Space</span>\n<span class=\"hljs-comment\"># Return edge cases.</span>\n<span class=\"hljs-comment\"># Sort nums, and init ans array</span>\n<span class=\"hljs-comment\"># For each |val, index| in nums:</span>\n<span class=\"hljs-comment\"># if the current value is the same as last, then go to next iteration</span>\n<span class=\"hljs-comment\"># init left and right pointers for two pointer search of the two sum in remaining elements of array</span>\n<span class=\"hljs-comment\"># while left &lt; right:</span>\n<span class=\"hljs-comment\"># find current sum</span>\n<span class=\"hljs-comment\"># if sum &gt; 0, right -= 1</span>\n<span class=\"hljs-comment\"># if sum &lt; 0, left += 1</span>\n<span class=\"hljs-comment\"># if it&#x27;s 0, then add the values to the answer array, and set the left pointer to the next valid value ..</span>\n<span class=\"hljs-comment\"># .. (left += 1 while nums[left] == nums[left - 1] &amp;&amp; left &lt; right)</span>\n<span class=\"hljs-comment\"># Return ans[]</span>\n\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {Integer[]} nums</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@return</span> {Integer[][]}</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">three_sum</span>(<span class=\"hljs-params\">nums</span>)\n  <span class=\"hljs-comment\"># return if length too short</span>\n  <span class=\"hljs-keyword\">return</span> [] <span class=\"hljs-keyword\">if</span> nums.length &lt; <span class=\"hljs-number\">3</span>\n\n  <span class=\"hljs-comment\"># sort nums, init ans array</span>\n  nums = nums.sort\n  ans = []\n\n  <span class=\"hljs-comment\"># loop through nums</span>\n  nums.each_with_index <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">val, ind</span>|\n    <span class=\"hljs-comment\"># if the previous value is the same as current, then skip this iteration as it would create duplicates</span>\n    <span class=\"hljs-keyword\">next</span> <span class=\"hljs-keyword\">if</span> ind &gt; <span class=\"hljs-number\">0</span> &amp;&amp; nums[ind] == nums[ind - <span class=\"hljs-number\">1</span>]\n\n    <span class=\"hljs-comment\"># init &amp; run two pointer search</span>\n    left = ind + <span class=\"hljs-number\">1</span>\n    right = nums.length - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">while</span> left &lt; right\n      <span class=\"hljs-comment\"># find current sum</span>\n      sum = val + nums[left] + nums[right]\n\n      <span class=\"hljs-comment\"># decrease sum if it&#x27;s too great, increase sum if it&#x27;s too low</span>\n      <span class=\"hljs-keyword\">if</span> sum &gt; <span class=\"hljs-number\">0</span>\n        right -= <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">elsif</span> sum &lt; <span class=\"hljs-number\">0</span>\n        left += <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-comment\"># if it&#x27;s zero, then add the answer to array and set left pointer to next valid value</span>\n      <span class=\"hljs-keyword\">else</span>\n        ans &lt;&lt; [val, nums[left], nums[right]]\n\n        left += <span class=\"hljs-number\">1</span>\n\n        left += <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">while</span> nums[left] == nums[left - <span class=\"hljs-number\">1</span>] &amp;&amp; left &lt; right\n      <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-comment\"># return answer</span>\n  ans\n<span class=\"hljs-keyword\">end</span>\n\nnums = [-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">4</span>]\nprint three_sum(nums)\n<span class=\"hljs-comment\"># Output: [[-1,-1,2],[-1,0,1]]</span>\n\nnums = []\nprint three_sum(nums)\n<span class=\"hljs-comment\"># Output: []</span>\n\nnums = [<span class=\"hljs-number\">0</span>]\nprint three_sum(nums)\n<span class=\"hljs-comment\"># Output: []</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "sidaksohi",
      "email": "31377210+sidaksohi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hardik Kapadia",
      "email": "thecoderenroute@gmail.com",
      "commits": 1
    },
    {
      "name": "joshiujjawal22",
      "email": "joshiujjawal22@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}