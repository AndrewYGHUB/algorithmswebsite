{
  "slug": "adt-fraction",
  "name": "ADT Fraction",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/maths/ADTFraction.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/maths/ADTFraction.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">record</span> <span class=\"hljs-title class_\">ADTFraction</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> numerator, <span class=\"hljs-type\">int</span> denominator)</span> {\n\n    <span class=\"hljs-comment\">/**\n     * Initializes a newly created {<span class=\"hljs-doctag\">@code</span> ADTFraction} object so that it represents\n     * a fraction with the {<span class=\"hljs-doctag\">@code</span> numerator} and {<span class=\"hljs-doctag\">@code</span> denominator} provided as arguments.\n     *\n     * <span class=\"hljs-doctag\">@param</span> numerator   The fraction numerator\n     * <span class=\"hljs-doctag\">@param</span> denominator The fraction denominator\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ADTFraction {\n        <span class=\"hljs-keyword\">if</span> (denominator == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Denominator cannot be 0&quot;</span>);\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Add two fractions.\n     *\n     * <span class=\"hljs-doctag\">@param</span> fraction the {<span class=\"hljs-doctag\">@code</span> ADTFraction} to add\n     * <span class=\"hljs-doctag\">@return</span> A new {<span class=\"hljs-doctag\">@code</span> ADTFraction} containing the result of the operation\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ADTFraction <span class=\"hljs-title function_\">plus</span><span class=\"hljs-params\">(ADTFraction fraction)</span> {\n        <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">numerator</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.denominator * fraction.numerator + <span class=\"hljs-built_in\">this</span>.numerator * fraction.denominator;\n        <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">denominator</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.denominator * fraction.denominator;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ADTFraction</span>(numerator, denominator);\n\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Multiply fraction by a number.\n     *\n     * <span class=\"hljs-doctag\">@param</span> number the number to multiply\n     * <span class=\"hljs-doctag\">@return</span> A new {<span class=\"hljs-doctag\">@code</span> ADTFraction} containing the result of the operation\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ADTFraction <span class=\"hljs-title function_\">times</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span> {\n        <span class=\"hljs-keyword\">return</span> times(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ADTFraction</span>(number, <span class=\"hljs-number\">1</span>));\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Multiply two fractions.\n     *\n     * <span class=\"hljs-doctag\">@param</span> fraction the {<span class=\"hljs-doctag\">@code</span> ADTFraction} to multiply\n     * <span class=\"hljs-doctag\">@return</span> A new {<span class=\"hljs-doctag\">@code</span> ADTFraction} containing the result of the operation\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ADTFraction <span class=\"hljs-title function_\">times</span><span class=\"hljs-params\">(ADTFraction fraction)</span> {\n        <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">numerator</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.numerator * fraction.numerator;\n        <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">denominator</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.denominator * fraction.denominator;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ADTFraction</span>(numerator, denominator);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Generates the reciprocal of the fraction.\n     *\n     * <span class=\"hljs-doctag\">@return</span> A new {<span class=\"hljs-doctag\">@code</span> ADTFraction} with the {<span class=\"hljs-doctag\">@code</span> numerator} and {<span class=\"hljs-doctag\">@code</span> denominator} switched\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ADTFraction <span class=\"hljs-title function_\">reciprocal</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ADTFraction</span>(<span class=\"hljs-built_in\">this</span>.denominator, <span class=\"hljs-built_in\">this</span>.numerator);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculates the result of the fraction.\n     *\n     * <span class=\"hljs-doctag\">@return</span> The numerical result of the division between {<span class=\"hljs-doctag\">@code</span> numerator} and {<span class=\"hljs-doctag\">@code</span> denominator}\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-title function_\">value</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">float</span>) <span class=\"hljs-built_in\">this</span>.numerator / <span class=\"hljs-built_in\">this</span>.denominator;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Returns a string representation of this {<span class=\"hljs-doctag\">@code</span> ADTFraction} in the format\n     * {<span class=\"hljs-doctag\">@code</span> numerator}/{<span class=\"hljs-doctag\">@code</span> denominator}.\n     *\n     * <span class=\"hljs-doctag\">@return</span> A string representation of this {<span class=\"hljs-doctag\">@code</span> ADTFraction}\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> String.format(<span class=\"hljs-string\">&quot;%d/%d&quot;</span>, <span class=\"hljs-built_in\">this</span>.numerator, <span class=\"hljs-built_in\">this</span>.denominator);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Cristiano Jesus",
      "email": "crist.borges05@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Thisaru Dilshan",
      "email": "49381898+ThisaruD@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}