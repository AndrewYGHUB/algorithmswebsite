{
  "slug": "aho-corasick",
  "name": "Aho Corasick",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings/aho_corasick.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings/aho_corasick.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> deque\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Automaton</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, keywords: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]</span>):\n        self.adlist: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">dict</span>] = <span class=\"hljs-built_in\">list</span>()\n        self.adlist.append(\n            {<span class=\"hljs-string\">&quot;value&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;next_states&quot;</span>: [], <span class=\"hljs-string\">&quot;fail_state&quot;</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;output&quot;</span>: []}\n        )\n\n        <span class=\"hljs-keyword\">for</span> keyword <span class=\"hljs-keyword\">in</span> keywords:\n            self.add_keyword(keyword)\n        self.set_fail_transitions()\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find_next_state</span>(<span class=\"hljs-params\">self, current_state: <span class=\"hljs-built_in\">int</span>, char: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">for</span> state <span class=\"hljs-keyword\">in</span> self.adlist[current_state][<span class=\"hljs-string\">&quot;next_states&quot;</span>]:\n            <span class=\"hljs-keyword\">if</span> char == self.adlist[state][<span class=\"hljs-string\">&quot;value&quot;</span>]:\n                <span class=\"hljs-keyword\">return</span> state\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_keyword</span>(<span class=\"hljs-params\">self, keyword: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        current_state = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> character <span class=\"hljs-keyword\">in</span> keyword:\n            next_state = self.find_next_state(current_state, character)\n            <span class=\"hljs-keyword\">if</span> next_state <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n                self.adlist.append(\n                    {\n                        <span class=\"hljs-string\">&quot;value&quot;</span>: character,\n                        <span class=\"hljs-string\">&quot;next_states&quot;</span>: [],\n                        <span class=\"hljs-string\">&quot;fail_state&quot;</span>: <span class=\"hljs-number\">0</span>,\n                        <span class=\"hljs-string\">&quot;output&quot;</span>: [],\n                    }\n                )\n                self.adlist[current_state][<span class=\"hljs-string\">&quot;next_states&quot;</span>].append(<span class=\"hljs-built_in\">len</span>(self.adlist) - <span class=\"hljs-number\">1</span>)\n                current_state = <span class=\"hljs-built_in\">len</span>(self.adlist) - <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">else</span>:\n                current_state = next_state\n        self.adlist[current_state][<span class=\"hljs-string\">&quot;output&quot;</span>].append(keyword)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set_fail_transitions</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        q: deque = deque()\n        <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> self.adlist[<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">&quot;next_states&quot;</span>]:\n            q.append(node)\n            self.adlist[node][<span class=\"hljs-string\">&quot;fail_state&quot;</span>] = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">while</span> q:\n            r = q.popleft()\n            <span class=\"hljs-keyword\">for</span> child <span class=\"hljs-keyword\">in</span> self.adlist[r][<span class=\"hljs-string\">&quot;next_states&quot;</span>]:\n                q.append(child)\n                state = self.adlist[r][<span class=\"hljs-string\">&quot;fail_state&quot;</span>]\n                <span class=\"hljs-keyword\">while</span> (\n                    self.find_next_state(state, self.adlist[child][<span class=\"hljs-string\">&quot;value&quot;</span>]) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n                    <span class=\"hljs-keyword\">and</span> state != <span class=\"hljs-number\">0</span>\n                ):\n                    state = self.adlist[state][<span class=\"hljs-string\">&quot;fail_state&quot;</span>]\n                self.adlist[child][<span class=\"hljs-string\">&quot;fail_state&quot;</span>] = self.find_next_state(\n                    state, self.adlist[child][<span class=\"hljs-string\">&quot;value&quot;</span>]\n                )\n                <span class=\"hljs-keyword\">if</span> self.adlist[child][<span class=\"hljs-string\">&quot;fail_state&quot;</span>] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n                    self.adlist[child][<span class=\"hljs-string\">&quot;fail_state&quot;</span>] = <span class=\"hljs-number\">0</span>\n                self.adlist[child][<span class=\"hljs-string\">&quot;output&quot;</span>] = (\n                    self.adlist[child][<span class=\"hljs-string\">&quot;output&quot;</span>]\n                    + self.adlist[self.adlist[child][<span class=\"hljs-string\">&quot;fail_state&quot;</span>]][<span class=\"hljs-string\">&quot;output&quot;</span>]\n                )\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search_in</span>(<span class=\"hljs-params\">self, string: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &gt;&gt;&gt; A = Automaton([&quot;what&quot;, &quot;hat&quot;, &quot;ver&quot;, &quot;er&quot;])\n        &gt;&gt;&gt; A.search_in(&quot;whatever, err ... , wherever&quot;)\n        {&#x27;what&#x27;: [0], &#x27;hat&#x27;: [1], &#x27;ver&#x27;: [5, 25], &#x27;er&#x27;: [6, 10, 22, 26]}\n        &quot;&quot;&quot;</span>\n        result: <span class=\"hljs-built_in\">dict</span> = (\n            <span class=\"hljs-built_in\">dict</span>()\n        )  <span class=\"hljs-comment\"># returns a dict with keywords and list of its occurrences</span>\n        current_state = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(string)):\n            <span class=\"hljs-keyword\">while</span> (\n                self.find_next_state(current_state, string[i]) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n                <span class=\"hljs-keyword\">and</span> current_state != <span class=\"hljs-number\">0</span>\n            ):\n                current_state = self.adlist[current_state][<span class=\"hljs-string\">&quot;fail_state&quot;</span>]\n            next_state = self.find_next_state(current_state, string[i])\n            <span class=\"hljs-keyword\">if</span> next_state <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n                current_state = <span class=\"hljs-number\">0</span>\n            <span class=\"hljs-keyword\">else</span>:\n                current_state = next_state\n                <span class=\"hljs-keyword\">for</span> key <span class=\"hljs-keyword\">in</span> self.adlist[current_state][<span class=\"hljs-string\">&quot;output&quot;</span>]:\n                    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> (key <span class=\"hljs-keyword\">in</span> result):\n                        result[key] = []\n                    result[key].append(i - <span class=\"hljs-built_in\">len</span>(key) + <span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">return</span> result\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "go": {
      "dir": "strings/ahocorasick/ahocorasick.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/strings/ahocorasick/ahocorasick.go",
      "code": "<span class=\"hljs-keyword\">package</span> ahocorasick\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;fmt&quot;</span>\n\t<span class=\"hljs-string\">&quot;time&quot;</span>\n)\n\n<span class=\"hljs-comment\">// Result structure to hold occurrences</span>\n<span class=\"hljs-keyword\">type</span> Result <span class=\"hljs-keyword\">struct</span> {\n\toccurrences <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>][]<span class=\"hljs-type\">int</span>\n}\n\n<span class=\"hljs-comment\">// AhoCorasick Function performing the Basic Aho-Corasick algorithm.</span>\n<span class=\"hljs-comment\">// Finds and prints occurrences of each pattern.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">AhoCorasick</span><span class=\"hljs-params\">(t <span class=\"hljs-type\">string</span>, p []<span class=\"hljs-type\">string</span>)</span></span> Result {\n\tstartTime := time.Now()\n\toccurrences := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>][]<span class=\"hljs-type\">int</span>)\n\tac, f, s := BuildAc(p)\n\tcurrent := <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">for</span> pos := <span class=\"hljs-number\">0</span>; pos &lt; <span class=\"hljs-built_in\">len</span>(t); pos++ {\n\t\t<span class=\"hljs-keyword\">for</span> GetTransition(current, t[pos], ac) == <span class=\"hljs-number\">-1</span> &amp;&amp; s[current] != <span class=\"hljs-number\">-1</span> {\n\t\t\tcurrent = s[current]\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> GetTransition(current, t[pos], ac) != <span class=\"hljs-number\">-1</span> {\n\t\t\tcurrent = GetTransition(current, t[pos], ac)\n\t\t\tfmt.Printf(<span class=\"hljs-string\">&quot; (Continue) \\n&quot;</span>)\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\tcurrent = <span class=\"hljs-number\">0</span>\n\t\t}\n\t\t_, ok := f[current]\n\t\t<span class=\"hljs-keyword\">if</span> ok {\n\t\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> f[current] {\n\t\t\t\t<span class=\"hljs-keyword\">if</span> p[f[current][i]] == GetWord(pos-<span class=\"hljs-built_in\">len</span>(p[f[current][i]])+<span class=\"hljs-number\">1</span>, pos, t) { <span class=\"hljs-comment\">//check for word match</span>\n\t\t\t\t\tnewOccurrences := IntArrayCapUp(occurrences[f[current][i]])\n\t\t\t\t\toccurrences[f[current][i]] = newOccurrences\n\t\t\t\t\toccurrences[f[current][i]][<span class=\"hljs-built_in\">len</span>(newOccurrences)<span class=\"hljs-number\">-1</span>] = pos - <span class=\"hljs-built_in\">len</span>(p[f[current][i]]) + <span class=\"hljs-number\">1</span>\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telapsed := time.Since(startTime)\n\tfmt.Printf(<span class=\"hljs-string\">&quot;\\n\\nElapsed %f secs\\n&quot;</span>, elapsed.Seconds())\n\t<span class=\"hljs-keyword\">var</span> resultOccurrences = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>][]<span class=\"hljs-type\">int</span>)\n\t<span class=\"hljs-keyword\">for</span> key, value := <span class=\"hljs-keyword\">range</span> occurrences {\n\t\tresultOccurrences[p[key]] = value\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> Result{\n\t\tresultOccurrences,\n\t}\n}\n\n<span class=\"hljs-comment\">// Functions that builds Aho Corasick automaton.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">BuildAc</span><span class=\"hljs-params\">(p []<span class=\"hljs-type\">string</span>)</span></span> (acToReturn <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">uint8</span>]<span class=\"hljs-type\">int</span>, f <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>][]<span class=\"hljs-type\">int</span>, s []<span class=\"hljs-type\">int</span>) {\n\tacTrie, stateIsTerminal, f := ConstructTrie(p)\n\ts = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(stateIsTerminal)) <span class=\"hljs-comment\">//supply function</span>\n\ti := <span class=\"hljs-number\">0</span>                                <span class=\"hljs-comment\">//root of acTrie</span>\n\tacToReturn = acTrie\n\ts[i] = <span class=\"hljs-number\">-1</span>\n\t<span class=\"hljs-keyword\">for</span> current := <span class=\"hljs-number\">1</span>; current &lt; <span class=\"hljs-built_in\">len</span>(stateIsTerminal); current++ {\n\t\to, parent := GetParent(current, acTrie)\n\t\tdown := s[parent]\n\t\t<span class=\"hljs-keyword\">for</span> StateExists(down, acToReturn) &amp;&amp; GetTransition(down, o, acToReturn) == <span class=\"hljs-number\">-1</span> {\n\t\t\tdown = s[down]\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> StateExists(down, acToReturn) {\n\t\t\ts[current] = GetTransition(down, o, acToReturn)\n\t\t\t<span class=\"hljs-keyword\">if</span> stateIsTerminal[s[current]] {\n\t\t\t\tstateIsTerminal[current] = <span class=\"hljs-literal\">true</span>\n\t\t\t\tf[current] = ArrayUnion(f[current], f[s[current]]) <span class=\"hljs-comment\">//F(Current) &lt;- F(Current) union F(S(Current))</span>\n\t\t\t}\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\ts[current] = i <span class=\"hljs-comment\">//initial state?</span>\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> acToReturn, f, s\n}\n"
    },
    "rust": {
      "dir": "src/string/aho_corasick.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/string/aho_corasick.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::cell::RefCell;\n<span class=\"hljs-keyword\">use</span> std::collections::BTreeMap;\n<span class=\"hljs-keyword\">use</span> std::collections::VecDeque;\n<span class=\"hljs-keyword\">use</span> std::rc::{Rc, Weak};\n\n<span class=\"hljs-meta\">#[derive(Default)]</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">ACNode</span> {\n    trans: BTreeMap&lt;<span class=\"hljs-type\">char</span>, Rc&lt;RefCell&lt;ACNode&gt;&gt;&gt;,\n    suffix: Weak&lt;RefCell&lt;ACNode&gt;&gt;, <span class=\"hljs-comment\">// the suffix(fail) link</span>\n    lengths: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;,           <span class=\"hljs-comment\">// lengths of matched patterns ended at this node</span>\n}\n\n<span class=\"hljs-meta\">#[derive(Default)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">AhoCorasick</span> {\n    root: Rc&lt;RefCell&lt;ACNode&gt;&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">AhoCorasick</span> {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>(words: &amp;[&amp;<span class=\"hljs-type\">str</span>]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">root</span> = Rc::<span class=\"hljs-title function_ invoke__\">new</span>(RefCell::<span class=\"hljs-title function_ invoke__\">new</span>(ACNode::<span class=\"hljs-title function_ invoke__\">default</span>()));\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">word</span> <span class=\"hljs-keyword\">in</span> words {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">cur</span> = Rc::<span class=\"hljs-title function_ invoke__\">clone</span>(&amp;root);\n            <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-keyword\">in</span> word.<span class=\"hljs-title function_ invoke__\">chars</span>() {\n                cur = Rc::<span class=\"hljs-title function_ invoke__\">clone</span>(Rc::<span class=\"hljs-title function_ invoke__\">clone</span>(&amp;cur).<span class=\"hljs-title function_ invoke__\">borrow_mut</span>().trans.<span class=\"hljs-title function_ invoke__\">entry</span>(c).<span class=\"hljs-title function_ invoke__\">or_default</span>());\n            }\n            cur.<span class=\"hljs-title function_ invoke__\">borrow_mut</span>().lengths.<span class=\"hljs-title function_ invoke__\">push</span>(word.<span class=\"hljs-title function_ invoke__\">len</span>());\n        }\n        <span class=\"hljs-keyword\">Self</span>::<span class=\"hljs-title function_ invoke__\">build_suffix</span>(Rc::<span class=\"hljs-title function_ invoke__\">clone</span>(&amp;root));\n        <span class=\"hljs-keyword\">Self</span> { root }\n    }\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">build_suffix</span>(root: Rc&lt;RefCell&lt;ACNode&gt;&gt;) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">q</span> = VecDeque::<span class=\"hljs-title function_ invoke__\">new</span>();\n        q.<span class=\"hljs-title function_ invoke__\">push_back</span>(Rc::<span class=\"hljs-title function_ invoke__\">clone</span>(&amp;root));\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(parent) = q.<span class=\"hljs-title function_ invoke__\">pop_front</span>() {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">parent</span> = parent.<span class=\"hljs-title function_ invoke__\">borrow</span>();\n            <span class=\"hljs-title function_ invoke__\">for</span> (c, child) <span class=\"hljs-keyword\">in</span> &amp;parent.trans {\n                q.<span class=\"hljs-title function_ invoke__\">push_back</span>(Rc::<span class=\"hljs-title function_ invoke__\">clone</span>(child));\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">child</span> = child.<span class=\"hljs-title function_ invoke__\">borrow_mut</span>();\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">suffix</span> = parent.suffix.<span class=\"hljs-title function_ invoke__\">upgrade</span>();\n                <span class=\"hljs-keyword\">loop</span> {\n                    <span class=\"hljs-keyword\">match</span> &amp;suffix {\n                        <span class=\"hljs-literal\">None</span> =&gt; {\n                            child.lengths.<span class=\"hljs-title function_ invoke__\">extend</span>(root.<span class=\"hljs-title function_ invoke__\">borrow</span>().lengths.<span class=\"hljs-title function_ invoke__\">clone</span>());\n                            child.suffix = Rc::<span class=\"hljs-title function_ invoke__\">downgrade</span>(&amp;root);\n                            <span class=\"hljs-keyword\">break</span>;\n                        }\n                        <span class=\"hljs-title function_ invoke__\">Some</span>(node) =&gt; {\n                            <span class=\"hljs-keyword\">if</span> node.<span class=\"hljs-title function_ invoke__\">borrow</span>().trans.<span class=\"hljs-title function_ invoke__\">contains_key</span>(c) {\n                                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">node</span> = &amp;node.<span class=\"hljs-title function_ invoke__\">borrow</span>().trans[c];\n                                child.lengths.<span class=\"hljs-title function_ invoke__\">extend</span>(node.<span class=\"hljs-title function_ invoke__\">borrow</span>().lengths.<span class=\"hljs-title function_ invoke__\">clone</span>());\n                                child.suffix = Rc::<span class=\"hljs-title function_ invoke__\">downgrade</span>(node);\n                                <span class=\"hljs-keyword\">break</span>;\n                            } <span class=\"hljs-keyword\">else</span> {\n                                suffix = suffix.<span class=\"hljs-title function_ invoke__\">unwrap</span>().<span class=\"hljs-title function_ invoke__\">borrow</span>().suffix.<span class=\"hljs-title function_ invoke__\">upgrade</span>();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">search</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>&gt;(&amp;<span class=\"hljs-keyword\">self</span>, s: &amp;<span class=\"hljs-symbol\">&#x27;a</span> <span class=\"hljs-type\">str</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">&#x27;a</span> <span class=\"hljs-type\">str</span>&gt; {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">ans</span> = <span class=\"hljs-built_in\">vec!</span>[];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">cur</span> = Rc::<span class=\"hljs-title function_ invoke__\">clone</span>(&amp;<span class=\"hljs-keyword\">self</span>.root);\n        <span class=\"hljs-title function_ invoke__\">for</span> (i, c) <span class=\"hljs-keyword\">in</span> s.<span class=\"hljs-title function_ invoke__\">chars</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\n            <span class=\"hljs-keyword\">loop</span> {\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(child) = Rc::<span class=\"hljs-title function_ invoke__\">clone</span>(&amp;cur).<span class=\"hljs-title function_ invoke__\">borrow</span>().trans.<span class=\"hljs-title function_ invoke__\">get</span>(&amp;c) {\n                    cur = Rc::<span class=\"hljs-title function_ invoke__\">clone</span>(child);\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">suffix</span> = cur.<span class=\"hljs-title function_ invoke__\">borrow</span>().suffix.<span class=\"hljs-title function_ invoke__\">clone</span>();\n                <span class=\"hljs-keyword\">match</span> suffix.<span class=\"hljs-title function_ invoke__\">upgrade</span>() {\n                    <span class=\"hljs-title function_ invoke__\">Some</span>(node) =&gt; cur = node,\n                    <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">break</span>,\n                }\n            }\n            <span class=\"hljs-keyword\">for</span> &amp;len <span class=\"hljs-keyword\">in</span> &amp;cur.<span class=\"hljs-title function_ invoke__\">borrow</span>().lengths {\n                ans.<span class=\"hljs-title function_ invoke__\">push</span>(&amp;s[i + <span class=\"hljs-number\">1</span> - len..=i]);\n            }\n        }\n        ans\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_aho_corasick</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">dict</span> = [<span class=\"hljs-string\">&quot;abc&quot;</span>, <span class=\"hljs-string\">&quot;abcd&quot;</span>, <span class=\"hljs-string\">&quot;xyz&quot;</span>, <span class=\"hljs-string\">&quot;acxy&quot;</span>, <span class=\"hljs-string\">&quot;efg&quot;</span>, <span class=\"hljs-string\">&quot;123&quot;</span>, <span class=\"hljs-string\">&quot;678&quot;</span>, <span class=\"hljs-string\">&quot;6543&quot;</span>];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">ac</span> = AhoCorasick::<span class=\"hljs-title function_ invoke__\">new</span>(&amp;dict);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = ac.<span class=\"hljs-title function_ invoke__\">search</span>(<span class=\"hljs-string\">&quot;ababcxyzacxy12678acxy6543&quot;</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, [<span class=\"hljs-string\">&quot;abc&quot;</span>, <span class=\"hljs-string\">&quot;xyz&quot;</span>, <span class=\"hljs-string\">&quot;acxy&quot;</span>, <span class=\"hljs-string\">&quot;678&quot;</span>, <span class=\"hljs-string\">&quot;acxy&quot;</span>, <span class=\"hljs-string\">&quot;6543&quot;</span>,]);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "pwygab",
      "email": "88221256+merelymyself@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "imp",
      "email": "imp07@qq.com",
      "commits": 1
    },
    {
      "name": "scturtle",
      "email": "scturtle@gmail.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "onlinejudge95",
      "email": "44158581+onlinejudge95@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Dmytro Litvinov",
      "email": "litvinov.dmytro.it@gmail.com",
      "commits": 1
    },
    {
      "name": "Samarth Sehgal",
      "email": "samarthsehgal97@gmail.com",
      "commits": 1
    },
    {
      "name": "Aashay Shingre",
      "email": "akshingre@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}