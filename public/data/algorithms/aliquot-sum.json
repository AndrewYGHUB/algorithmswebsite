{
  "slug": "aliquot-sum",
  "name": "Aliquot Sum",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/aliquot_sum.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/aliquot_sum.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">aliquot_sum</span>(<span class=\"hljs-params\">input_num: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Finds the aliquot sum of an input integer, where the\n    aliquot sum of a number n is defined as the sum of all\n    natural numbers less than n that divide n evenly. For\n    example, the aliquot sum of 15 is 1 + 3 + 5 = 9. This is\n    a simple O(n) implementation.\n    @param input_num: a positive integer whose aliquot sum is to be found\n    @return: the aliquot sum of input_num, if input_num is positive.\n    Otherwise, raise a ValueError\n    Wikipedia Explanation: https://en.wikipedia.org/wiki/Aliquot_sum\n\n    &gt;&gt;&gt; aliquot_sum(15)\n    9\n    &gt;&gt;&gt; aliquot_sum(6)\n    6\n    &gt;&gt;&gt; aliquot_sum(-1)\n    Traceback (most recent call last):\n      ...\n    ValueError: Input must be positive\n    &gt;&gt;&gt; aliquot_sum(0)\n    Traceback (most recent call last):\n      ...\n    ValueError: Input must be positive\n    &gt;&gt;&gt; aliquot_sum(1.6)\n    Traceback (most recent call last):\n      ...\n    ValueError: Input must be an integer\n    &gt;&gt;&gt; aliquot_sum(12)\n    16\n    &gt;&gt;&gt; aliquot_sum(1)\n    0\n    &gt;&gt;&gt; aliquot_sum(19)\n    1\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(input_num, <span class=\"hljs-built_in\">int</span>):\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Input must be an integer&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> input_num &lt;= <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Input must be positive&quot;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(\n        divisor <span class=\"hljs-keyword\">for</span> divisor <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, input_num // <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">if</span> input_num % divisor == <span class=\"hljs-number\">0</span>\n    )\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "javascript": {
      "dir": "Maths/AliquotSum.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/AliquotSum.js",
      "code": "<span class=\"hljs-comment\">/*\n  A program to calculate the Aliquot Sum of a number.\n  The aliquot sum of a number n, is the sum of all the proper divisors of n apart from n itself\n  For example, for the number 6\n  The divisors are 1, 2, 3 (we don&#x27;t consider 6), so its aliquot sum is 1 + 2 + 3 = 6\n  1 is the only number whose aliquot sum is 0 (since its only divisor is 1 and aliquot sum of a number couldn&#x27;t have itself)\n  For all prime numbers, the aliquot sum is 1, since their only divisor apart from themselves is 1\n  Article on Aliquot Sum: https://en.wikipedia.org/wiki/Aliquot_sum\n */</span>\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} input The number whose aliquot sum you want to calculate\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">aliquotSum</span> (input) {\n  <span class=\"hljs-comment\">// input can&#x27;t be negative</span>\n  <span class=\"hljs-keyword\">if</span> (input &lt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;Input cannot be Negative&#x27;</span>)\n\n  <span class=\"hljs-comment\">// input can&#x27;t be a decimal</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(input) !== input) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;Input cannot be a Decimal&#x27;</span>)\n\n  <span class=\"hljs-comment\">// Dealing with 1, which isn&#x27;t a prime</span>\n  <span class=\"hljs-keyword\">if</span> (input === <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt;= (input / <span class=\"hljs-number\">2</span>); i++) {\n    <span class=\"hljs-keyword\">if</span> (input % i === <span class=\"hljs-number\">0</span>) sum += i\n  }\n\n  <span class=\"hljs-keyword\">return</span> sum\n}\n\n<span class=\"hljs-keyword\">export</span> { aliquotSum }\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/maths/AliquotSum.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/maths/AliquotSum.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\n\n<span class=\"hljs-keyword\">import</span> java.util.stream.IntStream;\n\n<span class=\"hljs-comment\">/**\n * In number theory, the aliquot sum s(n) of a positive integer n is the sum of\n * all proper divisors of n, that is, all divisors of n other than n itself. For\n * example, the proper divisors of 15 (that is, the positive divisors of 15 that\n * are not equal to 15) are 1, 3 and 5, so the aliquot sum of 15 is 9 i.e. (1 +\n * 3 + 5). Wikipedia: https://en.wikipedia.org/wiki/Aliquot_sum\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AliquotSum</span> {\n\n    <span class=\"hljs-comment\">/**\n     * Finds the aliquot sum of an integer number.\n     *\n     * <span class=\"hljs-doctag\">@param</span> number a positive integer\n     * <span class=\"hljs-doctag\">@return</span> aliquot sum of given {<span class=\"hljs-doctag\">@code</span> number}\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAliquotValue</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span> {\n        <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">sumWrapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>() {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        };\n\n        IntStream.iterate(<span class=\"hljs-number\">1</span>, i -&gt; ++i)\n                .limit(number / <span class=\"hljs-number\">2</span>)\n                .filter(i -&gt; number % i == <span class=\"hljs-number\">0</span>)\n                .forEach(i -&gt; sumWrapper.value += i);\n\n        <span class=\"hljs-keyword\">return</span> sumWrapper.value;\n    }\n}\n"
    },
    "ruby": {
      "dir": "maths/aliquot_sum.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/maths/aliquot_sum.rb",
      "code": "<span class=\"hljs-comment\"># frozen_string_literal: true</span>\n\nrequire_relative <span class=\"hljs-string\">&#x27;./square_root&#x27;</span>\nrequire_relative <span class=\"hljs-string\">&#x27;./ceil&#x27;</span>\n\n<span class=\"hljs-comment\"># Calculates the aliquot sum of a number (the sum of all proper divisors of a number)</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AliquotSum</span>\n  <span class=\"hljs-keyword\">class</span> &lt;&lt; <span class=\"hljs-variable language_\">self</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">call</span>(<span class=\"hljs-params\">number</span>)\n      divisors(number).sum\n    <span class=\"hljs-keyword\">end</span>\n\n    private\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">divisors</span>(<span class=\"hljs-params\">number</span>)\n      low_divisors = (<span class=\"hljs-number\">1</span>..Ceil.call(SquareRoot.call(number))).select { |<span class=\"hljs-params\">num</span>| (number % num).zero? }\n      high_divisors = low_divisors.map { |<span class=\"hljs-params\">div</span>| number / div }\n      (low_divisors + high_divisors).uniq - [number]\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Numeric/AliquotSumCalculator.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/Algorithms/Numeric/AliquotSumCalculator.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Numeric</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     In number theory, the aliquot sum s(n) of a positive integer n is the sum of all proper divisors</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     of n, that is, all divisors of n other than n itself. For example, the proper divisors of 15</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     (that is, the positive divisors of 15 that are not equal to 15) are 1, 3 and 5, so the aliquot</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     sum of 15 is 9 i.e. (1 + 3 + 5). Wikipedia: https://en.wikipedia.org/wiki/Aliquot_sum.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AliquotSumCalculator</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Finds the aliquot sum of an integer number.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;number&quot;&gt;</span>Positive number.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The Aliquot Sum.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ArgumentException&quot;&gt;</span>Error number is not on interval (0.0; int.MaxValue).<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">CalculateAliquotSum</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> number</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (number &lt; <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(number)}</span> cannot be negative&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">var</span> sum = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>, limit = number / <span class=\"hljs-number\">2</span>; i &lt;= limit; ++i)\n            {\n                <span class=\"hljs-keyword\">if</span> (number % i == <span class=\"hljs-number\">0</span>)\n                {\n                    sum += i;\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> sum;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Eli Sadoff",
      "email": "eli.sadoff@broadlume.com",
      "commits": 1
    },
    {
      "name": "Cristiano Jesus",
      "email": "crist.borges05@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Kenneth P",
      "email": "41343159+ken437@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Dumby",
      "email": "71999854+SpiderMath@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}