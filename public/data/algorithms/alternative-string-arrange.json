{
  "slug": "alternative-string-arrange",
  "name": "Alternative String Arrange",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings/alternative_string_arrange.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings/alternative_string_arrange.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">alternative_string_arrange</span>(<span class=\"hljs-params\">first_str: <span class=\"hljs-built_in\">str</span>, second_str: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Return the alternative arrangements of the two strings.\n    :param first_str:\n    :param second_str:\n    :return: String\n    &gt;&gt;&gt; alternative_string_arrange(&quot;ABCD&quot;, &quot;XY&quot;)\n    &#x27;AXBYCD&#x27;\n    &gt;&gt;&gt; alternative_string_arrange(&quot;XY&quot;, &quot;ABCD&quot;)\n    &#x27;XAYBCD&#x27;\n    &gt;&gt;&gt; alternative_string_arrange(&quot;AB&quot;, &quot;XYZ&quot;)\n    &#x27;AXBYZ&#x27;\n    &gt;&gt;&gt; alternative_string_arrange(&quot;ABC&quot;, &quot;&quot;)\n    &#x27;ABC&#x27;\n    &quot;&quot;&quot;</span>\n    first_str_length: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-built_in\">len</span>(first_str)\n    second_str_length: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-built_in\">len</span>(second_str)\n    abs_length: <span class=\"hljs-built_in\">int</span> = (\n        first_str_length <span class=\"hljs-keyword\">if</span> first_str_length &gt; second_str_length <span class=\"hljs-keyword\">else</span> second_str_length\n    )\n    output_list: <span class=\"hljs-built_in\">list</span> = []\n    <span class=\"hljs-keyword\">for</span> char_count <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(abs_length):\n        <span class=\"hljs-keyword\">if</span> char_count &lt; first_str_length:\n            output_list.append(first_str[char_count])\n        <span class=\"hljs-keyword\">if</span> char_count &lt; second_str_length:\n            output_list.append(second_str[char_count])\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(output_list)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-built_in\">print</span>(alternative_string_arrange(<span class=\"hljs-string\">&quot;AB&quot;</span>, <span class=\"hljs-string\">&quot;XYZ&quot;</span>), end=<span class=\"hljs-string\">&quot; &quot;</span>)\n"
    },
    "javascript": {
      "dir": "String/AlternativeStringArrange.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/String/AlternativeStringArrange.js",
      "code": "<span class=\"hljs-comment\">// Alternative arrange the two given strings in one string in O(n) time complexity.</span>\n\n<span class=\"hljs-comment\">// Problem Source &amp; Explanation: https://www.geeksforgeeks.org/alternatively-merge-two-strings-in-java/</span>\n\n<span class=\"hljs-comment\">/**\n * Alternative arrange the two given strings in one string in O(n) time complexity.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">String</span>} str1 first input string\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">String</span>} str2 second input string\n * <span class=\"hljs-doctag\">@returns</span> `String` return one alternative arrange string.\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">AlternativeStringArrange</span> = (<span class=\"hljs-params\">str1, str2</span>) =&gt; {\n  <span class=\"hljs-comment\">// firstly, check that both inputs are strings.</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> str1 !== <span class=\"hljs-string\">&#x27;string&#x27;</span> || <span class=\"hljs-keyword\">typeof</span> str2 !== <span class=\"hljs-string\">&#x27;string&#x27;</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;Not string(s)&#x27;</span>\n  }\n\n  <span class=\"hljs-comment\">// output string value.</span>\n  <span class=\"hljs-keyword\">let</span> outStr = <span class=\"hljs-string\">&#x27;&#x27;</span>\n\n  <span class=\"hljs-comment\">// get first string length.</span>\n  <span class=\"hljs-keyword\">const</span> firstStringLength = str1.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-comment\">// get second string length.</span>\n  <span class=\"hljs-keyword\">const</span> secondStringLength = str2.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-comment\">// absolute length for operation.</span>\n  <span class=\"hljs-keyword\">const</span> absLength = firstStringLength &gt; secondStringLength ? firstStringLength : secondStringLength\n\n  <span class=\"hljs-comment\">// Iterate the character count until the absolute count is reached.</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> charCount = <span class=\"hljs-number\">0</span>; charCount &lt; absLength; charCount++) {\n    <span class=\"hljs-comment\">// If firstStringLength is lesser than the charCount it means they are able to re-arrange.</span>\n    <span class=\"hljs-keyword\">if</span> (charCount &lt; firstStringLength) {\n      outStr += str1[charCount]\n    }\n\n    <span class=\"hljs-comment\">// If secondStringLength is lesser than the charCount it means they are able to re-arrange.</span>\n    <span class=\"hljs-keyword\">if</span> (charCount &lt; secondStringLength) {\n      outStr += str2[charCount]\n    }\n  }\n\n  <span class=\"hljs-comment\">// return the output string.</span>\n  <span class=\"hljs-keyword\">return</span> outStr\n}\n\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">AlternativeStringArrange</span> }\n"
    }
  },
  "contributors": [
    {
      "name": "Ankush263",
      "email": "86042508+Ankush263@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Keshav Bohra",
      "email": "keshav2016@gmail.com",
      "commits": 1
    },
    {
      "name": "SURYAPRATAP SINGH SURYAVANSHI",
      "email": "67123991+suryapratapsinghsuryavanshi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Suryapratap Singh",
      "email": "suryprtaps@gmail.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}