{
  "slug": "approximate-pi",
  "name": "Approximate Pi",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/approximate_pi.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/approximate_pi.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation to calculate an estimate of the [number π (Pi)](https://en.wikipedia.org/wiki/File:Pi_30K.gif).\n *\n * @details\n * We take a random point P with coordinates (x, y) such that 0 ≤ x ≤ 1 and 0 ≤ y ≤ 1. If x² + y² ≤ 1, then the \n * point is inside the quarter disk of radius 1, otherwise the point is outside.\n * We know that the probability of the point being inside the quarter disk is equal to π/4\n * double approx(vector&lt;Point&gt; &amp;pts) which will use the points pts (drawn at random) to \n * return an estimate of the number π\n * \\note This implementation is better than naive recursive or iterative\n * approach.\n *\n * @author [Qannaf AL-SAHMI](https://github.com/Qannaf)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdlib&gt;</span>  <span class=\"hljs-comment\">/// for std::rand</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace math\n * @brief Mathematical algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> math {\n\n    <span class=\"hljs-comment\">/**\n     * structure of points containing two numbers, respectively x and y such that 0 ≤ x ≤ 1 and 0 ≤ y ≤ 1. \n    */</span>\n    <span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">struct</span> {\n    <span class=\"hljs-type\">double</span> x;\n    <span class=\"hljs-type\">double</span> y;\n    } Point;\n\n    <span class=\"hljs-function\"><span class=\"hljs-type\">double</span>  <span class=\"hljs-title\">approximate_pi</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;Point&gt; &amp;pts)</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * This function use the points pts (drawn at random) to return an estimate of the number π  using the given points\n     * @param pts Each item of pts contains a point. A point is represented by a structure containing exactly \n     * two numbers, respectively x and y such that 0 ≤ x ≤ 1 and 0 ≤ y ≤ 1. \n     * pts always contains at least one item\n     * @return  an estimate of the number π\n     */</span>\n        {\n            <span class=\"hljs-type\">int</span> count =<span class=\"hljs-number\">0</span>;    <span class=\"hljs-comment\">// Points in cercle</span>\n            <span class=\"hljs-keyword\">for</span>(Point p:pts)\n                <span class=\"hljs-keyword\">if</span>(p.x * p.x + p.y*p.y &lt;= <span class=\"hljs-number\">1</span>)\n                    ++count;\n            \n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4.0</span>*count/pts.<span class=\"hljs-built_in\">size</span>();\n        }\n    }\n}  <span class=\"hljs-comment\">// namespace math</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n        std::vector&lt;math::Point&gt; rands;\n    <span class=\"hljs-keyword\">for</span> (std::<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100000</span>; i++) {\n        math::Point p;\n        p.x = <span class=\"hljs-built_in\">rand</span>() / (<span class=\"hljs-type\">double</span>)RAND_MAX; <span class=\"hljs-comment\">// 0 &lt;= x &lt;= 1</span>\n        p.y = <span class=\"hljs-built_in\">rand</span>() / (<span class=\"hljs-type\">double</span>)RAND_MAX; <span class=\"hljs-comment\">// 0 &lt;= y &lt;= 1</span>\n        rands.<span class=\"hljs-built_in\">push_back</span>(p);\n    }\n    std::cout &lt;&lt; math::<span class=\"hljs-built_in\">approximate_pi</span>(rands) &lt;&lt; std::endl;          <span class=\"hljs-comment\">// ~3.14</span>\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @param argc commandline argument count (ignored)\n * @param argv commandline array of arguments (ignored)\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}