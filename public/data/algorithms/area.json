{
  "slug": "area",
  "name": "Area",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/area.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/area.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nFind the area of various geometric shapes\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> pi, sqrt\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">surface_area_cube</span>(<span class=\"hljs-params\">side_length: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the Surface Area of a Cube.\r\n\r\n    &gt;&gt;&gt; surface_area_cube(1)\r\n    6\r\n    &gt;&gt;&gt; surface_area_cube(3)\r\n    54\r\n    &gt;&gt;&gt; surface_area_cube(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cube() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> side_length &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;surface_area_cube() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">6</span> * side_length**<span class=\"hljs-number\">2</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">surface_area_sphere</span>(<span class=\"hljs-params\">radius: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the Surface Area of a Sphere.\r\n    Wikipedia reference: https://en.wikipedia.org/wiki/Sphere\r\n    Formula: 4 * pi * r^2\r\n\r\n    &gt;&gt;&gt; surface_area_sphere(5)\r\n    314.1592653589793\r\n    &gt;&gt;&gt; surface_area_sphere(1)\r\n    12.566370614359172\r\n    &gt;&gt;&gt; surface_area_sphere(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_sphere() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;surface_area_sphere() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span> * pi * radius**<span class=\"hljs-number\">2</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">surface_area_hemisphere</span>(<span class=\"hljs-params\">radius: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the Surface Area of a Hemisphere.\r\n    Formula: 3 * pi * r^2\r\n\r\n    &gt;&gt;&gt; surface_area_hemisphere(5)\r\n    235.61944901923448\r\n    &gt;&gt;&gt; surface_area_hemisphere(1)\r\n    9.42477796076938\r\n    &gt;&gt;&gt; surface_area_hemisphere(0)\r\n    0.0\r\n    &gt;&gt;&gt; surface_area_hemisphere(1.1)\r\n    11.40398133253095\r\n    &gt;&gt;&gt; surface_area_hemisphere(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_hemisphere() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;surface_area_hemisphere() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span> * pi * radius**<span class=\"hljs-number\">2</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">surface_area_cone</span>(<span class=\"hljs-params\">radius: <span class=\"hljs-built_in\">float</span>, height: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the Surface Area of a Cone.\r\n    Wikipedia reference: https://en.wikipedia.org/wiki/Cone\r\n    Formula: pi * r * (r + (h ** 2 + r ** 2) ** 0.5)\r\n\r\n    &gt;&gt;&gt; surface_area_cone(10, 24)\r\n    1130.9733552923256\r\n    &gt;&gt;&gt; surface_area_cone(6, 8)\r\n    301.59289474462014\r\n    &gt;&gt;&gt; surface_area_cone(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cone() only accepts non-negative values\r\n    &gt;&gt;&gt; surface_area_cone(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cone() only accepts non-negative values\r\n    &gt;&gt;&gt; surface_area_cone(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cone() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> height &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;surface_area_cone() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> pi * radius * (radius + (height**<span class=\"hljs-number\">2</span> + radius**<span class=\"hljs-number\">2</span>) ** <span class=\"hljs-number\">0.5</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">surface_area_cylinder</span>(<span class=\"hljs-params\">radius: <span class=\"hljs-built_in\">float</span>, height: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the Surface Area of a Cylinder.\r\n    Wikipedia reference: https://en.wikipedia.org/wiki/Cylinder\r\n    Formula: 2 * pi * r * (h + r)\r\n\r\n    &gt;&gt;&gt; surface_area_cylinder(7, 10)\r\n    747.6990515543707\r\n    &gt;&gt;&gt; surface_area_cylinder(6, 8)\r\n    527.7875658030853\r\n    &gt;&gt;&gt; surface_area_cylinder(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cylinder() only accepts non-negative values\r\n    &gt;&gt;&gt; surface_area_cylinder(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cylinder() only accepts non-negative values\r\n    &gt;&gt;&gt; surface_area_cylinder(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cylinder() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> height &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;surface_area_cylinder() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * pi * radius * (height + radius)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_rectangle</span>(<span class=\"hljs-params\">length: <span class=\"hljs-built_in\">float</span>, width: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a rectangle.\r\n\r\n    &gt;&gt;&gt; area_rectangle(10, 20)\r\n    200\r\n    &gt;&gt;&gt; area_rectangle(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rectangle() only accepts non-negative values\r\n    &gt;&gt;&gt; area_rectangle(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rectangle() only accepts non-negative values\r\n    &gt;&gt;&gt; area_rectangle(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rectangle() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> length &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> width &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_rectangle() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> length * width\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_square</span>(<span class=\"hljs-params\">side_length: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a square.\r\n\r\n    &gt;&gt;&gt; area_square(10)\r\n    100\r\n    &gt;&gt;&gt; area_square(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_square() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> side_length &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_square() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> side_length**<span class=\"hljs-number\">2</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_triangle</span>(<span class=\"hljs-params\">base: <span class=\"hljs-built_in\">float</span>, height: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a triangle given the base and height.\r\n\r\n    &gt;&gt;&gt; area_triangle(10, 10)\r\n    50.0\r\n    &gt;&gt;&gt; area_triangle(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle() only accepts non-negative values\r\n    &gt;&gt;&gt; area_triangle(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle() only accepts non-negative values\r\n    &gt;&gt;&gt; area_triangle(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> base &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> height &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_triangle() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> (base * height) / <span class=\"hljs-number\">2</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_triangle_three_sides</span>(<span class=\"hljs-params\">side1: <span class=\"hljs-built_in\">float</span>, side2: <span class=\"hljs-built_in\">float</span>, side3: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate area of triangle when the length of 3 sides are known.\r\n\r\n    This function uses Heron&#x27;s formula: https://en.wikipedia.org/wiki/Heron%27s_formula\r\n\r\n    &gt;&gt;&gt; area_triangle_three_sides(5, 12, 13)\r\n    30.0\r\n    &gt;&gt;&gt; area_triangle_three_sides(10, 11, 12)\r\n    51.521233486786784\r\n    &gt;&gt;&gt; area_triangle_three_sides(-1, -2, -1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle_three_sides() only accepts non-negative values\r\n    &gt;&gt;&gt; area_triangle_three_sides(1, -2, 1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle_three_sides() only accepts non-negative values\r\n    &gt;&gt;&gt; area_triangle_three_sides(2, 4, 7)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: Given three sides do not form a triangle\r\n    &gt;&gt;&gt; area_triangle_three_sides(2, 7, 4)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: Given three sides do not form a triangle\r\n    &gt;&gt;&gt; area_triangle_three_sides(7, 2, 4)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: Given three sides do not form a triangle\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> side1 &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> side2 &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> side3 &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_triangle_three_sides() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">elif</span> side1 + side2 &lt; side3 <span class=\"hljs-keyword\">or</span> side1 + side3 &lt; side2 <span class=\"hljs-keyword\">or</span> side2 + side3 &lt; side1:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Given three sides do not form a triangle&quot;</span>)\r\n    semi_perimeter = (side1 + side2 + side3) / <span class=\"hljs-number\">2</span>\r\n    area = sqrt(\r\n        semi_perimeter\r\n        * (semi_perimeter - side1)\r\n        * (semi_perimeter - side2)\r\n        * (semi_perimeter - side3)\r\n    )\r\n    <span class=\"hljs-keyword\">return</span> area\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_parallelogram</span>(<span class=\"hljs-params\">base: <span class=\"hljs-built_in\">float</span>, height: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a parallelogram.\r\n\r\n    &gt;&gt;&gt; area_parallelogram(10, 20)\r\n    200\r\n    &gt;&gt;&gt; area_parallelogram(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_parallelogram() only accepts non-negative values\r\n    &gt;&gt;&gt; area_parallelogram(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_parallelogram() only accepts non-negative values\r\n    &gt;&gt;&gt; area_parallelogram(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_parallelogram() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> base &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> height &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_parallelogram() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> base * height\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_trapezium</span>(<span class=\"hljs-params\">base1: <span class=\"hljs-built_in\">float</span>, base2: <span class=\"hljs-built_in\">float</span>, height: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a trapezium.\r\n\r\n    &gt;&gt;&gt; area_trapezium(10, 20, 30)\r\n    450.0\r\n    &gt;&gt;&gt; area_trapezium(-1, -2, -3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &gt;&gt;&gt; area_trapezium(-1, 2, 3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &gt;&gt;&gt; area_trapezium(1, -2, 3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &gt;&gt;&gt; area_trapezium(1, 2, -3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &gt;&gt;&gt; area_trapezium(-1, -2, 3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &gt;&gt;&gt; area_trapezium(1, -2, -3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &gt;&gt;&gt; area_trapezium(-1, 2, -3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> base1 &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> base2 &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> height &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_trapezium() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span> * (base1 + base2) * height\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_circle</span>(<span class=\"hljs-params\">radius: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a circle.\r\n\r\n    &gt;&gt;&gt; area_circle(20)\r\n    1256.6370614359173\r\n    &gt;&gt;&gt; area_circle(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_circle() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_circle() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> pi * radius**<span class=\"hljs-number\">2</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_ellipse</span>(<span class=\"hljs-params\">radius_x: <span class=\"hljs-built_in\">float</span>, radius_y: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a ellipse.\r\n\r\n    &gt;&gt;&gt; area_ellipse(10, 10)\r\n    314.1592653589793\r\n    &gt;&gt;&gt; area_ellipse(10, 20)\r\n    628.3185307179587\r\n    &gt;&gt;&gt; area_ellipse(-10, 20)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_ellipse() only accepts non-negative values\r\n    &gt;&gt;&gt; area_ellipse(10, -20)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_ellipse() only accepts non-negative values\r\n    &gt;&gt;&gt; area_ellipse(-10, -20)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_ellipse() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> radius_x &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> radius_y &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_ellipse() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> pi * radius_x * radius_y\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_rhombus</span>(<span class=\"hljs-params\">diagonal_1: <span class=\"hljs-built_in\">float</span>, diagonal_2: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a rhombus.\r\n\r\n    &gt;&gt;&gt; area_rhombus(10, 20)\r\n    100.0\r\n    &gt;&gt;&gt; area_rhombus(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rhombus() only accepts non-negative values\r\n    &gt;&gt;&gt; area_rhombus(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rhombus() only accepts non-negative values\r\n    &gt;&gt;&gt; area_rhombus(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rhombus() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> diagonal_1 &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> diagonal_2 &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_rhombus() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span> * diagonal_1 * diagonal_2\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod(verbose=<span class=\"hljs-literal\">True</span>)  <span class=\"hljs-comment\"># verbose so we can see methods missing tests</span>\r\n\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;[DEMO] Areas of various geometric shapes: \\n&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Rectangle: <span class=\"hljs-subst\">{area_rectangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Square: <span class=\"hljs-subst\">{area_square(<span class=\"hljs-number\">10</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Triangle: <span class=\"hljs-subst\">{area_triangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Triangle: <span class=\"hljs-subst\">{area_triangle_three_sides(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Parallelogram: <span class=\"hljs-subst\">{area_parallelogram(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Rhombus: <span class=\"hljs-subst\">{area_rhombus(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Trapezium: <span class=\"hljs-subst\">{area_trapezium(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Circle: <span class=\"hljs-subst\">{area_circle(<span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nSurface Areas of various geometric shapes: \\n&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Cube: <span class=\"hljs-subst\">{surface_area_cube(<span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Sphere: <span class=\"hljs-subst\">{surface_area_sphere(<span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Hemisphere: <span class=\"hljs-subst\">{surface_area_hemisphere(<span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Cone: <span class=\"hljs-subst\">{surface_area_cone(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Cylinder: <span class=\"hljs-subst\">{surface_area_cylinder(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n"
    },
    "javascript": {
      "dir": "Maths/Area.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/Area.js",
      "code": "<span class=\"hljs-comment\">/*\n  Calculate the area of various shapes\n*/</span>\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> <span class=\"hljs-variable\">surfaceAreaCube</span>\n * <span class=\"hljs-doctag\">@description</span> Calculate the Surface Area of a Cube.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} <span class=\"hljs-variable\">side</span> - Integer\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">Integer</span>} - 6 * side ** 2\n * <span class=\"hljs-doctag\">@see</span> [surfaceAreaCube](https://en.wikipedia.org/wiki/Area#Surface_area)\n * <span class=\"hljs-doctag\">@example</span> surfaceAreaCube(1) = 6\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">surfaceAreaCube</span> = (<span class=\"hljs-params\">side</span>) =&gt; {\n  <span class=\"hljs-title function_\">validateNumericParam</span>(side, <span class=\"hljs-string\">&#x27;side&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">6</span> * side ** <span class=\"hljs-number\">2</span>\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> <span class=\"hljs-variable\">surfaceAreaSphere</span>\n * <span class=\"hljs-doctag\">@description</span> Calculate the Surface Area of a Sphere.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} <span class=\"hljs-variable\">radius</span> - Integer\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">Integer</span>} - 4 * pi * r^2\n * <span class=\"hljs-doctag\">@see</span> [surfaceAreaSphere](https://en.wikipedia.org/wiki/Sphere)\n * <span class=\"hljs-doctag\">@example</span> surfaceAreaSphere(5) = 314.1592653589793\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">surfaceAreaSphere</span> = (<span class=\"hljs-params\">radius</span>) =&gt; {\n  <span class=\"hljs-title function_\">validateNumericParam</span>(radius, <span class=\"hljs-string\">&#x27;radius&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4.0</span> * <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * radius ** <span class=\"hljs-number\">2.0</span>\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> <span class=\"hljs-variable\">areaRectangle</span>\n * <span class=\"hljs-doctag\">@description</span> Calculate the area of a rectangle.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} <span class=\"hljs-variable\">length</span> - Integer\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} <span class=\"hljs-variable\">width</span> - Integer\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">Integer</span>} - width * length\n * <span class=\"hljs-doctag\">@see</span> [areaRectangle](https://en.wikipedia.org/wiki/Area#Quadrilateral_area)\n * <span class=\"hljs-doctag\">@example</span> areaRectangle(4) = 16\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">areaRectangle</span> = (<span class=\"hljs-params\">length, width</span>) =&gt; {\n  <span class=\"hljs-title function_\">validateNumericParam</span>(length, <span class=\"hljs-string\">&#x27;Length&#x27;</span>)\n  <span class=\"hljs-title function_\">validateNumericParam</span>(width, <span class=\"hljs-string\">&#x27;Width&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> width * length\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> <span class=\"hljs-variable\">areaSquare</span>\n * <span class=\"hljs-doctag\">@description</span> Calculate the area of a square.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} <span class=\"hljs-variable\">side</span> - Integer\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">Integer</span>} - side ** 2.\n * <span class=\"hljs-doctag\">@see</span> [areaSquare](https://en.wikipedia.org/wiki/Square)\n * <span class=\"hljs-doctag\">@example</span> areaSquare(4) = 16\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">areaSquare</span> = (<span class=\"hljs-params\">side</span>) =&gt; {\n  <span class=\"hljs-title function_\">validateNumericParam</span>(side, <span class=\"hljs-string\">&#x27;square side&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> side ** <span class=\"hljs-number\">2</span>\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> <span class=\"hljs-variable\">areaTriangle</span>\n * <span class=\"hljs-doctag\">@description</span> Calculate the area of a triangle.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} <span class=\"hljs-variable\">base</span> - Integer\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} <span class=\"hljs-variable\">height</span> - Integer\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">Integer</span>} - base * height / 2.\n * <span class=\"hljs-doctag\">@see</span> [areaTriangle](https://en.wikipedia.org/wiki/Area#Triangle_area)\n * <span class=\"hljs-doctag\">@example</span> areaTriangle(1.66, 3.44) = 2.8552\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">areaTriangle</span> = (<span class=\"hljs-params\">base, height</span>) =&gt; {\n  <span class=\"hljs-title function_\">validateNumericParam</span>(base, <span class=\"hljs-string\">&#x27;Base&#x27;</span>)\n  <span class=\"hljs-title function_\">validateNumericParam</span>(height, <span class=\"hljs-string\">&#x27;Height&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (base * height) / <span class=\"hljs-number\">2.0</span>\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> <span class=\"hljs-variable\">areaTriangleWithAllThreeSides</span>\n * <span class=\"hljs-doctag\">@description</span> Calculate the area of a triangle with the all three sides given.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} <span class=\"hljs-variable\">side1</span> - Integer\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} <span class=\"hljs-variable\">side2</span> - Integer\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} <span class=\"hljs-variable\">side3</span> - Integer\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">Integer</span>} - area of triangle.\n * <span class=\"hljs-doctag\">@see</span> [areaTriangleWithAllThreeSides](https://en.wikipedia.org/wiki/Heron%27s_formula)\n * <span class=\"hljs-doctag\">@example</span> areaTriangleWithAllThreeSides(5, 6, 7) = 14.7\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">areaTriangleWithAllThreeSides</span> = (<span class=\"hljs-params\">side1, side2, side3</span>) =&gt; {\n  <span class=\"hljs-title function_\">validateNumericParam</span>(side1, <span class=\"hljs-string\">&#x27;side1&#x27;</span>)\n  <span class=\"hljs-title function_\">validateNumericParam</span>(side2, <span class=\"hljs-string\">&#x27;side2&#x27;</span>)\n  <span class=\"hljs-title function_\">validateNumericParam</span>(side3, <span class=\"hljs-string\">&#x27;side3&#x27;</span>)\n  <span class=\"hljs-keyword\">if</span> (\n    side1 + side2 &lt;= side3 ||\n    side1 + side3 &lt;= side2 ||\n    side2 + side3 &lt;= side1\n  ) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;Invalid Triangle sides.&#x27;</span>)\n  }\n  <span class=\"hljs-comment\">// Finding Semi perimeter of the triangle using formula</span>\n  <span class=\"hljs-keyword\">const</span> semi = (side1 + side2 + side3) / <span class=\"hljs-number\">2</span>\n\n  <span class=\"hljs-comment\">// Calculating the area of the triangle</span>\n  <span class=\"hljs-keyword\">const</span> area = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">sqrt</span>(\n    semi * (semi - side1) * (semi - side2) * (semi - side3)\n  )\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Number</span>(area.<span class=\"hljs-title function_\">toFixed</span>(<span class=\"hljs-number\">2</span>))\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> <span class=\"hljs-variable\">areaParallelogram</span>\n * <span class=\"hljs-doctag\">@description</span> Calculate the area of a parallelogram.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} <span class=\"hljs-variable\">base</span> - Integer\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} <span class=\"hljs-variable\">height</span> - Integer\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">Integer</span>} - base * height\n * <span class=\"hljs-doctag\">@see</span> [areaParallelogram](https://en.wikipedia.org/wiki/Area#Dissection,_parallelograms,_and_triangles)\n * <span class=\"hljs-doctag\">@example</span> areaParallelogram(5, 6) = 24\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">areaParallelogram</span> = (<span class=\"hljs-params\">base, height</span>) =&gt; {\n  <span class=\"hljs-title function_\">validateNumericParam</span>(base, <span class=\"hljs-string\">&#x27;Base&#x27;</span>)\n  <span class=\"hljs-title function_\">validateNumericParam</span>(height, <span class=\"hljs-string\">&#x27;Height&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> base * height\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> <span class=\"hljs-variable\">areaTrapezium</span>\n * <span class=\"hljs-doctag\">@description</span> Calculate the area of a trapezium.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} <span class=\"hljs-variable\">base1</span> - Integer\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} <span class=\"hljs-variable\">base2</span> - Integer\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} <span class=\"hljs-variable\">height</span> - Integer\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">Integer</span>} - (1 / 2) * (base1 + base2) * height\n * <span class=\"hljs-doctag\">@see</span> [areaTrapezium](https://en.wikipedia.org/wiki/Trapezoid)\n * <span class=\"hljs-doctag\">@example</span> areaTrapezium(5, 12, 10) = 85\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">areaTrapezium</span> = (<span class=\"hljs-params\">base1, base2, height</span>) =&gt; {\n  <span class=\"hljs-title function_\">validateNumericParam</span>(base1, <span class=\"hljs-string\">&#x27;Base One&#x27;</span>)\n  <span class=\"hljs-title function_\">validateNumericParam</span>(base2, <span class=\"hljs-string\">&#x27;Base Two&#x27;</span>)\n  <span class=\"hljs-title function_\">validateNumericParam</span>(height, <span class=\"hljs-string\">&#x27;Height&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span>) * (base1 + base2) * height\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> <span class=\"hljs-variable\">areaCircle</span>\n * <span class=\"hljs-doctag\">@description</span> Calculate the area of a circle.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} <span class=\"hljs-variable\">radius</span> - Integer\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">Integer</span>} - Math.PI * radius ** 2\n * <span class=\"hljs-doctag\">@see</span> [areaCircle](https://en.wikipedia.org/wiki/Area_of_a_circle)\n * <span class=\"hljs-doctag\">@example</span> areaCircle(5, 12, 10) = 85\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">areaCircle</span> = (<span class=\"hljs-params\">radius</span>) =&gt; {\n  <span class=\"hljs-title function_\">validateNumericParam</span>(radius, <span class=\"hljs-string\">&#x27;Radius&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * radius ** <span class=\"hljs-number\">2</span>\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> <span class=\"hljs-variable\">areaRhombus</span>\n * <span class=\"hljs-doctag\">@description</span> Calculate the area of a rhombus.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} <span class=\"hljs-variable\">diagonal1</span> - Integer\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} <span class=\"hljs-variable\">diagonal2</span> - Integer\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">Integer</span>} - (1 / 2) * diagonal1 * diagonal2\n * <span class=\"hljs-doctag\">@see</span> [areaRhombus](https://en.wikipedia.org/wiki/Rhombus)\n * <span class=\"hljs-doctag\">@example</span> areaRhombus(12, 10) = 60\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">areaRhombus</span> = (<span class=\"hljs-params\">diagonal1, diagonal2</span>) =&gt; {\n  <span class=\"hljs-title function_\">validateNumericParam</span>(diagonal1, <span class=\"hljs-string\">&#x27;diagonal one&#x27;</span>)\n  <span class=\"hljs-title function_\">validateNumericParam</span>(diagonal2, <span class=\"hljs-string\">&#x27;diagonal two&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span>) * diagonal1 * diagonal2\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">validateNumericParam</span> = (<span class=\"hljs-params\">param, paramName = <span class=\"hljs-string\">&#x27;param&#x27;</span></span>) =&gt; {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> param !== <span class=\"hljs-string\">&#x27;number&#x27;</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;The &#x27;</span> + paramName + <span class=\"hljs-string\">&#x27; should be type Number&#x27;</span>)\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (param &lt; <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;The &#x27;</span> + paramName + <span class=\"hljs-string\">&#x27; only accepts non-negative values&#x27;</span>)\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> {\n  surfaceAreaCube,\n  surfaceAreaSphere,\n  areaRectangle,\n  areaSquare,\n  areaTriangle,\n  areaParallelogram,\n  areaTrapezium,\n  areaCircle,\n  areaRhombus,\n  areaTriangleWithAllThreeSides\n}\n"
    },
    "c-plus-plus": {
      "dir": "math/area.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/area.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementations for the [area](https://en.wikipedia.org/wiki/Area) of\n * various shapes\n * @details The area of a shape is the amount of 2D space it takes up.\n * All shapes have a formula to get the area of any given shape.\n * These implementations support multiple return types.\n *\n * @author [Focusucof](https://github.com/Focusucof)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> _USE_MATH_DEFINES</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>  <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span>    <span class=\"hljs-comment\">/// for M_PI definition and pow()</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdint&gt;</span>   <span class=\"hljs-comment\">/// for uint16_t datatype</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace math\n * @brief Mathematical algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> math {\n<span class=\"hljs-comment\">/**\n * @brief area of a [square](https://en.wikipedia.org/wiki/Square) (l * l)\n * @param length is the length of the square\n * @returns area of square\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">square_area</span><span class=\"hljs-params\">(T length)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> length * length;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief area of a [rectangle](https://en.wikipedia.org/wiki/Rectangle) (l * w)\n * @param length is the length of the rectangle\n * @param width is the width of the rectangle\n * @returns area of the rectangle\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">rect_area</span><span class=\"hljs-params\">(T length, T width)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> length * width;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief area of a [triangle](https://en.wikipedia.org/wiki/Triangle) (b * h /\n * 2)\n * @param base is the length of the bottom side of the triangle\n * @param height is the length of the tallest point in the triangle\n * @returns area of the triangle\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">triangle_area</span><span class=\"hljs-params\">(T base, T height)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> base * height / <span class=\"hljs-number\">2</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief area of a [circle](https://en.wikipedia.org/wiki/Area_of_a_circle) (pi\n * * r^2)\n * @param radius is the radius of the circle\n * @returns area of the circle\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">circle_area</span><span class=\"hljs-params\">(T radius)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> M_PI * <span class=\"hljs-built_in\">pow</span>(radius, <span class=\"hljs-number\">2</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief area of a [parallelogram](https://en.wikipedia.org/wiki/Parallelogram)\n * (b * h)\n * @param base is the length of the bottom side of the parallelogram\n * @param height is the length of the tallest point in the parallelogram\n * @returns area of the parallelogram\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">parallelogram_area</span><span class=\"hljs-params\">(T base, T height)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> base * height;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief surface area of a [cube](https://en.wikipedia.org/wiki/Cube) ( 6 * (l\n * * l))\n * @param length is the length of the cube\n * @returns surface area of the cube\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">cube_surface_area</span><span class=\"hljs-params\">(T length)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">6</span> * length * length;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief surface area of a [sphere](https://en.wikipedia.org/wiki/Sphere) ( 4 *\n * pi * r^2)\n * @param radius is the radius of the sphere\n * @returns surface area of the sphere\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">sphere_surface_area</span><span class=\"hljs-params\">(T radius)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span> * M_PI * <span class=\"hljs-built_in\">pow</span>(radius, <span class=\"hljs-number\">2</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief surface area of a [cylinder](https://en.wikipedia.org/wiki/Cylinder)\n * (2 * pi * r * h + 2 * pi * r^2)\n * @param radius is the radius of the cylinder\n * @param height is the height of the cylinder\n * @returns surface area of the cylinder\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">cylinder_surface_area</span><span class=\"hljs-params\">(T radius, T height)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * M_PI * radius * height + <span class=\"hljs-number\">2</span> * M_PI * <span class=\"hljs-built_in\">pow</span>(radius, <span class=\"hljs-number\">2</span>);\n}\n}  <span class=\"hljs-comment\">// namespace math</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// I/O variables for testing</span>\n    <span class=\"hljs-type\">uint16_t</span> int_length = <span class=\"hljs-number\">0</span>;    <span class=\"hljs-comment\">// 16 bit integer length input</span>\n    <span class=\"hljs-type\">uint16_t</span> int_width = <span class=\"hljs-number\">0</span>;     <span class=\"hljs-comment\">// 16 bit integer width input</span>\n    <span class=\"hljs-type\">uint16_t</span> int_base = <span class=\"hljs-number\">0</span>;      <span class=\"hljs-comment\">// 16 bit integer base input</span>\n    <span class=\"hljs-type\">uint16_t</span> int_height = <span class=\"hljs-number\">0</span>;    <span class=\"hljs-comment\">// 16 bit integer height input</span>\n    <span class=\"hljs-type\">uint16_t</span> int_expected = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// 16 bit integer expected output</span>\n    <span class=\"hljs-type\">uint16_t</span> int_area = <span class=\"hljs-number\">0</span>;      <span class=\"hljs-comment\">// 16 bit integer output</span>\n\n    <span class=\"hljs-type\">float</span> float_length = NAN;    <span class=\"hljs-comment\">// float length input</span>\n    <span class=\"hljs-type\">float</span> float_expected = NAN;  <span class=\"hljs-comment\">// float expected output</span>\n    <span class=\"hljs-type\">float</span> float_area = NAN;      <span class=\"hljs-comment\">// float output</span>\n\n    <span class=\"hljs-type\">double</span> double_length = NAN;    <span class=\"hljs-comment\">// double length input</span>\n    <span class=\"hljs-type\">double</span> double_width = NAN;     <span class=\"hljs-comment\">// double width input</span>\n    <span class=\"hljs-type\">double</span> double_radius = NAN;    <span class=\"hljs-comment\">// double radius input</span>\n    <span class=\"hljs-type\">double</span> double_height = NAN;    <span class=\"hljs-comment\">// double height input</span>\n    <span class=\"hljs-type\">double</span> double_expected = NAN;  <span class=\"hljs-comment\">// double expected output</span>\n    <span class=\"hljs-type\">double</span> double_area = NAN;      <span class=\"hljs-comment\">// double output</span>\n\n    <span class=\"hljs-comment\">// 1st test</span>\n    int_length = <span class=\"hljs-number\">5</span>;\n    int_expected = <span class=\"hljs-number\">25</span>;\n    int_area = math::<span class=\"hljs-built_in\">square_area</span>(int_length);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;AREA OF A SQUARE (int)&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Length: &quot;</span> &lt;&lt; int_length &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; int_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; int_area &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(int_area == int_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 2nd test</span>\n    float_length = <span class=\"hljs-number\">2.5</span>;\n    float_expected = <span class=\"hljs-number\">6.25</span>;\n    float_area = math::<span class=\"hljs-built_in\">square_area</span>(float_length);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;AREA OF A SQUARE (float)&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Length: &quot;</span> &lt;&lt; float_length &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; float_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; float_area &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(float_area == float_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 3rd test</span>\n    int_length = <span class=\"hljs-number\">4</span>;\n    int_width = <span class=\"hljs-number\">7</span>;\n    int_expected = <span class=\"hljs-number\">28</span>;\n    int_area = math::<span class=\"hljs-built_in\">rect_area</span>(int_length, int_width);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;AREA OF A RECTANGLE (int)&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Length: &quot;</span> &lt;&lt; int_length &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Width: &quot;</span> &lt;&lt; int_width &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; int_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; int_area &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(int_area == int_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 4th test</span>\n    double_length = <span class=\"hljs-number\">2.5</span>;\n    double_width = <span class=\"hljs-number\">5.7</span>;\n    double_expected = <span class=\"hljs-number\">14.25</span>;\n    double_area = math::<span class=\"hljs-built_in\">rect_area</span>(double_length, double_width);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;AREA OF A RECTANGLE (double)&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Length: &quot;</span> &lt;&lt; double_length &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Width: &quot;</span> &lt;&lt; double_width &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; double_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; double_area &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(double_area == double_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 5th test</span>\n    int_base = <span class=\"hljs-number\">10</span>;\n    int_height = <span class=\"hljs-number\">3</span>;\n    int_expected = <span class=\"hljs-number\">15</span>;\n    int_area = math::<span class=\"hljs-built_in\">triangle_area</span>(int_base, int_height);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;AREA OF A TRIANGLE&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Base: &quot;</span> &lt;&lt; int_base &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Height: &quot;</span> &lt;&lt; int_height &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; int_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; int_area &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(int_area == int_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 6th test</span>\n    double_radius = <span class=\"hljs-number\">6</span>;\n    double_expected =\n        <span class=\"hljs-number\">113.09733552923255</span>;  <span class=\"hljs-comment\">// rounded down because the double datatype</span>\n                             <span class=\"hljs-comment\">// truncates after 14 decimal places</span>\n    double_area = math::<span class=\"hljs-built_in\">circle_area</span>(double_radius);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;AREA OF A CIRCLE&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Radius: &quot;</span> &lt;&lt; double_radius &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; double_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; double_area &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(double_area == double_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 7th test</span>\n    int_base = <span class=\"hljs-number\">6</span>;\n    int_height = <span class=\"hljs-number\">7</span>;\n    int_expected = <span class=\"hljs-number\">42</span>;\n    int_area = math::<span class=\"hljs-built_in\">parallelogram_area</span>(int_base, int_height);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;AREA OF A PARALLELOGRAM&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Base: &quot;</span> &lt;&lt; int_base &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Height: &quot;</span> &lt;&lt; int_height &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; int_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; int_area &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(int_area == int_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 8th test</span>\n    double_length = <span class=\"hljs-number\">5.5</span>;\n    double_expected = <span class=\"hljs-number\">181.5</span>;\n    double_area = math::<span class=\"hljs-built_in\">cube_surface_area</span>(double_length);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;SURFACE AREA OF A CUBE&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Length: &quot;</span> &lt;&lt; double_length &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; double_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; double_area &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(double_area == double_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 9th test</span>\n    double_radius = <span class=\"hljs-number\">10.0</span>;\n    double_expected = <span class=\"hljs-number\">1256.6370614359172</span>;  <span class=\"hljs-comment\">// rounded down because the whole</span>\n                                           <span class=\"hljs-comment\">// value gets truncated</span>\n    double_area = math::<span class=\"hljs-built_in\">sphere_surface_area</span>(double_radius);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;SURFACE AREA OF A SPHERE&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Radius: &quot;</span> &lt;&lt; double_radius &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; double_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; double_area &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(double_area == double_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 10th test</span>\n    double_radius = <span class=\"hljs-number\">4.0</span>;\n    double_height = <span class=\"hljs-number\">7.0</span>;\n    double_expected = <span class=\"hljs-number\">276.46015351590177</span>;\n    double_area = math::<span class=\"hljs-built_in\">cylinder_surface_area</span>(double_radius, double_height);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;SURFACE AREA OF A CYLINDER&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Radius: &quot;</span> &lt;&lt; double_radius &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Height: &quot;</span> &lt;&lt; double_height &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; double_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; double_area &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(double_area == double_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/maths/Area.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/maths/Area.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\n\n<span class=\"hljs-comment\">/**\n * Find the area of various geometric shapes\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Area</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n        <span class=\"hljs-comment\">/* test cube */</span>\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaCube(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">6.0</span>) == <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">/* test sphere */</span>\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaSphere(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">314.1592653589793</span>) == <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaSphere(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">12.566370614359172</span>) == <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">/* test rectangle */</span>\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaRectangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">200.0</span>) == <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">/* test square */</span>\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaSquare(<span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">100.0</span>) == <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">/* test triangle */</span>\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaTriangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">50.0</span>) == <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">/* test parallelogram */</span>\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaParallelogram(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">200.0</span>) == <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">/* test trapezium */</span>\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaTrapezium(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>), <span class=\"hljs-number\">450.0</span>) == <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">/* test circle */</span>\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaCircle(<span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">1256.6370614359173</span>) == <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">/* test cylinder */</span>\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaCylinder(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">18.84955592153876</span>) == <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">/* test hemisphere */</span>\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaHemisphere(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">235.61944901923448</span>) == <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaHemisphere(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">9.42477796076938</span>) == <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">/* test cone */</span>\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaCone(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>), <span class=\"hljs-number\">301.59289474462014</span>) == <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaCone(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">24</span>), <span class=\"hljs-number\">1130.9733552923256</span>) == <span class=\"hljs-number\">0</span>;\n\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate the surface area of a cube.\n     *\n     * <span class=\"hljs-doctag\">@param</span> sideLength side length of cube\n     * <span class=\"hljs-doctag\">@return</span> surface area of given cube\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaCube</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> sideLength)</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">6</span> * sideLength * sideLength;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate the surface area of a sphere.\n     *\n     * <span class=\"hljs-doctag\">@param</span> radius radius of sphere\n     * <span class=\"hljs-doctag\">@return</span> surface area of given sphere\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaSphere</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> radius)</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span> * Math.PI * radius * radius;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate the area of a rectangle\n     *\n     * <span class=\"hljs-doctag\">@param</span> length length of rectangle\n     * <span class=\"hljs-doctag\">@param</span> width width of rectangle\n     * <span class=\"hljs-doctag\">@return</span> area of given rectangle\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaRectangle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> length, <span class=\"hljs-type\">double</span> width)</span> {\n        <span class=\"hljs-keyword\">return</span> length * width;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate surface area of a cylinder\n     *\n     * <span class=\"hljs-doctag\">@param</span> radius radius of the floor\n     * <span class=\"hljs-doctag\">@param</span> height height of the cylinder.\n     * <span class=\"hljs-doctag\">@return</span> volume of given cylinder\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaCylinder</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> radius, <span class=\"hljs-type\">double</span> height)</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * (Math.PI * radius * radius + Math.PI * radius * height);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate the area of a square\n     *\n     * <span class=\"hljs-doctag\">@param</span> sideLength side length of square\n     * <span class=\"hljs-doctag\">@return</span> area of given square\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaSquare</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> sideLength)</span> {\n        <span class=\"hljs-keyword\">return</span> sideLength * sideLength;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate the area of a triangle\n     *\n     * <span class=\"hljs-doctag\">@param</span> base base of triangle\n     * <span class=\"hljs-doctag\">@param</span> height height of triangle\n     * <span class=\"hljs-doctag\">@return</span> area of given triangle\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaTriangle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> base, <span class=\"hljs-type\">double</span> height)</span> {\n        <span class=\"hljs-keyword\">return</span> base * height / <span class=\"hljs-number\">2</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate the area of a parallelogram\n     *\n     * <span class=\"hljs-doctag\">@param</span> base base of parallelogram\n     * <span class=\"hljs-doctag\">@param</span> height height of parallelogram\n     * <span class=\"hljs-doctag\">@return</span> area of given parallelogram\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaParallelogram</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> base, <span class=\"hljs-type\">double</span> height)</span> {\n        <span class=\"hljs-keyword\">return</span> base * height;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate the area of a trapezium\n     *\n     * <span class=\"hljs-doctag\">@param</span> base1 upper base of trapezium\n     * <span class=\"hljs-doctag\">@param</span> base2 bottom base of trapezium\n     * <span class=\"hljs-doctag\">@param</span> height height of trapezium\n     * <span class=\"hljs-doctag\">@return</span> area of given trapezium\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaTrapezium</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> base1, <span class=\"hljs-type\">double</span> base2, <span class=\"hljs-type\">double</span> height)</span> {\n        <span class=\"hljs-keyword\">return</span> (base1 + base2) * height / <span class=\"hljs-number\">2</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate the area of a circle\n     *\n     * <span class=\"hljs-doctag\">@param</span> radius radius of circle\n     * <span class=\"hljs-doctag\">@return</span> area of given circle\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaCircle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> radius)</span> {\n        <span class=\"hljs-keyword\">return</span> Math.PI * radius * radius;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate the surface area of a hemisphere.\n     *\n     * <span class=\"hljs-doctag\">@param</span> radius radius of hemisphere\n     * <span class=\"hljs-doctag\">@return</span> surface area of given hemisphere\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaHemisphere</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> radius)</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span> * Math.PI * radius * radius;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate the surface area of a cone.\n     *\n     * <span class=\"hljs-doctag\">@param</span> radius radius of cone.\n     * <span class=\"hljs-doctag\">@param</span> height of cone.\n     * <span class=\"hljs-doctag\">@return</span> surface area of given cone.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaCone</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> radius, <span class=\"hljs-type\">double</span> height)</span> {\n        <span class=\"hljs-keyword\">return</span> Math.PI * radius * (radius + Math.pow((height * height + radius * radius), <span class=\"hljs-number\">0.5</span>));\n    }\n}\n"
    },
    "kotlin": {
      "dir": "src/main/kotlin/math/Area.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src/main/kotlin/math/Area.kt",
      "code": "<span class=\"hljs-keyword\">package</span> math\n\n<span class=\"hljs-keyword\">import</span> java.lang.IllegalArgumentException\n<span class=\"hljs-keyword\">import</span> kotlin.math.pow\n\n<span class=\"hljs-comment\">/**\n * Calculate the area of a rectangle\n *\n * <span class=\"hljs-doctag\">@param</span> length length of rectangle\n * <span class=\"hljs-doctag\">@param</span> width width of rectangle\n * <span class=\"hljs-doctag\">@return</span> area of given rectangle\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">areaOfARectangle</span><span class=\"hljs-params\">(length: <span class=\"hljs-type\">Double</span>, width: <span class=\"hljs-type\">Double</span>)</span></span> =  <span class=\"hljs-keyword\">when</span> {\n    length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; width &gt; <span class=\"hljs-number\">0</span> -&gt; length * width\n    <span class=\"hljs-keyword\">else</span> -&gt; <span class=\"hljs-keyword\">throw</span> IllegalArgumentException(<span class=\"hljs-string\">&quot;Length and Width must be positive&quot;</span>)\n}\n\n<span class=\"hljs-comment\">/**\n * Calculate the area of a square\n *\n * <span class=\"hljs-doctag\">@param</span> sideLength side length of square\n * <span class=\"hljs-doctag\">@return</span> area of given square\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">areaOfASquare</span><span class=\"hljs-params\">(sideLength: <span class=\"hljs-type\">Double</span>)</span></span> =\n    <span class=\"hljs-keyword\">when</span> {\n        sideLength &gt; <span class=\"hljs-number\">0</span> -&gt; sideLength * sideLength\n        <span class=\"hljs-keyword\">else</span> -&gt; <span class=\"hljs-keyword\">throw</span> IllegalArgumentException(<span class=\"hljs-string\">&quot;Side Length must be positive&quot;</span>)\n    }\n\n<span class=\"hljs-comment\">/**\n * Calculate the area of a triangle\n *\n * <span class=\"hljs-doctag\">@param</span> base base of triangle\n * <span class=\"hljs-doctag\">@param</span> height height of triangle\n * <span class=\"hljs-doctag\">@return</span> area of given triangle\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">areaOfATriangle</span><span class=\"hljs-params\">(base: <span class=\"hljs-type\">Double</span>, height: <span class=\"hljs-type\">Double</span>)</span></span> =\n    <span class=\"hljs-keyword\">when</span> {\n        base &gt; <span class=\"hljs-number\">0</span> &amp;&amp; height &gt; <span class=\"hljs-number\">0</span> -&gt; base * height / <span class=\"hljs-number\">2</span>\n        <span class=\"hljs-keyword\">else</span> -&gt; <span class=\"hljs-keyword\">throw</span> IllegalArgumentException(<span class=\"hljs-string\">&quot;Base and Height must be positive&quot;</span>)\n    }\n\n<span class=\"hljs-comment\">/**\n * Calculate the area of a circle\n *\n * <span class=\"hljs-doctag\">@param</span> radius radius of circle\n * <span class=\"hljs-doctag\">@return</span> area of given circle\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">areaOfACircle</span><span class=\"hljs-params\">(radius: <span class=\"hljs-type\">Double</span>)</span></span> =\n    <span class=\"hljs-keyword\">when</span> {\n        radius &gt; <span class=\"hljs-number\">0</span> -&gt; Math.PI * radius.pow(<span class=\"hljs-number\">2.0</span>)\n        <span class=\"hljs-keyword\">else</span> -&gt; <span class=\"hljs-keyword\">throw</span> IllegalArgumentException(<span class=\"hljs-string\">&quot;Radius must be positive&quot;</span>)\n    }"
    },
    "julia": {
      "dir": "src/math/area.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/math/area.jl",
      "code": "<span class=\"hljs-comment\"># Functions for area of various geometric shapes</span>\n<span class=\"hljs-comment\"># Contributed By:- [Ashwani Rathee](https://github.com/ashwani-rathee)</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    surfarea_cube(side)\n\nFinds surface area of a cube\n\n# Example\n\n```julia\nsurfarea_cube(1)  # returns 6\nsurfarea_cube(3)  # returns 54\nsurfarea_cube(-1) # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> surfarea_cube(side)\n    <span class=\"hljs-keyword\">if</span> side &lt; <span class=\"hljs-number\">0</span>\n        throw(\n            <span class=\"hljs-built_in\">DomainError</span>(\n                side,\n                <span class=\"hljs-string\">&quot;surfarea_cube() only works for non-negative values&quot;</span>,\n            ),\n        )\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">6</span>(side^<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    surfarea_sphere(side)\n\nFinds surface area of a sphere\n\n# Example\n\n```julia\nsurfarea_sphere(5)  # returns 314.1592653589793\nsurfarea_sphere(1)  # returns 12.566370614359172\nsurfarea_sphere(-1) # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> surfarea_sphere(radius)\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span>\n        throw(\n            <span class=\"hljs-built_in\">DomainError</span>(\n                radius,\n                <span class=\"hljs-string\">&quot;surfarea_sphere() only works for non-negative values&quot;</span>,\n            ),\n        )\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span><span class=\"hljs-literal\">π</span> * (radius^<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    area_rectangle(length, width)\n\nFinds area of the rectangle\n\n# Example\n\n```julia\narea_rectangle(10,20) # returns 200\narea_rectangle(-1,-2) # returns DomainError\narea_rectangle(1,-2)  # returns DomainError\narea_rectangle(-1,2)  # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_rectangle(length, width)\n    <span class=\"hljs-keyword\">if</span> length &lt; <span class=\"hljs-number\">0</span> || width &lt; <span class=\"hljs-number\">0</span>\n        throw(\n            <span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_rectangle() only works for non-negative values&quot;</span>),\n        )\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> length * width\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    area_square(side)\n\nFinds area of the area_square\n\n# Example\n\n```julia\narea_square(10) # returns 100\narea_square(-1) # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_square(side)\n    <span class=\"hljs-keyword\">if</span> side &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_square() only works for non-negative values&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> side^<span class=\"hljs-number\">2</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    area_triangle(base, height)\n\nFinds area of the right angled triangle with base height\n\n# Example\n\n```julia\narea_triangle(10,10) # returns 50.0\narea_triangle(-1,-2) # returns DomainError\narea_triangle(1,-2)  # returns DomainError\narea_triangle(-1,2)  # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_triangle(base, height)\n    <span class=\"hljs-keyword\">if</span> base &lt; <span class=\"hljs-number\">0</span> || height &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_triangle() only accepts non-negative values&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> (base * height) / <span class=\"hljs-number\">2</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    area_heron_triangle(side1, side2, side3)\n\nFinds area of a triangle using heron&#x27;s formula\n\n# Example\n\n```julia\narea_heron_triangle(5,12,13) # returns 30.0\narea_heron_triangle(-1,-2,1) # returns DomainError\narea_heron_triangle(1,-2,1)  # returns DomainError\narea_heron_triangle(-1,2,1)  # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_heron_triangle(side1, side2, side3)\n    <span class=\"hljs-keyword\">if</span> side1 &lt; <span class=\"hljs-number\">0</span> || side2 &lt; <span class=\"hljs-number\">0</span> || side3 &lt; <span class=\"hljs-number\">0</span>\n        throw(\n            <span class=\"hljs-built_in\">DomainError</span>(\n                <span class=\"hljs-string\">&quot;area_triangle_three_sides() only accepts non-negative values&quot;</span>,\n            ),\n        )\n    <span class=\"hljs-keyword\">elseif</span> side1 + side2 &lt; side3 ||\n           side1 + side3 &lt; side2 ||\n           side2 + side3 &lt; side1\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;Given three sides do not form a triangle&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    semi_perimeter = (side1 + side2 + side3) / <span class=\"hljs-number\">2</span>\n    area = sqrt(\n        semi_perimeter *\n        (semi_perimeter - side1) *\n        (semi_perimeter - side2) *\n        (semi_perimeter - side3),\n    )\n    <span class=\"hljs-keyword\">return</span> area\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    area_parallelogram(base, height)\n\nFinds area of the parallelogram\n\n# Example\n\n```julia\narea_parallelogram(10,20) # returns 200\narea_parallelogram(-1,-2) # returns DomainError\narea_parallelogram(1,-2)  # returns DomainError\narea_parallelogram(-1,2)  # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_parallelogram(base, height)\n    <span class=\"hljs-keyword\">if</span> base &lt; <span class=\"hljs-number\">0</span> || height &lt; <span class=\"hljs-number\">0</span>\n        throw(\n            <span class=\"hljs-built_in\">DomainError</span>(\n                <span class=\"hljs-string\">&quot;area_parallelogram() only accepts non-negative values&quot;</span>,\n            ),\n        )\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> base * height\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\narea_trapezium(base1,base2,height)\n\nFinds area of the traπzium\n\n# Example\n\n```julia\narea_trapezium(10, 20, 30)  # returns 450.0\narea_trapezium(-1, -2, -3)  # returns DomainError\narea_trapezium(-1, 2, 3)    # returns DomainError\narea_trapezium(1, -2, 3)    # returns DomainError\narea_trapezium(1, 2, -3)    # returns DomainError\narea_trapezium(-1, -2, 3)   # returns DomainError\narea_trapezium(1, -2, -3)   # returns DomainError\narea_trapezium(-1, 2, -3)   # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_trapezium(base1, base2, height)\n    <span class=\"hljs-keyword\">if</span> base1 &lt; <span class=\"hljs-number\">0</span> || base2 &lt; <span class=\"hljs-number\">0</span> || height &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_trapezium() only accepts non-negative values&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span> * (base1 + base2) * height\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    area_circle(radius)\n\nFinds area of the circle\n\n# Example\n\n```julia\narea_circle(20) # returns 1256.6370614359173\narea_circle(-1) # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_circle(radius)\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_circle() only accepts non-negative values&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">π</span> * radius^<span class=\"hljs-number\">2</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    area_ellipse(radius_x, radius_y)\n\nFinds area of the ellipse\n\n# Example\n\n```julia\narea_ellipse(10, 10) # returns 314.1592653589793\narea_ellipse(10, 20) # returns 628.3185307179587\narea_ellipse(1, -2) # returns DomainError\narea_ellipse(-1, 2) # returns DomainError\narea_ellipse(-1, -2) # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_ellipse(radius_x, radius_y)\n    <span class=\"hljs-keyword\">if</span> radius_x &lt; <span class=\"hljs-number\">0</span> || radius_y &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_ellipse() only accepts non-negative values&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">π</span> * radius_x * radius_y\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    area_rhombus(diagonal_1, diagonal_2)\n\nFinds area of the rhombus\n\n# Example\n\n```julia\narea_rhombus(10, 20) # returns 100.0\narea_rhombus(-1,-2) # returns DomainError\narea_rhombus(1,-2)  # returns DomainError\narea_rhombus(-1,2)  # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_rhombus(diagonal_1, diagonal_2)\n    <span class=\"hljs-keyword\">if</span> diagonal_1 &lt; <span class=\"hljs-number\">0</span> || diagonal_2 &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_rhombus() only accepts non-negative values&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span> * diagonal_1 * diagonal_2\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    trapazoidal_area(f, x_start, x_end, steps)\n\nApproximates the area under the curve using the trapezoidal rule\nArguments:\n - f: function for the\n - x_start: starting value for x\n - x_end: ending value for x\n - steps: steps taken while integrating.\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> trapazoidal_area(f, x_start, x_end, steps)\n    x1 = x_start\n    fx1 = f(x_start)\n    area = <span class=\"hljs-number\">0.0</span>\n\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:steps\n        x2 = ((x_end - x_start) / steps) + x1\n        fx2 = f(x2)\n        area += abs(fx2 + fx1) * (x2 - x1) / <span class=\"hljs-number\">2</span>\n        x1 = x2\n        fx1 = fx2\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-keyword\">return</span> area\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    area_regular_polygon(sides, side_len)\n\nFinds area of any regular Polygon\n\n# Example\n\n```julia\narea_regular_polygon(1, 5)  # returns DomainError\narea_regular_polygon(3, 5)  # returns 10.825317547305486\narea_regular_polygon(7, 15)  # returns 817.6302999003576\narea_regular_polygon(-1, 4) # returns DomainError\narea_regular_polygon(4, -3) # returns DomainError\narea_regular_polygon(-12, -4) # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_regular_polygon(sides, side_len)\n    sides &lt; <span class=\"hljs-number\">3</span> &amp;&amp; throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;A polygon should have at least 3 sides.&quot;</span>))\n    (sides &lt; <span class=\"hljs-number\">0</span> || side_len &lt; <span class=\"hljs-number\">0</span>) &amp;&amp; throw(\n        <span class=\"hljs-built_in\">DomainError</span>(\n            <span class=\"hljs-string\">&quot;area_regular_polygon() only works for non-negative values&quot;</span>,\n        ),\n    )\n    <span class=\"hljs-keyword\">return</span> sides * side_len^<span class=\"hljs-number\">2</span> * cot(<span class=\"hljs-literal\">pi</span> / sides) / <span class=\"hljs-number\">4</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    area_polygon(V)\n\nFinds area of any Polygon given by continuous sequence of vertex coordinates\nArguments:\n- coords: x,y co-ordinates of the vertices\n    [Vector of Tuples / Matrix with 2 rows or 2 columns]\n\n# Example\n\n```julia\narea_polygon([(0, 0), (100, 0), (0, 100)])  # returns 5000.0\narea_polygon([0 0;100 0;100 100;0 100])  # returns 10000.0\narea_polygon([(6, 4.5), (5, 4.5), (4.5, 5.5), (5, 6.5)]) # returns 1.5\narea_polygon([0 0;100 0]) # returns DomainError\narea_polygon([(6, 4.63), (5, 4.63)]) # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_polygon(coords::<span class=\"hljs-built_in\">Matrix</span>{T}) <span class=\"hljs-keyword\">where</span> {T&lt;:<span class=\"hljs-built_in\">Real</span>}\n    r, c = size(coords)\n    (~((c == <span class=\"hljs-number\">2</span> &amp;&amp; r &gt; <span class=\"hljs-number\">2</span>) || (r == <span class=\"hljs-number\">2</span> &amp;&amp; c &gt; <span class=\"hljs-number\">2</span>))) &amp;&amp;\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;A polygon should have at least 3 vertices&quot;</span>))\n\n    reshape(coords, (:, <span class=\"hljs-number\">2</span>))\n    <span class=\"hljs-keyword\">if</span> ~(coords[<span class=\"hljs-number\">1</span>, :] == coords[<span class=\"hljs-keyword\">end</span>, :])\n        coords = vcat(coords, coords[<span class=\"hljs-number\">1</span>, :]&#x27;) <span class=\"hljs-comment\">#to make a loop of the vertices</span>\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-meta\">@views</span> abs(sum(coords[<span class=\"hljs-number\">1</span>:<span class=\"hljs-keyword\">end</span>-<span class=\"hljs-number\">1</span>, :] .* (-coords[<span class=\"hljs-number\">2</span>:<span class=\"hljs-keyword\">end</span>, <span class=\"hljs-number\">2</span>:-<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">1</span>]))) / <span class=\"hljs-number\">2</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">function</span> area_polygon(coords::<span class=\"hljs-built_in\">Vector</span>{<span class=\"hljs-built_in\">Tuple</span>{T,N}}) <span class=\"hljs-keyword\">where</span> {T,N&lt;:<span class=\"hljs-built_in\">Real</span>}\n    length(coords) &lt; <span class=\"hljs-number\">3</span> &amp;&amp;\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;A polygon should have at least 3 vertices&quot;</span>))\n    <span class=\"hljs-keyword\">if</span> ~(first(coords) == last(coords))\n        push!(coords, first(coords)) <span class=\"hljs-comment\">#to make a loop of the vertices</span>\n    <span class=\"hljs-keyword\">end</span>\n    res = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:length(coords)-<span class=\"hljs-number\">1</span>\n        res =\n            res + coords[i][<span class=\"hljs-number\">1</span>] * coords[i+<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>] - coords[i+<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] * coords[i][<span class=\"hljs-number\">2</span>]\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> abs(res) / <span class=\"hljs-number\">2</span>\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "laurelr2020",
      "email": "reganlaurell@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Shuangchi He",
      "email": "34329208+Yulv-git@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Vaishakh C R",
      "email": "vaishakh.cblf@gmail.com",
      "commits": 1
    },
    {
      "name": "Ihjass Thasbekha",
      "email": "44056715+Ihjass@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Azzaare",
      "email": "jf@baffier.fr",
      "commits": 1
    },
    {
      "name": "Soc Virnyl S. Estela",
      "email": "66054069+uncomfyhalomacro@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ashwani Rathee",
      "email": "ab669522@gmail.com",
      "commits": 1
    },
    {
      "name": "Sabari Ganesh",
      "email": "64348740+SabariGanesh-K@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Marco Steinke",
      "email": "49523050+MarcoSteinke@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rohan R Bharadwaj",
      "email": "rohanrbharadwaj@gmail.com",
      "commits": 1
    },
    {
      "name": "Rohan R Bharadwaj",
      "email": "89947037+Rohanrbharadwaj@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Lewis Tian",
      "email": "taseikyo@gmail.com",
      "commits": 1
    },
    {
      "name": "SiddhantJain15",
      "email": "siddhant.jain150397@gmail.com",
      "commits": 1
    },
    {
      "name": "김수연",
      "email": "tnehd158@gmail.com",
      "commits": 1
    },
    {
      "name": "Adityanagraj",
      "email": "42292430+Adityanagraj@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 2
    },
    {
      "name": "YATIN KATHURIA",
      "email": "47096348+Yatin-kathuria@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Carlos Carvalho",
      "email": "jcarloss.carvalho@gmail.com",
      "commits": 2
    },
    {
      "name": "Vɪɴᴀʏᴀᴋ Pᴀɴᴅᴇʏ",
      "email": "87496159+Harpia-Vieillot@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "lance-pyles",
      "email": "36748284+lance-pyles@users.noreply.github.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}