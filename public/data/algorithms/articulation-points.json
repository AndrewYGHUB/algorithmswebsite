{
  "slug": "articulation-points",
  "name": "Articulation Points",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs/articulation_points.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs/articulation_points.py",
      "code": "<span class=\"hljs-comment\"># Finding Articulation Points in Undirected Graph</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">computeAP</span>(<span class=\"hljs-params\">l</span>):  <span class=\"hljs-comment\"># noqa: E741</span>\n    n = <span class=\"hljs-built_in\">len</span>(l)\n    outEdgeCount = <span class=\"hljs-number\">0</span>\n    low = [<span class=\"hljs-number\">0</span>] * n\n    visited = [<span class=\"hljs-literal\">False</span>] * n\n    isArt = [<span class=\"hljs-literal\">False</span>] * n\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dfs</span>(<span class=\"hljs-params\">root, at, parent, outEdgeCount</span>):\n        <span class=\"hljs-keyword\">if</span> parent == root:\n            outEdgeCount += <span class=\"hljs-number\">1</span>\n        visited[at] = <span class=\"hljs-literal\">True</span>\n        low[at] = at\n\n        <span class=\"hljs-keyword\">for</span> to <span class=\"hljs-keyword\">in</span> l[at]:\n            <span class=\"hljs-keyword\">if</span> to == parent:\n                <span class=\"hljs-keyword\">pass</span>\n            <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-keyword\">not</span> visited[to]:\n                outEdgeCount = dfs(root, to, at, outEdgeCount)\n                low[at] = <span class=\"hljs-built_in\">min</span>(low[at], low[to])\n\n                <span class=\"hljs-comment\"># AP found via bridge</span>\n                <span class=\"hljs-keyword\">if</span> at &lt; low[to]:\n                    isArt[at] = <span class=\"hljs-literal\">True</span>\n                <span class=\"hljs-comment\"># AP found via cycle</span>\n                <span class=\"hljs-keyword\">if</span> at == low[to]:\n                    isArt[at] = <span class=\"hljs-literal\">True</span>\n            <span class=\"hljs-keyword\">else</span>:\n                low[at] = <span class=\"hljs-built_in\">min</span>(low[at], to)\n        <span class=\"hljs-keyword\">return</span> outEdgeCount\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[i]:\n            outEdgeCount = <span class=\"hljs-number\">0</span>\n            outEdgeCount = dfs(i, i, -<span class=\"hljs-number\">1</span>, outEdgeCount)\n            isArt[i] = outEdgeCount &gt; <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(isArt)):\n        <span class=\"hljs-keyword\">if</span> isArt[x] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>:\n            <span class=\"hljs-built_in\">print</span>(x)\n\n\n<span class=\"hljs-comment\"># Adjacency list of graph</span>\ndata = {\n    <span class=\"hljs-number\">0</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>],\n    <span class=\"hljs-number\">1</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>],\n    <span class=\"hljs-number\">2</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>],\n    <span class=\"hljs-number\">3</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>],\n    <span class=\"hljs-number\">4</span>: [<span class=\"hljs-number\">3</span>],\n    <span class=\"hljs-number\">5</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>],\n    <span class=\"hljs-number\">6</span>: [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>],\n    <span class=\"hljs-number\">7</span>: [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>],\n    <span class=\"hljs-number\">8</span>: [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>],\n}\ncomputeAP(data)\n"
    },
    "go": {
      "dir": "graph/articulationpoints.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/graph/articulationpoints.go",
      "code": "<span class=\"hljs-keyword\">package</span> graph\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;github.com/TheAlgorithms/Go/math/min&quot;</span>\n\n<span class=\"hljs-keyword\">type</span> apHelper <span class=\"hljs-keyword\">struct</span> {\n\tis_ap              []<span class=\"hljs-type\">bool</span>\n\tvisited            []<span class=\"hljs-type\">bool</span>\n\tchild_cnt          []<span class=\"hljs-type\">int</span>\n\tdiscovery_time     []<span class=\"hljs-type\">int</span>\n\tearliest_discovery []<span class=\"hljs-type\">int</span>\n}\n\n<span class=\"hljs-comment\">// ArticulationPoint is a function to identify articulation points in a graph.</span>\n<span class=\"hljs-comment\">// The function takes the graph as an argument and returns a boolean slice</span>\n<span class=\"hljs-comment\">// which indicates whether a vertex is an articulation point or not.</span>\n<span class=\"hljs-comment\">// Worst Case Time Complexity: O(|V| + |E|)</span>\n<span class=\"hljs-comment\">// Auxiliary Space: O(|V|)</span>\n<span class=\"hljs-comment\">// reference: https://en.wikipedia.org/wiki/Biconnected_component and https://cptalks.quora.com/Cut-Vertex-Articulation-point</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">ArticulationPoint</span><span class=\"hljs-params\">(graph *Graph)</span></span> []<span class=\"hljs-type\">bool</span> {\n\t<span class=\"hljs-comment\">// time variable to keep track of the time of discovery_time of a vertex</span>\n\ttime := <span class=\"hljs-number\">0</span>\n\n\t<span class=\"hljs-comment\">//initialize all the variables</span>\n\tapHelperInstance := &amp;apHelper{\n\t\tis_ap:     <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">bool</span>, graph.vertices),\n\t\tvisited:   <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">bool</span>, graph.vertices),\n\t\tchild_cnt: <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, graph.vertices),\n\t\t<span class=\"hljs-comment\">// integer slice to store the discovery time of a vertex as we traverse</span>\n\t\t<span class=\"hljs-comment\">// the graph in a depth first manner</span>\n\t\tdiscovery_time: <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, graph.vertices),\n\t\t<span class=\"hljs-comment\">// integer slice to store the earliest discovered vertex reachable from a vertex</span>\n\t\tearliest_discovery: <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, graph.vertices),\n\t}\n\tarticulationPointHelper(\n\t\tapHelperInstance,\n\t\t<span class=\"hljs-number\">0</span>,\n\t\t<span class=\"hljs-number\">-1</span>,\n\t\t&amp;time,\n\t\tgraph,\n\t)\n\n\t<span class=\"hljs-keyword\">if</span> apHelperInstance.child_cnt[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">1</span> {\n\t\t<span class=\"hljs-comment\">// if the root has only one child, it is not an articulation point</span>\n\t\tapHelperInstance.is_ap[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-literal\">false</span>\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> apHelperInstance.is_ap\n}\n\n<span class=\"hljs-comment\">// articulationPointHelper is a recursive function to traverse the graph</span>\n<span class=\"hljs-comment\">// and mark articulation points. Based on the depth first search transversal</span>\n<span class=\"hljs-comment\">// of the graph, however modified to keep track and update the</span>\n<span class=\"hljs-comment\">// `child_cnt`, `discovery_time`` and `earliest_discovery` slices defined above</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">articulationPointHelper</span><span class=\"hljs-params\">(\n\tapHelperInstance *apHelper,\n\tvertex <span class=\"hljs-type\">int</span>,\n\tparent <span class=\"hljs-type\">int</span>,\n\ttime *<span class=\"hljs-type\">int</span>,\n\tgraph *Graph,\n)</span></span> {\n\tapHelperInstance.visited[vertex] = <span class=\"hljs-literal\">true</span>\n\n\t<span class=\"hljs-comment\">// Mark the time of discovery of a vertex</span>\n\t<span class=\"hljs-comment\">// set the earliest discovery time to the discovered time</span>\n\t<span class=\"hljs-comment\">// increment the time</span>\n\tapHelperInstance.discovery_time[vertex] = *time\n\tapHelperInstance.earliest_discovery[vertex] = apHelperInstance.discovery_time[vertex]\n\t*time++\n\n\t<span class=\"hljs-keyword\">for</span> next_vertex := <span class=\"hljs-keyword\">range</span> graph.edges[vertex] {\n\t\t<span class=\"hljs-keyword\">if</span> next_vertex == parent {\n\t\t\t<span class=\"hljs-keyword\">continue</span>\n\t\t}\n\n\t\t<span class=\"hljs-keyword\">if</span> apHelperInstance.visited[next_vertex] {\n\t\t\tapHelperInstance.earliest_discovery[vertex] = min.Int(\n\t\t\t\tapHelperInstance.earliest_discovery[vertex],\n\t\t\t\tapHelperInstance.discovery_time[next_vertex],\n\t\t\t)\n\t\t\t<span class=\"hljs-keyword\">continue</span>\n\t\t}\n\n\t\tapHelperInstance.child_cnt[vertex]++\n\t\tarticulationPointHelper(\n\t\t\tapHelperInstance,\n\t\t\tnext_vertex,\n\t\t\tvertex,\n\t\t\ttime,\n\t\t\tgraph,\n\t\t)\n\t\tapHelperInstance.earliest_discovery[vertex] = min.Int(\n\t\t\tapHelperInstance.earliest_discovery[vertex],\n\t\t\tapHelperInstance.earliest_discovery[next_vertex],\n\t\t)\n\t\t<span class=\"hljs-keyword\">if</span> apHelperInstance.earliest_discovery[next_vertex] &gt;= apHelperInstance.discovery_time[vertex] {\n\t\t\tapHelperInstance.is_ap[vertex] = <span class=\"hljs-literal\">true</span>\n\t\t}\n\n\t}\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Aniruddha Bhattacharjee",
      "email": "aniruddha97bhatt@gmail.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Farhan",
      "email": "farhankasmani956@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}