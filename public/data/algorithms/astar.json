{
  "slug": "astar",
  "name": "Astar",
  "categories": [
    "machinelearning"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs/a_star.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs/a_star.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\nDIRECTIONS = [\n    [-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],  <span class=\"hljs-comment\"># left</span>\n    [<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>],  <span class=\"hljs-comment\"># down</span>\n    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],  <span class=\"hljs-comment\"># right</span>\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>],  <span class=\"hljs-comment\"># up</span>\n]\n\n\n<span class=\"hljs-comment\"># function to search the path</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-params\">\n    grid: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]],\n    init: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>],\n    goal: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>],\n    cost: <span class=\"hljs-built_in\">int</span>,\n    heuristic: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]],\n</span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]], <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]]]:\n\n    closed = [\n        [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> col <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(grid[<span class=\"hljs-number\">0</span>]))] <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(grid))\n    ]  <span class=\"hljs-comment\"># the reference grid</span>\n    closed[init[<span class=\"hljs-number\">0</span>]][init[<span class=\"hljs-number\">1</span>]] = <span class=\"hljs-number\">1</span>\n    action = [\n        [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> col <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(grid[<span class=\"hljs-number\">0</span>]))] <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(grid))\n    ]  <span class=\"hljs-comment\"># the action grid</span>\n\n    x = init[<span class=\"hljs-number\">0</span>]\n    y = init[<span class=\"hljs-number\">1</span>]\n    g = <span class=\"hljs-number\">0</span>\n    f = g + heuristic[x][y]  <span class=\"hljs-comment\"># cost from starting cell to destination cell</span>\n    cell = [[f, g, x, y]]\n\n    found = <span class=\"hljs-literal\">False</span>  <span class=\"hljs-comment\"># flag that is set when search is complete</span>\n    resign = <span class=\"hljs-literal\">False</span>  <span class=\"hljs-comment\"># flag set if we can&#x27;t find expand</span>\n\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> found <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> resign:\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(cell) == <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Algorithm is unable to find solution&quot;</span>)\n        <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># to choose the least costliest action so as to move closer to the goal</span>\n            cell.sort()\n            cell.reverse()\n            <span class=\"hljs-built_in\">next</span> = cell.pop()\n            x = <span class=\"hljs-built_in\">next</span>[<span class=\"hljs-number\">2</span>]\n            y = <span class=\"hljs-built_in\">next</span>[<span class=\"hljs-number\">3</span>]\n            g = <span class=\"hljs-built_in\">next</span>[<span class=\"hljs-number\">1</span>]\n\n            <span class=\"hljs-keyword\">if</span> x == goal[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">and</span> y == goal[<span class=\"hljs-number\">1</span>]:\n                found = <span class=\"hljs-literal\">True</span>\n            <span class=\"hljs-keyword\">else</span>:\n                <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(DIRECTIONS)):  <span class=\"hljs-comment\"># to try out different valid actions</span>\n                    x2 = x + DIRECTIONS[i][<span class=\"hljs-number\">0</span>]\n                    y2 = y + DIRECTIONS[i][<span class=\"hljs-number\">1</span>]\n                    <span class=\"hljs-keyword\">if</span> x2 &gt;= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> x2 &lt; <span class=\"hljs-built_in\">len</span>(grid) <span class=\"hljs-keyword\">and</span> y2 &gt;= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> y2 &lt; <span class=\"hljs-built_in\">len</span>(grid[<span class=\"hljs-number\">0</span>]):\n                        <span class=\"hljs-keyword\">if</span> closed[x2][y2] == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> grid[x2][y2] == <span class=\"hljs-number\">0</span>:\n                            g2 = g + cost\n                            f2 = g2 + heuristic[x2][y2]\n                            cell.append([f2, g2, x2, y2])\n                            closed[x2][y2] = <span class=\"hljs-number\">1</span>\n                            action[x2][y2] = i\n    invpath = []\n    x = goal[<span class=\"hljs-number\">0</span>]\n    y = goal[<span class=\"hljs-number\">1</span>]\n    invpath.append([x, y])  <span class=\"hljs-comment\"># we get the reverse path from here</span>\n    <span class=\"hljs-keyword\">while</span> x != init[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">or</span> y != init[<span class=\"hljs-number\">1</span>]:\n        x2 = x - DIRECTIONS[action[x][y]][<span class=\"hljs-number\">0</span>]\n        y2 = y - DIRECTIONS[action[x][y]][<span class=\"hljs-number\">1</span>]\n        x = x2\n        y = y2\n        invpath.append([x, y])\n\n    path = []\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(invpath)):\n        path.append(invpath[<span class=\"hljs-built_in\">len</span>(invpath) - <span class=\"hljs-number\">1</span> - i])\n    <span class=\"hljs-keyword\">return</span> path, action\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    grid = [\n        [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n        [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],  <span class=\"hljs-comment\"># 0 are free path whereas 1&#x27;s are obstacles</span>\n        [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n        [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],\n        [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],\n    ]\n\n    init = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-comment\"># all coordinates are given in format [y,x]</span>\n    goal = [<span class=\"hljs-built_in\">len</span>(grid) - <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(grid[<span class=\"hljs-number\">0</span>]) - <span class=\"hljs-number\">1</span>]\n    cost = <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\"># the cost map which pushes the path closer to the goal</span>\n    heuristic = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(grid[<span class=\"hljs-number\">0</span>]))] <span class=\"hljs-keyword\">for</span> col <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(grid))]\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(grid)):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(grid[<span class=\"hljs-number\">0</span>])):\n            heuristic[i][j] = <span class=\"hljs-built_in\">abs</span>(i - goal[<span class=\"hljs-number\">0</span>]) + <span class=\"hljs-built_in\">abs</span>(j - goal[<span class=\"hljs-number\">1</span>])\n            <span class=\"hljs-keyword\">if</span> grid[i][j] == <span class=\"hljs-number\">1</span>:\n                <span class=\"hljs-comment\"># added extra penalty in the heuristic map</span>\n                heuristic[i][j] = <span class=\"hljs-number\">99</span>\n\n    path, action = search(grid, init, goal, cost, heuristic)\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;ACTION MAP&quot;</span>)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(action)):\n        <span class=\"hljs-built_in\">print</span>(action[i])\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(path)):\n        <span class=\"hljs-built_in\">print</span>(path[i])\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/graphs/A_Star.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/graphs/A_Star.java",
      "code": "<span class=\"hljs-comment\">/*\n\tTime Complexity = O(E), where E is equal to the number of edges\n */</span>\n<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.graphs;\n\n<span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A_Star</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Graph</span> {\n        <span class=\"hljs-comment\">// Graph&#x27;s structure can be changed only applying changes to this class.</span>\n\n        <span class=\"hljs-keyword\">private</span> ArrayList&lt;ArrayList&lt;Edge&gt;&gt; graph;\n\n        <span class=\"hljs-comment\">// Initialise ArrayLists in Constructor</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Graph</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> size)</span> {\n            <span class=\"hljs-built_in\">this</span>.graph = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\n                <span class=\"hljs-built_in\">this</span>.graph.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;());\n            }\n        }\n\n        <span class=\"hljs-keyword\">private</span> ArrayList&lt;Edge&gt; <span class=\"hljs-title function_\">getNeighbours</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> from)</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.graph.get(from);\n        }\n\n        <span class=\"hljs-comment\">// Graph is bidirectional, for just one direction remove second instruction of this method.</span>\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(Edge edge)</span> {\n            <span class=\"hljs-built_in\">this</span>.graph.get(edge.getFrom()).add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Edge</span>(edge.getFrom(), edge.getTo(), edge.getWeight()));\n            <span class=\"hljs-built_in\">this</span>.graph.get(edge.getTo()).add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Edge</span>(edge.getTo(), edge.getFrom(), edge.getWeight()));\n        }\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Edge</span> {\n\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> from;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> to;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> weight;\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Edge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> from, <span class=\"hljs-type\">int</span> to, <span class=\"hljs-type\">int</span> weight)</span> {\n            <span class=\"hljs-built_in\">this</span>.from = from;\n            <span class=\"hljs-built_in\">this</span>.to = to;\n            <span class=\"hljs-built_in\">this</span>.weight = weight;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getFrom</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> from;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getTo</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> to;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getWeight</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> weight;\n        }\n    }\n\n    <span class=\"hljs-comment\">// class to iterate during the algorithm execution, and also used to return the solution.</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PathAndDistance</span> {\n\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> distance; <span class=\"hljs-comment\">// distance advanced so far.</span>\n        <span class=\"hljs-keyword\">private</span> ArrayList&lt;Integer&gt; path; <span class=\"hljs-comment\">// list of visited nodes in this path.</span>\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> estimated; <span class=\"hljs-comment\">// heuristic value associated to the last node od the path (current node).</span>\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">PathAndDistance</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> distance, ArrayList&lt;Integer&gt; path, <span class=\"hljs-type\">int</span> estimated)</span> {\n            <span class=\"hljs-built_in\">this</span>.distance = distance;\n            <span class=\"hljs-built_in\">this</span>.path = path;\n            <span class=\"hljs-built_in\">this</span>.estimated = estimated;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getDistance</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> distance;\n        }\n\n        <span class=\"hljs-keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"hljs-title function_\">getPath</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> path;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getEstimated</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> estimated;\n        }\n\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printSolution</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.path != <span class=\"hljs-literal\">null</span>) {\n                System.out.println(\n                        <span class=\"hljs-string\">&quot;Optimal path: &quot;</span> + <span class=\"hljs-built_in\">this</span>.path + <span class=\"hljs-string\">&quot;, distance: &quot;</span> + <span class=\"hljs-built_in\">this</span>.distance);\n            } <span class=\"hljs-keyword\">else</span> {\n                System.out.println(<span class=\"hljs-string\">&quot;There is no path available to connect the points&quot;</span>);\n            }\n        }\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initializeGraph</span><span class=\"hljs-params\">(Graph graph, ArrayList&lt;Integer&gt; data)</span> {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; data.size(); i += <span class=\"hljs-number\">4</span>) {\n            graph.addEdge(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Edge</span>(data.get(i), data.get(i + <span class=\"hljs-number\">1</span>), data.get(i + <span class=\"hljs-number\">2</span>)));\n        }\n        <span class=\"hljs-comment\">/*\n    .x. node\n    (y) cost\n    - or | or / bidirectional connection\n\n                          ( 98)- .7. -(86)- .4.\n                            |\n                    ( 85)- .17. -(142)- .18. -(92)- .8. -(87)- .11.\n                      |\n                     . 1. -------------------- (160)\n                      |  \\                       |\n                    (211) \\                     .6.\n                      |    \\                     |\n                     . 5.  (101)-.13. -(138)   (115)\n                      |           |     |     /\n                    ( 99)       ( 97)   |    /\n                      |           |     |   /\n        .12. -(151)- .15. -(80)- .14.   |  /\n         |            |           |     | /\n       ( 71)        (140)       (146)- .2. -(120)\n         |            |                       |\n        .19. -( 75)- . 0.        .10. -(75)- .3.\n                      |            |\n                    (118)        ( 70)\n                      |            |\n                     .16. -(111)- .9.\n         */</span>\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-comment\">// heuristic function optimistic values</span>\n        <span class=\"hljs-type\">int</span>[] heuristic = {\n            <span class=\"hljs-number\">366</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">160</span>, <span class=\"hljs-number\">242</span>, <span class=\"hljs-number\">161</span>, <span class=\"hljs-number\">178</span>, <span class=\"hljs-number\">77</span>, <span class=\"hljs-number\">151</span>, <span class=\"hljs-number\">226</span>, <span class=\"hljs-number\">244</span>, <span class=\"hljs-number\">241</span>, <span class=\"hljs-number\">234</span>, <span class=\"hljs-number\">380</span>, <span class=\"hljs-number\">98</span>, <span class=\"hljs-number\">193</span>, <span class=\"hljs-number\">253</span>, <span class=\"hljs-number\">329</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">199</span>, <span class=\"hljs-number\">374</span>\n        };\n\n        <span class=\"hljs-type\">Graph</span> <span class=\"hljs-variable\">graph</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Graph</span>(<span class=\"hljs-number\">20</span>);\n        ArrayList&lt;Integer&gt; graphData\n                = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(\n                        Arrays.asList(\n                                <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">140</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">118</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">71</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">151</span>,\n                                <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">111</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">70</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">120</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">14</span>,\n                                <span class=\"hljs-number\">146</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">138</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">115</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">99</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">14</span>,\n                                <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">97</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">211</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">101</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">160</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">85</span>, <span class=\"hljs-literal\">null</span>,\n                                <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">98</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">86</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">142</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">92</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">87</span>));\n        initializeGraph(graph, graphData);\n\n        <span class=\"hljs-type\">PathAndDistance</span> <span class=\"hljs-variable\">solution</span> <span class=\"hljs-operator\">=</span> aStar(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, graph, heuristic);\n        solution.printSolution();\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> PathAndDistance <span class=\"hljs-title function_\">aStar</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> from, <span class=\"hljs-type\">int</span> to, Graph graph, <span class=\"hljs-type\">int</span>[] heuristic)</span> {\n        <span class=\"hljs-comment\">// nodes are prioritised by the less value of the current distance of their paths, and the</span>\n        <span class=\"hljs-comment\">// estimated value</span>\n        <span class=\"hljs-comment\">// given by the heuristic function to reach the destination point from the current point.</span>\n        PriorityQueue&lt;PathAndDistance&gt; queue\n                = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PriorityQueue</span>&lt;&gt;(Comparator.comparingInt(a -&gt; (a.getDistance() + a.getEstimated())));\n\n        <span class=\"hljs-comment\">// dummy data to start the algorithm from the beginning point</span>\n        queue.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PathAndDistance</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(List.of(from)), <span class=\"hljs-number\">0</span>));\n\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">solutionFound</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;\n        <span class=\"hljs-type\">PathAndDistance</span> <span class=\"hljs-variable\">currentData</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PathAndDistance</span>(-<span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">null</span>, -<span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">while</span> (!queue.isEmpty() &amp;&amp; !solutionFound) {\n            currentData = queue.poll(); <span class=\"hljs-comment\">// first in the queue, best node so keep exploring.</span>\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">currentPosition</span>\n                    <span class=\"hljs-operator\">=</span> currentData.getPath().get(currentData.getPath().size() - <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// current node.</span>\n            <span class=\"hljs-keyword\">if</span> (currentPosition == to) {\n                solutionFound = <span class=\"hljs-literal\">true</span>;\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">for</span> (Edge edge : graph.getNeighbours(currentPosition)) {\n                    <span class=\"hljs-keyword\">if</span> (!currentData.getPath().contains(edge.getTo())) { <span class=\"hljs-comment\">// Avoid Cycles</span>\n                        ArrayList&lt;Integer&gt; updatedPath = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(currentData.getPath());\n                        updatedPath.add(edge.getTo()); <span class=\"hljs-comment\">// Add the new node to the path, update the distance,</span>\n                        <span class=\"hljs-comment\">// and the heuristic function value associated to that path.</span>\n                        queue.add(\n                                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PathAndDistance</span>(\n                                        currentData.getDistance() + edge.getWeight(),\n                                        updatedPath,\n                                        heuristic[edge.getTo()]));\n                    }\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> (solutionFound) ? currentData : <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PathAndDistance</span>(-<span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">null</span>, -<span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-comment\">// Out of while loop, if there is a solution, the current Data stores the optimal path, and its</span>\n        <span class=\"hljs-comment\">// distance</span>\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Tim Akermann",
      "email": "ti.akermann@gmail.com",
      "commits": 1
    },
    {
      "name": "Sohan Rudra",
      "email": "sohanrudra@gmail.com",
      "commits": 1
    },
    {
      "name": "R_juzi",
      "email": "59160257+R-juzi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "poloso",
      "email": "osoriopabl@gmail.com",
      "commits": 1
    },
    {
      "name": "Milton Chandro Bhowmick",
      "email": "miltonbhowmick6@gmail.com",
      "commits": 1
    },
    {
      "name": "onlinejudge95",
      "email": "44158581+onlinejudge95@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Erwin Lejeune",
      "email": "erwin.lejeune15@gmail.com",
      "commits": 1
    },
    {
      "name": "Jeffin Francis",
      "email": "francisjeffin07@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "MarcosVillacanas",
      "email": "marcosvillacanas@icloud.com",
      "commits": 3
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 4
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}