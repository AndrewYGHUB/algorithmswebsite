{
  "slug": "average-median",
  "name": "Average Median",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/average_median.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/average_median.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">median</span>(<span class=\"hljs-params\">nums: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Find median of a list of numbers.\n    Wiki: https://en.wikipedia.org/wiki/Median\n\n    &gt;&gt;&gt; median([0])\n    0\n    &gt;&gt;&gt; median([4, 1, 3, 2])\n    2.5\n    &gt;&gt;&gt; median([2, 70, 6, 50, 20, 8, 4])\n    8\n\n    Args:\n        nums: List of nums\n\n    Returns:\n        Median.\n    &quot;&quot;&quot;</span>\n    sorted_list = <span class=\"hljs-built_in\">sorted</span>(nums)\n    length = <span class=\"hljs-built_in\">len</span>(sorted_list)\n    mid_index = length &gt;&gt; <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> (\n        (sorted_list[mid_index] + sorted_list[mid_index - <span class=\"hljs-number\">1</span>]) / <span class=\"hljs-number\">2</span>\n        <span class=\"hljs-keyword\">if</span> length % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">else</span> sorted_list[mid_index]\n    )\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    },
    "javascript": {
      "dir": "Maths/AverageMedian.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/AverageMedian.js",
      "code": "<span class=\"hljs-comment\">/*\n * Median: https://en.wikipedia.org/wiki/Median\n *\n * function averageMedian\n * to find the median value of an array of numbers\n * the numbers in an array will be sorted in ascending order by the function sortNumbers\n * if the length of the array is even number, the median value will be the average of the two middle numbers\n * else if the length of the array is odd number, the median value will be the middle number in the array\n */</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">averageMedian</span> = (<span class=\"hljs-params\">sourceArrayOfNumbers</span>) =&gt; {\n  <span class=\"hljs-keyword\">let</span> numbers = [...sourceArrayOfNumbers]\n  <span class=\"hljs-keyword\">let</span> median = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">const</span> numLength = numbers.<span class=\"hljs-property\">length</span>\n  numbers = numbers.<span class=\"hljs-title function_\">sort</span>(sortNumbers)\n\n  <span class=\"hljs-keyword\">if</span> (numLength % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>) {\n    median = (numbers[numLength / <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>] + numbers[numLength / <span class=\"hljs-number\">2</span>]) / <span class=\"hljs-number\">2</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    median = numbers[(numLength - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>]\n  }\n\n  <span class=\"hljs-keyword\">return</span> median\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">sortNumbers</span> = (<span class=\"hljs-params\">num1, num2</span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> num1 - num2\n}\n\n<span class=\"hljs-keyword\">export</span> { averageMedian }\n"
    },
    "ruby": {
      "dir": "maths/average_median.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/maths/average_median.rb",
      "code": "<span class=\"hljs-comment\"># A ruby program to find average median</span>\n<span class=\"hljs-comment\"># Reference: https://dev.to/colerau/how-to-find-the-median-and-mean-of-an-array-in-ruby-4f04</span>\n\n<span class=\"hljs-keyword\">module</span> AverageMedian\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">self</span>.average_median(n, *array)\n    <span class=\"hljs-keyword\">if</span> n.instance_of? Integer\n      <span class=\"hljs-keyword\">if</span> n == array.size\n        array.sort\n        <span class=\"hljs-keyword\">if</span> array.size.even?\n          mid_element_1 = array.size / <span class=\"hljs-number\">2</span>\n          mid_element_2 = mid_element_1 + <span class=\"hljs-number\">1</span>\n          puts <span class=\"hljs-string\">&quot;The average median of the following elements <span class=\"hljs-subst\">#{array}</span> is <span class=\"hljs-subst\">#{(array[mid_element_1 - <span class=\"hljs-number\">1</span>] + array[mid_element_2 - <span class=\"hljs-number\">1</span>]) / <span class=\"hljs-number\">2</span>}</span>.&quot;</span>\n        <span class=\"hljs-keyword\">else</span>\n          mid_element = (array.size + <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>\n          puts <span class=\"hljs-string\">&quot;The average median of the following elements <span class=\"hljs-subst\">#{array}</span> is <span class=\"hljs-subst\">#{array[mid_element - <span class=\"hljs-number\">1</span>]}</span>.&quot;</span>\n        <span class=\"hljs-keyword\">end</span>\n      <span class=\"hljs-keyword\">else</span>\n        puts <span class=\"hljs-string\">&quot;Provide the required <span class=\"hljs-subst\">#{n}</span> elements properly!&quot;</span>\n      <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">else</span>\n      raise\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">rescue</span> StandardError\n    puts <span class=\"hljs-string\">&#x27;Error: Please provide number only!&#x27;</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Valid inputs</span>\n<span class=\"hljs-comment\">#</span>\n\nputs AverageMedian.average_median(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>)\n<span class=\"hljs-comment\"># The average median of the following elements [3, 1] is 2.</span>\n\nputs AverageMedian.average_median(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>)\n<span class=\"hljs-comment\"># The average median of the following elements [1, 2, 3, 4, 5] is 3.</span>\n\nputs AverageMedian.average_median(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-comment\"># The average median of the following elements [2, 2, 2] is 2.</span>\n\nputs AverageMedian.average_median(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>)\n<span class=\"hljs-comment\"># The average median of the following elements [5] is 5.</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Invalid inputs</span>\n<span class=\"hljs-comment\">#</span>\n\nputs AverageMedian.average_median(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>)\n<span class=\"hljs-comment\"># Provide the required 2 elements properly!</span>\n\nputs AverageMedian.average_median(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>)\n<span class=\"hljs-comment\"># Traceback (most recent call last):</span>\n<span class=\"hljs-comment\">#         4: from /Users/voliveira/.rvm/rubies/ruby-2.7.0/bin/irb:23:in `&lt;main&gt;&#x27;</span>\n<span class=\"hljs-comment\">#         3: from /Users/voliveira/.rvm/rubies/ruby-2.7.0/bin/irb:23:in `load&#x27;</span>\n<span class=\"hljs-comment\">#         2: from /Users/voliveira/.rvm/rubies/ruby-2.7.0/lib/ruby/gems/2.7.0/gems/irb-1.2.1/exe/irb:11:in `&lt;top (required)&gt;&#x27;</span>\n<span class=\"hljs-comment\">#         1: from (irb):30</span>\n<span class=\"hljs-comment\"># NameError (undefined local variable or method `verageMedian&#x27; for main:Object)</span>\n\nputs AverageMedian.average_median(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-comment\"># Error: Please provide number only!</span>\n"
    },
    "julia": {
      "dir": "src/math/average_median.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/math/average_median.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n    median(nums)\n\nFinds median of a vector of numbers\n\n## Example\n\n```julia\nmedian([2,1,3,4])                   # returns 2.5\nmedian([2, 70, 6, 50, 20, 8, 4])    # returns 8\nmedian([0])                         # returns 0\n```\n\nContributed By:- [Ashwani Rathee](https://github.com/ashwani-rathee) and [Rratic](https://github.com/Rratic)\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> median(nums::<span class=\"hljs-built_in\">Vector</span>{T}) <span class=\"hljs-keyword\">where</span> {T&lt;:<span class=\"hljs-built_in\">Number</span>}\n    sorted = sort(nums)\n    len = length(sorted)\n    mid_index = div(len, <span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">if</span> len % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>\n        (sorted[mid_index+<span class=\"hljs-number\">1</span>] + sorted[mid_index]) / <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">else</span>\n        sorted[mid_index+<span class=\"hljs-number\">1</span>]\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "imp",
      "email": "imp07@qq.com",
      "commits": 1
    },
    {
      "name": "Sahil Afrid Farookhi",
      "email": "msafarookhi@gmail.com",
      "commits": 1
    },
    {
      "name": "Ihjass Thasbekha",
      "email": "44056715+Ihjass@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Azzaare",
      "email": "jf@baffier.fr",
      "commits": 1
    },
    {
      "name": "Ashwani Rathee",
      "email": "ab669522@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Mirzoev Ruslan",
      "email": "48970799+RuSaG0@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Roland Hummel",
      "email": "roland.hummel@qaware.de",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Grigoriy Hanin",
      "email": "43445998+haningrisha@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sanders Lin",
      "email": "45224617+SandersLin@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rratic",
      "email": "Rratic@163.com",
      "commits": 2
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 3
    },
    {
      "name": "qingwen23",
      "email": "qingwen232@gmail.com",
      "commits": 7
    }
  ],
  "explanationUrl": {}
}