{
  "slug": "avl-tree",
  "name": "AVL Tree",
  "categories": [
    "datastructures",
    "binarytree"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/binary_tree/avl_tree.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/binary_tree/avl_tree.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nImplementation of an auto-balanced binary tree!\nFor doctests run following command:\npython3 -m doctest -v avl_tree.py\nFor testing run:\npython avl_tree.py\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">import</span> math\n<span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Any</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">my_queue</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.data: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-type\">Any</span>] = []\n        self.head: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span>\n        self.tail: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-keyword\">return</span> self.head == self.tail\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.data.append(data)\n        self.tail = self.tail + <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pop</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-type\">Any</span>:\n        ret = self.data[self.head]\n        self.head = self.head + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">return</span> ret\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">count</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-keyword\">return</span> self.tail - self.head\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-built_in\">print</span>(self.data)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;**************&quot;</span>)\n        <span class=\"hljs-built_in\">print</span>(self.data[self.head : self.tail])\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">my_node</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.data = data\n        self.left: my_node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\n        self.right: my_node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\n        self.height: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_data</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-type\">Any</span>:\n        <span class=\"hljs-keyword\">return</span> self.data\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_left</span>(<span class=\"hljs-params\">self</span>) -&gt; my_node | <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">return</span> self.left\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_right</span>(<span class=\"hljs-params\">self</span>) -&gt; my_node | <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">return</span> self.right\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_height</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-keyword\">return</span> self.height\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set_data</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.data = data\n        <span class=\"hljs-keyword\">return</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set_left</span>(<span class=\"hljs-params\">self, node: my_node | <span class=\"hljs-literal\">None</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.left = node\n        <span class=\"hljs-keyword\">return</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set_right</span>(<span class=\"hljs-params\">self, node: my_node | <span class=\"hljs-literal\">None</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.right = node\n        <span class=\"hljs-keyword\">return</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set_height</span>(<span class=\"hljs-params\">self, height: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.height = height\n        <span class=\"hljs-keyword\">return</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_height</span>(<span class=\"hljs-params\">node: my_node | <span class=\"hljs-literal\">None</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">return</span> node.get_height()\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">my_max</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">int</span>, b: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-keyword\">if</span> a &gt; b:\n        <span class=\"hljs-keyword\">return</span> a\n    <span class=\"hljs-keyword\">return</span> b\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">right_rotation</span>(<span class=\"hljs-params\">node: my_node</span>) -&gt; my_node:\n    <span class=\"hljs-string\">r&quot;&quot;&quot;\n            A                      B\n           / \\                    / \\\n          B   C                  Bl  A\n         / \\       --&gt;          /   / \\\n        Bl  Br                 UB Br  C\n       /\n     UB\n    UB = unbalanced node\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;left rotation node:&quot;</span>, node.get_data())\n    ret = node.get_left()\n    <span class=\"hljs-keyword\">assert</span> ret <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n    node.set_left(ret.get_right())\n    ret.set_right(node)\n    h1 = my_max(get_height(node.get_right()), get_height(node.get_left())) + <span class=\"hljs-number\">1</span>\n    node.set_height(h1)\n    h2 = my_max(get_height(ret.get_right()), get_height(ret.get_left())) + <span class=\"hljs-number\">1</span>\n    ret.set_height(h2)\n    <span class=\"hljs-keyword\">return</span> ret\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">left_rotation</span>(<span class=\"hljs-params\">node: my_node</span>) -&gt; my_node:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    a mirror symmetry rotation of the left_rotation\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;right rotation node:&quot;</span>, node.get_data())\n    ret = node.get_right()\n    <span class=\"hljs-keyword\">assert</span> ret <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n    node.set_right(ret.get_left())\n    ret.set_left(node)\n    h1 = my_max(get_height(node.get_right()), get_height(node.get_left())) + <span class=\"hljs-number\">1</span>\n    node.set_height(h1)\n    h2 = my_max(get_height(ret.get_right()), get_height(ret.get_left())) + <span class=\"hljs-number\">1</span>\n    ret.set_height(h2)\n    <span class=\"hljs-keyword\">return</span> ret\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">lr_rotation</span>(<span class=\"hljs-params\">node: my_node</span>) -&gt; my_node:\n    <span class=\"hljs-string\">r&quot;&quot;&quot;\n            A              A                    Br\n           / \\            / \\                  /  \\\n          B   C    LR    Br  C       RR       B    A\n         / \\       --&gt;  /  \\         --&gt;    /     / \\\n        Bl  Br         B   UB              Bl    UB  C\n             \\        /\n             UB     Bl\n    RR = right_rotation   LR = left_rotation\n    &quot;&quot;&quot;</span>\n    left_child = node.get_left()\n    <span class=\"hljs-keyword\">assert</span> left_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n    node.set_left(left_rotation(left_child))\n    <span class=\"hljs-keyword\">return</span> right_rotation(node)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rl_rotation</span>(<span class=\"hljs-params\">node: my_node</span>) -&gt; my_node:\n    right_child = node.get_right()\n    <span class=\"hljs-keyword\">assert</span> right_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n    node.set_right(right_rotation(right_child))\n    <span class=\"hljs-keyword\">return</span> left_rotation(node)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_node</span>(<span class=\"hljs-params\">node: my_node | <span class=\"hljs-literal\">None</span>, data: <span class=\"hljs-type\">Any</span></span>) -&gt; my_node | <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">return</span> my_node(data)\n    <span class=\"hljs-keyword\">if</span> data &lt; node.get_data():\n        node.set_left(insert_node(node.get_left(), data))\n        <span class=\"hljs-keyword\">if</span> (\n            get_height(node.get_left()) - get_height(node.get_right()) == <span class=\"hljs-number\">2</span>\n        ):  <span class=\"hljs-comment\"># an unbalance detected</span>\n            left_child = node.get_left()\n            <span class=\"hljs-keyword\">assert</span> left_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n            <span class=\"hljs-keyword\">if</span> (\n                data &lt; left_child.get_data()\n            ):  <span class=\"hljs-comment\"># new node is the left child of the left child</span>\n                node = right_rotation(node)\n            <span class=\"hljs-keyword\">else</span>:\n                node = lr_rotation(node)\n    <span class=\"hljs-keyword\">else</span>:\n        node.set_right(insert_node(node.get_right(), data))\n        <span class=\"hljs-keyword\">if</span> get_height(node.get_right()) - get_height(node.get_left()) == <span class=\"hljs-number\">2</span>:\n            right_child = node.get_right()\n            <span class=\"hljs-keyword\">assert</span> right_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n            <span class=\"hljs-keyword\">if</span> data &lt; right_child.get_data():\n                node = rl_rotation(node)\n            <span class=\"hljs-keyword\">else</span>:\n                node = left_rotation(node)\n    h1 = my_max(get_height(node.get_right()), get_height(node.get_left())) + <span class=\"hljs-number\">1</span>\n    node.set_height(h1)\n    <span class=\"hljs-keyword\">return</span> node\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_rightMost</span>(<span class=\"hljs-params\">root: my_node</span>) -&gt; <span class=\"hljs-type\">Any</span>:\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n        right_child = root.get_right()\n        <span class=\"hljs-keyword\">if</span> right_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-keyword\">break</span>\n        root = right_child\n    <span class=\"hljs-keyword\">return</span> root.get_data()\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_leftMost</span>(<span class=\"hljs-params\">root: my_node</span>) -&gt; <span class=\"hljs-type\">Any</span>:\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n        left_child = root.get_left()\n        <span class=\"hljs-keyword\">if</span> left_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-keyword\">break</span>\n        root = left_child\n    <span class=\"hljs-keyword\">return</span> root.get_data()\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">del_node</span>(<span class=\"hljs-params\">root: my_node, data: <span class=\"hljs-type\">Any</span></span>) -&gt; my_node | <span class=\"hljs-literal\">None</span>:\n    left_child = root.get_left()\n    right_child = root.get_right()\n    <span class=\"hljs-keyword\">if</span> root.get_data() == data:\n        <span class=\"hljs-keyword\">if</span> left_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> right_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            temp_data = get_leftMost(right_child)\n            root.set_data(temp_data)\n            root.set_right(del_node(right_child, temp_data))\n        <span class=\"hljs-keyword\">elif</span> left_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            root = left_child\n        <span class=\"hljs-keyword\">elif</span> right_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            root = right_child\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">elif</span> root.get_data() &gt; data:\n        <span class=\"hljs-keyword\">if</span> left_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;No such data&quot;</span>)\n            <span class=\"hljs-keyword\">return</span> root\n        <span class=\"hljs-keyword\">else</span>:\n            root.set_left(del_node(left_child, data))\n    <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># root.get_data() &lt; data</span>\n        <span class=\"hljs-keyword\">if</span> right_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-keyword\">return</span> root\n        <span class=\"hljs-keyword\">else</span>:\n            root.set_right(del_node(right_child, data))\n\n    <span class=\"hljs-keyword\">if</span> get_height(right_child) - get_height(left_child) == <span class=\"hljs-number\">2</span>:\n        <span class=\"hljs-keyword\">assert</span> right_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">if</span> get_height(right_child.get_right()) &gt; get_height(right_child.get_left()):\n            root = left_rotation(root)\n        <span class=\"hljs-keyword\">else</span>:\n            root = rl_rotation(root)\n    <span class=\"hljs-keyword\">elif</span> get_height(right_child) - get_height(left_child) == -<span class=\"hljs-number\">2</span>:\n        <span class=\"hljs-keyword\">assert</span> left_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">if</span> get_height(left_child.get_left()) &gt; get_height(left_child.get_right()):\n            root = right_rotation(root)\n        <span class=\"hljs-keyword\">else</span>:\n            root = lr_rotation(root)\n    height = my_max(get_height(root.get_right()), get_height(root.get_left())) + <span class=\"hljs-number\">1</span>\n    root.set_height(height)\n    <span class=\"hljs-keyword\">return</span> root\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AVLtree</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    An AVL tree doctest\n    Examples:\n    &gt;&gt;&gt; t = AVLtree()\n    &gt;&gt;&gt; t.insert(4)\n    insert:4\n    &gt;&gt;&gt; print(str(t).replace(&quot; \\\\n&quot;,&quot;\\\\n&quot;))\n     4\n    *************************************\n    &gt;&gt;&gt; t.insert(2)\n    insert:2\n    &gt;&gt;&gt; print(str(t).replace(&quot; \\\\n&quot;,&quot;\\\\n&quot;).replace(&quot; \\\\n&quot;,&quot;\\\\n&quot;))\n      4\n     2  *\n    *************************************\n    &gt;&gt;&gt; t.insert(3)\n    insert:3\n    right rotation node: 2\n    left rotation node: 4\n    &gt;&gt;&gt; print(str(t).replace(&quot; \\\\n&quot;,&quot;\\\\n&quot;).replace(&quot; \\\\n&quot;,&quot;\\\\n&quot;))\n      3\n     2  4\n    *************************************\n    &gt;&gt;&gt; t.get_height()\n    2\n    &gt;&gt;&gt; t.del_node(3)\n    delete:3\n    &gt;&gt;&gt; print(str(t).replace(&quot; \\\\n&quot;,&quot;\\\\n&quot;).replace(&quot; \\\\n&quot;,&quot;\\\\n&quot;))\n      4\n     2  *\n    *************************************\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.root: my_node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_height</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-keyword\">return</span> get_height(self.root)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;insert:&quot;</span> + <span class=\"hljs-built_in\">str</span>(data))\n        self.root = insert_node(self.root, data)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">del_node</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;delete:&quot;</span> + <span class=\"hljs-built_in\">str</span>(data))\n        <span class=\"hljs-keyword\">if</span> self.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Tree is empty!&quot;</span>)\n            <span class=\"hljs-keyword\">return</span>\n        self.root = del_node(self.root, data)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">\n        self,\n    </span>) -&gt; <span class=\"hljs-built_in\">str</span>:  <span class=\"hljs-comment\"># a level traversale, gives a more intuitive look on the tree</span>\n        output = <span class=\"hljs-string\">&quot;&quot;</span>\n        q = my_queue()\n        q.push(self.root)\n        layer = self.get_height()\n        <span class=\"hljs-keyword\">if</span> layer == <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">return</span> output\n        cnt = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> q.is_empty():\n            node = q.pop()\n            space = <span class=\"hljs-string\">&quot; &quot;</span> * <span class=\"hljs-built_in\">int</span>(math.<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>, layer - <span class=\"hljs-number\">1</span>))\n            output += space\n            <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n                output += <span class=\"hljs-string\">&quot;*&quot;</span>\n                q.push(<span class=\"hljs-literal\">None</span>)\n                q.push(<span class=\"hljs-literal\">None</span>)\n            <span class=\"hljs-keyword\">else</span>:\n                output += <span class=\"hljs-built_in\">str</span>(node.get_data())\n                q.push(node.get_left())\n                q.push(node.get_right())\n            output += space\n            cnt = cnt + <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">100</span>):\n                <span class=\"hljs-keyword\">if</span> cnt == math.<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>, i) - <span class=\"hljs-number\">1</span>:\n                    layer = layer - <span class=\"hljs-number\">1</span>\n                    <span class=\"hljs-keyword\">if</span> layer == <span class=\"hljs-number\">0</span>:\n                        output += <span class=\"hljs-string\">&quot;\\n*************************************&quot;</span>\n                        <span class=\"hljs-keyword\">return</span> output\n                    output += <span class=\"hljs-string\">&quot;\\n&quot;</span>\n                    <span class=\"hljs-keyword\">break</span>\n        output += <span class=\"hljs-string\">&quot;\\n*************************************&quot;</span>\n        <span class=\"hljs-keyword\">return</span> output\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_test</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    _test()\n    t = AVLtree()\n    lst = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>))\n    random.shuffle(lst)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> lst:\n        t.insert(i)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">str</span>(t))\n    random.shuffle(lst)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> lst:\n        t.del_node(i)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">str</span>(t))\n"
    },
    "javascript": {
      "dir": "Data-Structures/Tree/AVLTree.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures/Tree/AVLTree.js",
      "code": "<span class=\"hljs-comment\">/**\n * Adelson-Velsky and Landis Tree\n * [Wikipedia](https://en.wikipedia.org/wiki/AVL_tree)\n * [A video lecture](http://www.youtube.com/watch?v=TbvhGcf6UJU)\n */</span>\n<span class=\"hljs-meta\">&#x27;use strict&#x27;</span>\n\n<span class=\"hljs-comment\">/**\n * A utility class for comparator\n * A comparator is expected to have following structure\n *\n * comp(a, b) RETURN &lt; 0 if a &lt; b\n * RETURN &gt; 0 if a &gt; b\n * MUST RETURN 0 if a == b\n */</span>\n<span class=\"hljs-keyword\">let</span> utils;\n(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">_utils</span>) {\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">comparator</span> () {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">v1, v2</span>) {\n      <span class=\"hljs-keyword\">if</span> (v1 &lt; v2) <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">if</span> (v2 &lt; v1) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    }\n  }\n  _utils.<span class=\"hljs-property\">comparator</span> = comparator\n})(utils || (utils = {}))\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@constructor</span>\n * A class for AVL Tree\n * <span class=\"hljs-doctag\">@argument</span> <span class=\"hljs-variable\">comp</span> - A function used by AVL Tree For Comparison\n * If no argument is sent it uses utils.comparator\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">AVLTree</span> = (<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">_avl</span> (comp) {\n    <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@public</span> comparator function */</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_comp</span> = <span class=\"hljs-literal\">undefined</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_comp</span> = comp !== <span class=\"hljs-literal\">undefined</span> ? comp : utils.<span class=\"hljs-title function_\">comparator</span>()\n\n    <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@public</span> root of the AVL Tree */</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span> = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@public</span> number of elements in AVL Tree */</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span> = <span class=\"hljs-number\">0</span>\n  }\n\n  <span class=\"hljs-comment\">// creates new Node Object</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Node</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">val</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_val</span> = val\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_left</span> = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_right</span> = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_height</span> = <span class=\"hljs-number\">1</span>\n  }\n\n  <span class=\"hljs-comment\">// get height of a node</span>\n  <span class=\"hljs-keyword\">const</span> getHeight = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node</span>) {\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span> }\n    <span class=\"hljs-keyword\">return</span> node.<span class=\"hljs-property\">_height</span>\n  }\n\n  <span class=\"hljs-comment\">// height difference or balance factor of a node</span>\n  <span class=\"hljs-keyword\">const</span> getHeightDifference = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node</span>) {\n    <span class=\"hljs-keyword\">return</span> node == <span class=\"hljs-literal\">null</span> ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-title function_\">getHeight</span>(node.<span class=\"hljs-property\">_left</span>) - <span class=\"hljs-title function_\">getHeight</span>(node.<span class=\"hljs-property\">_right</span>)\n  }\n\n  <span class=\"hljs-comment\">// update height of a node based on children&#x27;s heights</span>\n  <span class=\"hljs-keyword\">const</span> updateHeight = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node</span>) {\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) { <span class=\"hljs-keyword\">return</span> }\n    node.<span class=\"hljs-property\">_height</span> = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(<span class=\"hljs-title function_\">getHeight</span>(node.<span class=\"hljs-property\">_left</span>), <span class=\"hljs-title function_\">getHeight</span>(node.<span class=\"hljs-property\">_right</span>)) + <span class=\"hljs-number\">1</span>\n  }\n\n  <span class=\"hljs-comment\">// Helper: To check if the balanceFactor is valid</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">isValidBalanceFactor</span> = (<span class=\"hljs-params\">balanceFactor</span>) =&gt; [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>].<span class=\"hljs-title function_\">includes</span>(balanceFactor)\n\n  <span class=\"hljs-comment\">// rotations of AVL Tree</span>\n  <span class=\"hljs-keyword\">const</span> leftRotate = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node</span>) {\n    <span class=\"hljs-keyword\">const</span> temp = node.<span class=\"hljs-property\">_right</span>\n    node.<span class=\"hljs-property\">_right</span> = temp.<span class=\"hljs-property\">_left</span>\n    temp.<span class=\"hljs-property\">_left</span> = node\n    <span class=\"hljs-title function_\">updateHeight</span>(node)\n    <span class=\"hljs-title function_\">updateHeight</span>(temp)\n    <span class=\"hljs-keyword\">return</span> temp\n  }\n  <span class=\"hljs-keyword\">const</span> rightRotate = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node</span>) {\n    <span class=\"hljs-keyword\">const</span> temp = node.<span class=\"hljs-property\">_left</span>\n    node.<span class=\"hljs-property\">_left</span> = temp.<span class=\"hljs-property\">_right</span>\n    temp.<span class=\"hljs-property\">_right</span> = node\n    <span class=\"hljs-title function_\">updateHeight</span>(node)\n    <span class=\"hljs-title function_\">updateHeight</span>(temp)\n    <span class=\"hljs-keyword\">return</span> temp\n  }\n\n  <span class=\"hljs-comment\">// check if tree is balanced else balance it for insertion</span>\n  <span class=\"hljs-keyword\">const</span> insertBalance = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, _val, balanceFactor</span>) {\n    <span class=\"hljs-keyword\">if</span> (balanceFactor &gt; <span class=\"hljs-number\">1</span> &amp;&amp; _val &lt; node.<span class=\"hljs-property\">_left</span>.<span class=\"hljs-property\">_val</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">rightRotate</span>(node) <span class=\"hljs-comment\">// Left Left Case</span>\n    }\n    <span class=\"hljs-keyword\">if</span> (balanceFactor &lt; <span class=\"hljs-number\">1</span> &amp;&amp; _val &gt; node.<span class=\"hljs-property\">_right</span>.<span class=\"hljs-property\">_val</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">leftRotate</span>(node) <span class=\"hljs-comment\">// Right Right Case</span>\n    }\n    <span class=\"hljs-keyword\">if</span> (balanceFactor &gt; <span class=\"hljs-number\">1</span> &amp;&amp; _val &gt; node.<span class=\"hljs-property\">_left</span>.<span class=\"hljs-property\">_val</span>) {\n      node.<span class=\"hljs-property\">_left</span> = <span class=\"hljs-title function_\">leftRotate</span>(node.<span class=\"hljs-property\">_left</span>) <span class=\"hljs-comment\">// Left Right Case</span>\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">rightRotate</span>(node)\n    }\n    node.<span class=\"hljs-property\">_right</span> = <span class=\"hljs-title function_\">rightRotate</span>(node.<span class=\"hljs-property\">_right</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">leftRotate</span>(node)\n  }\n\n  <span class=\"hljs-comment\">// check if tree is balanced after deletion</span>\n  <span class=\"hljs-keyword\">const</span> delBalance = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node</span>) {\n    <span class=\"hljs-keyword\">const</span> balanceFactor1 = <span class=\"hljs-title function_\">getHeightDifference</span>(node)\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isValidBalanceFactor</span>(balanceFactor1)) {\n      <span class=\"hljs-keyword\">return</span> node\n    }\n    <span class=\"hljs-keyword\">if</span> (balanceFactor1 &gt; <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">getHeightDifference</span>(node.<span class=\"hljs-property\">_left</span>) &gt;= <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">rightRotate</span>(node) <span class=\"hljs-comment\">// Left Left</span>\n      }\n      node.<span class=\"hljs-property\">_left</span> = <span class=\"hljs-title function_\">leftRotate</span>(node.<span class=\"hljs-property\">_left</span>)\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">rightRotate</span>(node) <span class=\"hljs-comment\">// Left Right</span>\n    }\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">getHeightDifference</span>(node.<span class=\"hljs-property\">_right</span>) &gt; <span class=\"hljs-number\">0</span>) {\n      node.<span class=\"hljs-property\">_right</span> = <span class=\"hljs-title function_\">rightRotate</span>(node.<span class=\"hljs-property\">_right</span>)\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">leftRotate</span>(node) <span class=\"hljs-comment\">// Right Left</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">leftRotate</span>(node) <span class=\"hljs-comment\">// Right Right</span>\n  }\n\n  <span class=\"hljs-comment\">// implement avl tree insertion</span>\n  <span class=\"hljs-keyword\">const</span> insert = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">root, val, tree</span>) {\n    <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">null</span>) {\n      tree.<span class=\"hljs-property\">size</span>++\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(val)\n    }\n    <span class=\"hljs-keyword\">if</span> (tree.<span class=\"hljs-title function_\">_comp</span>(root.<span class=\"hljs-property\">_val</span>, val) &lt; <span class=\"hljs-number\">0</span>) {\n      root.<span class=\"hljs-property\">_right</span> = <span class=\"hljs-title function_\">insert</span>(root.<span class=\"hljs-property\">_right</span>, val, tree)\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (tree.<span class=\"hljs-title function_\">_comp</span>(root.<span class=\"hljs-property\">_val</span>, val) &gt; <span class=\"hljs-number\">0</span>) {\n      root.<span class=\"hljs-property\">_left</span> = <span class=\"hljs-title function_\">insert</span>(root.<span class=\"hljs-property\">_left</span>, val, tree)\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> root\n    }\n    <span class=\"hljs-title function_\">updateHeight</span>(root)\n    <span class=\"hljs-keyword\">const</span> balanceFactor = <span class=\"hljs-title function_\">getHeightDifference</span>(root)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">isValidBalanceFactor</span>(balanceFactor) ? root : <span class=\"hljs-title function_\">insertBalance</span>(root, val, balanceFactor)\n  }\n\n  <span class=\"hljs-comment\">// delete am element</span>\n  <span class=\"hljs-keyword\">const</span> deleteElement = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">root, _val, tree</span>) {\n    <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">null</span>) { <span class=\"hljs-keyword\">return</span> root }\n    <span class=\"hljs-keyword\">if</span> (tree.<span class=\"hljs-title function_\">_comp</span>(root.<span class=\"hljs-property\">_val</span>, _val) === <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">// key found case</span>\n      <span class=\"hljs-keyword\">if</span> (root.<span class=\"hljs-property\">_left</span> === <span class=\"hljs-literal\">null</span> &amp;&amp; root.<span class=\"hljs-property\">_right</span> === <span class=\"hljs-literal\">null</span>) {\n        root = <span class=\"hljs-literal\">null</span>\n        tree.<span class=\"hljs-property\">size</span>--\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (root.<span class=\"hljs-property\">_left</span> === <span class=\"hljs-literal\">null</span>) {\n        root = root.<span class=\"hljs-property\">_right</span>\n        tree.<span class=\"hljs-property\">size</span>--\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (root.<span class=\"hljs-property\">_right</span> === <span class=\"hljs-literal\">null</span>) {\n        root = root.<span class=\"hljs-property\">_left</span>\n        tree.<span class=\"hljs-property\">size</span>--\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">let</span> temp = root.<span class=\"hljs-property\">_right</span>\n        <span class=\"hljs-keyword\">while</span> (temp.<span class=\"hljs-property\">_left</span> != <span class=\"hljs-literal\">null</span>) {\n          temp = temp.<span class=\"hljs-property\">_left</span>\n        }\n        root.<span class=\"hljs-property\">_val</span> = temp.<span class=\"hljs-property\">_val</span>\n        root.<span class=\"hljs-property\">_right</span> = <span class=\"hljs-title function_\">deleteElement</span>(root.<span class=\"hljs-property\">_right</span>, temp.<span class=\"hljs-property\">_val</span>, tree)\n      }\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">if</span> (tree.<span class=\"hljs-title function_\">_comp</span>(root.<span class=\"hljs-property\">_val</span>, _val) &lt; <span class=\"hljs-number\">0</span>) {\n        root.<span class=\"hljs-property\">_right</span> = <span class=\"hljs-title function_\">deleteElement</span>(root.<span class=\"hljs-property\">_right</span>, _val, tree)\n      } <span class=\"hljs-keyword\">else</span> {\n        root.<span class=\"hljs-property\">_left</span> = <span class=\"hljs-title function_\">deleteElement</span>(root.<span class=\"hljs-property\">_left</span>, _val, tree)\n      }\n    }\n    <span class=\"hljs-title function_\">updateHeight</span>(root)\n    root = <span class=\"hljs-title function_\">delBalance</span>(root)\n    <span class=\"hljs-keyword\">return</span> root\n  }\n  <span class=\"hljs-comment\">// search tree for a element</span>\n  <span class=\"hljs-keyword\">const</span> searchAVLTree = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">root, val, tree</span>) {\n    <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">null</span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span> }\n    <span class=\"hljs-keyword\">if</span> (tree.<span class=\"hljs-title function_\">_comp</span>(root.<span class=\"hljs-property\">_val</span>, val) === <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">return</span> root\n    }\n    <span class=\"hljs-keyword\">if</span> (tree.<span class=\"hljs-title function_\">_comp</span>(root.<span class=\"hljs-property\">_val</span>, val) &lt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">searchAVLTree</span>(root.<span class=\"hljs-property\">_right</span>, val, tree)\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">searchAVLTree</span>(root.<span class=\"hljs-property\">_left</span>, val, tree)\n  }\n\n  <span class=\"hljs-comment\">/* Public Functions */</span>\n  <span class=\"hljs-comment\">/**\n   * For Adding Elements to AVL Tree\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">any</span>} <span class=\"hljs-variable\">_val</span>\n   * Since in AVL Tree an element can only occur once so\n   * if a element exists it return false\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">Boolean</span>} element added or not\n   */</span>\n  _avl.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">add</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">_val</span>) {\n    <span class=\"hljs-keyword\">const</span> prevSize = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span> = <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>, _val, <span class=\"hljs-variable language_\">this</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span> !== prevSize\n  }\n  <span class=\"hljs-comment\">/**\n   * TO check is a particular element exists or not\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">any</span>} <span class=\"hljs-variable\">_val</span>\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">Boolean</span>} exists or not\n   */</span>\n  _avl.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">find</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">_val</span>) {\n    <span class=\"hljs-keyword\">const</span> temp = <span class=\"hljs-title function_\">searchAVLTree</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>, _val, <span class=\"hljs-variable language_\">this</span>)\n    <span class=\"hljs-keyword\">return</span> temp != <span class=\"hljs-literal\">null</span>\n  }\n  <span class=\"hljs-comment\">/**\n   *\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">any</span>} <span class=\"hljs-variable\">_val</span>\n   * It is possible that element doesn&#x27;t exists in tree\n   * in that case it return false\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">Boolean</span>} if element was found and deleted\n   */</span>\n  _avl.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">remove</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">_val</span>) {\n    <span class=\"hljs-keyword\">const</span> prevSize = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span> = <span class=\"hljs-title function_\">deleteElement</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>, _val, <span class=\"hljs-variable language_\">this</span>)\n    <span class=\"hljs-keyword\">return</span> prevSize !== <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span>\n  }\n  <span class=\"hljs-keyword\">return</span> _avl\n}())\n\n<span class=\"hljs-comment\">/**\n * A Code for Testing the AVLTree\n */</span>\n<span class=\"hljs-comment\">// (function test () {</span>\n<span class=\"hljs-comment\">//   const newAVL = new AVLTree()</span>\n<span class=\"hljs-comment\">//   const size = Math.floor(Math.random() * 1000000)</span>\n<span class=\"hljs-comment\">//   let uniques = 0</span>\n<span class=\"hljs-comment\">//   let i, temp, j</span>\n<span class=\"hljs-comment\">//   const array = []</span>\n<span class=\"hljs-comment\">//   for (i = 0; i &lt; size; i++) {</span>\n<span class=\"hljs-comment\">//     temp = Math.floor(Math.random() * Number.MAX_VALUE)</span>\n<span class=\"hljs-comment\">//     if (newAVL.add(temp)) {</span>\n<span class=\"hljs-comment\">//       uniques++</span>\n<span class=\"hljs-comment\">//       array.push(temp)</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">//   if (newAVL.size !== uniques) {</span>\n<span class=\"hljs-comment\">//     throw new Error(&#x27;elements not inserted properly&#x27;)</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">//   const findTestSize = Math.floor(Math.random() * uniques)</span>\n<span class=\"hljs-comment\">//   for (i = 0; i &lt; findTestSize; i++) {</span>\n<span class=\"hljs-comment\">//     j = Math.floor(Math.random() * uniques)</span>\n<span class=\"hljs-comment\">//     if (!newAVL.find(array[j])) {</span>\n<span class=\"hljs-comment\">//       throw new Error(&#x27;inserted elements not found&#x27;)</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">//   const deleteTestSize = Math.floor(uniques * Math.random())</span>\n<span class=\"hljs-comment\">//   for (i = 0; i &lt; deleteTestSize; i++) {</span>\n<span class=\"hljs-comment\">//     j = Math.floor(Math.random() * uniques)</span>\n<span class=\"hljs-comment\">//     temp = array[j]</span>\n<span class=\"hljs-comment\">//     if (newAVL.find(temp)) {</span>\n<span class=\"hljs-comment\">//       if (!newAVL.remove(temp)) {</span>\n<span class=\"hljs-comment\">//         throw new Error(&#x27;delete not working properly&#x27;)</span>\n<span class=\"hljs-comment\">//       }</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">// })()</span>\n\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">AVLTree</span> }\n"
    },
    "c-plus-plus": {
      "dir": "data_structures/avltree.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/avltree.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * \\file\n * \\brief A simple tree implementation using nodes\n *\n * \\todo update code to use C++ STL library features and OO structure\n * \\warning This program is a poor implementation and does not utilize any of\n * the C++ STL features.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span>\n\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span> {\n    <span class=\"hljs-type\">int</span> data;\n    <span class=\"hljs-type\">int</span> height;\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span> *left;\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span> *right;\n} node;\n\n<span class=\"hljs-comment\">/** Create and return a new Node */</span>\n<span class=\"hljs-function\">node *<span class=\"hljs-title\">createNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data)</span> </span>{\n    node *nn = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">node</span>();\n    nn-&gt;data = data;\n    nn-&gt;height = <span class=\"hljs-number\">0</span>;\n    nn-&gt;left = <span class=\"hljs-literal\">NULL</span>;\n    nn-&gt;right = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">return</span> nn;\n}\n\n<span class=\"hljs-comment\">/** Returns height of tree */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">height</span><span class=\"hljs-params\">(node *root)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> + std::<span class=\"hljs-built_in\">max</span>(<span class=\"hljs-built_in\">height</span>(root-&gt;left), <span class=\"hljs-built_in\">height</span>(root-&gt;right));\n}\n\n<span class=\"hljs-comment\">/** Returns difference between height of left and right subtree */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getBalance</span><span class=\"hljs-params\">(node *root)</span> </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">height</span>(root-&gt;left) - <span class=\"hljs-built_in\">height</span>(root-&gt;right); }\n\n<span class=\"hljs-comment\">/** Returns Node after Right Rotation */</span>\n<span class=\"hljs-function\">node *<span class=\"hljs-title\">rightRotate</span><span class=\"hljs-params\">(node *root)</span> </span>{\n    node *t = root-&gt;left;\n    node *u = t-&gt;right;\n    t-&gt;right = root;\n    root-&gt;left = u;\n    <span class=\"hljs-keyword\">return</span> t;\n}\n\n<span class=\"hljs-comment\">/** Returns Node after Left Rotation */</span>\n<span class=\"hljs-function\">node *<span class=\"hljs-title\">leftRotate</span><span class=\"hljs-params\">(node *root)</span> </span>{\n    node *t = root-&gt;right;\n    node *u = t-&gt;left;\n    t-&gt;left = root;\n    root-&gt;right = u;\n    <span class=\"hljs-keyword\">return</span> t;\n}\n\n<span class=\"hljs-comment\">/** Returns node with minimum value in the tree */</span>\n<span class=\"hljs-function\">node *<span class=\"hljs-title\">minValue</span><span class=\"hljs-params\">(node *root)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (root-&gt;left == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-keyword\">return</span> root;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">minValue</span>(root-&gt;left);\n}\n\n<span class=\"hljs-comment\">/** Balanced Insertion */</span>\n<span class=\"hljs-function\">node *<span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(node *root, <span class=\"hljs-type\">int</span> item)</span> </span>{\n    node *nn = <span class=\"hljs-built_in\">createNode</span>(item);\n    <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-keyword\">return</span> nn;\n    <span class=\"hljs-keyword\">if</span> (item &lt; root-&gt;data)\n        root-&gt;left = <span class=\"hljs-built_in\">insert</span>(root-&gt;left, item);\n    <span class=\"hljs-keyword\">else</span>\n        root-&gt;right = <span class=\"hljs-built_in\">insert</span>(root-&gt;right, item);\n    <span class=\"hljs-type\">int</span> b = <span class=\"hljs-built_in\">getBalance</span>(root);\n    <span class=\"hljs-keyword\">if</span> (b &gt; <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">getBalance</span>(root-&gt;left) &lt; <span class=\"hljs-number\">0</span>)\n            root-&gt;left = <span class=\"hljs-built_in\">leftRotate</span>(root-&gt;left);  <span class=\"hljs-comment\">// Left-Right Case</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">rightRotate</span>(root);                 <span class=\"hljs-comment\">// Left-Left Case</span>\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (b &lt; <span class=\"hljs-number\">-1</span>) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">getBalance</span>(root-&gt;right) &gt; <span class=\"hljs-number\">0</span>)\n            root-&gt;right = <span class=\"hljs-built_in\">rightRotate</span>(root-&gt;right);  <span class=\"hljs-comment\">// Right-Left Case</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">leftRotate</span>(root);                     <span class=\"hljs-comment\">// Right-Right Case</span>\n    }\n    <span class=\"hljs-keyword\">return</span> root;\n}\n\n<span class=\"hljs-comment\">/** Balanced Deletion */</span>\n<span class=\"hljs-function\">node *<span class=\"hljs-title\">deleteNode</span><span class=\"hljs-params\">(node *root, <span class=\"hljs-type\">int</span> key)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-keyword\">return</span> root;\n    <span class=\"hljs-keyword\">if</span> (key &lt; root-&gt;data)\n        root-&gt;left = <span class=\"hljs-built_in\">deleteNode</span>(root-&gt;left, key);\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key &gt; root-&gt;data)\n        root-&gt;right = <span class=\"hljs-built_in\">deleteNode</span>(root-&gt;right, key);\n\n    <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// Node to be deleted is leaf node or have only one Child</span>\n        <span class=\"hljs-keyword\">if</span> (!root-&gt;right) {\n            node *temp = root-&gt;left;\n            <span class=\"hljs-built_in\">delete</span> (root);\n            root = <span class=\"hljs-literal\">NULL</span>;\n            <span class=\"hljs-keyword\">return</span> temp;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!root-&gt;left) {\n            node *temp = root-&gt;right;\n            <span class=\"hljs-built_in\">delete</span> (root);\n            root = <span class=\"hljs-literal\">NULL</span>;\n            <span class=\"hljs-keyword\">return</span> temp;\n        }\n        <span class=\"hljs-comment\">// Node to be deleted have both left and right subtrees</span>\n        node *temp = <span class=\"hljs-built_in\">minValue</span>(root-&gt;right);\n        root-&gt;data = temp-&gt;data;\n        root-&gt;right = <span class=\"hljs-built_in\">deleteNode</span>(root-&gt;right, temp-&gt;data);\n    }\n    <span class=\"hljs-comment\">// Balancing Tree after deletion</span>\n    <span class=\"hljs-keyword\">return</span> root;\n}\n\n<span class=\"hljs-comment\">/** LevelOrder (Breadth First Search) */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">levelOrder</span><span class=\"hljs-params\">(node *root)</span> </span>{\n    std::queue&lt;node *&gt; q;\n    q.<span class=\"hljs-built_in\">push</span>(root);\n    <span class=\"hljs-keyword\">while</span> (!q.<span class=\"hljs-built_in\">empty</span>()) {\n        root = q.<span class=\"hljs-built_in\">front</span>();\n        std::cout &lt;&lt; root-&gt;data &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n        q.<span class=\"hljs-built_in\">pop</span>();\n        <span class=\"hljs-keyword\">if</span> (root-&gt;left)\n            q.<span class=\"hljs-built_in\">push</span>(root-&gt;left);\n        <span class=\"hljs-keyword\">if</span> (root-&gt;right)\n            q.<span class=\"hljs-built_in\">push</span>(root-&gt;right);\n    }\n}\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Testing AVL Tree</span>\n    node *root = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">7</span>; i++) root = <span class=\"hljs-built_in\">insert</span>(root, i);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;LevelOrder: &quot;</span>;\n    <span class=\"hljs-built_in\">levelOrder</span>(root);\n    root = <span class=\"hljs-built_in\">deleteNode</span>(root, <span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// Deleting key with value 1</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nLevelOrder: &quot;</span>;\n    <span class=\"hljs-built_in\">levelOrder</span>(root);\n    root = <span class=\"hljs-built_in\">deleteNode</span>(root, <span class=\"hljs-number\">4</span>);  <span class=\"hljs-comment\">// Deletin key with value 4</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nLevelOrder: &quot;</span>;\n    <span class=\"hljs-built_in\">levelOrder</span>(root);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/trees/AVLTree.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/trees/AVLTree.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.trees;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AVLTree</span> {\n\n    <span class=\"hljs-keyword\">private</span> Node root;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> key;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> balance;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> height;\n        <span class=\"hljs-keyword\">private</span> Node left, right, parent;\n\n        Node(<span class=\"hljs-type\">int</span> k, Node p) {\n            key = k;\n            parent = p;\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n        <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">null</span>) {\n            root = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(key, <span class=\"hljs-literal\">null</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> root;\n            Node parent;\n            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n                <span class=\"hljs-keyword\">if</span> (n.key == key) {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n\n                parent = n;\n\n                <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">goLeft</span> <span class=\"hljs-operator\">=</span> n.key &gt; key;\n                n = goLeft ? n.left : n.right;\n\n                <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-literal\">null</span>) {\n                    <span class=\"hljs-keyword\">if</span> (goLeft) {\n                        parent.left = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(key, parent);\n                    } <span class=\"hljs-keyword\">else</span> {\n                        parent.right = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(key, parent);\n                    }\n                    rebalance(parent);\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">(Node node)</span> {\n        <span class=\"hljs-keyword\">if</span> (node.left == <span class=\"hljs-literal\">null</span> &amp;&amp; node.right == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">if</span> (node.parent == <span class=\"hljs-literal\">null</span>) {\n                root = <span class=\"hljs-literal\">null</span>;\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">parent</span> <span class=\"hljs-operator\">=</span> node.parent;\n                <span class=\"hljs-keyword\">if</span> (parent.left == node) {\n                    parent.left = <span class=\"hljs-literal\">null</span>;\n                } <span class=\"hljs-keyword\">else</span> {\n                    parent.right = <span class=\"hljs-literal\">null</span>;\n                }\n                rebalance(parent);\n            }\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (node.left != <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">child</span> <span class=\"hljs-operator\">=</span> node.left;\n            <span class=\"hljs-keyword\">while</span> (child.right != <span class=\"hljs-literal\">null</span>) {\n                child = child.right;\n            }\n            node.key = child.key;\n            delete(child);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">child</span> <span class=\"hljs-operator\">=</span> node.right;\n            <span class=\"hljs-keyword\">while</span> (child.left != <span class=\"hljs-literal\">null</span>) {\n                child = child.left;\n            }\n            node.key = child.key;\n            delete(child);\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> delKey)</span> {\n        <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">node</span> <span class=\"hljs-operator\">=</span> root;\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">child</span> <span class=\"hljs-operator\">=</span> root;\n\n        <span class=\"hljs-keyword\">while</span> (child != <span class=\"hljs-literal\">null</span>) {\n            node = child;\n            child = delKey &gt;= node.key ? node.right : node.left;\n            <span class=\"hljs-keyword\">if</span> (delKey == node.key) {\n                delete(node);\n                <span class=\"hljs-keyword\">return</span>;\n            }\n        }\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">rebalance</span><span class=\"hljs-params\">(Node n)</span> {\n        setBalance(n);\n\n        <span class=\"hljs-keyword\">if</span> (n.balance == -<span class=\"hljs-number\">2</span>) {\n            <span class=\"hljs-keyword\">if</span> (height(n.left.left) &gt;= height(n.left.right)) {\n                n = rotateRight(n);\n            } <span class=\"hljs-keyword\">else</span> {\n                n = rotateLeftThenRight(n);\n            }\n\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (n.balance == <span class=\"hljs-number\">2</span>) {\n            <span class=\"hljs-keyword\">if</span> (height(n.right.right) &gt;= height(n.right.left)) {\n                n = rotateLeft(n);\n            } <span class=\"hljs-keyword\">else</span> {\n                n = rotateRightThenLeft(n);\n            }\n        }\n\n        <span class=\"hljs-keyword\">if</span> (n.parent != <span class=\"hljs-literal\">null</span>) {\n            rebalance(n.parent);\n        } <span class=\"hljs-keyword\">else</span> {\n            root = n;\n        }\n    }\n\n    <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">rotateLeft</span><span class=\"hljs-params\">(Node a)</span> {\n\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> a.right;\n        b.parent = a.parent;\n\n        a.right = b.left;\n\n        <span class=\"hljs-keyword\">if</span> (a.right != <span class=\"hljs-literal\">null</span>) {\n            a.right.parent = a;\n        }\n\n        b.left = a;\n        a.parent = b;\n\n        <span class=\"hljs-keyword\">if</span> (b.parent != <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">if</span> (b.parent.right == a) {\n                b.parent.right = b;\n            } <span class=\"hljs-keyword\">else</span> {\n                b.parent.left = b;\n            }\n        }\n\n        setBalance(a, b);\n\n        <span class=\"hljs-keyword\">return</span> b;\n    }\n\n    <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">rotateRight</span><span class=\"hljs-params\">(Node a)</span> {\n\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> a.left;\n        b.parent = a.parent;\n\n        a.left = b.right;\n\n        <span class=\"hljs-keyword\">if</span> (a.left != <span class=\"hljs-literal\">null</span>) {\n            a.left.parent = a;\n        }\n\n        b.right = a;\n        a.parent = b;\n\n        <span class=\"hljs-keyword\">if</span> (b.parent != <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">if</span> (b.parent.right == a) {\n                b.parent.right = b;\n            } <span class=\"hljs-keyword\">else</span> {\n                b.parent.left = b;\n            }\n        }\n\n        setBalance(a, b);\n\n        <span class=\"hljs-keyword\">return</span> b;\n    }\n\n    <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">rotateLeftThenRight</span><span class=\"hljs-params\">(Node n)</span> {\n        n.left = rotateLeft(n.left);\n        <span class=\"hljs-keyword\">return</span> rotateRight(n);\n    }\n\n    <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">rotateRightThenLeft</span><span class=\"hljs-params\">(Node n)</span> {\n        n.right = rotateRight(n.right);\n        <span class=\"hljs-keyword\">return</span> rotateLeft(n);\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">height</span><span class=\"hljs-params\">(Node n)</span> {\n        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> n.height;\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setBalance</span><span class=\"hljs-params\">(Node... nodes)</span> {\n        <span class=\"hljs-keyword\">for</span> (Node n : nodes) {\n            reheight(n);\n            n.balance = height(n.right) - height(n.left);\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printBalance</span><span class=\"hljs-params\">()</span> {\n        printBalance(root);\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printBalance</span><span class=\"hljs-params\">(Node n)</span> {\n        <span class=\"hljs-keyword\">if</span> (n != <span class=\"hljs-literal\">null</span>) {\n            printBalance(n.left);\n            System.out.printf(<span class=\"hljs-string\">&quot;%s &quot;</span>, n.balance);\n            printBalance(n.right);\n        }\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">reheight</span><span class=\"hljs-params\">(Node node)</span> {\n        <span class=\"hljs-keyword\">if</span> (node != <span class=\"hljs-literal\">null</span>) {\n            node.height = <span class=\"hljs-number\">1</span> + Math.max(height(node.left), height(node.right));\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> searchHelper(<span class=\"hljs-built_in\">this</span>.root, key);\n        <span class=\"hljs-keyword\">if</span> (result != <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">searchHelper</span><span class=\"hljs-params\">(Node root, <span class=\"hljs-type\">int</span> key)</span> {\n        <span class=\"hljs-comment\">// root is null or key is present at root</span>\n        <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">null</span> || root.key == key) {\n            <span class=\"hljs-keyword\">return</span> root;\n        }\n\n        <span class=\"hljs-comment\">// key is greater than root&#x27;s key</span>\n        <span class=\"hljs-keyword\">if</span> (root.key &gt; key) {\n            <span class=\"hljs-keyword\">return</span> searchHelper(root.left, key); <span class=\"hljs-comment\">// call the function on the node&#x27;s left child</span>\n        }\n        <span class=\"hljs-comment\">// key is less than root&#x27;s key then</span>\n        <span class=\"hljs-comment\">// call the function on the node&#x27;s right child as it is greater</span>\n        <span class=\"hljs-keyword\">return</span> searchHelper(root.right, key);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">AVLTree</span> <span class=\"hljs-variable\">tree</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AVLTree</span>();\n\n        System.out.println(<span class=\"hljs-string\">&quot;Inserting values 1 to 10&quot;</span>);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n            tree.insert(i);\n        }\n\n        System.out.print(<span class=\"hljs-string\">&quot;Printing balance: &quot;</span>);\n        tree.printBalance();\n    }\n}\n"
    },
    "c": {
      "dir": "data_structures/binary_trees/avl_tree.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/binary_trees/avl_tree.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">AVLnode</span>\n{</span>\n    <span class=\"hljs-type\">int</span> key;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">AVLnode</span> *<span class=\"hljs-title\">left</span>;</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">AVLnode</span> *<span class=\"hljs-title\">right</span>;</span>\n    <span class=\"hljs-type\">int</span> height;\n};\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">AVLnode</span> <span class=\"hljs-title\">avlNode</span>;</span>\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">max</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> { <span class=\"hljs-keyword\">return</span> (a &gt; b) ? a : b; }\n\navlNode *<span class=\"hljs-title function_\">newNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span>\n{\n    avlNode *node = (avlNode *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(avlNode));\n\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;!! Out of Space !!\\n&quot;</span>);\n    <span class=\"hljs-keyword\">else</span>\n    {\n        node-&gt;key = key;\n        node-&gt;left = <span class=\"hljs-literal\">NULL</span>;\n        node-&gt;right = <span class=\"hljs-literal\">NULL</span>;\n        node-&gt;height = <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> node;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">nodeHeight</span><span class=\"hljs-params\">(avlNode *node)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-keyword\">return</span> (node-&gt;height);\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">heightDiff</span><span class=\"hljs-params\">(avlNode *node)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-keyword\">return</span> (nodeHeight(node-&gt;left) - nodeHeight(node-&gt;right));\n}\n\n<span class=\"hljs-comment\">/* Returns the node with min key in the left subtree*/</span>\navlNode *<span class=\"hljs-title function_\">minNode</span><span class=\"hljs-params\">(avlNode *node)</span>\n{\n    avlNode *temp = node;\n\n    <span class=\"hljs-keyword\">while</span> (temp-&gt;left != <span class=\"hljs-literal\">NULL</span>) temp = temp-&gt;left;\n\n    <span class=\"hljs-keyword\">return</span> temp;\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printAVL</span><span class=\"hljs-params\">(avlNode *node, <span class=\"hljs-type\">int</span> level)</span>\n{\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">if</span> (node != <span class=\"hljs-literal\">NULL</span>)\n    {\n        printAVL(node-&gt;right, level + <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\n&quot;</span>);\n\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; level; i++) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t&quot;</span>);\n\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, node-&gt;key);\n\n        printAVL(node-&gt;left, level + <span class=\"hljs-number\">1</span>);\n    }\n}\n\navlNode *<span class=\"hljs-title function_\">rightRotate</span><span class=\"hljs-params\">(avlNode *z)</span>\n{\n    avlNode *y = z-&gt;left;\n    avlNode *T3 = y-&gt;right;\n\n    y-&gt;right = z;\n    z-&gt;left = T3;\n\n    z-&gt;height = (max(nodeHeight(z-&gt;left), nodeHeight(z-&gt;right)) + <span class=\"hljs-number\">1</span>);\n    y-&gt;height = (max(nodeHeight(y-&gt;left), nodeHeight(y-&gt;right)) + <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-keyword\">return</span> y;\n}\n\navlNode *<span class=\"hljs-title function_\">leftRotate</span><span class=\"hljs-params\">(avlNode *z)</span>\n{\n    avlNode *y = z-&gt;right;\n    avlNode *T3 = y-&gt;left;\n\n    y-&gt;left = z;\n    z-&gt;right = T3;\n\n    z-&gt;height = (max(nodeHeight(z-&gt;left), nodeHeight(z-&gt;right)) + <span class=\"hljs-number\">1</span>);\n    y-&gt;height = (max(nodeHeight(y-&gt;left), nodeHeight(y-&gt;right)) + <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-keyword\">return</span> y;\n}\n\navlNode *<span class=\"hljs-title function_\">LeftRightRotate</span><span class=\"hljs-params\">(avlNode *z)</span>\n{\n    z-&gt;left = leftRotate(z-&gt;left);\n\n    <span class=\"hljs-keyword\">return</span> (rightRotate(z));\n}\n\navlNode *<span class=\"hljs-title function_\">RightLeftRotate</span><span class=\"hljs-params\">(avlNode *z)</span>\n{\n    z-&gt;right = rightRotate(z-&gt;right);\n\n    <span class=\"hljs-keyword\">return</span> (leftRotate(z));\n}\n\navlNode *<span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(avlNode *node, <span class=\"hljs-type\">int</span> key)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-keyword\">return</span> (newNode(key));\n\n    <span class=\"hljs-comment\">/*Binary Search Tree insertion*/</span>\n\n    <span class=\"hljs-keyword\">if</span> (key &lt; node-&gt;key)\n        node-&gt;left =\n            insert(node-&gt;left, key); <span class=\"hljs-comment\">/*Recursive insertion in L subtree*/</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key &gt; node-&gt;key)\n        node-&gt;right =\n            insert(node-&gt;right, key); <span class=\"hljs-comment\">/*Recursive insertion in R subtree*/</span>\n\n    <span class=\"hljs-comment\">/* Node  Height as per the AVL formula*/</span>\n    node-&gt;height = (max(nodeHeight(node-&gt;left), nodeHeight(node-&gt;right)) + <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-comment\">/*Checking for the balance condition*/</span>\n    <span class=\"hljs-type\">int</span> balance = heightDiff(node);\n\n    <span class=\"hljs-comment\">/*Left Left */</span>\n    <span class=\"hljs-keyword\">if</span> (balance &gt; <span class=\"hljs-number\">1</span> &amp;&amp; key &lt; (node-&gt;left-&gt;key))\n        <span class=\"hljs-keyword\">return</span> rightRotate(node);\n\n    <span class=\"hljs-comment\">/*Right Right */</span>\n    <span class=\"hljs-keyword\">if</span> (balance &lt; <span class=\"hljs-number\">-1</span> &amp;&amp; key &gt; (node-&gt;right-&gt;key))\n        <span class=\"hljs-keyword\">return</span> leftRotate(node);\n\n    <span class=\"hljs-comment\">/*Left Right */</span>\n    <span class=\"hljs-keyword\">if</span> (balance &gt; <span class=\"hljs-number\">1</span> &amp;&amp; key &gt; (node-&gt;left-&gt;key))\n    {\n        node = LeftRightRotate(node);\n    }\n\n    <span class=\"hljs-comment\">/*Right Left */</span>\n    <span class=\"hljs-keyword\">if</span> (balance &lt; <span class=\"hljs-number\">-1</span> &amp;&amp; key &lt; (node-&gt;right-&gt;key))\n    {\n        node = RightLeftRotate(node);\n    }\n\n    <span class=\"hljs-keyword\">return</span> node;\n}\n\navlNode *<span class=\"hljs-title function_\">delete</span> <span class=\"hljs-params\">(avlNode *node, <span class=\"hljs-type\">int</span> queryNum)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-keyword\">return</span> node;\n\n    <span class=\"hljs-keyword\">if</span> (queryNum &lt; node-&gt;key)\n        node-&gt;left =\n            delete (node-&gt;left, queryNum); <span class=\"hljs-comment\">/*Recursive deletion in L subtree*/</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (queryNum &gt; node-&gt;key)\n        node-&gt;right =\n            delete (node-&gt;right, queryNum); <span class=\"hljs-comment\">/*Recursive deletion in R subtree*/</span>\n    <span class=\"hljs-keyword\">else</span>\n    {\n        <span class=\"hljs-comment\">/*Single or No Child*/</span>\n        <span class=\"hljs-keyword\">if</span> ((node-&gt;left == <span class=\"hljs-literal\">NULL</span>) || (node-&gt;right == <span class=\"hljs-literal\">NULL</span>))\n        {\n            avlNode *temp = node-&gt;left ? node-&gt;left : node-&gt;right;\n\n            <span class=\"hljs-comment\">/* No Child*/</span>\n            <span class=\"hljs-keyword\">if</span> (temp == <span class=\"hljs-literal\">NULL</span>)\n            {\n                temp = node;\n                node = <span class=\"hljs-literal\">NULL</span>;\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-comment\">/*Single Child : copy data to the parent*/</span>\n                *node = *temp;\n\n            <span class=\"hljs-built_in\">free</span>(temp);\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {\n            <span class=\"hljs-comment\">/*Two Child*/</span>\n\n            <span class=\"hljs-comment\">/*Get the smallest key in the R subtree*/</span>\n            avlNode *temp = minNode(node-&gt;right);\n            node-&gt;key = temp-&gt;key; <span class=\"hljs-comment\">/*Copy that to the root*/</span>\n            node-&gt;right =\n                delete (node-&gt;right,\n                        temp-&gt;key); <span class=\"hljs-comment\">/*Delete the smallest in the R subtree.*/</span>\n        }\n    }\n\n    <span class=\"hljs-comment\">/*single node in tree*/</span>\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-keyword\">return</span> node;\n\n    <span class=\"hljs-comment\">/*Update height*/</span>\n    node-&gt;height = (max(nodeHeight(node-&gt;left), nodeHeight(node-&gt;right)) + <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-type\">int</span> balance = heightDiff(node);\n\n    <span class=\"hljs-comment\">/*Left Left */</span>\n    <span class=\"hljs-keyword\">if</span> ((balance &gt; <span class=\"hljs-number\">1</span>) &amp;&amp; (heightDiff(node-&gt;left) &gt;= <span class=\"hljs-number\">0</span>))\n        <span class=\"hljs-keyword\">return</span> rightRotate(node);\n\n    <span class=\"hljs-comment\">/*Left Right */</span>\n    <span class=\"hljs-keyword\">if</span> ((balance &gt; <span class=\"hljs-number\">1</span>) &amp;&amp; (heightDiff(node-&gt;left) &lt; <span class=\"hljs-number\">0</span>))\n    {\n        node = LeftRightRotate(node);\n    }\n\n    <span class=\"hljs-comment\">/*Right Right */</span>\n    <span class=\"hljs-keyword\">if</span> ((balance &lt; <span class=\"hljs-number\">-1</span>) &amp;&amp; (heightDiff(node-&gt;right) &gt;= <span class=\"hljs-number\">0</span>))\n        <span class=\"hljs-keyword\">return</span> leftRotate(node);\n\n    <span class=\"hljs-comment\">/*Right Left */</span>\n    <span class=\"hljs-keyword\">if</span> ((balance &lt; <span class=\"hljs-number\">-1</span>) &amp;&amp; (heightDiff(node-&gt;right) &lt; <span class=\"hljs-number\">0</span>))\n    {\n        node = RightLeftRotate(node);\n    }\n\n    <span class=\"hljs-keyword\">return</span> node;\n}\n\navlNode *<span class=\"hljs-title function_\">findNode</span><span class=\"hljs-params\">(avlNode *node, <span class=\"hljs-type\">int</span> queryNum)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (node != <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-keyword\">if</span> (queryNum &lt; node-&gt;key)\n            node = findNode(node-&gt;left, queryNum);\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (queryNum &gt; node-&gt;key)\n            node = findNode(node-&gt;right, queryNum);\n    }\n\n    <span class=\"hljs-keyword\">return</span> node;\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printPreOrder</span><span class=\"hljs-params\">(avlNode *node)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-keyword\">return</span>;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;  %d  &quot;</span>, (node-&gt;key));\n    printPreOrder(node-&gt;left);\n    printPreOrder(node-&gt;right);\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printInOrder</span><span class=\"hljs-params\">(avlNode *node)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-keyword\">return</span>;\n    printInOrder(node-&gt;left);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;  %d  &quot;</span>, (node-&gt;key));\n    printInOrder(node-&gt;right);\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printPostOrder</span><span class=\"hljs-params\">(avlNode *node)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-keyword\">return</span>;\n    printPostOrder(node-&gt;left);\n    printPostOrder(node-&gt;right);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;  %d  &quot;</span>, (node-&gt;key));\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> choice;\n    <span class=\"hljs-type\">int</span> flag = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-type\">int</span> insertNum;\n    <span class=\"hljs-type\">int</span> queryNum;\n\n    avlNode *root = <span class=\"hljs-literal\">NULL</span>;\n    avlNode *tempNode;\n\n    <span class=\"hljs-keyword\">while</span> (flag == <span class=\"hljs-number\">1</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\nEnter the Step to Run : \\n&quot;</span>);\n\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t1: Insert a node into AVL tree\\n&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t2: Delete a node in AVL tree\\n&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t3: Search a node into AVL tree\\n&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t4: printPreOrder (Ro L R) Tree\\n&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t5: printInOrder (L Ro R) Tree\\n&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t6: printPostOrder (L R Ro) Tree\\n&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t7: printAVL Tree\\n&quot;</span>);\n\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t0: EXIT\\n&quot;</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;choice);\n\n        <span class=\"hljs-keyword\">switch</span> (choice)\n        {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:\n        {\n            flag = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\t\\tExiting, Thank You !!\\n&quot;</span>);\n            <span class=\"hljs-keyword\">break</span>;\n        }\n\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\tEnter the Number to insert: &quot;</span>);\n            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;insertNum);\n\n            tempNode = findNode(root, insertNum);\n\n            <span class=\"hljs-keyword\">if</span> (tempNode != <span class=\"hljs-literal\">NULL</span>)\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\t %d Already exists in the tree\\n&quot;</span>, insertNum);\n            <span class=\"hljs-keyword\">else</span>\n            {\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\tPrinting AVL Tree\\n&quot;</span>);\n                printAVL(root, <span class=\"hljs-number\">1</span>);\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n\n                root = insert(root, insertNum);\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\tPrinting AVL Tree\\n&quot;</span>);\n                printAVL(root, <span class=\"hljs-number\">1</span>);\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">break</span>;\n        }\n\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\tEnter the Number to Delete: &quot;</span>);\n            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;queryNum);\n\n            tempNode = findNode(root, queryNum);\n\n            <span class=\"hljs-keyword\">if</span> (tempNode == <span class=\"hljs-literal\">NULL</span>)\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\t %d Does not exist in the tree\\n&quot;</span>, queryNum);\n            <span class=\"hljs-keyword\">else</span>\n            {\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\tPrinting AVL Tree\\n&quot;</span>);\n                printAVL(root, <span class=\"hljs-number\">1</span>);\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n                root = delete (root, queryNum);\n\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\tPrinting AVL Tree\\n&quot;</span>);\n                printAVL(root, <span class=\"hljs-number\">1</span>);\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">break</span>;\n        }\n\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\tEnter the Number to Search: &quot;</span>);\n            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;queryNum);\n\n            tempNode = findNode(root, queryNum);\n\n            <span class=\"hljs-keyword\">if</span> (tempNode == <span class=\"hljs-literal\">NULL</span>)\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\t %d : Not Found\\n&quot;</span>, queryNum);\n            <span class=\"hljs-keyword\">else</span>\n            {\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\t %d : Found at height %d \\n&quot;</span>, queryNum,\n                       tempNode-&gt;height);\n\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\tPrinting AVL Tree\\n&quot;</span>);\n                printAVL(root, <span class=\"hljs-number\">1</span>);\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">break</span>;\n        }\n\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nPrinting Tree preOrder\\n&quot;</span>);\n            printPreOrder(root);\n\n            <span class=\"hljs-keyword\">break</span>;\n        }\n\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>:\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nPrinting Tree inOrder\\n&quot;</span>);\n            printInOrder(root);\n\n            <span class=\"hljs-keyword\">break</span>;\n        }\n\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nPrinting Tree PostOrder\\n&quot;</span>);\n            printPostOrder(root);\n\n            <span class=\"hljs-keyword\">break</span>;\n        }\n\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nPrinting AVL Tree\\n&quot;</span>);\n            printAVL(root, <span class=\"hljs-number\">1</span>);\n\n            <span class=\"hljs-keyword\">break</span>;\n        }\n\n        <span class=\"hljs-keyword\">default</span>:\n        {\n            flag = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\t\\tExiting, Thank You !!\\n&quot;</span>);\n            <span class=\"hljs-keyword\">break</span>;\n        }\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "go": {
      "dir": "structure/avl/avl.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/structure/avl/avl.go",
      "code": "<span class=\"hljs-comment\">// Package avl is a Adelson-Velskii and Landis tree implemnation</span>\n<span class=\"hljs-comment\">// avl is self-balancing tree, i.e for all node in a tree, height difference</span>\n<span class=\"hljs-comment\">// between its left and right child will not exceed 1</span>\n<span class=\"hljs-comment\">// more information : https://en.wikipedia.org/wiki/AVL_tree</span>\n<span class=\"hljs-keyword\">package</span> avl\n\n<span class=\"hljs-comment\">// Node of a tree</span>\n<span class=\"hljs-keyword\">type</span> Node <span class=\"hljs-keyword\">struct</span> {\n\tKey         <span class=\"hljs-type\">int</span>\n\tHeight      <span class=\"hljs-type\">int</span>\n\tLeft, Right *Node\n}\n\n<span class=\"hljs-comment\">// NewTree create a new AVL tree</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewTree</span><span class=\"hljs-params\">()</span></span> *Node {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">// Get : return node with given key</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Get</span><span class=\"hljs-params\">(root *Node, key <span class=\"hljs-type\">int</span>)</span></span> *Node {\n\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n\t}\n\t<span class=\"hljs-keyword\">if</span> root.Key == key {\n\t\t<span class=\"hljs-keyword\">return</span> root\n\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> root.Key &lt; key {\n\t\troot = root.Right\n\t} <span class=\"hljs-keyword\">else</span> {\n\t\troot = root.Left\n\t}\n\t<span class=\"hljs-keyword\">return</span> Get(root, key)\n}\n\n<span class=\"hljs-comment\">// Insert a new item</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Insert</span><span class=\"hljs-params\">(root **Node, key <span class=\"hljs-type\">int</span>)</span></span> {\n\t<span class=\"hljs-keyword\">if</span> *root == <span class=\"hljs-literal\">nil</span> {\n\t\t*root = &amp;Node{\n\t\t\tKey:    key,\n\t\t\tHeight: <span class=\"hljs-number\">1</span>,\n\t\t}\n\t\t<span class=\"hljs-keyword\">return</span>\n\t}\n\t<span class=\"hljs-keyword\">if</span> (*root).Key &lt; key {\n\t\tInsert(&amp;(*root).Right, key)\n\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (*root).Key &gt; key {\n\t\tInsert(&amp;(*root).Left, key)\n\t}\n\n\t<span class=\"hljs-comment\">// update height</span>\n\t(*root).Height = height(*root)\n\n\tbFactor := balanceFactor(*root)\n\n\t<span class=\"hljs-keyword\">if</span> bFactor == <span class=\"hljs-number\">2</span> { <span class=\"hljs-comment\">// L</span>\n\t\tbFactor = balanceFactor((*root).Left)\n\t\t<span class=\"hljs-keyword\">if</span> bFactor == <span class=\"hljs-number\">1</span> { <span class=\"hljs-comment\">// LL</span>\n\t\t\tllRotation(root)\n\t\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> bFactor == <span class=\"hljs-number\">-1</span> { <span class=\"hljs-comment\">// LR</span>\n\t\t\tlrRotation(root)\n\t\t}\n\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> bFactor == <span class=\"hljs-number\">-2</span> { <span class=\"hljs-comment\">// R</span>\n\t\tbFactor = balanceFactor((*root).Right)\n\t\t<span class=\"hljs-keyword\">if</span> bFactor == <span class=\"hljs-number\">1</span> { <span class=\"hljs-comment\">// RL</span>\n\t\t\trlRotation(root)\n\t\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> bFactor == <span class=\"hljs-number\">-1</span> { <span class=\"hljs-comment\">// RR</span>\n\t\t\trrRotation(root)\n\t\t}\n\t}\n}\n\n<span class=\"hljs-comment\">// Delete : remove given key from the tree</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Delete</span><span class=\"hljs-params\">(root **Node, key <span class=\"hljs-type\">int</span>)</span></span> {\n\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span>\n\t}\n\t<span class=\"hljs-keyword\">if</span> (*root).Key &lt; key {\n\t\tDelete(&amp;(*root).Right, key)\n\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (*root).Key &gt; key {\n\t\tDelete(&amp;(*root).Left, key)\n\t} <span class=\"hljs-keyword\">else</span> {\n\t\t<span class=\"hljs-comment\">// 3 cases</span>\n\t\t<span class=\"hljs-comment\">// 1. No Child</span>\n\t\t<span class=\"hljs-comment\">// 2. With One Child</span>\n\t\t<span class=\"hljs-comment\">// 3. With Two Child</span>\n\t\t<span class=\"hljs-keyword\">if</span> (*root).Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; (*root).Right == <span class=\"hljs-literal\">nil</span> {\n\t\t\t*root = <span class=\"hljs-literal\">nil</span>\n\t\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (*root).Left == <span class=\"hljs-literal\">nil</span> {\n\t\t\t*root = (*root).Right\n\t\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (*root).Right == <span class=\"hljs-literal\">nil</span> {\n\t\t\t*root = (*root).Left\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\tminVal := min((*root).Right)\n\t\t\t(*root).Key = minVal\n\t\t\tDelete(root, minVal)\n\t\t}\n\t\t<span class=\"hljs-keyword\">return</span>\n\t}\n\n\t<span class=\"hljs-comment\">// update height</span>\n\t(*root).Height = height(*root)\n\n\tbFactor := balanceFactor(*root)\n\n\t<span class=\"hljs-keyword\">if</span> bFactor == <span class=\"hljs-number\">2</span> { <span class=\"hljs-comment\">// L</span>\n\t\t<span class=\"hljs-keyword\">switch</span> balanceFactor((*root).Left) {\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>: <span class=\"hljs-comment\">// LL</span>\n\t\t\tllRotation(root)\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">-1</span>: <span class=\"hljs-comment\">// LR</span>\n\t\t\tlrRotation(root)\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>: <span class=\"hljs-comment\">//  LL OR LR</span>\n\t\t\tllRotation(root)\n\t\t}\n\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> bFactor == <span class=\"hljs-number\">-2</span> { <span class=\"hljs-comment\">// L</span>\n\t\t<span class=\"hljs-keyword\">switch</span> balanceFactor((*root).Right) {\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>: <span class=\"hljs-comment\">// RL</span>\n\t\t\trlRotation(root)\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">-1</span>: <span class=\"hljs-comment\">// RR</span>\n\t\t\trrRotation(root)\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>: <span class=\"hljs-comment\">// RL OR RR</span>\n\t\t\trrRotation(root)\n\t\t}\n\t}\n}\n\n<span class=\"hljs-comment\">// rotations</span>\n<span class=\"hljs-comment\">// 1. LL</span>\n<span class=\"hljs-comment\">// 2. LR</span>\n<span class=\"hljs-comment\">// 3. RR</span>\n<span class=\"hljs-comment\">// 4. RL</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">llRotation</span><span class=\"hljs-params\">(root **Node)</span></span> {\n\tb := (*root).Left\n\tbr := b.Right\n\tb.Right = *root\n\t(*root).Left = br\n\t(*root).Height = height(*root)\n\tb.Height = height(b)\n\t*root = b\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">lrRotation</span><span class=\"hljs-params\">(root **Node)</span></span> {\n\tc := (*root).Left.Right\n\tcl := c.Left\n\tcr := c.Right\n\n\tc.Left = (*root).Left\n\tc.Right = (*root)\n\tc.Left.Right = cl\n\n\t(*root).Left = cr\n\n\t(*root).Height = height(*root)\n\tc.Left.Height = height(c.Left)\n\tc.Height = height(c)\n\n\t*root = c\n\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">rrRotation</span><span class=\"hljs-params\">(root **Node)</span></span> {\n\tb := (*root).Right\n\tbl := b.Left\n\tb.Left = *root\n\n\t(*root).Right = bl\n\t(*root).Height = height(*root)\n\tb.Height = height(b)\n\t*root = b\n\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">rlRotation</span><span class=\"hljs-params\">(root **Node)</span></span> {\n\tc := (*root).Right.Left\n\tcl := c.Left\n\tcr := c.Right\n\n\tc.Right = (*root).Right\n\tc.Right.Left = cr\n\tc.Left = *root\n\t(*root).Right = cl\n\n\t(*root).Height = height(*root)\n\tc.Right.Height = height(c.Right)\n\tc.Height = height(c)\n\t*root = c\n}\n\n<span class=\"hljs-comment\">// balanceFactor : -ve balance factor means subtree root is heavy toward left</span>\n<span class=\"hljs-comment\">// and +ve balance factor means subtree root is heavy toward right side</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">balanceFactor</span><span class=\"hljs-params\">(root *Node)</span></span> <span class=\"hljs-type\">int</span> {\n\t<span class=\"hljs-keyword\">var</span> leftHeight, rightHeight <span class=\"hljs-type\">int</span>\n\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> {\n\t\tleftHeight = root.Left.Height\n\t}\n\t<span class=\"hljs-keyword\">if</span> root.Right != <span class=\"hljs-literal\">nil</span> {\n\t\trightHeight = root.Right.Height\n\t}\n\t<span class=\"hljs-keyword\">return</span> leftHeight - rightHeight\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">height</span><span class=\"hljs-params\">(root *Node)</span></span> <span class=\"hljs-type\">int</span> {\n\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\t}\n\t<span class=\"hljs-keyword\">var</span> leftHeight, rightHeight <span class=\"hljs-type\">int</span>\n\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> {\n\t\tleftHeight = root.Left.Height\n\t}\n\t<span class=\"hljs-keyword\">if</span> root.Right != <span class=\"hljs-literal\">nil</span> {\n\t\trightHeight = root.Right.Height\n\t}\n\tmax := leftHeight\n\t<span class=\"hljs-keyword\">if</span> rightHeight &gt; leftHeight {\n\t\tmax = rightHeight\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> + max\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(root *Node)</span></span> <span class=\"hljs-type\">int</span> {\n\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> root.Key\n\t}\n\t<span class=\"hljs-keyword\">return</span> min(root.Left)\n}\n"
    },
    "rust": {
      "dir": "src/data_structures/avl_tree.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/data_structures/avl_tree.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::{\n    cmp::{max, Ordering},\n    iter::FromIterator,\n    mem,\n    ops::Not,\n};\n\n<span class=\"hljs-comment\">/// An internal node of an `AVLTree`.</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">AVLNode</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt; {\n    value: T,\n    height: <span class=\"hljs-type\">usize</span>,\n    left: <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;&gt;,\n    right: <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;&gt;,\n}\n\n<span class=\"hljs-comment\">/// A set based on an AVL Tree.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// An AVL Tree is a self-balancing binary search tree. It tracks the height of each node</span>\n<span class=\"hljs-comment\">/// and performs internal rotations to maintain a height difference of at most 1 between</span>\n<span class=\"hljs-comment\">/// each sibling pair.</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">AVLTree</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt; {\n    root: <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;&gt;,\n    length: <span class=\"hljs-type\">usize</span>,\n}\n\n<span class=\"hljs-comment\">/// Refers to the left or right subtree of an `AVLNode`.</span>\n<span class=\"hljs-meta\">#[derive(Clone, Copy)]</span>\n<span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Side</span> {\n    Left,\n    Right,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt; AVLTree&lt;T&gt; {\n    <span class=\"hljs-comment\">/// Creates an empty `AVLTree`.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>() <span class=\"hljs-punctuation\">-&gt;</span> AVLTree&lt;T&gt; {\n        AVLTree {\n            root: <span class=\"hljs-literal\">None</span>,\n            length: <span class=\"hljs-number\">0</span>,\n        }\n    }\n\n    <span class=\"hljs-comment\">/// Returns `true` if the tree contains a value.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">contains</span>(&amp;<span class=\"hljs-keyword\">self</span>, value: &amp;T) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">current</span> = &amp;<span class=\"hljs-keyword\">self</span>.root;\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(node) = current {\n            current = <span class=\"hljs-keyword\">match</span> value.<span class=\"hljs-title function_ invoke__\">cmp</span>(&amp;node.value) {\n                Ordering::Equal =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>,\n                Ordering::Less =&gt; &amp;node.left,\n                Ordering::Greater =&gt; &amp;node.right,\n            }\n        }\n        <span class=\"hljs-literal\">false</span>\n    }\n\n    <span class=\"hljs-comment\">/// Adds a value to the tree.</span>\n    <span class=\"hljs-comment\">///</span>\n    <span class=\"hljs-comment\">/// Returns `true` if the tree did not yet contain the value.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, value: T) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">inserted</span> = <span class=\"hljs-title function_ invoke__\">insert</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.root, value);\n        <span class=\"hljs-keyword\">if</span> inserted {\n            <span class=\"hljs-keyword\">self</span>.length += <span class=\"hljs-number\">1</span>;\n        }\n        inserted\n    }\n\n    <span class=\"hljs-comment\">/// Removes a value from the tree.</span>\n    <span class=\"hljs-comment\">///</span>\n    <span class=\"hljs-comment\">/// Returns `true` if the tree contained the value.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">remove</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, value: &amp;T) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">removed</span> = <span class=\"hljs-title function_ invoke__\">remove</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.root, value);\n        <span class=\"hljs-keyword\">if</span> removed {\n            <span class=\"hljs-keyword\">self</span>.length -= <span class=\"hljs-number\">1</span>;\n        }\n        removed\n    }\n\n    <span class=\"hljs-comment\">/// Returns the number of values in the tree.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">len</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\n        <span class=\"hljs-keyword\">self</span>.length\n    }\n\n    <span class=\"hljs-comment\">/// Returns `true` if the tree contains no values.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">is_empty</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">self</span>.length == <span class=\"hljs-number\">0</span>\n    }\n\n    <span class=\"hljs-comment\">/// Returns an iterator that visits the nodes in the tree in order.</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">node_iter</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> NodeIter&lt;T&gt; {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">cap</span> = <span class=\"hljs-keyword\">self</span>.root.<span class=\"hljs-title function_ invoke__\">as_ref</span>().<span class=\"hljs-title function_ invoke__\">map_or</span>(<span class=\"hljs-number\">0</span>, |n| n.height);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">node_iter</span> = NodeIter {\n            stack: Vec::<span class=\"hljs-title function_ invoke__\">with_capacity</span>(cap),\n        };\n        <span class=\"hljs-comment\">// Initialize stack with path to leftmost child</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">child</span> = &amp;<span class=\"hljs-keyword\">self</span>.root;\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(node) = child {\n            node_iter.stack.<span class=\"hljs-title function_ invoke__\">push</span>(node.<span class=\"hljs-title function_ invoke__\">as_ref</span>());\n            child = &amp;node.left;\n        }\n        node_iter\n    }\n\n    <span class=\"hljs-comment\">/// Returns an iterator that visits the values in the tree in ascending order.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">iter</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> Iter&lt;T&gt; {\n        Iter {\n            node_iter: <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">node_iter</span>(),\n        }\n    }\n}\n\n<span class=\"hljs-comment\">/// Recursive helper function for `AVLTree` insertion.</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(tree: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;&gt;, value: T) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(node) = tree {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">inserted</span> = <span class=\"hljs-keyword\">match</span> value.<span class=\"hljs-title function_ invoke__\">cmp</span>(&amp;node.value) {\n            Ordering::Equal =&gt; <span class=\"hljs-literal\">false</span>,\n            Ordering::Less =&gt; <span class=\"hljs-title function_ invoke__\">insert</span>(&amp;<span class=\"hljs-keyword\">mut</span> node.left, value),\n            Ordering::Greater =&gt; <span class=\"hljs-title function_ invoke__\">insert</span>(&amp;<span class=\"hljs-keyword\">mut</span> node.right, value),\n        };\n        <span class=\"hljs-keyword\">if</span> inserted {\n            node.<span class=\"hljs-title function_ invoke__\">rebalance</span>();\n        }\n        inserted\n    } <span class=\"hljs-keyword\">else</span> {\n        *tree = <span class=\"hljs-title function_ invoke__\">Some</span>(Box::<span class=\"hljs-title function_ invoke__\">new</span>(AVLNode {\n            value,\n            height: <span class=\"hljs-number\">1</span>,\n            left: <span class=\"hljs-literal\">None</span>,\n            right: <span class=\"hljs-literal\">None</span>,\n        }));\n        <span class=\"hljs-literal\">true</span>\n    }\n}\n\n<span class=\"hljs-comment\">/// Recursive helper function for `AVLTree` deletion.</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">remove</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(tree: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;&gt;, value: &amp;T) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(node) = tree {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">removed</span> = <span class=\"hljs-keyword\">match</span> value.<span class=\"hljs-title function_ invoke__\">cmp</span>(&amp;node.value) {\n            Ordering::Less =&gt; <span class=\"hljs-title function_ invoke__\">remove</span>(&amp;<span class=\"hljs-keyword\">mut</span> node.left, value),\n            Ordering::Greater =&gt; <span class=\"hljs-title function_ invoke__\">remove</span>(&amp;<span class=\"hljs-keyword\">mut</span> node.right, value),\n            Ordering::Equal =&gt; {\n                *tree = <span class=\"hljs-title function_ invoke__\">match</span> (node.left.<span class=\"hljs-title function_ invoke__\">take</span>(), node.right.<span class=\"hljs-title function_ invoke__\">take</span>()) {\n                    (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>) =&gt; <span class=\"hljs-literal\">None</span>,\n                    (<span class=\"hljs-title function_ invoke__\">Some</span>(b), <span class=\"hljs-literal\">None</span>) | (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-title function_ invoke__\">Some</span>(b)) =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(b),\n                    (<span class=\"hljs-title function_ invoke__\">Some</span>(left), <span class=\"hljs-title function_ invoke__\">Some</span>(right)) =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-title function_ invoke__\">merge</span>(left, right)),\n                };\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n        };\n        <span class=\"hljs-keyword\">if</span> removed {\n            node.<span class=\"hljs-title function_ invoke__\">rebalance</span>();\n        }\n        removed\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-literal\">false</span>\n    }\n}\n\n<span class=\"hljs-comment\">/// Merges two trees and returns the root of the merged tree.</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">merge</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(left: <span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;, right: <span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">op_right</span> = <span class=\"hljs-title function_ invoke__\">Some</span>(right);\n    <span class=\"hljs-comment\">// Guaranteed not to panic since right has at least one node</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">root</span> = <span class=\"hljs-title function_ invoke__\">take_min</span>(&amp;<span class=\"hljs-keyword\">mut</span> op_right).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n    root.left = <span class=\"hljs-title function_ invoke__\">Some</span>(left);\n    root.right = op_right;\n    root.<span class=\"hljs-title function_ invoke__\">rebalance</span>();\n    root\n}\n\n<span class=\"hljs-comment\">/// Removes the smallest node from the tree, if one exists.</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">take_min</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(tree: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;&gt; {\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(<span class=\"hljs-keyword\">mut</span> node) = tree.<span class=\"hljs-title function_ invoke__\">take</span>() {\n        <span class=\"hljs-comment\">// Recurse along the left side</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(small) = <span class=\"hljs-title function_ invoke__\">take_min</span>(&amp;<span class=\"hljs-keyword\">mut</span> node.left) {\n            <span class=\"hljs-comment\">// Took the smallest from below; update this node and put it back in the tree</span>\n            node.<span class=\"hljs-title function_ invoke__\">rebalance</span>();\n            *tree = <span class=\"hljs-title function_ invoke__\">Some</span>(node);\n            <span class=\"hljs-title function_ invoke__\">Some</span>(small)\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// Take this node and replace it with its right child</span>\n            *tree = node.right.<span class=\"hljs-title function_ invoke__\">take</span>();\n            <span class=\"hljs-title function_ invoke__\">Some</span>(node)\n        }\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-literal\">None</span>\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt; AVLNode&lt;T&gt; {\n    <span class=\"hljs-comment\">/// Returns a reference to the left or right child.</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">child</span>(&amp;<span class=\"hljs-keyword\">self</span>, side: Side) <span class=\"hljs-punctuation\">-&gt;</span> &amp;<span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;&gt; {\n        <span class=\"hljs-keyword\">match</span> side {\n            Side::Left =&gt; &amp;<span class=\"hljs-keyword\">self</span>.left,\n            Side::Right =&gt; &amp;<span class=\"hljs-keyword\">self</span>.right,\n        }\n    }\n\n    <span class=\"hljs-comment\">/// Returns a mutable reference to the left or right child.</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">child_mut</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, side: Side) <span class=\"hljs-punctuation\">-&gt;</span> &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;&gt; {\n        <span class=\"hljs-keyword\">match</span> side {\n            Side::Left =&gt; &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.left,\n            Side::Right =&gt; &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.right,\n        }\n    }\n\n    <span class=\"hljs-comment\">/// Returns the height of the left or right subtree.</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">height</span>(&amp;<span class=\"hljs-keyword\">self</span>, side: Side) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">child</span>(side).<span class=\"hljs-title function_ invoke__\">as_ref</span>().<span class=\"hljs-title function_ invoke__\">map_or</span>(<span class=\"hljs-number\">0</span>, |n| n.height)\n    }\n\n    <span class=\"hljs-comment\">/// Returns the height difference between the left and right subtrees.</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">balance_factor</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">i8</span> {\n        <span class=\"hljs-keyword\">let</span> (left, right) = (<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">height</span>(Side::Left), <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">height</span>(Side::Right));\n        <span class=\"hljs-keyword\">if</span> left &lt; right {\n            (right - left) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i8</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            -((left - right) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i8</span>)\n        }\n    }\n\n    <span class=\"hljs-comment\">/// Recomputes the `height` field.</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">update_height</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">self</span>.height = <span class=\"hljs-number\">1</span> + <span class=\"hljs-title function_ invoke__\">max</span>(<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">height</span>(Side::Left), <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">height</span>(Side::Right));\n    }\n\n    <span class=\"hljs-comment\">/// Performs a left or right rotation.</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">rotate</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, side: Side) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">subtree</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">child_mut</span>(!side).<span class=\"hljs-title function_ invoke__\">take</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n        *<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">child_mut</span>(!side) = subtree.<span class=\"hljs-title function_ invoke__\">child_mut</span>(side).<span class=\"hljs-title function_ invoke__\">take</span>();\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">update_height</span>();\n        <span class=\"hljs-comment\">// Swap root and child nodes in memory</span>\n        mem::<span class=\"hljs-title function_ invoke__\">swap</span>(<span class=\"hljs-keyword\">self</span>, subtree.<span class=\"hljs-title function_ invoke__\">as_mut</span>());\n        <span class=\"hljs-comment\">// Set old root (subtree) as child of new root (self)</span>\n        *<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">child_mut</span>(side) = <span class=\"hljs-title function_ invoke__\">Some</span>(subtree);\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">update_height</span>();\n    }\n\n    <span class=\"hljs-comment\">/// Performs left or right tree rotations to balance this node.</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">rebalance</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">update_height</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">side</span> = <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">balance_factor</span>() {\n            -<span class=\"hljs-number\">2</span> =&gt; Side::Left,\n            <span class=\"hljs-number\">2</span> =&gt; Side::Right,\n            _ =&gt; <span class=\"hljs-keyword\">return</span>,\n        };\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">subtree</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">child_mut</span>(side).<span class=\"hljs-title function_ invoke__\">as_mut</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n        <span class=\"hljs-comment\">// Left-Right and Right-Left require rotation of heavy subtree</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> (Side::Left, <span class=\"hljs-number\">1</span>) | (Side::Right, -<span class=\"hljs-number\">1</span>) = (side, subtree.<span class=\"hljs-title function_ invoke__\">balance_factor</span>()) {\n            subtree.<span class=\"hljs-title function_ invoke__\">rotate</span>(side);\n        }\n        <span class=\"hljs-comment\">// Rotate in opposite direction of heavy side</span>\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">rotate</span>(!side);\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt; <span class=\"hljs-built_in\">Default</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">AVLTree</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">default</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">Self</span>::<span class=\"hljs-title function_ invoke__\">new</span>()\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Not</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Side</span> {\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Output</span> = Side;\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">not</span>(<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span>::Output {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span> {\n            Side::Left =&gt; Side::Right,\n            Side::Right =&gt; Side::Left,\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt; FromIterator&lt;T&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">AVLTree</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">from_iter</span>&lt;I: <span class=\"hljs-built_in\">IntoIterator</span>&lt;Item = T&gt;&gt;(iter: I) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">tree</span> = AVLTree::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-keyword\">in</span> iter {\n            tree.<span class=\"hljs-title function_ invoke__\">insert</span>(value);\n        }\n        tree\n    }\n}\n\n<span class=\"hljs-comment\">/// An iterator over the nodes of an `AVLTree`.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// This struct is created by the `node_iter` method of `AVLTree`.</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">NodeIter</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T: <span class=\"hljs-built_in\">Ord</span>&gt; {\n    stack: <span class=\"hljs-type\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">&#x27;a</span> AVLNode&lt;T&gt;&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T: <span class=\"hljs-built_in\">Ord</span>&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">NodeIter</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T&gt; {\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Item</span> = &amp;<span class=\"hljs-symbol\">&#x27;a</span> AVLNode&lt;T&gt;;\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">next</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-keyword\">Self</span>::Item&gt; {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(node) = <span class=\"hljs-keyword\">self</span>.stack.<span class=\"hljs-title function_ invoke__\">pop</span>() {\n            <span class=\"hljs-comment\">// Push left path of right subtree to stack</span>\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">child</span> = &amp;node.right;\n            <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(subtree) = child {\n                <span class=\"hljs-keyword\">self</span>.stack.<span class=\"hljs-title function_ invoke__\">push</span>(subtree.<span class=\"hljs-title function_ invoke__\">as_ref</span>());\n                child = &amp;subtree.left;\n            }\n            <span class=\"hljs-title function_ invoke__\">Some</span>(node)\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-literal\">None</span>\n        }\n    }\n}\n\n<span class=\"hljs-comment\">/// An iterator over the items of an `AVLTree`.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// This struct is created by the `iter` method of `AVLTree`.</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Iter</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T: <span class=\"hljs-built_in\">Ord</span>&gt; {\n    node_iter: NodeIter&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T: <span class=\"hljs-built_in\">Ord</span>&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Iter</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T&gt; {\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Item</span> = &amp;<span class=\"hljs-symbol\">&#x27;a</span> T;\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">next</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;&amp;<span class=\"hljs-symbol\">&#x27;a</span> T&gt; {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.node_iter.<span class=\"hljs-title function_ invoke__\">next</span>() {\n            <span class=\"hljs-title function_ invoke__\">Some</span>(node) =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;node.value),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\n        }\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::AVLTree;\n\n    <span class=\"hljs-comment\">/// Returns `true` if all nodes in the tree are balanced.</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">is_balanced</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(tree: &amp;AVLTree&lt;T&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        tree.<span class=\"hljs-title function_ invoke__\">node_iter</span>()\n            .<span class=\"hljs-title function_ invoke__\">all</span>(|n| (-<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">contains</span>(&amp;n.<span class=\"hljs-title function_ invoke__\">balance_factor</span>()))\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">len</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">tree</span>: AVLTree&lt;_&gt; = (<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">4</span>).<span class=\"hljs-title function_ invoke__\">collect</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(tree.<span class=\"hljs-title function_ invoke__\">len</span>(), <span class=\"hljs-number\">3</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">contains</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">tree</span>: AVLTree&lt;_&gt; = (<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">4</span>).<span class=\"hljs-title function_ invoke__\">collect</span>();\n        <span class=\"hljs-built_in\">assert!</span>(tree.<span class=\"hljs-title function_ invoke__\">contains</span>(&amp;<span class=\"hljs-number\">1</span>));\n        <span class=\"hljs-built_in\">assert!</span>(!tree.<span class=\"hljs-title function_ invoke__\">contains</span>(&amp;<span class=\"hljs-number\">4</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">tree</span> = AVLTree::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-comment\">// First insert succeeds</span>\n        <span class=\"hljs-built_in\">assert!</span>(tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">1</span>));\n        <span class=\"hljs-comment\">// Second insert fails</span>\n        <span class=\"hljs-built_in\">assert!</span>(!tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">1</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">remove</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">tree</span>: AVLTree&lt;_&gt; = (<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">8</span>).<span class=\"hljs-title function_ invoke__\">collect</span>();\n        <span class=\"hljs-comment\">// First remove succeeds</span>\n        <span class=\"hljs-built_in\">assert!</span>(tree.<span class=\"hljs-title function_ invoke__\">remove</span>(&amp;<span class=\"hljs-number\">4</span>));\n        <span class=\"hljs-comment\">// Second remove fails</span>\n        <span class=\"hljs-built_in\">assert!</span>(!tree.<span class=\"hljs-title function_ invoke__\">remove</span>(&amp;<span class=\"hljs-number\">4</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">sorted</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">tree</span>: AVLTree&lt;_&gt; = (<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">8</span>).<span class=\"hljs-title function_ invoke__\">rev</span>().<span class=\"hljs-title function_ invoke__\">collect</span>();\n        <span class=\"hljs-built_in\">assert!</span>((<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">8</span>).<span class=\"hljs-title function_ invoke__\">eq</span>(tree.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">map</span>(|&amp;x| x)));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">balanced</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">tree</span>: AVLTree&lt;_&gt; = (<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">8</span>).<span class=\"hljs-title function_ invoke__\">collect</span>();\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_balanced</span>(&amp;tree));\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">8</span> {\n            tree.<span class=\"hljs-title function_ invoke__\">remove</span>(&amp;x);\n            <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_balanced</span>(&amp;tree));\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 1
    },
    {
      "name": "lakhan_nad",
      "email": "lakhannad1999@gmail.com",
      "commits": 1
    },
    {
      "name": "Ryan Lowe",
      "email": "rlowe13@me.com",
      "commits": 1
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Mikel Woo",
      "email": "asianwoo919@yahoo.com",
      "commits": 1
    },
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 1
    },
    {
      "name": "James Mc Dermott",
      "email": "james.mcdermott89@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Keshav Bohra",
      "email": "keshav2016@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Moetez Skouri",
      "email": "moetezskouri@Moetezs-MacBook.local",
      "commits": 1
    },
    {
      "name": "Leonardo Galves",
      "email": "leonardogalves1@hotmail.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "unknown",
      "email": "cnddhks846@naver.com",
      "commits": 1
    },
    {
      "name": "Hao LI",
      "email": "8520588+Leo-LiHao@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Markgolzh",
      "email": "1134386961@qq.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Mickaël Schoentgen",
      "email": "contact@tiger-222.fr",
      "commits": 1
    },
    {
      "name": "Rahul Raj",
      "email": "43320722+rraj798@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Shruti Sheoran",
      "email": "shruti.sheoran03@gmail.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    },
    {
      "name": "Awfifcuihc",
      "email": "21129044@zju.edu.cn",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}