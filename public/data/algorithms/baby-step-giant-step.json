{
  "slug": "baby-step-giant-step",
  "name": "Baby Step Giant Step",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/math/baby_step_giant_step.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/math/baby_step_giant_step.rs",
      "code": "<span class=\"hljs-comment\">/// Baby-step Giant-step algorithm</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Solving discrete logarithm problem:</span>\n<span class=\"hljs-comment\">///     a^x = b (mod n) , with respect to gcd(a, n) == 1</span>\n<span class=\"hljs-comment\">/// with O(sqrt(n)) time complexity.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Wikipedia reference: https://en.wikipedia.org/wiki/Baby-step_giant-step</span>\n<span class=\"hljs-comment\">/// When a is the primitive root modulo n, the answer is unique.</span>\n<span class=\"hljs-comment\">/// Otherwise it will return the smallest positive solution</span>\n<span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">baby_step_giant_step</span>(a: <span class=\"hljs-type\">usize</span>, b: <span class=\"hljs-type\">usize</span>, n: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">usize</span>&gt; {\n    <span class=\"hljs-keyword\">if</span> b == <span class=\"hljs-number\">1</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Some</span>(n);\n    }\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">h_map</span> = HashMap::<span class=\"hljs-title function_ invoke__\">new</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">m</span> = (n <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f64</span>).<span class=\"hljs-title function_ invoke__\">sqrt</span>().<span class=\"hljs-title function_ invoke__\">ceil</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>;\n    <span class=\"hljs-comment\">// baby step</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">step</span> = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..m {\n        h_map.<span class=\"hljs-title function_ invoke__\">insert</span>((step * b) % n, i);\n        step = (step * a) % n;\n    }\n    <span class=\"hljs-comment\">// Now step = a^m (mod n), giant step</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">giant_step</span> = step;\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> (m..=n).<span class=\"hljs-title function_ invoke__\">step_by</span>(m) {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(v) = h_map.<span class=\"hljs-title function_ invoke__\">get</span>(&amp;step) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Some</span>(i - v);\n        }\n        step = (step * giant_step) % n;\n    }\n    <span class=\"hljs-literal\">None</span>\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::baby_step_giant_step;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">small_numbers</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">baby_step_giant_step</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>), <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">2</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">baby_step_giant_step</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">83</span>, <span class=\"hljs-number\">100</span>), <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">9</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">primitive_root_tests</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">baby_step_giant_step</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">311401496</span>, <span class=\"hljs-number\">998244353</span>),\n            <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">178105253</span>)\n        );\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">baby_step_giant_step</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">324637211</span>, <span class=\"hljs-number\">1000000007</span>),\n            <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">976653449</span>)\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">random_numbers</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">baby_step_giant_step</span>(<span class=\"hljs-number\">174857</span>, <span class=\"hljs-number\">48604</span>, <span class=\"hljs-number\">150991</span>), <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">177</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">baby_step_giant_step</span>(<span class=\"hljs-number\">912103</span>, <span class=\"hljs-number\">53821</span>, <span class=\"hljs-number\">75401</span>), <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">2644</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">baby_step_giant_step</span>(<span class=\"hljs-number\">448447</span>, <span class=\"hljs-number\">365819</span>, <span class=\"hljs-number\">671851</span>), <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">23242</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">baby_step_giant_step</span>(<span class=\"hljs-number\">220757103</span>, <span class=\"hljs-number\">92430653</span>, <span class=\"hljs-number\">434948279</span>),\n            <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">862704</span>)\n        );\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">baby_step_giant_step</span>(<span class=\"hljs-number\">176908456</span>, <span class=\"hljs-number\">23538399</span>, <span class=\"hljs-number\">142357679</span>),\n            <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">14215560</span>)\n        );\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "itewqq",
      "email": "30570177+itewqq@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}