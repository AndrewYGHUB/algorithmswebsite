{
  "slug": "babylonian-sqrt",
  "name": "Babylonian Sqrt",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "julia": {
      "dir": "src/math/babylonian_sqrt.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/math/babylonian_sqrt.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n    bab_sqrt(S::Real; tolerance = 1e-6, guess = nothing)\n\nThe Babylonian Method of calculating a square root is a simple iterative method to determine square roots. A full description of the algorithm can be found on [Wikipedia](https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n\n# Arguments:\n- `S`: The number to calculate the square root for.\n\n# Positional Arguments\n- `tolerance`: How close the square of the square root needs to be from the input value. `abs(S - xn^2) &lt; tolerance`\n- `guess`: The initial value to use for `xn`\n\n# Examples/Tests \n```julia\njulia&gt; bab_sqrt(100)\n10.000000000107445\n\njulia&gt; bab_sqrt(100, guess = 15)\n10.000000000131072\n\njulia&gt; bab_sqrt(π, guess = 1)\n1.7724538555800293\n\njulia&gt; bab_sqrt(π, guess = 1, tolerance = 2)\n2.0707963267948966\n```\n\n# Algorithm: \n\n```julia\nwhile tolerance &lt;= abs(xn^2 - S)\n    xn = (1 / 2) * (xn + S / xn)\nend\n```\n\n# References:\n[Methods of computing square roots](https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n\n```\n\n# Contributed by:- [Anson Biggs](https://ansonbiggs.com) \n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> bab_sqrt(S::<span class=\"hljs-built_in\">Real</span>; tolerance = <span class=\"hljs-number\">1e-6</span>, guess = <span class=\"hljs-literal\">nothing</span>)\n\n    <span class=\"hljs-comment\"># Can only calculate for positive numbers</span>\n    <span class=\"hljs-keyword\">if</span> S &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;Input must be greater than zero&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n\n    xn = guess\n    <span class=\"hljs-keyword\">if</span> xn === <span class=\"hljs-literal\">nothing</span>\n        xn = S / <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">elseif</span> xn &lt; <span class=\"hljs-number\">0</span>\n        xn = abs(xn)\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-keyword\">while</span> tolerance &lt;= abs(xn^<span class=\"hljs-number\">2</span> - S)\n        xn = (<span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span>) * (xn + S / xn)\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> xn\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Ihjass Thasbekha",
      "email": "44056715+Ihjass@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Anson Biggs",
      "email": "ansonleebiggs@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}