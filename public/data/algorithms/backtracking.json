{
  "slug": "backtracking",
  "name": "Backtracking",
  "categories": [
    "graphs",
    "coloring"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "graph/coloring/backtracking.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/graph/coloring/backtracking.go",
      "code": "<span class=\"hljs-comment\">// This file contains the graph coloring implementation using backtracking</span>\n<span class=\"hljs-comment\">// Author(s): [Shivam](https://github.com/Shivam010)</span>\n\n<span class=\"hljs-keyword\">package</span> coloring\n\n<span class=\"hljs-comment\">// ColorUsingBacktracking will return the Color of each vertex and the</span>\n<span class=\"hljs-comment\">// total number of different colors used, using backtracking</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *Graph)</span></span> ColorUsingBacktracking() (<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]Color, <span class=\"hljs-type\">int</span>) {\n\tvertexColors := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]Color, g.vertices)\n\tg.colorVertex(<span class=\"hljs-number\">0</span>, vertexColors)\n\n\tcolorsUsed := <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">for</span> _, cr := <span class=\"hljs-keyword\">range</span> vertexColors {\n\t\t<span class=\"hljs-keyword\">if</span> colorsUsed &lt; <span class=\"hljs-type\">int</span>(cr) {\n\t\t\tcolorsUsed = <span class=\"hljs-type\">int</span>(cr)\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> vertexColors, colorsUsed\n}\n\n<span class=\"hljs-comment\">// colorVertex will try to color provided vertex, v</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *Graph)</span></span> colorVertex(v <span class=\"hljs-type\">int</span>, color <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]Color) <span class=\"hljs-type\">bool</span> {\n\t<span class=\"hljs-comment\">// If all vertices are colored, the colors store will be completely filled.</span>\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(color) == g.vertices {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n\t}\n\n\t<span class=\"hljs-comment\">// As the upper bound of no. of colors is the no. of vertices in graph,</span>\n\t<span class=\"hljs-comment\">// try assigning each color to the vertex v</span>\n\t<span class=\"hljs-keyword\">for</span> cr := Color(<span class=\"hljs-number\">1</span>); cr &lt;= Color(g.vertices); cr++ {\n\t\t<span class=\"hljs-comment\">// Use the color, cr for vertex, v if it is safe to use, by</span>\n\t\t<span class=\"hljs-comment\">// checking its neighbours</span>\n\t\tsafe := <span class=\"hljs-literal\">true</span>\n\t\t<span class=\"hljs-keyword\">for</span> nb := <span class=\"hljs-keyword\">range</span> g.edges[v] {\n\t\t\t<span class=\"hljs-comment\">// cr, color is not safe if color of nb, crnb is not equal to cr</span>\n\t\t\t<span class=\"hljs-keyword\">if</span> crnb, ok := color[nb]; ok &amp;&amp; crnb == cr {\n\t\t\t\tsafe = <span class=\"hljs-literal\">false</span>\n\t\t\t\t<span class=\"hljs-keyword\">break</span>\n\t\t\t}\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> safe {\n\t\t\tcolor[v] = cr\n\t\t\t<span class=\"hljs-keyword\">if</span> g.colorVertex(v+<span class=\"hljs-number\">1</span>, color) {\n\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n\t\t\t}\n\t\t\t<span class=\"hljs-built_in\">delete</span>(color, v)\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n}\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Problems/NQueens/BacktrackingNQueensSolver.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/Algorithms/Problems/NQueens/BacktrackingNQueensSolver.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Problems.NQueens</span>\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BacktrackingNQueensSolver</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Solves N-Queen Problem given a n dimension chessboard and using backtracking with recursion algorithm.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     If we find a dead-end within or current solution we go back and try another position for queen.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;n&quot;&gt;</span>Number of rows.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>All solutions.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-keyword\">public</span> IEnumerable&lt;<span class=\"hljs-built_in\">bool</span>[,]&gt; BacktrackSolve(<span class=\"hljs-built_in\">int</span> n)\n        {\n            <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-keyword\">nameof</span>(n));\n            }\n\n            <span class=\"hljs-keyword\">return</span> BacktrackSolve(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">bool</span>[n, n], <span class=\"hljs-number\">0</span>);\n        }\n\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> IEnumerable&lt;<span class=\"hljs-built_in\">bool</span>[,]&gt; BacktrackSolve(<span class=\"hljs-built_in\">bool</span>[,] board, <span class=\"hljs-built_in\">int</span> col)\n        {\n            <span class=\"hljs-keyword\">var</span> solutions = col &lt; board.GetLength(<span class=\"hljs-number\">0</span>) - <span class=\"hljs-number\">1</span>\n                ? HandleIntermediateColumn(board, col)\n                : HandleLastColumn(board);\n            <span class=\"hljs-keyword\">return</span> solutions;\n        }\n\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> IEnumerable&lt;<span class=\"hljs-built_in\">bool</span>[,]&gt; HandleIntermediateColumn(<span class=\"hljs-built_in\">bool</span>[,] board, <span class=\"hljs-built_in\">int</span> col)\n        {\n            <span class=\"hljs-comment\">// To start placing queens on possible spaces within the board.</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; board.GetLength(<span class=\"hljs-number\">0</span>); i++)\n            {\n                <span class=\"hljs-keyword\">if</span> (CanPlace(board, i, col))\n                {\n                    board[i, col] = <span class=\"hljs-literal\">true</span>;\n\n                    <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-function\"><span class=\"hljs-keyword\">var</span> solution <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">BacktrackSolve</span>(<span class=\"hljs-params\">board, col + <span class=\"hljs-number\">1</span></span>))</span>\n                    {\n                        <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">return</span> solution;\n                    }\n\n                    board[i, col] = <span class=\"hljs-literal\">false</span>;\n                }\n            }\n        }\n\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> IEnumerable&lt;<span class=\"hljs-built_in\">bool</span>[,]&gt; HandleLastColumn(<span class=\"hljs-built_in\">bool</span>[,] board)\n        {\n            <span class=\"hljs-keyword\">var</span> n = board.GetLength(<span class=\"hljs-number\">0</span>);\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n            {\n                <span class=\"hljs-keyword\">if</span> (CanPlace(board, i, n - <span class=\"hljs-number\">1</span>))\n                {\n                    board[i, n - <span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">true</span>;\n\n                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title\">return</span> (<span class=\"hljs-params\"><span class=\"hljs-built_in\">bool</span>[,]</span>)board.<span class=\"hljs-title\">Clone</span>()</span>;\n\n                    board[i, n - <span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">false</span>;\n                }\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Checks whether current queen can be placed in current position,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     outside attacking range of another queen.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;board&quot;&gt;</span>Source board.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;row&quot;&gt;</span>Row coordinate.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;col&quot;&gt;</span>Col coordinate.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>true if queen can be placed in given chessboard coordinates; false otherwise.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">CanPlace</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">bool</span>[,] board, <span class=\"hljs-built_in\">int</span> row, <span class=\"hljs-built_in\">int</span> col</span>)</span>\n        {\n            <span class=\"hljs-comment\">// To check whether there are any queens on current row.</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; col; i++)\n            {\n                <span class=\"hljs-keyword\">if</span> (board[row, i])\n                {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n            }\n\n            <span class=\"hljs-comment\">// To check diagonal attack top-left range.</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = row - <span class=\"hljs-number\">1</span>, j = col - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; j &gt;= <span class=\"hljs-number\">0</span>; i--, j--)\n            {\n                <span class=\"hljs-keyword\">if</span> (board[i, j])\n                {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n            }\n\n            <span class=\"hljs-comment\">// To check diagonal attack bottom-left range.</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = row + <span class=\"hljs-number\">1</span>, j = col - <span class=\"hljs-number\">1</span>; j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; i &lt; board.GetLength(<span class=\"hljs-number\">0</span>); i++, j--)\n            {\n                <span class=\"hljs-keyword\">if</span> (board[i, j])\n                {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n            }\n\n            <span class=\"hljs-comment\">// Return true if it can use position.</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Shivam Rathore",
      "email": "shivam.rathore010@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}