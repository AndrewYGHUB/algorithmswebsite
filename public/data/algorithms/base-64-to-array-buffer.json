{
  "slug": "base-64-to-array-buffer",
  "name": "Base 64 To Array Buffer",
  "categories": [
    "conversions"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Conversions/Base64ToArrayBuffer.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Conversions/Base64ToArrayBuffer.js",
      "code": "<span class=\"hljs-comment\">// About base64: https://en.wikipedia.org/wiki/Base64</span>\n\n<span class=\"hljs-comment\">/**\n * Converts a base64 string to an array of bytes\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} b64 A base64 string\n * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">ArrayBuffer</span>} An ArrayBuffer representing the bytes encoded by the base64 string\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">base64ToBuffer</span> (b64) {\n  <span class=\"hljs-comment\">// The base64 encoding uses the following set of characters to encode any binary data as text</span>\n  <span class=\"hljs-keyword\">const</span> base64Table = <span class=\"hljs-string\">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span>\n  <span class=\"hljs-comment\">// Find the index of char &#x27;=&#x27; first occurrence</span>\n  <span class=\"hljs-keyword\">const</span> paddingIdx = b64.<span class=\"hljs-title function_\">indexOf</span>(<span class=\"hljs-string\">&#x27;=&#x27;</span>)\n  <span class=\"hljs-comment\">// Remove padding chars from base64 string, if there are any</span>\n  <span class=\"hljs-keyword\">const</span> b64NoPadding = paddingIdx !== -<span class=\"hljs-number\">1</span> ? b64.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, paddingIdx) : b64\n  <span class=\"hljs-comment\">// Calculate the length of the result buffer</span>\n  <span class=\"hljs-keyword\">const</span> bufferLength = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>((b64NoPadding.<span class=\"hljs-property\">length</span> * <span class=\"hljs-number\">6</span>) / <span class=\"hljs-number\">8</span>)\n  <span class=\"hljs-comment\">// Create the result buffer</span>\n  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayBuffer</span>(bufferLength)\n  <span class=\"hljs-comment\">// Create an instance of Uint8Array, to write to the `result` buffer</span>\n  <span class=\"hljs-keyword\">const</span> byteView = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Uint8Array</span>(result)\n\n  <span class=\"hljs-comment\">// Loop through all chars in the base64 string, in increments of 4 chars, and in increments of 3 bytes</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>; i &lt; b64NoPadding.<span class=\"hljs-property\">length</span>; i += <span class=\"hljs-number\">4</span>, j += <span class=\"hljs-number\">3</span>) {\n    <span class=\"hljs-comment\">// Get the index of the next 4 base64 chars</span>\n    <span class=\"hljs-keyword\">const</span> b64Char1 = base64Table.<span class=\"hljs-title function_\">indexOf</span>(b64NoPadding[i])\n    <span class=\"hljs-keyword\">const</span> b64Char2 = base64Table.<span class=\"hljs-title function_\">indexOf</span>(b64NoPadding[i + <span class=\"hljs-number\">1</span>])\n    <span class=\"hljs-keyword\">let</span> b64Char3 = base64Table.<span class=\"hljs-title function_\">indexOf</span>(b64NoPadding[i + <span class=\"hljs-number\">2</span>])\n    <span class=\"hljs-keyword\">let</span> b64Char4 = base64Table.<span class=\"hljs-title function_\">indexOf</span>(b64NoPadding[i + <span class=\"hljs-number\">3</span>])\n\n    <span class=\"hljs-comment\">// If base64 chars 3 and 4 don&#x27;t exit, then set them to 0</span>\n    <span class=\"hljs-keyword\">if</span> (b64Char3 === -<span class=\"hljs-number\">1</span>) b64Char3 = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">if</span> (b64Char4 === -<span class=\"hljs-number\">1</span>) b64Char4 = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\">// Calculate the next 3 bytes</span>\n    <span class=\"hljs-keyword\">const</span> byte1 = (b64Char1 &lt;&lt; <span class=\"hljs-number\">2</span>) + ((b64Char2 &amp; <span class=\"hljs-number\">48</span>) &gt;&gt; <span class=\"hljs-number\">4</span>)\n    <span class=\"hljs-keyword\">const</span> byte2 = ((b64Char2 &amp; <span class=\"hljs-number\">15</span>) &lt;&lt; <span class=\"hljs-number\">4</span>) + ((b64Char3 &amp; <span class=\"hljs-number\">60</span>) &gt;&gt; <span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">const</span> byte3 = ((b64Char3 &amp; <span class=\"hljs-number\">3</span>) &lt;&lt; <span class=\"hljs-number\">6</span>) + b64Char4\n\n    byteView[j] = byte1\n    byteView[j + <span class=\"hljs-number\">1</span>] = byte2\n    byteView[j + <span class=\"hljs-number\">2</span>] = byte3\n  }\n\n  <span class=\"hljs-keyword\">return</span> result\n}\n\n<span class=\"hljs-keyword\">export</span> { base64ToBuffer }\n"
    }
  },
  "contributors": [
    {
      "name": "Luis De Anda",
      "email": "ldeandac16@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}