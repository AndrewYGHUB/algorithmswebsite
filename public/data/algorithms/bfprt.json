{
  "slug": "bfprt",
  "name": "BFPRT",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/others/BFPRT.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/others/BFPRT.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.others;\n\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n\n<span class=\"hljs-comment\">/**\n * BFPRT algorithm.\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BFPRT</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] getMinKNumsByBFPRT(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> k) {\n        <span class=\"hljs-keyword\">if</span> (k &lt; <span class=\"hljs-number\">1</span> || k &gt; arr.length) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">minKth</span> <span class=\"hljs-operator\">=</span> getMinKthByBFPRT(arr, k);\n        <span class=\"hljs-type\">int</span>[] res = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[k];\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; arr.length; i++) {\n            <span class=\"hljs-keyword\">if</span> (arr[i] &lt; minKth) {\n                res[index++] = arr[i];\n            }\n        }\n        <span class=\"hljs-keyword\">for</span> (; index != res.length; index++) {\n            res[index] = minKth;\n        }\n        <span class=\"hljs-keyword\">return</span> res;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getMinKthByBFPRT</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> k)</span> {\n        <span class=\"hljs-type\">int</span>[] copyArr = copyArray(arr);\n        <span class=\"hljs-keyword\">return</span> bfprt(copyArr, <span class=\"hljs-number\">0</span>, copyArr.length - <span class=\"hljs-number\">1</span>, k - <span class=\"hljs-number\">1</span>);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] copyArray(<span class=\"hljs-type\">int</span>[] arr) {\n        <span class=\"hljs-type\">int</span>[] copyArr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[arr.length];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; arr.length; i++) {\n            copyArr[i] = arr[i];\n        }\n        <span class=\"hljs-keyword\">return</span> copyArr;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">bfprt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> begin, <span class=\"hljs-type\">int</span> end, <span class=\"hljs-type\">int</span> i)</span> {\n        <span class=\"hljs-keyword\">if</span> (begin == end) {\n            <span class=\"hljs-keyword\">return</span> arr[begin];\n        }\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pivot</span> <span class=\"hljs-operator\">=</span> medianOfMedians(arr, begin, end);\n        <span class=\"hljs-type\">int</span>[] pivotRange = partition(arr, begin, end, pivot);\n        <span class=\"hljs-keyword\">if</span> (i &gt;= pivotRange[<span class=\"hljs-number\">0</span>] &amp;&amp; i &lt;= pivotRange[<span class=\"hljs-number\">1</span>]) {\n            <span class=\"hljs-keyword\">return</span> arr[i];\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i &lt; pivotRange[<span class=\"hljs-number\">0</span>]) {\n            <span class=\"hljs-keyword\">return</span> bfprt(arr, begin, pivotRange[<span class=\"hljs-number\">0</span>] - <span class=\"hljs-number\">1</span>, i);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> bfprt(arr, pivotRange[<span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>, end, i);\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * wikipedia: https://en.wikipedia.org/wiki/Median_of_medians .\n     *\n     * <span class=\"hljs-doctag\">@param</span> arr an array.\n     * <span class=\"hljs-doctag\">@param</span> begin begin num.\n     * <span class=\"hljs-doctag\">@param</span> end end num.\n     * <span class=\"hljs-doctag\">@return</span> median of medians.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">medianOfMedians</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> begin, <span class=\"hljs-type\">int</span> end)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> end - begin + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">offset</span> <span class=\"hljs-operator\">=</span> num % <span class=\"hljs-number\">5</span> == <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-type\">int</span>[] mArr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[num / <span class=\"hljs-number\">5</span> + offset];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; mArr.length; i++) {\n            mArr[i] = getMedian(arr, begin + i * <span class=\"hljs-number\">5</span>, Math.min(end, begin + i * <span class=\"hljs-number\">5</span> + <span class=\"hljs-number\">4</span>));\n        }\n        <span class=\"hljs-keyword\">return</span> bfprt(mArr, <span class=\"hljs-number\">0</span>, mArr.length - <span class=\"hljs-number\">1</span>, mArr.length / <span class=\"hljs-number\">2</span>);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">swap</span> <span class=\"hljs-operator\">=</span> arr[i];\n        arr[i] = arr[j];\n        arr[j] = swap;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] partition(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> begin, <span class=\"hljs-type\">int</span> end, <span class=\"hljs-type\">int</span> num) {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">small</span> <span class=\"hljs-operator\">=</span> begin - <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">cur</span> <span class=\"hljs-operator\">=</span> begin;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">big</span> <span class=\"hljs-operator\">=</span> end + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">while</span> (cur != big) {\n            <span class=\"hljs-keyword\">if</span> (arr[cur] &lt; num) {\n                swap(arr, ++small, cur++);\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (arr[cur] &gt; num) {\n                swap(arr, --big, cur);\n            } <span class=\"hljs-keyword\">else</span> {\n                cur++;\n            }\n        }\n        <span class=\"hljs-type\">int</span>[] pivotRange = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">2</span>];\n        pivotRange[<span class=\"hljs-number\">0</span>] = small + <span class=\"hljs-number\">1</span>;\n        pivotRange[<span class=\"hljs-number\">1</span>] = big - <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">return</span> pivotRange;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getMedian</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> begin, <span class=\"hljs-type\">int</span> end)</span> {\n        insertionSort(arr, begin, end);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span> begin + end;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mid</span> <span class=\"hljs-operator\">=</span> sum / <span class=\"hljs-number\">2</span> + (sum % <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-keyword\">return</span> arr[mid];\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertionSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> begin, <span class=\"hljs-type\">int</span> end)</span> {\n        <span class=\"hljs-keyword\">if</span> (arr == <span class=\"hljs-literal\">null</span> || arr.length &lt; <span class=\"hljs-number\">2</span>) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> begin + <span class=\"hljs-number\">1</span>; i != end + <span class=\"hljs-number\">1</span>; i++) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> i; j != begin; j--) {\n                <span class=\"hljs-keyword\">if</span> (arr[j - <span class=\"hljs-number\">1</span>] &gt; arr[j]) {\n                    swap(arr, j - <span class=\"hljs-number\">1</span>, j);\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n            }\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">int</span>[] arr = {<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>};\n        <span class=\"hljs-type\">int</span>[] minK = getMinKNumsByBFPRT(arr, <span class=\"hljs-number\">5</span>);\n        System.out.println(Arrays.toString(minK));\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "めぐみん",
      "email": "59683877+AbnerHung@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}