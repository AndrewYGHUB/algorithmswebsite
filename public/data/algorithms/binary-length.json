{
  "slug": "binary-length",
  "name": "Binary Length",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "julia": {
      "dir": "src/strings/binary_length.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/strings/binary_length.jl",
      "code": "<span class=\"hljs-keyword\">function</span> bin_length_long(s::<span class=\"hljs-built_in\">AbstractString</span>)\r\n    binNum = parse(<span class=\"hljs-built_in\">UInt</span>, s)\r\n\r\n    finNum = <span class=\"hljs-number\">0</span>\r\n    seq = <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:binNum\r\n        <span class=\"hljs-keyword\">if</span> (i == seq)\r\n            finNum += <span class=\"hljs-number\">1</span>\r\n            seq *= <span class=\"hljs-number\">2</span>\r\n        <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> string(finNum)\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThis algorithm features use of the OEIS entry A070939 - \r\nlength of Binary Representation of n. It finds \r\nthe length of any binary number and returns said length.\r\n  \r\n https://oeis.org/A070939\r\n\r\nThis function, as believed, is O(n)\r\n\r\nThe idea follows that the sequence is dependent on \r\na repeating pattern of 2. Short for sequence, seq is the\r\nnumber of digits required before an increase in finNum \r\nor final number as seen here with the first few\r\niterations - i on the left, final number on the right:\r\n\r\n1 : 1 \r\n2 : 2\r\n3 : 2\r\n4 : 3\r\n5 : 3\r\n6 : 3\r\n7 : 3\r\n8 : 4\r\ncont.\r\n\r\nAs you can see, for every version of i, there is an appropriate\r\nmodified number that only repeats for the sequence of the last\r\ndoubled amount.\r\n\r\n#Contributions:\r\nContributed by F35H: https://github.com/F35H\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">function</span> bin_length_short(s::<span class=\"hljs-built_in\">AbstractString</span>)\r\n    binNum = parse(<span class=\"hljs-built_in\">UInt</span>, s)\r\n\r\n    finNum = <span class=\"hljs-number\">0</span>\r\n    i = <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> i &lt;= binNum\r\n        i *= <span class=\"hljs-number\">2</span>\r\n        finNum += <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> string(finNum)\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThis algorithm features use of the OEIS entry A070939 - \r\nlength of Binary Representation of n. It finds \r\nthe length of any binary number and returns said length.\r\n  \r\n https://oeis.org/A070939\r\n\r\nThis function, as believed, is O(n)\r\n\r\nThe idea follows that the sequence is dependent on \r\na repeating pattern of 2. The final number being finNum\r\nincreases on every doubling of i.\r\n\r\n1 : 1 \r\n2 : 2\r\n3 : 2\r\n4 : 3\r\n5 : 3\r\n6 : 3\r\n7 : 3\r\n8 : 4\r\ncont.\r\n\r\nAs you can see, for every version of i, there is an appropriate\r\nfinal number that iterates on every doubling of i.\r\n\r\nContributors:\r\n- [F45H](https://github.com/F35H)\r\n&quot;&quot;&quot;</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Soc Virnyl S. Estela",
      "email": "socvirnyl.estela@gmail.com",
      "commits": 1
    },
    {
      "name": "Michael (Poetry) Flynn",
      "email": "70995865+F35H@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}