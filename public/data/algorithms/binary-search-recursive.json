{
  "slug": "binary-search-recursive",
  "name": "Binary Search Recursive",
  "categories": [
    "searches"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/searching/binary_search_recursive.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/searching/binary_search_recursive.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">binary_search_rec</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(\n    list_of_items: &amp;[T],\n    target: &amp;T,\n    left: &amp;<span class=\"hljs-type\">usize</span>,\n    right: &amp;<span class=\"hljs-type\">usize</span>,\n) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">usize</span>&gt; {\n    <span class=\"hljs-keyword\">if</span> left &gt;= right {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>;\n    }\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">is_asc</span> = list_of_items[<span class=\"hljs-number\">0</span>] &lt; list_of_items[list_of_items.<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">1</span>];\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">middle</span>: <span class=\"hljs-type\">usize</span> = left + (right - left) / <span class=\"hljs-number\">2</span>;\n\n    <span class=\"hljs-keyword\">if</span> is_asc {\n        <span class=\"hljs-keyword\">match</span> target.<span class=\"hljs-title function_ invoke__\">cmp</span>(&amp;list_of_items[middle]) {\n            Ordering::Less =&gt; <span class=\"hljs-title function_ invoke__\">binary_search_rec</span>(list_of_items, target, left, &amp;middle),\n            Ordering::Greater =&gt; <span class=\"hljs-title function_ invoke__\">binary_search_rec</span>(list_of_items, target, &amp;(middle + <span class=\"hljs-number\">1</span>), right),\n            Ordering::Equal =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(middle),\n        }\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">match</span> target.<span class=\"hljs-title function_ invoke__\">cmp</span>(&amp;list_of_items[middle]) {\n            Ordering::Less =&gt; <span class=\"hljs-title function_ invoke__\">binary_search_rec</span>(list_of_items, target, &amp;(middle + <span class=\"hljs-number\">1</span>), right),\n            Ordering::Greater =&gt; <span class=\"hljs-title function_ invoke__\">binary_search_rec</span>(list_of_items, target, left, &amp;middle),\n            Ordering::Equal =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(middle),\n        }\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-keyword\">const</span> LEFT: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fail_empty_list</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">list_of_items</span> = <span class=\"hljs-built_in\">vec!</span>[];\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">binary_search_rec</span>(&amp;list_of_items, &amp;<span class=\"hljs-number\">1</span>, &amp;LEFT, &amp;list_of_items.<span class=\"hljs-title function_ invoke__\">len</span>()),\n            <span class=\"hljs-literal\">None</span>\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">success_one_item</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">list_of_items</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">30</span>];\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">binary_search_rec</span>(&amp;list_of_items, &amp;<span class=\"hljs-number\">30</span>, &amp;LEFT, &amp;list_of_items.<span class=\"hljs-title function_ invoke__\">len</span>()),\n            <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">0</span>)\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">success_search_strings_asc</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">say_hello_list</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;hi&quot;</span>, <span class=\"hljs-string\">&quot;olá&quot;</span>, <span class=\"hljs-string\">&quot;salut&quot;</span>];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">right</span> = say_hello_list.<span class=\"hljs-title function_ invoke__\">len</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">binary_search_rec</span>(&amp;say_hello_list, &amp;<span class=\"hljs-string\">&quot;hi&quot;</span>, &amp;LEFT, &amp;right),\n            <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">0</span>)\n        );\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">binary_search_rec</span>(&amp;say_hello_list, &amp;<span class=\"hljs-string\">&quot;salut&quot;</span>, &amp;LEFT, &amp;right),\n            <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">2</span>)\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">success_search_strings_desc</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">say_hello_list</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;salut&quot;</span>, <span class=\"hljs-string\">&quot;olá&quot;</span>, <span class=\"hljs-string\">&quot;hi&quot;</span>];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">right</span> = say_hello_list.<span class=\"hljs-title function_ invoke__\">len</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">binary_search_rec</span>(&amp;say_hello_list, &amp;<span class=\"hljs-string\">&quot;hi&quot;</span>, &amp;LEFT, &amp;right),\n            <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">2</span>)\n        );\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">binary_search_rec</span>(&amp;say_hello_list, &amp;<span class=\"hljs-string\">&quot;salut&quot;</span>, &amp;LEFT, &amp;right),\n            <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">0</span>)\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fail_search_strings_asc</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">say_hello_list</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;hi&quot;</span>, <span class=\"hljs-string\">&quot;olá&quot;</span>, <span class=\"hljs-string\">&quot;salut&quot;</span>];\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-keyword\">in</span> &amp;[<span class=\"hljs-string\">&quot;adiós&quot;</span>, <span class=\"hljs-string\">&quot;你好&quot;</span>] {\n            <span class=\"hljs-built_in\">assert_eq!</span>(\n                <span class=\"hljs-title function_ invoke__\">binary_search_rec</span>(&amp;say_hello_list, target, &amp;LEFT, &amp;say_hello_list.<span class=\"hljs-title function_ invoke__\">len</span>()),\n                <span class=\"hljs-literal\">None</span>\n            );\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fail_search_strings_desc</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">say_hello_list</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;salut&quot;</span>, <span class=\"hljs-string\">&quot;olá&quot;</span>, <span class=\"hljs-string\">&quot;hi&quot;</span>];\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-keyword\">in</span> &amp;[<span class=\"hljs-string\">&quot;adiós&quot;</span>, <span class=\"hljs-string\">&quot;你好&quot;</span>] {\n            <span class=\"hljs-built_in\">assert_eq!</span>(\n                <span class=\"hljs-title function_ invoke__\">binary_search_rec</span>(&amp;say_hello_list, target, &amp;LEFT, &amp;say_hello_list.<span class=\"hljs-title function_ invoke__\">len</span>()),\n                <span class=\"hljs-literal\">None</span>\n            );\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">success_search_integers_asc</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">integers</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">70</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">90</span>];\n        <span class=\"hljs-title function_ invoke__\">for</span> (index, target) <span class=\"hljs-keyword\">in</span> integers.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\n            <span class=\"hljs-built_in\">assert_eq!</span>(\n                <span class=\"hljs-title function_ invoke__\">binary_search_rec</span>(&amp;integers, target, &amp;LEFT, &amp;integers.<span class=\"hljs-title function_ invoke__\">len</span>()),\n                <span class=\"hljs-title function_ invoke__\">Some</span>(index)\n            )\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">success_search_integers_desc</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">integers</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">70</span>, <span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>];\n        <span class=\"hljs-title function_ invoke__\">for</span> (index, target) <span class=\"hljs-keyword\">in</span> integers.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\n            <span class=\"hljs-built_in\">assert_eq!</span>(\n                <span class=\"hljs-title function_ invoke__\">binary_search_rec</span>(&amp;integers, target, &amp;LEFT, &amp;integers.<span class=\"hljs-title function_ invoke__\">len</span>()),\n                <span class=\"hljs-title function_ invoke__\">Some</span>(index)\n            )\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fail_search_integers</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">integers</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">70</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">90</span>];\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-keyword\">in</span> &amp;[<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">444</span>, <span class=\"hljs-number\">336</span>] {\n            <span class=\"hljs-built_in\">assert_eq!</span>(\n                <span class=\"hljs-title function_ invoke__\">binary_search_rec</span>(&amp;integers, target, &amp;LEFT, &amp;integers.<span class=\"hljs-title function_ invoke__\">len</span>()),\n                <span class=\"hljs-literal\">None</span>\n            );\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">success_search_string_in_middle_of_unsorted_list</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">unsorted_strings</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;salut&quot;</span>, <span class=\"hljs-string\">&quot;olá&quot;</span>, <span class=\"hljs-string\">&quot;hi&quot;</span>];\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">binary_search_rec</span>(&amp;unsorted_strings, &amp;<span class=\"hljs-string\">&quot;olá&quot;</span>, &amp;LEFT, &amp;unsorted_strings.<span class=\"hljs-title function_ invoke__\">len</span>()),\n            <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">1</span>)\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">success_search_integer_in_middle_of_unsorted_list</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">unsorted_integers</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">70</span>];\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">binary_search_rec</span>(&amp;unsorted_integers, &amp;<span class=\"hljs-number\">80</span>, &amp;LEFT, &amp;unsorted_integers.<span class=\"hljs-title function_ invoke__\">len</span>()),\n            <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">1</span>)\n        );\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Raj Mazumder",
      "email": "61340960+RajMazumder18110@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Leonardo Freua",
      "email": "leonardo.batista.freua@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}