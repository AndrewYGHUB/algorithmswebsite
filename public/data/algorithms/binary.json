{
  "slug": "binary",
  "name": "Binary",
  "categories": [
    "searches"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "search/binary.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/search/binary.go",
      "code": "<span class=\"hljs-keyword\">package</span> search\n\n<span class=\"hljs-comment\">// Binary search for target within a sorted array by repeatedly dividing the array in half and comparing the midpoint with the target.</span>\n<span class=\"hljs-comment\">// This function uses recursive call to itself.</span>\n<span class=\"hljs-comment\">// If a target is found, the index of the target is returned. Else the function return -1 and ErrNotFound.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Binary</span><span class=\"hljs-params\">(array []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>, lowIndex <span class=\"hljs-type\">int</span>, highIndex <span class=\"hljs-type\">int</span>)</span></span> (<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">error</span>) {\n\t<span class=\"hljs-keyword\">if</span> highIndex &lt; lowIndex || <span class=\"hljs-built_in\">len</span>(array) == <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>, ErrNotFound\n\t}\n\tmid := <span class=\"hljs-type\">int</span>(lowIndex + (highIndex-lowIndex)/<span class=\"hljs-number\">2</span>)\n\t<span class=\"hljs-keyword\">if</span> array[mid] &gt; target {\n\t\t<span class=\"hljs-keyword\">return</span> Binary(array, target, lowIndex, mid<span class=\"hljs-number\">-1</span>)\n\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> array[mid] &lt; target {\n\t\t<span class=\"hljs-keyword\">return</span> Binary(array, target, mid+<span class=\"hljs-number\">1</span>, highIndex)\n\t} <span class=\"hljs-keyword\">else</span> {\n\t\t<span class=\"hljs-keyword\">return</span> mid, <span class=\"hljs-literal\">nil</span>\n\t}\n}\n\n<span class=\"hljs-comment\">// BinaryIterative search for target within a sorted array by repeatedly dividing the array in half and comparing the midpoint with the target.</span>\n<span class=\"hljs-comment\">// Unlike Binary, this function uses iterative method and not recursive.</span>\n<span class=\"hljs-comment\">// If a target is found, the index of the target is returned. Else the function return -1 and ErrNotFound.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">BinaryIterative</span><span class=\"hljs-params\">(array []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> (<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">error</span>) {\n\tstartIndex := <span class=\"hljs-number\">0</span>\n\tendIndex := <span class=\"hljs-built_in\">len</span>(array) - <span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span>\n\t<span class=\"hljs-keyword\">for</span> startIndex &lt;= endIndex {\n\t\tmid = <span class=\"hljs-type\">int</span>(startIndex + (endIndex-startIndex)/<span class=\"hljs-number\">2</span>)\n\t\t<span class=\"hljs-keyword\">if</span> array[mid] &gt; target {\n\t\t\tendIndex = mid - <span class=\"hljs-number\">1</span>\n\t\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> array[mid] &lt; target {\n\t\t\tstartIndex = mid + <span class=\"hljs-number\">1</span>\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\t<span class=\"hljs-keyword\">return</span> mid, <span class=\"hljs-literal\">nil</span>\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>, ErrNotFound\n}\n\n<span class=\"hljs-comment\">//Returns index to the first element in the range [0, len(array)-1] that is not less than (i.e. greater or equal to) target.</span>\n<span class=\"hljs-comment\">//return -1 and ErrNotFound if no such element is found.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">LowerBound</span><span class=\"hljs-params\">(array []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> (<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">error</span>) {\n\tstartIndex := <span class=\"hljs-number\">0</span>\n\tendIndex := <span class=\"hljs-built_in\">len</span>(array) - <span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span>\n\t<span class=\"hljs-keyword\">for</span> startIndex &lt;= endIndex {\n\t\tmid = <span class=\"hljs-type\">int</span>(startIndex + (endIndex-startIndex)/<span class=\"hljs-number\">2</span>)\n\t\t<span class=\"hljs-keyword\">if</span> array[mid] &lt; target {\n\t\t\tstartIndex = mid + <span class=\"hljs-number\">1</span>\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\tendIndex = mid - <span class=\"hljs-number\">1</span>\n\t\t}\n\t}\n\n\t<span class=\"hljs-comment\">//when target greater than every element in array, startIndex will out of bounds</span>\n\t<span class=\"hljs-keyword\">if</span> startIndex &gt;= <span class=\"hljs-built_in\">len</span>(array) {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>, ErrNotFound\n\t}\n\t<span class=\"hljs-keyword\">return</span> startIndex, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">//Returns index to the first element in the range [lowIndex, len(array)-1] that is greater than target.</span>\n<span class=\"hljs-comment\">//return -1 and ErrNotFound if no such element is found.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">UpperBound</span><span class=\"hljs-params\">(array []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> (<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">error</span>) {\n\tstartIndex := <span class=\"hljs-number\">0</span>\n\tendIndex := <span class=\"hljs-built_in\">len</span>(array) - <span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span>\n\t<span class=\"hljs-keyword\">for</span> startIndex &lt;= endIndex {\n\t\tmid = <span class=\"hljs-type\">int</span>(startIndex + (endIndex-startIndex)/<span class=\"hljs-number\">2</span>)\n\t\t<span class=\"hljs-keyword\">if</span> array[mid] &gt; target {\n\t\t\tendIndex = mid - <span class=\"hljs-number\">1</span>\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\tstartIndex = mid + <span class=\"hljs-number\">1</span>\n\t\t}\n\t}\n\n\t<span class=\"hljs-comment\">//when target greater or equal than every element in array, startIndex will out of bounds</span>\n\t<span class=\"hljs-keyword\">if</span> startIndex &gt;= <span class=\"hljs-built_in\">len</span>(array) {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>, ErrNotFound\n\t}\n\t<span class=\"hljs-keyword\">return</span> startIndex, <span class=\"hljs-literal\">nil</span>\n}\n"
    }
  },
  "contributors": [
    {
      "name": "庄全蛋",
      "email": "hello.wow93@gmail.com",
      "commits": 1
    },
    {
      "name": "FuXiang Shu",
      "email": "6470547+Crazy3lf@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}