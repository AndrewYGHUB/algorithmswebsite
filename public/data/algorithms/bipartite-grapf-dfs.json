{
  "slug": "bipartite-grapf-dfs",
  "name": "Bipartite Grapf DFS",
  "categories": [
    "datastructures",
    "graphs"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/graphs/BipartiteGrapfDFS.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/graphs/BipartiteGrapfDFS.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.graphs;\n\n<span class=\"hljs-keyword\">import</span> java.io.BufferedReader;\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\n<span class=\"hljs-keyword\">import</span> java.io.InputStreamReader;\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n\n<span class=\"hljs-comment\">/**\n * Given an adjacency list of a graph adj of V no. of vertices having 0 based\n * index. Check whether the graph is bipartite or not.\n *\n * Input : {{0, 1, 0, 1}, {1, 0, 1, 0}, {0, 1, 0, 1}, {1, 0, 1, 0}}\n *\n * Output : YES\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BipartiteGrapfDFS</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">bipartite</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> V, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, <span class=\"hljs-type\">int</span>[] color, <span class=\"hljs-type\">int</span> node)</span> {\n        <span class=\"hljs-keyword\">if</span> (color[node] == -<span class=\"hljs-number\">1</span>) {\n            color[node] = <span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-keyword\">for</span> (Integer it : adj.get(node)) {\n            <span class=\"hljs-keyword\">if</span> (color[it] == -<span class=\"hljs-number\">1</span>) {\n                color[it] = <span class=\"hljs-number\">1</span> - color[node];\n                <span class=\"hljs-keyword\">if</span> (bipartite(V, adj, color, it) == <span class=\"hljs-literal\">false</span>) {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (color[it] == color[node]) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isBipartite</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> V, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj)</span> {\n        <span class=\"hljs-comment\">// Code here</span>\n        <span class=\"hljs-type\">int</span>[] color = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[V + <span class=\"hljs-number\">1</span>];\n        Arrays.fill(color, -<span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\n            <span class=\"hljs-keyword\">if</span> (color[i] == -<span class=\"hljs-number\">1</span>) {\n                <span class=\"hljs-keyword\">if</span> (!bipartite(V, adj, color, i)) {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException {\n        <span class=\"hljs-type\">BufferedReader</span> <span class=\"hljs-variable\">read</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedReader</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InputStreamReader</span>(System.in));\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> Integer.parseInt(read.readLine().trim());\n        <span class=\"hljs-keyword\">while</span> (t-- &gt; <span class=\"hljs-number\">0</span>) {\n            String[] S = read.readLine().trim().split(<span class=\"hljs-string\">&quot; &quot;</span>);\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">V</span> <span class=\"hljs-operator\">=</span> Integer.parseInt(S[<span class=\"hljs-number\">0</span>]);\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">E</span> <span class=\"hljs-operator\">=</span> Integer.parseInt(S[<span class=\"hljs-number\">1</span>]);\n\n            ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\n                adj.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;());\n            }\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; E; i++) {\n                String[] s = read.readLine().trim().split(<span class=\"hljs-string\">&quot; &quot;</span>);\n                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">u</span> <span class=\"hljs-operator\">=</span> Integer.parseInt(s[<span class=\"hljs-number\">0</span>]);\n                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">v</span> <span class=\"hljs-operator\">=</span> Integer.parseInt(s[<span class=\"hljs-number\">1</span>]);\n                adj.get(u).add(v);\n                adj.get(v).add(u);\n            }\n\n            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">ans</span> <span class=\"hljs-operator\">=</span> isBipartite(V, adj);\n            <span class=\"hljs-keyword\">if</span> (ans) {\n                System.out.println(<span class=\"hljs-string\">&quot;YES&quot;</span>);\n            } <span class=\"hljs-keyword\">else</span> {\n                System.out.println(<span class=\"hljs-string\">&quot;NO&quot;</span>);\n            }\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Shubhojeet Banerjee",
      "email": "50337427+Shubhojeetban@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}