{
  "slug": "bisection-method",
  "name": "Bisection Method",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Maths/BisectionMethod.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/BisectionMethod.js",
      "code": "<span class=\"hljs-comment\">/**\n *\n * <span class=\"hljs-doctag\">@file</span>\n * <span class=\"hljs-doctag\">@brief</span> Find real roots of a function in a specified interval [a, b], where f(a)*f(b) &lt; 0\n *\n * <span class=\"hljs-doctag\">@details</span> Given a function f(x) and an interval [a, b], where f(a) * f(b) &lt; 0, find an approximation of the root\n * by calculating the middle m = (a + b) / 2, checking f(m) * f(a) and f(m) * f(b) and then by choosing the\n * negative product that means Bolzano&#x27;s theorem is applied,, define the new interval with these points. Repeat until\n * we get the precision we want [Wikipedia](https://en.wikipedia.org/wiki/Bisection_method)\n *\n * <span class=\"hljs-doctag\">@author</span> [ggkogkou](https://github.com/ggkogkou)\n *\n */</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">findRoot</span> = (<span class=\"hljs-params\">a, b, func, numberOfIterations</span>) =&gt; {\n  <span class=\"hljs-comment\">// Check if a given  real value belongs to the function&#x27;s domain</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">belongsToDomain</span> = (<span class=\"hljs-params\">x, f</span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-title function_\">f</span>(x)\n    <span class=\"hljs-keyword\">return</span> !<span class=\"hljs-title class_\">Number</span>.<span class=\"hljs-built_in\">isNaN</span>(res)\n  }\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title function_\">belongsToDomain</span>(a, func) || !<span class=\"hljs-title function_\">belongsToDomain</span>(b, func)) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;Given interval is not a valid subset of function&#x27;s domain&quot;</span>)\n\n  <span class=\"hljs-comment\">// Bolzano theorem</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">hasRoot</span> = (<span class=\"hljs-params\">a, b, func</span>) =&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">func</span>(a) * <span class=\"hljs-title function_\">func</span>(b) &lt; <span class=\"hljs-number\">0</span>\n  }\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">hasRoot</span>(a, b, func) === <span class=\"hljs-literal\">false</span>) { <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Product f(a)*f(b) has to be negative so that Bolzano theorem is applied&#x27;</span>) }\n\n  <span class=\"hljs-comment\">// Declare m</span>\n  <span class=\"hljs-keyword\">const</span> m = (a + b) / <span class=\"hljs-number\">2</span>\n\n  <span class=\"hljs-comment\">// Recursion terminal condition</span>\n  <span class=\"hljs-keyword\">if</span> (numberOfIterations === <span class=\"hljs-number\">0</span>) { <span class=\"hljs-keyword\">return</span> m }\n\n  <span class=\"hljs-comment\">// Find the products of f(m) and f(a), f(b)</span>\n  <span class=\"hljs-keyword\">const</span> fm = <span class=\"hljs-title function_\">func</span>(m)\n  <span class=\"hljs-keyword\">const</span> prod1 = fm * <span class=\"hljs-title function_\">func</span>(a)\n  <span class=\"hljs-keyword\">const</span> prod2 = fm * <span class=\"hljs-title function_\">func</span>(b)\n\n  <span class=\"hljs-comment\">// Depending on the sign of the products above, decide which position will m fill (a&#x27;s or b&#x27;s)</span>\n  <span class=\"hljs-keyword\">if</span> (prod1 &gt; <span class=\"hljs-number\">0</span> &amp;&amp; prod2 &lt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">findRoot</span>(m, b, func, --numberOfIterations)\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (prod1 &lt; <span class=\"hljs-number\">0</span> &amp;&amp; prod2 &gt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">findRoot</span>(a, m, func, --numberOfIterations)\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Unexpected behavior&#x27;</span>)\n}\n\n<span class=\"hljs-keyword\">export</span> { findRoot }\n"
    },
    "c-plus-plus": {
      "dir": "numerical_methods/bisection_method.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/numerical_methods/bisection_method.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * \\file\n * \\brief Solve the equation \\f$f(x)=0\\f$ using [bisection\n * method](https://en.wikipedia.org/wiki/Bisection_method)\n *\n * Given two points \\f$a\\f$ and \\f$b\\f$ such that \\f$f(a)&lt;0\\f$ and\n * \\f$f(b)&gt;0\\f$, then the \\f$(i+1)^\\text{th}\\f$ approximation is given by: \\f[\n * x_{i+1} = \\frac{a_i+b_i}{2}\n * \\f]\n * For the next iteration, the interval is selected\n * as: \\f$[a,x]\\f$ if \\f$x&gt;0\\f$ or \\f$[x,b]\\f$ if \\f$x&lt;0\\f$. The Process is\n * continued till a close enough approximation is achieved.\n *\n * \\see newton_raphson_method.cpp, false_position.cpp, secant_method.cpp\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;limits&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> EPSILON \\\n    1e-6  <span class=\"hljs-comment\">// std::numeric_limits&lt;double&gt;::epsilon()  ///&lt; system accuracy limit</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX_ITERATIONS 50000  <span class=\"hljs-comment\">///&lt; Maximum number of iterations to check</span></span>\n\n<span class=\"hljs-comment\">/** define \\f$f(x)\\f$ to find root for\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title\">eq</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> i)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> (std::<span class=\"hljs-built_in\">pow</span>(i, <span class=\"hljs-number\">3</span>) - (<span class=\"hljs-number\">4</span> * i) - <span class=\"hljs-number\">9</span>);  <span class=\"hljs-comment\">// original equation</span>\n}\n\n<span class=\"hljs-comment\">/** get the sign of any given number */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">sgn</span><span class=\"hljs-params\">(T val)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">T</span>(<span class=\"hljs-number\">0</span>) &lt; val) - (val &lt; <span class=\"hljs-built_in\">T</span>(<span class=\"hljs-number\">0</span>));\n}\n\n<span class=\"hljs-comment\">/** main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">double</span> a = <span class=\"hljs-number\">-1</span>, b = <span class=\"hljs-number\">1</span>, x, z;\n    <span class=\"hljs-type\">int</span> i;\n\n    <span class=\"hljs-comment\">// loop to find initial intervals a, b</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; MAX_ITERATIONS; i++) {\n        z = <span class=\"hljs-built_in\">eq</span>(a);\n        x = <span class=\"hljs-built_in\">eq</span>(b);\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">sgn</span>(z) == <span class=\"hljs-built_in\">sgn</span>(x)) {  <span class=\"hljs-comment\">// same signs, increase interval</span>\n            b++;\n            a--;\n        } <span class=\"hljs-keyword\">else</span> {  <span class=\"hljs-comment\">// if opposite signs, we got our interval</span>\n            <span class=\"hljs-keyword\">break</span>;\n        }\n    }\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nFirst initial: &quot;</span> &lt;&lt; a;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nSecond initial: &quot;</span> &lt;&lt; b;\n\n    <span class=\"hljs-comment\">// start iterations</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; MAX_ITERATIONS; i++) {\n        x = (a + b) / <span class=\"hljs-number\">2</span>;\n        z = <span class=\"hljs-built_in\">eq</span>(x);\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\nz: &quot;</span> &lt;&lt; z &lt;&lt; <span class=\"hljs-string\">&quot;\\t[&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot; , &quot;</span> &lt;&lt; b\n                  &lt;&lt; <span class=\"hljs-string\">&quot; | Bisect: &quot;</span> &lt;&lt; x &lt;&lt; <span class=\"hljs-string\">&quot;]&quot;</span>;\n\n        <span class=\"hljs-keyword\">if</span> (z &lt; <span class=\"hljs-number\">0</span>) {\n            a = x;\n        } <span class=\"hljs-keyword\">else</span> {\n            b = x;\n        }\n\n        <span class=\"hljs-keyword\">if</span> (std::<span class=\"hljs-built_in\">abs</span>(z) &lt; EPSILON)  <span class=\"hljs-comment\">// stoping criteria</span>\n            <span class=\"hljs-keyword\">break</span>;\n    }\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\nRoot: &quot;</span> &lt;&lt; x &lt;&lt; <span class=\"hljs-string\">&quot;\\t\\tSteps: &quot;</span> &lt;&lt; i &lt;&lt; std::endl;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "ggkogkou",
      "email": "76820848+ggkogkou@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}