{
  "slug": "brainfuck",
  "name": "Brainfuck",
  "categories": [
    "esolang"
  ],
  "body": {},
  "implementations": {
    "lua": {
      "dir": "src/esolang/brainfuck.lua",
      "url": "https://github.com/TheAlgorithms/lua/tree/master/src/esolang/brainfuck.lua",
      "code": "<span class=\"hljs-comment\">-- Simple brainfuck interpreter</span>\n<span class=\"hljs-comment\">-- Has &quot;infinite&quot; memory in both directions</span>\n<span class=\"hljs-comment\">-- Uses unsigned bytes for memory cells</span>\n<span class=\"hljs-comment\">-- Uses a zero byte to indicate that the input stream is exhausted</span>\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(program, input, output)</span></span>\n\t<span class=\"hljs-built_in\">input</span> = <span class=\"hljs-built_in\">input</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">io</span>.<span class=\"hljs-built_in\">input</span>()\n\t<span class=\"hljs-built_in\">output</span> = <span class=\"hljs-built_in\">output</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">io</span>.<span class=\"hljs-built_in\">output</span>()\n\t<span class=\"hljs-comment\">-- Parse: Match brackets</span>\n\t<span class=\"hljs-keyword\">local</span> matching_bracket_pos = {}\n\t<span class=\"hljs-keyword\">local</span> open_bracket_pos = {}\n\t<span class=\"hljs-keyword\">for</span> pos, <span class=\"hljs-built_in\">char</span> <span class=\"hljs-keyword\">in</span> program:<span class=\"hljs-built_in\">gmatch</span>(<span class=\"hljs-string\">&quot;()(.)&quot;</span>) <span class=\"hljs-keyword\">do</span>\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">char</span> == <span class=\"hljs-string\">&quot;[&quot;</span> <span class=\"hljs-keyword\">then</span>\n\t\t\t<span class=\"hljs-built_in\">table</span>.<span class=\"hljs-built_in\">insert</span>(open_bracket_pos, pos)\n\t\t<span class=\"hljs-keyword\">elseif</span> <span class=\"hljs-built_in\">char</span> == <span class=\"hljs-string\">&quot;]&quot;</span> <span class=\"hljs-keyword\">then</span>\n\t\t\t<span class=\"hljs-keyword\">if</span> #open_bracket_pos == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span>\n\t\t\t\t<span class=\"hljs-built_in\">error</span>(<span class=\"hljs-string\">&quot;unclosed left bracket ] at pos &quot;</span> .. pos)\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t\t<span class=\"hljs-keyword\">local</span> open_pos = <span class=\"hljs-built_in\">table</span>.<span class=\"hljs-built_in\">remove</span>(open_bracket_pos)\n\t\t\t\tmatching_bracket_pos[open_pos] = pos\n\t\t\t\tmatching_bracket_pos[pos] = open_pos\n\t\t\t<span class=\"hljs-keyword\">end</span>\n\t\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">if</span> #open_bracket_pos ~= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span>\n\t\t<span class=\"hljs-built_in\">error</span>(#open_bracket_pos .. <span class=\"hljs-string\">&quot; closing brackets at EOF expected&quot;</span>)\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-comment\">-- Execute</span>\n\t<span class=\"hljs-keyword\">local</span> data = {}\n\t<span class=\"hljs-keyword\">local</span> data_pointer = <span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get_byte</span><span class=\"hljs-params\">()</span></span>\n\t\t<span class=\"hljs-keyword\">return</span> data[data_pointer] <span class=\"hljs-keyword\">or</span> <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">set_byte</span><span class=\"hljs-params\">(byte)</span></span>\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">byte</span> == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span>\n\t\t\t<span class=\"hljs-built_in\">byte</span> = <span class=\"hljs-literal\">nil</span>\n\t\t<span class=\"hljs-keyword\">end</span>\n\t\tdata[data_pointer] = <span class=\"hljs-built_in\">byte</span>\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">local</span> instruction_pointer = <span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-keyword\">while</span> instruction_pointer &lt;= #program <span class=\"hljs-keyword\">do</span>\n\t\t<span class=\"hljs-keyword\">local</span> <span class=\"hljs-built_in\">char</span> = program:<span class=\"hljs-built_in\">sub</span>(instruction_pointer, instruction_pointer)\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">char</span> == <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-keyword\">then</span>\n\t\t\t<span class=\"hljs-built_in\">output</span>:<span class=\"hljs-built_in\">write</span>(<span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">char</span>(get_byte()))\n\t\t<span class=\"hljs-keyword\">elseif</span> <span class=\"hljs-built_in\">char</span> == <span class=\"hljs-string\">&quot;,&quot;</span> <span class=\"hljs-keyword\">then</span>\n\t\t\t<span class=\"hljs-keyword\">local</span> read_char = <span class=\"hljs-built_in\">input</span>:<span class=\"hljs-built_in\">read</span>(<span class=\"hljs-number\">1</span>)\n\t\t\t<span class=\"hljs-comment\">-- Read a zero byte if the input handle is exhausted</span>\n\t\t\tset_byte(read_char <span class=\"hljs-keyword\">and</span> read_char:<span class=\"hljs-built_in\">byte</span>() <span class=\"hljs-keyword\">or</span> <span class=\"hljs-number\">0</span>)\n\t\t<span class=\"hljs-keyword\">elseif</span> <span class=\"hljs-built_in\">char</span> == <span class=\"hljs-string\">&quot;&gt;&quot;</span> <span class=\"hljs-keyword\">then</span>\n\t\t\tdata_pointer = data_pointer + <span class=\"hljs-number\">1</span>\n\t\t<span class=\"hljs-keyword\">elseif</span> <span class=\"hljs-built_in\">char</span> == <span class=\"hljs-string\">&quot;&lt;&quot;</span> <span class=\"hljs-keyword\">then</span>\n\t\t\tdata_pointer = data_pointer - <span class=\"hljs-number\">1</span>\n\t\t<span class=\"hljs-keyword\">elseif</span> <span class=\"hljs-built_in\">char</span> == <span class=\"hljs-string\">&quot;+&quot;</span> <span class=\"hljs-keyword\">then</span>\n\t\t\tset_byte((get_byte() + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">256</span>) <span class=\"hljs-comment\">-- unsigned byte arithmetic</span>\n\t\t<span class=\"hljs-keyword\">elseif</span> <span class=\"hljs-built_in\">char</span> == <span class=\"hljs-string\">&quot;-&quot;</span> <span class=\"hljs-keyword\">then</span>\n\t\t\tset_byte((get_byte() - <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">256</span>) <span class=\"hljs-comment\">-- unsigned byte arithmetic</span>\n\t\t<span class=\"hljs-keyword\">elseif</span> <span class=\"hljs-built_in\">char</span> == <span class=\"hljs-string\">&quot;[&quot;</span> <span class=\"hljs-keyword\">then</span>\n\t\t\t<span class=\"hljs-keyword\">if</span> get_byte() == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span>\n\t\t\t\t<span class=\"hljs-comment\">-- Jump to closing bracket (skip loop)</span>\n\t\t\t\tinstruction_pointer = matching_bracket_pos[instruction_pointer]\n\t\t\t<span class=\"hljs-keyword\">end</span>\n\t\t<span class=\"hljs-keyword\">elseif</span> <span class=\"hljs-built_in\">char</span> == <span class=\"hljs-string\">&quot;]&quot;</span> <span class=\"hljs-keyword\">then</span>\n\t\t\t<span class=\"hljs-keyword\">if</span> get_byte() ~= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span>\n\t\t\t\t<span class=\"hljs-comment\">-- Jump back to opening bracket (repeat loop)</span>\n\t\t\t\tinstruction_pointer = matching_bracket_pos[instruction_pointer]\n\t\t\t<span class=\"hljs-keyword\">end</span>\n\t\t<span class=\"hljs-keyword\">end</span>\n\t\tinstruction_pointer = instruction_pointer + <span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Lars Mueller",
      "email": "appgurulars@gmx.de",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}