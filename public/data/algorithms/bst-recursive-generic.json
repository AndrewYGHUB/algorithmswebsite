{
  "slug": "bst-recursive-generic",
  "name": "BST Recursive Generic",
  "categories": [
    "datastructures",
    "tree"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/trees/BSTRecursiveGeneric.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/trees/BSTRecursiveGeneric.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.trees;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n\n<span class=\"hljs-comment\">/**\n * &lt;h1&gt;Binary Search Tree (Recursive) Generic Type Implementation&lt;/h1&gt;\n *\n * &lt;p&gt;\n * A recursive implementation of generic type BST.\n *\n * Reference: https://en.wikipedia.org/wiki/Binary_search_tree\n * &lt;/p&gt;\n *\n * <span class=\"hljs-doctag\">@author</span> [Madhur Panwar](https://github.com/mdrpanwar)\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BSTRecursiveGeneric</span>&lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; {\n\n    <span class=\"hljs-comment\">/**\n     * only data member is root of BST\n     */</span>\n    <span class=\"hljs-keyword\">private</span> Node&lt;T&gt; root;\n\n    <span class=\"hljs-comment\">/**\n     * Constructor use to initialize node as null\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">BSTRecursiveGeneric</span><span class=\"hljs-params\">()</span> {\n        root = <span class=\"hljs-literal\">null</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * main function for testing\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        System.out.println(<span class=\"hljs-string\">&quot;Testing for integer data...&quot;</span>);\n        <span class=\"hljs-comment\">// Integer</span>\n        BSTRecursiveGeneric&lt;Integer&gt; integerTree = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BSTRecursiveGeneric</span>&lt;Integer&gt;();\n\n        integerTree.add(<span class=\"hljs-number\">5</span>);\n        integerTree.add(<span class=\"hljs-number\">10</span>);\n        integerTree.add(<span class=\"hljs-number\">9</span>);\n        <span class=\"hljs-keyword\">assert</span> !integerTree.find(<span class=\"hljs-number\">4</span>) : <span class=\"hljs-string\">&quot;4 is not yet present in BST&quot;</span>;\n        <span class=\"hljs-keyword\">assert</span> integerTree.find(<span class=\"hljs-number\">10</span>) : <span class=\"hljs-string\">&quot;10 should be present in BST&quot;</span>;\n        integerTree.remove(<span class=\"hljs-number\">9</span>);\n        <span class=\"hljs-keyword\">assert</span> !integerTree.find(<span class=\"hljs-number\">9</span>) : <span class=\"hljs-string\">&quot;9 was just deleted from BST&quot;</span>;\n        integerTree.remove(<span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">assert</span> !integerTree.find(<span class=\"hljs-number\">1</span>) : <span class=\"hljs-string\">&quot;Since 1 was not present so find deleting would do no change&quot;</span>;\n        integerTree.add(<span class=\"hljs-number\">20</span>);\n        integerTree.add(<span class=\"hljs-number\">70</span>);\n        <span class=\"hljs-keyword\">assert</span> integerTree.find(<span class=\"hljs-number\">70</span>) : <span class=\"hljs-string\">&quot;70 was inserted but not found&quot;</span>;\n        <span class=\"hljs-comment\">/*\n     Will print in following order\n     5 10 20 70\n         */</span>\n        integerTree.inorder();\n        System.out.println();\n        System.out.println(<span class=\"hljs-string\">&quot;Testing for string data...&quot;</span>);\n        <span class=\"hljs-comment\">// String</span>\n        BSTRecursiveGeneric&lt;String&gt; stringTree = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BSTRecursiveGeneric</span>&lt;String&gt;();\n\n        stringTree.add(<span class=\"hljs-string\">&quot;banana&quot;</span>);\n        stringTree.add(<span class=\"hljs-string\">&quot;pineapple&quot;</span>);\n        stringTree.add(<span class=\"hljs-string\">&quot;date&quot;</span>);\n        <span class=\"hljs-keyword\">assert</span> !stringTree.find(<span class=\"hljs-string\">&quot;girl&quot;</span>) : <span class=\"hljs-string\">&quot;girl is not yet present in BST&quot;</span>;\n        <span class=\"hljs-keyword\">assert</span> stringTree.find(<span class=\"hljs-string\">&quot;pineapple&quot;</span>) : <span class=\"hljs-string\">&quot;10 should be present in BST&quot;</span>;\n        stringTree.remove(<span class=\"hljs-string\">&quot;date&quot;</span>);\n        <span class=\"hljs-keyword\">assert</span> !stringTree.find(<span class=\"hljs-string\">&quot;date&quot;</span>) : <span class=\"hljs-string\">&quot;date was just deleted from BST&quot;</span>;\n        stringTree.remove(<span class=\"hljs-string\">&quot;boy&quot;</span>);\n        <span class=\"hljs-keyword\">assert</span> !stringTree.find(<span class=\"hljs-string\">&quot;boy&quot;</span>) : <span class=\"hljs-string\">&quot;Since boy was not present so deleting would do no change&quot;</span>;\n        stringTree.add(<span class=\"hljs-string\">&quot;india&quot;</span>);\n        stringTree.add(<span class=\"hljs-string\">&quot;hills&quot;</span>);\n        <span class=\"hljs-keyword\">assert</span> stringTree.find(<span class=\"hljs-string\">&quot;hills&quot;</span>) : <span class=\"hljs-string\">&quot;hills was inserted but not found&quot;</span>;\n        <span class=\"hljs-comment\">/*\n     Will print in following order\n     banana hills india pineapple\n         */</span>\n        stringTree.inorder();\n\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Recursive method to delete a data if present in BST.\n     *\n     * <span class=\"hljs-doctag\">@param</span> node the node under which to (recursively) search for data\n     * <span class=\"hljs-doctag\">@param</span> data the value to be deleted\n     * <span class=\"hljs-doctag\">@return</span> Node the updated value of root parameter after delete operation\n     */</span>\n    <span class=\"hljs-keyword\">private</span> Node&lt;T&gt; <span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">(Node&lt;T&gt; node, T data)</span> {\n        <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) {\n            System.out.println(<span class=\"hljs-string\">&quot;No such data present in BST.&quot;</span>);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.data.compareTo(data) &gt; <span class=\"hljs-number\">0</span>) {\n            node.left = delete(node.left, data);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.data.compareTo(data) &lt; <span class=\"hljs-number\">0</span>) {\n            node.right = delete(node.right, data);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">if</span> (node.right == <span class=\"hljs-literal\">null</span> &amp;&amp; node.left == <span class=\"hljs-literal\">null</span>) { <span class=\"hljs-comment\">// If it is leaf node</span>\n                node = <span class=\"hljs-literal\">null</span>;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.left == <span class=\"hljs-literal\">null</span>) { <span class=\"hljs-comment\">// If only right node is present</span>\n                Node&lt;T&gt; temp = node.right;\n                node.right = <span class=\"hljs-literal\">null</span>;\n                node = temp;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.right == <span class=\"hljs-literal\">null</span>) { <span class=\"hljs-comment\">// Only left node is present</span>\n                Node&lt;T&gt; temp = node.left;\n                node.left = <span class=\"hljs-literal\">null</span>;\n                node = temp;\n            } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// both child are present</span>\n                Node&lt;T&gt; temp = node.right;\n                <span class=\"hljs-comment\">// Find leftmost child of right subtree</span>\n                <span class=\"hljs-keyword\">while</span> (temp.left != <span class=\"hljs-literal\">null</span>) {\n                    temp = temp.left;\n                }\n                node.data = temp.data;\n                node.right = delete(node.right, temp.data);\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> node;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Recursive insertion of value in BST.\n     *\n     * <span class=\"hljs-doctag\">@param</span> node to check if the data can be inserted in current node or its\n     * subtree\n     * <span class=\"hljs-doctag\">@param</span> data the value to be inserted\n     * <span class=\"hljs-doctag\">@return</span> the modified value of the root parameter after insertion\n     */</span>\n    <span class=\"hljs-keyword\">private</span> Node&lt;T&gt; <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(Node&lt;T&gt; node, T data)</span> {\n        <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) {\n            node = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>&lt;&gt;(data);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.data.compareTo(data) &gt; <span class=\"hljs-number\">0</span>) {\n            node.left = insert(node.left, data);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.data.compareTo(data) &lt; <span class=\"hljs-number\">0</span>) {\n            node.right = insert(node.right, data);\n        }\n        <span class=\"hljs-keyword\">return</span> node;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Recursively print Preorder traversal of the BST\n     *\n     * <span class=\"hljs-doctag\">@param</span> node the root node\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">preOrder</span><span class=\"hljs-params\">(Node&lt;T&gt; node)</span> {\n        <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        System.out.print(node.data + <span class=\"hljs-string\">&quot; &quot;</span>);\n        <span class=\"hljs-keyword\">if</span> (node.left != <span class=\"hljs-literal\">null</span>) {\n            preOrder(node.left);\n        }\n        <span class=\"hljs-keyword\">if</span> (node.right != <span class=\"hljs-literal\">null</span>) {\n            preOrder(node.right);\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Recursively print Postorder traversal of BST.\n     *\n     * <span class=\"hljs-doctag\">@param</span> node the root node\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">postOrder</span><span class=\"hljs-params\">(Node&lt;T&gt; node)</span> {\n        <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (node.left != <span class=\"hljs-literal\">null</span>) {\n            postOrder(node.left);\n        }\n        <span class=\"hljs-keyword\">if</span> (node.right != <span class=\"hljs-literal\">null</span>) {\n            postOrder(node.right);\n        }\n        System.out.print(node.data + <span class=\"hljs-string\">&quot; &quot;</span>);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Recursively print Inorder traversal of BST.\n     *\n     * <span class=\"hljs-doctag\">@param</span> node the root node\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">inOrder</span><span class=\"hljs-params\">(Node&lt;T&gt; node)</span> {\n        <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (node.left != <span class=\"hljs-literal\">null</span>) {\n            inOrder(node.left);\n        }\n        System.out.print(node.data + <span class=\"hljs-string\">&quot; &quot;</span>);\n        <span class=\"hljs-keyword\">if</span> (node.right != <span class=\"hljs-literal\">null</span>) {\n            inOrder(node.right);\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Recursively traverse the tree using inorder traversal and keep adding\n     * elements to argument list.\n     *\n     * <span class=\"hljs-doctag\">@param</span> node the root node\n     * <span class=\"hljs-doctag\">@param</span> sortedList the list to add the srted elements into\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">inOrderSort</span><span class=\"hljs-params\">(Node&lt;T&gt; node, List&lt;T&gt; sortedList)</span> {\n        <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (node.left != <span class=\"hljs-literal\">null</span>) {\n            inOrderSort(node.left, sortedList);\n        }\n        sortedList.add(node.data);\n        <span class=\"hljs-keyword\">if</span> (node.right != <span class=\"hljs-literal\">null</span>) {\n            inOrderSort(node.right, sortedList);\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Serach recursively if the given value is present in BST or not.\n     *\n     * <span class=\"hljs-doctag\">@param</span> node the node under which to check\n     * <span class=\"hljs-doctag\">@param</span> data the value to be checked\n     * <span class=\"hljs-doctag\">@return</span> boolean if data is present or not\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(Node&lt;T&gt; node, T data)</span> {\n        <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.data.compareTo(data) == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.data.compareTo(data) &gt; <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> search(node.left, data);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> search(node.right, data);\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * add in BST. if the value is not already present it is inserted or else no\n     * change takes place.\n     *\n     * <span class=\"hljs-doctag\">@param</span> data the value to be inserted\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(T data)</span> {\n        <span class=\"hljs-built_in\">this</span>.root = insert(<span class=\"hljs-built_in\">this</span>.root, data);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * If data is present in BST delete it else do nothing.\n     *\n     * <span class=\"hljs-doctag\">@param</span> data the value to be removed\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">(T data)</span> {\n        <span class=\"hljs-built_in\">this</span>.root = delete(<span class=\"hljs-built_in\">this</span>.root, data);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * To call inorder traversal on tree\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">inorder</span><span class=\"hljs-params\">()</span> {\n        System.out.println(<span class=\"hljs-string\">&quot;Inorder traversal of this tree is:&quot;</span>);\n        inOrder(<span class=\"hljs-built_in\">this</span>.root);\n        System.out.println(); <span class=\"hljs-comment\">// for next line</span>\n    }\n\n    <span class=\"hljs-comment\">/**\n     * return a sorted list by traversing the tree elements using inorder\n     * traversal\n     */</span>\n    <span class=\"hljs-keyword\">public</span> List&lt;T&gt; <span class=\"hljs-title function_\">inorderSort</span><span class=\"hljs-params\">()</span> {\n        List&lt;T&gt; sortedList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        inOrderSort(<span class=\"hljs-built_in\">this</span>.root, sortedList);\n        <span class=\"hljs-keyword\">return</span> sortedList;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * To call postorder traversal on tree\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">postorder</span><span class=\"hljs-params\">()</span> {\n        System.out.println(<span class=\"hljs-string\">&quot;Postorder traversal of this tree is:&quot;</span>);\n        postOrder(<span class=\"hljs-built_in\">this</span>.root);\n        System.out.println(); <span class=\"hljs-comment\">// for next line</span>\n    }\n\n    <span class=\"hljs-comment\">/**\n     * To call preorder traversal on tree.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">preorder</span><span class=\"hljs-params\">()</span> {\n        System.out.println(<span class=\"hljs-string\">&quot;Preorder traversal of this tree is:&quot;</span>);\n        preOrder(<span class=\"hljs-built_in\">this</span>.root);\n        System.out.println(); <span class=\"hljs-comment\">// for next line</span>\n    }\n\n    <span class=\"hljs-comment\">/**\n     * To check if given value is present in tree or not.\n     *\n     * <span class=\"hljs-doctag\">@param</span> data the data to be found for\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">find</span><span class=\"hljs-params\">(T data)</span> {\n        <span class=\"hljs-keyword\">if</span> (search(<span class=\"hljs-built_in\">this</span>.root, data)) {\n            System.out.println(data + <span class=\"hljs-string\">&quot; is present in given BST.&quot;</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n        System.out.println(data + <span class=\"hljs-string\">&quot; not found.&quot;</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * The generic Node class used for building binary search tree\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>&lt;T&gt; {\n\n        T data;\n        Node&lt;T&gt; left;\n        Node&lt;T&gt; right;\n\n        <span class=\"hljs-comment\">/**\n         * Constructor with data as parameter\n         */</span>\n        Node(T d) {\n            data = d;\n            left = <span class=\"hljs-literal\">null</span>;\n            right = <span class=\"hljs-literal\">null</span>;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Madhur Panwar",
      "email": "39766613+mdrpanwar@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}