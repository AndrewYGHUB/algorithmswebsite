{
  "slug": "bubble-sort",
  "name": "Bubble Sort",
  "categories": [
    "sorts"
  ],
  "body": {
    "en": "<h4>Problem Statement</h4>\n<p>Given an unsorted array of n elements, write a function to sort the array</p>\n<h4>Approach</h4>\n<ul>\n<li>select the first element of the array</li>\n<li>compare it with its next element</li>\n<li>if it is larger than the next element then swap them</li>\n<li>else do nothing</li>\n<li>keep doing this for every index of the array</li>\n<li>repeat the above process n times.</li>\n</ul>\n<h4>Time Complexity</h4>\n<p><code>O(n^2)</code> Worst case performance</p>\n<p><code>O(n)</code> Best-case performance</p>\n<p><code>O(n^2)</code> Average performance</p>\n<h4>Space Complexity</h4>\n<p><code>O(1)</code> Worst case</p>\n<h4>Founder's Name</h4>\n<ul>\n<li>The term “Bubble Sort” was first used by Iverson, K in 1962.</li>\n</ul>\n<h4>Example</h4>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">arr</span>[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">30</span>}\n<span class=\"hljs-attribute\">Indexes</span>: <span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">1</span>   <span class=\"hljs-number\">2</span>   <span class=\"hljs-number\">3</span>    \n\n<span class=\"hljs-attribute\">1</span>. Index = <span class=\"hljs-number\">0</span>, Number = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-attribute\">2</span>. <span class=\"hljs-number\">10</span> &#x3C; <span class=\"hljs-number\">80</span>, do nothing and continue\n\n<span class=\"hljs-attribute\">3</span>. Index = <span class=\"hljs-number\">1</span>, Number = <span class=\"hljs-number\">80</span>\n<span class=\"hljs-attribute\">4</span>. <span class=\"hljs-number\">80</span> > <span class=\"hljs-number\">40</span>, swap <span class=\"hljs-number\">80</span> and <span class=\"hljs-number\">40</span>\n<span class=\"hljs-attribute\">5</span>. The array now is {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">30</span>}\n\n<span class=\"hljs-attribute\">6</span>. Index = <span class=\"hljs-number\">2</span>, Number = <span class=\"hljs-number\">80</span>\n<span class=\"hljs-attribute\">7</span>. <span class=\"hljs-number\">80</span> > <span class=\"hljs-number\">30</span>, swap <span class=\"hljs-number\">80</span> and <span class=\"hljs-number\">30</span>\n<span class=\"hljs-attribute\">8</span>. The array now is {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">80</span>}\n\n<span class=\"hljs-attribute\">Repeat</span> the Above Steps again\n\n<span class=\"hljs-attribute\">arr</span>[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">80</span>}\n<span class=\"hljs-attribute\">Indexes</span>: <span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">1</span>   <span class=\"hljs-number\">2</span>   <span class=\"hljs-number\">3</span>   \n\n<span class=\"hljs-attribute\">1</span>. Index = <span class=\"hljs-number\">0</span>, Number = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-attribute\">2</span>. <span class=\"hljs-number\">10</span> &#x3C; <span class=\"hljs-number\">40</span>, do nothing and continue\n\n<span class=\"hljs-attribute\">3</span>. Index = <span class=\"hljs-number\">1</span>, Number = <span class=\"hljs-number\">40</span>\n<span class=\"hljs-attribute\">4</span>. <span class=\"hljs-number\">40</span> > <span class=\"hljs-number\">30</span>, swap <span class=\"hljs-number\">40</span> and <span class=\"hljs-number\">30</span>\n<span class=\"hljs-attribute\">5</span>. The array now is {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">80</span>}\n\n<span class=\"hljs-attribute\">6</span>. Index = <span class=\"hljs-number\">2</span>, Number = <span class=\"hljs-number\">40</span>\n<span class=\"hljs-attribute\">7</span>. <span class=\"hljs-number\">40</span> &#x3C; <span class=\"hljs-number\">80</span>, do nothing\n<span class=\"hljs-attribute\">8</span>. The array now is {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">80</span>}\n\n<span class=\"hljs-attribute\">Repeat</span> the Above Steps again\n\n<span class=\"hljs-attribute\">arr</span>[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">80</span>}\n<span class=\"hljs-attribute\">Indexes</span>: <span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">1</span>   <span class=\"hljs-number\">2</span>   <span class=\"hljs-number\">3</span>   \n\n<span class=\"hljs-attribute\">1</span>. Index = <span class=\"hljs-number\">0</span>, Number = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-attribute\">2</span>. <span class=\"hljs-number\">10</span> &#x3C; <span class=\"hljs-number\">30</span>, do nothing and continue\n\n<span class=\"hljs-attribute\">3</span>. Index = <span class=\"hljs-number\">1</span>, Number = <span class=\"hljs-number\">30</span>\n<span class=\"hljs-attribute\">4</span>. <span class=\"hljs-number\">30</span> &#x3C; <span class=\"hljs-number\">40</span>, do nothing and continue\n\n<span class=\"hljs-attribute\">5</span>. Index = <span class=\"hljs-number\">2</span>, Number = <span class=\"hljs-number\">40</span>\n<span class=\"hljs-attribute\">6</span>. <span class=\"hljs-number\">40</span> &#x3C; <span class=\"hljs-number\">80</span>, do nothing\n\n<span class=\"hljs-attribute\">Since</span> there are no swaps in above steps, it means the array is sorted and we can stop here.\n</code></pre>\n<h4>Code Implementation Links</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/Sorts/BubbleSort.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/sorting/bubble_sort.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/sorts/bubble_sort.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Sorters/Comparison/BubbleSorter.cs\">C-Sharp</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Go/blob/master/sorts/bubblesort.go\">Go</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/sorting/bubble_sort.rb\">Ruby</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C/blob/master/sorting/bubble_sort.c\">C</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Scala/blob/master/src/main/scala/Sort/BubbleSort.scala\">Scala</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Javascript/blob/master/Sorts/BubbleSort.js\">Javascript</a></li>\n</ul>\n<h4>Video Explanation</h4>\n<p><a href=\"https://www.youtube.com/watch?v=Jdtq5uKz-w4\">A video explaining the Bubble Sort Algorithm</a></p>\n<h4>Others</h4>\n<p>Bubble sort is also known as Sinking sort.</p>\n<h4>Animation Explanation</h4>\n<ul>\n<li><a href=\"https://boardhub.github.io/tute/?wd=bubbleSortAlgo2\">Tute Board</a></li>\n</ul>",
    "es": "<h4>Planteamiento del problema</h4>\n<p>Dado un arreglo desordenado de n elementos, escribir una función que ordene el arreglo.</p>\n<h4>Procedimiento</h4>\n<ul>\n<li>Seleccionar el primer elemento del arreglo.</li>\n<li>Comparar con el elemento siguiente.</li>\n<li>Si es más grande que el elemento siguiente se intercambian.</li>\n<li>Sino no se hace nada.</li>\n<li>Realizar las operaciones anteriores para cada elemento del arreglo.</li>\n<li>Repetir el procedimiento descrito n veces.</li>\n</ul>\n<h4>Complejidad temporal</h4>\n<p><code>O(n^2)</code> Rendimiento en el peor de los casos</p>\n<p><code>O(n)</code> Rendimiento en el mejor de los casos</p>\n<p><code>O(n^2)</code> Rendimiento promedio</p>\n<h4>Complejidad espacial</h4>\n<p><code>O(1)</code> Peor caso</p>\n<h4>Nombre del creador del algoritmo</h4>\n<ul>\n<li></li>\n</ul>\n<h4>Ejemplo</h4>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">arreglo</span>[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">30</span>}\n<span class=\"hljs-attribute\">Indices</span>: <span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">1</span>   <span class=\"hljs-number\">2</span>   <span class=\"hljs-number\">3</span>    \n\n<span class=\"hljs-attribute\">1</span>. Indice = <span class=\"hljs-number\">0</span>, Numero = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-attribute\">2</span>. <span class=\"hljs-number\">10</span> &#x3C; <span class=\"hljs-number\">80</span>, No se hace nada. Continuar\n\n<span class=\"hljs-attribute\">3</span>. Indice = <span class=\"hljs-number\">1</span>, Numero = <span class=\"hljs-number\">80</span>\n<span class=\"hljs-attribute\">4</span>. <span class=\"hljs-number\">80</span> > <span class=\"hljs-number\">40</span>, intercambiar <span class=\"hljs-number\">80</span> y <span class=\"hljs-number\">40</span>\n<span class=\"hljs-attribute\">5</span>. El arreglo ahora es {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">30</span>}\n\n<span class=\"hljs-attribute\">6</span>. Indice = <span class=\"hljs-number\">2</span>, Numero = <span class=\"hljs-number\">80</span>\n<span class=\"hljs-attribute\">7</span>. <span class=\"hljs-number\">80</span> > <span class=\"hljs-number\">30</span>, intercambiar <span class=\"hljs-number\">80</span> y <span class=\"hljs-number\">30</span>\n<span class=\"hljs-attribute\">8</span>. El arreglo ahora es {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">80</span>}\n\n<span class=\"hljs-attribute\">Repetir</span> los pasos de arriba.\n\n<span class=\"hljs-attribute\">arreglo</span>[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">80</span>}\n<span class=\"hljs-attribute\">Indices</span>: <span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">1</span>   <span class=\"hljs-number\">2</span>   <span class=\"hljs-number\">3</span>   \n\n<span class=\"hljs-attribute\">1</span>. Indice = <span class=\"hljs-number\">0</span>, Numero = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-attribute\">2</span>. <span class=\"hljs-number\">10</span> &#x3C; <span class=\"hljs-number\">40</span>, No se hace nada. Continuar\n\n<span class=\"hljs-attribute\">3</span>. Indice = <span class=\"hljs-number\">1</span>, Numero = <span class=\"hljs-number\">40</span>\n<span class=\"hljs-attribute\">4</span>. <span class=\"hljs-number\">40</span> > <span class=\"hljs-number\">30</span>, intercambiar <span class=\"hljs-number\">40</span> y <span class=\"hljs-number\">30</span>\n<span class=\"hljs-attribute\">5</span>. El arreglo ahora es {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">80</span>}\n\n<span class=\"hljs-attribute\">6</span>. Indice = <span class=\"hljs-number\">2</span>, Numero = <span class=\"hljs-number\">40</span>\n<span class=\"hljs-attribute\">7</span>. <span class=\"hljs-number\">40</span> &#x3C; <span class=\"hljs-number\">80</span>, No se hace nada. Continuar\n<span class=\"hljs-attribute\">8</span>. El arreglo ahora es {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">80</span>}\n\n<span class=\"hljs-attribute\">Repetir</span> los pasos de arriba.\n\n<span class=\"hljs-attribute\">arreglo</span>[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">80</span>}\n<span class=\"hljs-attribute\">Indices</span>: <span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">1</span>   <span class=\"hljs-number\">2</span>   <span class=\"hljs-number\">3</span>   \n\n<span class=\"hljs-attribute\">1</span>. Indice = <span class=\"hljs-number\">0</span>, Numero = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-attribute\">2</span>. <span class=\"hljs-number\">10</span> &#x3C; <span class=\"hljs-number\">30</span>, No se hace nada. Continuar\n\n<span class=\"hljs-attribute\">3</span>. Indice = <span class=\"hljs-number\">1</span>, Numero = <span class=\"hljs-number\">30</span>\n<span class=\"hljs-attribute\">4</span>. <span class=\"hljs-number\">30</span> &#x3C; <span class=\"hljs-number\">40</span>, No se hace nada. Continuar\n\n<span class=\"hljs-attribute\">5</span>. Indice = <span class=\"hljs-number\">2</span>, Numero = <span class=\"hljs-number\">40</span>\n<span class=\"hljs-attribute\">6</span>. <span class=\"hljs-number\">40</span> &#x3C; <span class=\"hljs-number\">80</span>, No se hace nada\n\n<span class=\"hljs-attribute\">Como</span> no hay intercambios en los pasos de arriba, el arreglo ya se ha ordenado y nos podemos detener.\n</code></pre>\n<h4>Enlaces a implementaciones de código</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/Sorts/BubbleSort.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/Sorting/Bubble%20Sort.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/sorts/bubble_sort.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Sharp/blob/master/sorts/bubble_sort.cs\">C-Sharp</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Go/blob/master/sorts/bubble_sort.go\">Go</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/Sorting/bubble_sort.rb\">Ruby</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C/blob/master/sorting/BubbleSort.c\">C</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Scala/blob/master/src/main/scala/Sort/BubbleSort.scala\">Scala</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Javascript/blob/master/Sorts/bubblesort.js\">Javascript</a></li>\n</ul>\n<h4>Explicación en video</h4>\n<p><a href=\"https://www.youtube.com/watch?v=EQMGabLO_M0\">Un video explicando el Algoritmo de Ordenamiento Burbuja</a></p>\n<h4>Otros</h4>\n<p>El Ordenamiento Burbuja también es conocido como Sinking sort.</p>\n<h4>Explicación animada</h4>\n<ul>\n<li><a href=\"https://boardhub.github.io/tute/?wd=bubbleSortAlgo2\">Tablero Tute</a></li>\n</ul>"
  },
  "implementations": {
    "python": {
      "dir": "sorts/bubble_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/bubble_sort.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bubble_sort</span>(<span class=\"hljs-params\">collection</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;Pure implementation of bubble sort algorithm in Python\n\n    :param collection: some mutable ordered collection with heterogeneous\n    comparable items inside\n    :return: the same collection ordered by ascending\n\n    Examples:\n    &gt;&gt;&gt; bubble_sort([0, 5, 2, 3, 2])\n    [0, 2, 2, 3, 5]\n    &gt;&gt;&gt; bubble_sort([0, 5, 2, 3, 2]) == sorted([0, 5, 2, 3, 2])\n    True\n    &gt;&gt;&gt; bubble_sort([]) == sorted([])\n    True\n    &gt;&gt;&gt; bubble_sort([-2, -45, -5]) == sorted([-2, -45, -5])\n    True\n    &gt;&gt;&gt; bubble_sort([-23, 0, 6, -4, 34]) == sorted([-23, 0, 6, -4, 34])\n    True\n    &gt;&gt;&gt; bubble_sort([&#x27;d&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;e&#x27;, &#x27;c&#x27;]) == sorted([&#x27;d&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;e&#x27;, &#x27;c&#x27;])\n    True\n    &gt;&gt;&gt; import random\n    &gt;&gt;&gt; collection = random.sample(range(-50, 50), 100)\n    &gt;&gt;&gt; bubble_sort(collection) == sorted(collection)\n    True\n    &gt;&gt;&gt; import string\n    &gt;&gt;&gt; collection = random.choices(string.ascii_letters + string.digits, k=100)\n    &gt;&gt;&gt; bubble_sort(collection) == sorted(collection)\n    True\n    &quot;&quot;&quot;</span>\n    length = <span class=\"hljs-built_in\">len</span>(collection)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(length - <span class=\"hljs-number\">1</span>):\n        swapped = <span class=\"hljs-literal\">False</span>\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(length - <span class=\"hljs-number\">1</span> - i):\n            <span class=\"hljs-keyword\">if</span> collection[j] &gt; collection[j + <span class=\"hljs-number\">1</span>]:\n                swapped = <span class=\"hljs-literal\">True</span>\n                collection[j], collection[j + <span class=\"hljs-number\">1</span>] = collection[j + <span class=\"hljs-number\">1</span>], collection[j]\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> swapped:\n            <span class=\"hljs-keyword\">break</span>  <span class=\"hljs-comment\"># Stop iteration if the collection is sorted.</span>\n    <span class=\"hljs-keyword\">return</span> collection\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n    <span class=\"hljs-keyword\">import</span> time\n\n    doctest.testmod()\n\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:&quot;</span>).strip()\n    unsorted = [<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\n    start = time.process_time()\n    <span class=\"hljs-built_in\">print</span>(*bubble_sort(unsorted), sep=<span class=\"hljs-string\">&quot;,&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Processing time: <span class=\"hljs-subst\">{time.process_time() - start}</span>&quot;</span>)\n"
    },
    "javascript": {
      "dir": "Sorts/BubbleSort.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts/BubbleSort.js",
      "code": "<span class=\"hljs-comment\">/* Bubble Sort is an algorithm to sort an array. It\n*  compares adjacent element and swaps their position\n*  The big O on bubble sort in worst and best case is O(N^2).\n*  Not efficient.\n*  Somehow if the array is sorted or nearly sorted then we can optimize bubble sort by adding a flag.\n*\n*  In bubble sort, we keep iterating while something was swapped in\n*  the previous inner-loop iteration. By swapped I mean, in the\n*  inner loop iteration, we check each number if the number proceeding\n*  it is greater than itself, if so we swap them.\n*\n*  Wikipedia: https://en.wikipedia.org/wiki/Bubble_sort\n*  Animated Visual: https://www.toptal.com/developers/sorting-algorithms/bubble-sort\n*/</span>\n\n<span class=\"hljs-comment\">/**\n * Using 2 for loops.\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bubbleSort</span> (items) {\n  <span class=\"hljs-keyword\">const</span> length = items.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">let</span> noSwaps\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = length; i &gt; <span class=\"hljs-number\">0</span>; i--) {\n    <span class=\"hljs-comment\">// flag for optimization</span>\n    noSwaps = <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-comment\">// Number of passes</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; (i - <span class=\"hljs-number\">1</span>); j++) {\n      <span class=\"hljs-comment\">// Compare the adjacent positions</span>\n      <span class=\"hljs-keyword\">if</span> (items[j] &gt; items[j + <span class=\"hljs-number\">1</span>]) {\n        <span class=\"hljs-comment\">// Swap the numbers</span>\n        [items[j], items[j + <span class=\"hljs-number\">1</span>]] = [items[j + <span class=\"hljs-number\">1</span>], items[j]]\n        noSwaps = <span class=\"hljs-literal\">false</span>\n      }\n    }\n    <span class=\"hljs-keyword\">if</span> (noSwaps) {\n      <span class=\"hljs-keyword\">break</span>\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> items\n}\n\n<span class=\"hljs-comment\">/**\n * Using a while loop and a for loop.\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">alternativeBubbleSort</span> (arr) {\n  <span class=\"hljs-keyword\">let</span> swapped = <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-keyword\">while</span> (swapped) {\n    swapped = <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>; i++) {\n      <span class=\"hljs-keyword\">if</span> (arr[i] &gt; arr[i + <span class=\"hljs-number\">1</span>]) {\n        [arr[i], arr[i + <span class=\"hljs-number\">1</span>]] = [arr[i + <span class=\"hljs-number\">1</span>], arr[i]]\n        swapped = <span class=\"hljs-literal\">true</span>\n      }\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> arr\n}\n"
    },
    "c-plus-plus": {
      "dir": "sorting/bubble_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/bubble_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Bubble sort algorithm\n *\n * The working principle of the Bubble sort algorithm:\n\nBubble sort algorithm is the bubble sorting algorithm. The most important reason\nfor calling the bubble is that the largest number is thrown at the end of this\nalgorithm. This is all about the logic. In each iteration, the largest number is\nexpired and when iterations are completed, the sorting takes place.\n\nWhat is Swap?\n\nSwap in the software means that two variables are displaced.\nAn additional variable is required for this operation. x = 5, y = 10.\nWe want x = 10, y = 5. Here we create the most variable to do it.\n\nint z;\nz = x;\nx = y;\ny = z;\n\nThe above process is a typical displacement process.\nWhen x assigns the value to x, the old value of x is lost.\nThat&#x27;s why we created a variable z to create the first value of the value of x,\nand finally, we have assigned to y.\n\nBubble Sort Algorithm Analysis (Best Case - Worst Case - Average Case)\n\nBubble Sort Worst Case Performance is O (n²). Why is that? Because if you\nremember Big O Notation, we were calculating the complexity of the algorithms in\nthe nested loops. The n * (n - 1) product gives us O (n²) performance. In the\nworst case all the steps of the cycle will occur. Bubble Sort (Avarage Case)\nPerformance. Bubble Sort is not an optimal algorithm. in average, O (n²)\nperformance is taken. Bubble Sort Best Case Performance. O (n). However, you\ncan&#x27;t get the best status in the code we shared above. This happens on the\noptimized bubble sort algorithm. It&#x27;s right down there.\n*/</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> n;\n    <span class=\"hljs-type\">bool</span> swap_check = <span class=\"hljs-literal\">true</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the amount of numbers to sort: &quot;</span>;\n    std::cin &gt;&gt; n;\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; numbers;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter &quot;</span> &lt;&lt; n &lt;&lt; <span class=\"hljs-string\">&quot; numbers: &quot;</span>;\n    <span class=\"hljs-type\">int</span> num;\n\n    <span class=\"hljs-comment\">// Input</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        std::cin &gt;&gt; num;\n        numbers.<span class=\"hljs-built_in\">push_back</span>(num);\n    }\n\n    <span class=\"hljs-comment\">// Bubble Sorting</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; (i &lt; n) &amp;&amp; (swap_check); i++) {\n        swap_check = <span class=\"hljs-literal\">false</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n - <span class=\"hljs-number\">1</span> - i; j++) {\n            <span class=\"hljs-keyword\">if</span> (numbers[j] &gt; numbers[j + <span class=\"hljs-number\">1</span>]) {\n                swap_check = <span class=\"hljs-literal\">true</span>;\n                std::<span class=\"hljs-built_in\">swap</span>(numbers[j],\n                          numbers[j + <span class=\"hljs-number\">1</span>]);  <span class=\"hljs-comment\">// by changing swap location.</span>\n                                            <span class=\"hljs-comment\">// I mean, j. If the number is</span>\n                                            <span class=\"hljs-comment\">// greater than j + 1, then it</span>\n                                            <span class=\"hljs-comment\">// means the location.</span>\n            }\n        }\n    }\n\n    <span class=\"hljs-comment\">// Output</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nSorted Array : &quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; numbers.<span class=\"hljs-built_in\">size</span>(); i++) {\n        <span class=\"hljs-keyword\">if</span> (i != numbers.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>) {\n            std::cout &lt;&lt; numbers[i] &lt;&lt; <span class=\"hljs-string\">&quot;, &quot;</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            std::cout &lt;&lt; numbers[i] &lt;&lt; std::endl;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/sorts/BubbleSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/sorts/BubbleSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> com.thealgorithms.sorts.SortUtils.*;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> Varun Upadhyay (https://github.com/varunu28)\n * <span class=\"hljs-doctag\">@author</span> Podshivalov Nikita (https://github.com/nikitap492)\n * <span class=\"hljs-doctag\">@see</span> SortAlgorithm\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BubbleSort</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SortAlgorithm</span> {\n\n    <span class=\"hljs-comment\">/**\n     * Implements generic bubble sort algorithm.\n     *\n     * <span class=\"hljs-doctag\">@param</span> array the array to be sorted.\n     * <span class=\"hljs-doctag\">@param</span> &lt;T&gt; the type of elements in the array.\n     * <span class=\"hljs-doctag\">@return</span> the sorted array.\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; T[] sort(T[] array) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>, size = array.length; i &lt; size; ++i) {\n            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">swapped</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; size - i; ++j) {\n                <span class=\"hljs-keyword\">if</span> (greater(array[j], array[j + <span class=\"hljs-number\">1</span>])) {\n                    swap(array, j, j + <span class=\"hljs-number\">1</span>);\n                    swapped = <span class=\"hljs-literal\">true</span>;\n                }\n            }\n            <span class=\"hljs-keyword\">if</span> (!swapped) {\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> array;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Driver Code\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n        Integer[] integers = {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">231</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">12</span>};\n        <span class=\"hljs-type\">BubbleSort</span> <span class=\"hljs-variable\">bubbleSort</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BubbleSort</span>();\n        bubbleSort.sort(integers);\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; integers.length - <span class=\"hljs-number\">1</span>; ++i) {\n            <span class=\"hljs-keyword\">assert</span> integers[i] &lt;= integers[i + <span class=\"hljs-number\">1</span>];\n        }\n        print(integers);\n        <span class=\"hljs-comment\">/* output: [1, 4, 6, 9, 12, 23, 54, 78, 231] */</span>\n\n        String[] strings = {<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>};\n        bubbleSort.sort(strings);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; strings.length - <span class=\"hljs-number\">1</span>; i++) {\n            <span class=\"hljs-keyword\">assert</span> strings[i].compareTo(strings[i + <span class=\"hljs-number\">1</span>]) &lt;= <span class=\"hljs-number\">0</span>;\n        }\n        print(bubbleSort.sort(strings));\n        <span class=\"hljs-comment\">/* output: [a, b, c, d, e] */</span>\n    }\n}\n"
    },
    "c": {
      "dir": "sorting/bubble_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/bubble_sort.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief [Bubble sort](https://en.wikipedia.org/wiki/Bubble_sort) algorithm\n * implementation\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdbool.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * Display elements of array\n * @param arr array to be display\n * @param n length of array\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> n)</span>\n{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, arr[i]);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * Swap two values by using pointer\n * @param first first pointer of first number\n * @param second second pointer of second number\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *first, <span class=\"hljs-type\">int</span> *second)</span>\n{\n    <span class=\"hljs-type\">int</span> temp = *first;\n    *first = *second;\n    *second = temp;\n}\n\n<span class=\"hljs-comment\">/**\n * Bubble sort algorithm implementation\n * @param arr array to be sorted\n * @param size size of array\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">bubbleSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> size)</span>\n{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size - <span class=\"hljs-number\">1</span>; i++)\n    {                         <span class=\"hljs-comment\">/* for each array index */</span>\n        <span class=\"hljs-type\">bool</span> swapped = <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">/* flag to check if any changes had to be made */</span>\n        <span class=\"hljs-comment\">/* perform iterations until no more changes were made or outer loop\n            executed for all array indices */</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; size - <span class=\"hljs-number\">1</span> - i; j++)\n        { <span class=\"hljs-comment\">/* for each element in the array */</span>\n            <span class=\"hljs-keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"hljs-number\">1</span>])\n            { <span class=\"hljs-comment\">/* if the order of successive elements needs update */</span>\n                swap(&amp;arr[j], &amp;arr[j + <span class=\"hljs-number\">1</span>]);\n                swapped = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">/* set flag */</span>\n            }\n        }\n        <span class=\"hljs-keyword\">if</span> (!swapped)\n        {\n            <span class=\"hljs-comment\">/* since no more updates we made, the array is already sorted\n                this is an optimization for early termination */</span>\n            <span class=\"hljs-keyword\">break</span>;\n        }\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * Test function\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> size = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-type\">int</span> *arr = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">calloc</span>(size, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\n\n    <span class=\"hljs-comment\">/* generate size random numbers from 0 to 100 */</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++)\n    {\n        arr[i] = rand() % <span class=\"hljs-number\">100</span>;\n    }\n    bubbleSort(arr, size);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size - <span class=\"hljs-number\">1</span>; ++i)\n    {\n        assert(arr[i] &lt;= arr[i + <span class=\"hljs-number\">1</span>]);\n    }\n    <span class=\"hljs-built_in\">free</span>(arr);\n}\n\n<span class=\"hljs-comment\">/** Driver Code */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *argv[])</span>\n{\n    <span class=\"hljs-comment\">/* Intializes random number generator */</span>\n    srand(time(<span class=\"hljs-literal\">NULL</span>));\n    test();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "haskell": {
      "dir": "src/Sorts/BubbleSort.hs",
      "url": "https://github.com/TheAlgorithms/haskell/tree/master/src/Sorts/BubbleSort.hs",
      "code": "<span class=\"hljs-keyword\">module</span> Sorts.BubbleSort <span class=\"hljs-keyword\">where</span>\n\n<span class=\"hljs-title\">listToSort</span> :: [<span class=\"hljs-type\">Int</span>]\n<span class=\"hljs-title\">listToSort</span> = [<span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">20</span>]\n\n\n<span class=\"hljs-comment\">-- The bubble sort function</span>\n<span class=\"hljs-title\">bubbleSort</span> :: (<span class=\"hljs-type\">Ord</span> a) =&gt; [a] -&gt; [a]\n<span class=\"hljs-title\">bubbleSort</span> lst = <span class=\"hljs-keyword\">if</span> bpassed == lst <span class=\"hljs-keyword\">then</span> lst\n                 <span class=\"hljs-keyword\">else</span> bubbleSort bpassed\n                 <span class=\"hljs-keyword\">where</span> bpassed = bubblePass lst\n\n<span class=\"hljs-comment\">-- A single pass of bubble sort</span>\n<span class=\"hljs-title\">bubblePass</span> :: (<span class=\"hljs-type\">Ord</span> a) =&gt; [a] -&gt; [a]\n<span class=\"hljs-title\">bubblePass</span> [] = [] <span class=\"hljs-comment\">-- Empty list is empty.</span>\n<span class=\"hljs-title\">bubblePass</span> [x] = [x] <span class=\"hljs-comment\">-- Singleton list is always trivially sorted.</span>\n<span class=\"hljs-title\">bubblePass</span> (x1:x2:xs) = <span class=\"hljs-keyword\">if</span> x1 &gt; x2\n                        <span class=\"hljs-keyword\">then</span> [x2] ++ (bubblePass ([x1] ++ xs))\n                        <span class=\"hljs-keyword\">else</span> [x1] ++ (bubblePass ([x2] ++ xs))\n\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\n    putStrLn $ <span class=\"hljs-string\">&quot;Unsorted: &quot;</span> ++ show listToSort\n    putStrLn $ <span class=\"hljs-string\">&quot;Sorted: &quot;</span> ++ show (bubbleSort listToSort)"
    },
    "f-sharp": {
      "dir": "Algorithms/Sort/Bubble_Sort.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms/Sort/Bubble_Sort.fs",
      "code": "﻿<span class=\"hljs-keyword\">namespace</span> Algorithms.Sort\n\n<span class=\"hljs-keyword\">module</span> BubbleSort <span class=\"hljs-operator\">=</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">rec</span> Sort list<span class=\"hljs-operator\">:</span> <span class=\"hljs-symbol\">&#x27;T</span> [] <span class=\"hljs-operator\">=</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> updated <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> list <span class=\"hljs-operator\">=</span> list <span class=\"hljs-operator\">|&gt;</span> Array.copy\n        <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..</span> list.Length <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\n            <span class=\"hljs-keyword\">if</span> index <span class=\"hljs-operator\">&lt;</span> list.Length <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">then</span>\n                <span class=\"hljs-keyword\">let</span> current <span class=\"hljs-operator\">=</span> list.[index]\n                <span class=\"hljs-keyword\">let</span> next <span class=\"hljs-operator\">=</span> list.[index <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>]\n                <span class=\"hljs-keyword\">if</span> next <span class=\"hljs-operator\">&lt;</span> current <span class=\"hljs-keyword\">then</span>\n                    list.[index] <span class=\"hljs-operator\">&lt;-</span> next\n                    list.[index <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>] <span class=\"hljs-operator\">&lt;-</span> current\n                    updated <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-keyword\">if</span> updated <span class=\"hljs-keyword\">then</span> list <span class=\"hljs-operator\">&lt;-</span> Sort list\n        list\n"
    },
    "go": {
      "dir": "sort/bubblesort.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/sort/bubblesort.go",
      "code": "<span class=\"hljs-comment\">// Implementation of basic bubble sort algorithm</span>\n<span class=\"hljs-comment\">// Reference: https://en.wikipedia.org/wiki/Bubble_sort</span>\n\n<span class=\"hljs-keyword\">package</span> sort\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;github.com/TheAlgorithms/Go/constraints&quot;</span>\n\n<span class=\"hljs-comment\">// Bubble is a simple generic definition of Bubble sort algorithm.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Bubble</span>[<span class=\"hljs-title\">T</span> <span class=\"hljs-title\">constraints</span>.<span class=\"hljs-title\">Ordered</span>]<span class=\"hljs-params\">(arr []T)</span></span> []T {\n\tswapped := <span class=\"hljs-literal\">true</span>\n\t<span class=\"hljs-keyword\">for</span> swapped {\n\t\tswapped = <span class=\"hljs-literal\">false</span>\n\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(arr)<span class=\"hljs-number\">-1</span>; i++ {\n\t\t\t<span class=\"hljs-keyword\">if</span> arr[i+<span class=\"hljs-number\">1</span>] &lt; arr[i] {\n\t\t\t\tarr[i+<span class=\"hljs-number\">1</span>], arr[i] = arr[i], arr[i+<span class=\"hljs-number\">1</span>]\n\t\t\t\tswapped = <span class=\"hljs-literal\">true</span>\n\t\t\t}\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> arr\n}\n"
    },
    "rust": {
      "dir": "src/sorting/bubble_sort.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/sorting/bubble_sort.rs",
      "code": "<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">bubble_sort</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(arr: &amp;<span class=\"hljs-keyword\">mut</span> [T]) {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">sorted</span> = <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">n</span> = arr.<span class=\"hljs-title function_ invoke__\">len</span>();\n    <span class=\"hljs-keyword\">while</span> !sorted {\n        sorted = <span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..n - <span class=\"hljs-number\">1</span> {\n            <span class=\"hljs-keyword\">if</span> arr[i] &gt; arr[i + <span class=\"hljs-number\">1</span>] {\n                arr.<span class=\"hljs-title function_ invoke__\">swap</span>(i, i + <span class=\"hljs-number\">1</span>);\n                sorted = <span class=\"hljs-literal\">false</span>;\n            }\n        }\n        n -= <span class=\"hljs-number\">1</span>;\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">descending</span>() {\n        <span class=\"hljs-comment\">//descending</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">ve1</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-title function_ invoke__\">bubble_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> ve1);\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..ve1.<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">1</span> {\n            <span class=\"hljs-built_in\">assert!</span>(ve1[i] &lt;= ve1[i + <span class=\"hljs-number\">1</span>]);\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">ascending</span>() {\n        <span class=\"hljs-comment\">//pre-sorted</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">ve2</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n        <span class=\"hljs-title function_ invoke__\">bubble_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> ve2);\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..ve2.<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">1</span> {\n            <span class=\"hljs-built_in\">assert!</span>(ve2[i] &lt;= ve2[i + <span class=\"hljs-number\">1</span>]);\n        }\n    }\n}\n"
    },
    "aarch64_assembly": {
      "dir": "sorters/bubble_sort.s",
      "url": "https://github.com/TheAlgorithms/aarch64_assembly/tree/master/sorters/bubble_sort.s",
      "code": "<span class=\"hljs-comment\">/* ARM assembly AARCH64 Raspberry PI 3B */</span>\n<span class=\"hljs-comment\">/*  program bubbleSort64.s  */</span>\n \n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* Constantes file                         */</span>\n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeConstantesARM64.inc&quot;</span>\n \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* Initialized data              */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.data</span>\n<span class=\"hljs-symbol\">szMessSortOk:</span>       <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table sorted.\\n&quot;</span>\n<span class=\"hljs-symbol\">szMessSortNok:</span>      <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table not sorted !!!!!.\\n&quot;</span>\n<span class=\"hljs-symbol\">sMessResult:</span>        <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Value  : @ \\n&quot;</span>\n<span class=\"hljs-symbol\">szCarriageReturn:</span>   <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;\\n&quot;</span>\n \n<span class=\"hljs-symbol\">.align</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-symbol\">TableNumber:</span>      .quad   <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">7</span>\n<span class=\"hljs-comment\">#TableNumber:     .quad   10,9,8,7,6,5,4,3,2,1</span>\n                 <span class=\"hljs-meta\">.equ</span> NBELEMENTS, (. - TableNumber) / <span class=\"hljs-number\">8</span> \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* UnInitialized data            */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.bss</span>\n<span class=\"hljs-symbol\">sZoneConv:</span>       <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">24</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/*  code section                 */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.text</span>\n<span class=\"hljs-symbol\">.global</span> main \n<span class=\"hljs-symbol\">main:</span>                                              <span class=\"hljs-comment\">// entry of program </span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">mov</span> x2,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\n    <span class=\"hljs-keyword\">bl</span> bubbleSort\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">bl</span> displayTable\n \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">mov</span> x1,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\n    <span class=\"hljs-keyword\">bl</span> isSorted                                    <span class=\"hljs-comment\">// control sort</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">1</span>                                       <span class=\"hljs-comment\">// sorted ?</span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">1</span>f                                    \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortNok                       <span class=\"hljs-comment\">// no !! error sort</span>\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\n<span class=\"hljs-number\">1</span>:                                                 <span class=\"hljs-comment\">// yes</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortOk\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n<span class=\"hljs-number\">100</span>:                                               <span class=\"hljs-comment\">// standard end of the program </span>\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                                       <span class=\"hljs-comment\">// return code</span>\n    <span class=\"hljs-keyword\">mov</span> x8,EXIT                                    <span class=\"hljs-comment\">// request to exit program</span>\n    <span class=\"hljs-keyword\">svc</span> <span class=\"hljs-number\">0</span>                                          <span class=\"hljs-comment\">// perform the system call</span>\n \n<span class=\"hljs-symbol\">qAdrsZoneConv:</span>            .quad sZoneConv\n<span class=\"hljs-symbol\">qAdrszCarriageReturn:</span>     .quad szCarriageReturn\n<span class=\"hljs-symbol\">qAdrsMessResult:</span>          .quad sMessResult\n<span class=\"hljs-symbol\">qAdrTableNumber:</span>          .quad TableNumber\n<span class=\"hljs-symbol\">qAdrszMessSortOk:</span>         .quad szMessSortOk\n<span class=\"hljs-symbol\">qAdrszMessSortNok:</span>        .quad szMessSortNok\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*     control sorted table                                   */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains the number of elements  &gt; 0  */</span>\n<span class=\"hljs-comment\">/* x0 return 0  if not sorted   1  if sorted */</span>\n<span class=\"hljs-symbol\">isSorted:</span>\n    stp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">ldr</span> x4,[x0,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">cmp</span> x2,x1\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">99</span>f\n    <span class=\"hljs-keyword\">ldr</span> x3,[x0,x2, <span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">cmp</span> x3,x4\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">98</span>f\n    <span class=\"hljs-keyword\">mov</span> x4,x3\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b\n<span class=\"hljs-number\">98</span>:\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                       <span class=\"hljs-comment\">// not sorted</span>\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\n<span class=\"hljs-number\">99</span>:\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">1</span>                       <span class=\"hljs-comment\">// sorted</span>\n<span class=\"hljs-number\">100</span>:\n    ldp x3,x4,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*         bubble sort                                              */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains the first element    */</span>\n<span class=\"hljs-comment\">/* x2 contains the number of element */</span>\n<span class=\"hljs-symbol\">bubbleSort:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\n    stp x4,x5,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\n    stp x6,x7,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\n    stp x8,x9,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">sub</span> x2,x2,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// compute i = n - 1</span>\n    <span class=\"hljs-keyword\">add</span> x8,x1,<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">1</span>:                             <span class=\"hljs-comment\">// start loop 1</span>\n    <span class=\"hljs-keyword\">mov</span> x3,x1                  <span class=\"hljs-comment\">// start index</span>\n    <span class=\"hljs-keyword\">mov</span> x9,<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">sub</span> x7,x2,<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span>:                             <span class=\"hljs-comment\">// start loop 2</span>\n    <span class=\"hljs-keyword\">add</span> x4,x3,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">ldr</span> x5,[x0,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// load value A[j]</span>\n    <span class=\"hljs-keyword\">ldr</span> x6,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// load value A[j+1]</span>\n    <span class=\"hljs-keyword\">cmp</span> x6,x5                  <span class=\"hljs-comment\">// compare value</span>\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">3</span>f \n    <span class=\"hljs-keyword\">str</span> x6,[x0,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// if smaller inversion</span>\n    <span class=\"hljs-keyword\">str</span> x5,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>] \n    <span class=\"hljs-keyword\">mov</span> x9,<span class=\"hljs-number\">1</span>                   <span class=\"hljs-comment\">// top table not sorted</span>\n<span class=\"hljs-number\">3</span>:\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// increment index j</span>\n    <span class=\"hljs-keyword\">cmp</span> x3,x7                  <span class=\"hljs-comment\">// end ?</span>\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">2</span>b                     <span class=\"hljs-comment\">// no -&gt; loop 2</span>\n    <span class=\"hljs-keyword\">cmp</span> x9,<span class=\"hljs-number\">0</span>                   <span class=\"hljs-comment\">// table sorted ?</span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">100</span>f                   <span class=\"hljs-comment\">// yes -&gt; end</span>\n \n    <span class=\"hljs-keyword\">sub</span> x2,x2,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// decrement i</span>\n    <span class=\"hljs-keyword\">cmp</span> x2,x8                  <span class=\"hljs-comment\">// end ?</span>\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">1</span>b                     <span class=\"hljs-comment\">// no -&gt; loop 1</span>\n \n<span class=\"hljs-number\">100</span>:\n    ldp x8,x9,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x6,x7,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x4,x5,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                        <span class=\"hljs-comment\">// return to address lr x30</span>\n \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*      Display table elements                                */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-symbol\">displayTable:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x2,x0                        <span class=\"hljs-comment\">// table address</span>\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">1</span>:                                   <span class=\"hljs-comment\">// loop display table</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,[x2,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\n    <span class=\"hljs-keyword\">bl</span> conversion10                  <span class=\"hljs-comment\">// décimal conversion</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrsMessResult\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\n    <span class=\"hljs-keyword\">bl</span> strInsertAtCharInc            <span class=\"hljs-comment\">// insert result at @ character</span>\n    <span class=\"hljs-keyword\">bl</span> affichageMess                 <span class=\"hljs-comment\">// display message</span>\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">cmp</span> x3,NBELEMENTS - <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">1</span>b\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszCarriageReturn\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n<span class=\"hljs-number\">100</span>:\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                             <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/*        File Include fonctions                        */</span>\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeARM64.inc&quot;</span>\n"
    },
    "dart": {
      "dir": "sort/bubble_Sort.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/sort/bubble_Sort.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;dart:math&#x27;</span> <span class=\"hljs-keyword\">show</span> Random;\r\n\r\n<span class=\"hljs-comment\">//main function,the program start</span>\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  <span class=\"hljs-keyword\">final</span> seed = <span class=\"hljs-number\">100</span>, rnd = Random(), length = <span class=\"hljs-number\">100</span>;\r\n  <span class=\"hljs-keyword\">var</span> list =\r\n      <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt;.generate(length, (i) =&gt; rnd.nextInt(seed), growable: <span class=\"hljs-keyword\">false</span>);\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;before sorting:&#x27;</span>);\r\n  <span class=\"hljs-built_in\">print</span>(list);\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;---------------------------------------------&#x27;</span>);\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;After sorting:&#x27;</span>);\r\n  bubbleSort(list);\r\n  <span class=\"hljs-built_in\">print</span>(list);\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> bubbleSort(<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; a) {\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>, length = a.length; i &lt; length - <span class=\"hljs-number\">1</span>; ++i) {\r\n    <span class=\"hljs-built_in\">bool</span> swapped = <span class=\"hljs-keyword\">false</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>; j &lt; length - <span class=\"hljs-number\">1</span> - i; ++j) {\r\n      <span class=\"hljs-keyword\">if</span> (a[j] &gt; a[j + <span class=\"hljs-number\">1</span>]) {\r\n        <span class=\"hljs-comment\">/* swap */</span>\r\n        <span class=\"hljs-keyword\">var</span> temp = a[j];\r\n        a[j] = a[j + <span class=\"hljs-number\">1</span>];\r\n        a[j + <span class=\"hljs-number\">1</span>] = temp;\r\n        swapped = <span class=\"hljs-keyword\">true</span>;\r\n      }\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (!swapped) {\r\n      <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">/* array has been sorted */</span>\r\n    }\r\n  }\r\n}\r\n"
    },
    "r": {
      "dir": "Sorting-Algorithms/bubble_sort.R",
      "url": "https://github.com/TheAlgorithms/r/tree/master/Sorting-Algorithms/bubble_sort.R",
      "code": "<span class=\"hljs-comment\"># Bubble sort in R:</span>\n\nbubble.sort <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span> \n  n <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span>\n  <span class=\"hljs-keyword\">for</span><span class=\"hljs-punctuation\">(</span>i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">:</span><span class=\"hljs-punctuation\">(</span>n<span class=\"hljs-operator\">-</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-keyword\">for</span><span class=\"hljs-punctuation\">(</span>j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">:</span><span class=\"hljs-punctuation\">(</span>n<span class=\"hljs-operator\">-</span>i<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-keyword\">if</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">[</span>j<span class=\"hljs-operator\">+</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">&lt;</span> elements.vec<span class=\"hljs-punctuation\">[</span>j<span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span> \n        temp <span class=\"hljs-operator\">&lt;-</span> elements.vec<span class=\"hljs-punctuation\">[</span>j<span class=\"hljs-punctuation\">]</span>\n        elements.vec<span class=\"hljs-punctuation\">[</span>j<span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">&lt;-</span> elements.vec<span class=\"hljs-punctuation\">[</span>j<span class=\"hljs-operator\">+</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">]</span>\n        elements.vec<span class=\"hljs-punctuation\">[</span>j<span class=\"hljs-operator\">+</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">&lt;-</span> temp\n      <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span>\n<span class=\"hljs-punctuation\">}</span>\n\n<span class=\"hljs-comment\"># Example:</span>\n<span class=\"hljs-comment\"># bubble.sort(c(5, 2, 3, 1, 4))</span>\n<span class=\"hljs-comment\"># [1] 1 2 3 4 5</span>\n"
    },
    "ruby": {
      "dir": "sorting/bubble_sort.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/sorting/bubble_sort.rb",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bubble_sort</span>(<span class=\"hljs-params\">array</span>)\n  array_length = array.length\n  <span class=\"hljs-keyword\">return</span> array <span class=\"hljs-keyword\">if</span> array_length &lt;= <span class=\"hljs-number\">1</span>\n  unsorted_until_index = array_length - <span class=\"hljs-number\">1</span>\n  sorted = <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">until</span> sorted\n    sorted = <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-number\">0</span>.upto(unsorted_until_index - <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">i</span>|\n      <span class=\"hljs-keyword\">if</span> array[i] &gt; array[i+<span class=\"hljs-number\">1</span>]\n        array[i], array[i+<span class=\"hljs-number\">1</span>] = array[i+<span class=\"hljs-number\">1</span>], array[i]\n        sorted = <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n    unsorted_until_index -= <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">return</span> array\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">$0</span> == <span class=\"hljs-variable constant_\">__FILE__</span>\n  puts <span class=\"hljs-string\">&#x27;Enter a list of numbers separated by space&#x27;</span>\n\n  list = gets\n  bubble_sort(list)\n  print list\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "php": {
      "dir": "sorting/bubbleSort.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/sorting/bubbleSort.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bubbleSort</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$array</span></span>) </span>{\n    <span class=\"hljs-variable\">$length</span>=<span class=\"hljs-title function_ invoke__\">count</span>(<span class=\"hljs-variable\">$array</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span>=<span class=\"hljs-variable\">$length</span>;<span class=\"hljs-variable\">$i</span>&gt;<span class=\"hljs-number\">0</span>;<span class=\"hljs-variable\">$i</span>--){\n        <span class=\"hljs-variable\">$swape</span>=<span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$j</span>=<span class=\"hljs-number\">0</span>;<span class=\"hljs-variable\">$j</span>&lt;<span class=\"hljs-variable\">$i</span>-<span class=\"hljs-number\">1</span>;<span class=\"hljs-variable\">$j</span>++){\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$j</span>]&gt;<span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$j</span>+<span class=\"hljs-number\">1</span>]){\n                <span class=\"hljs-variable\">$temp</span>=<span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$j</span>];\n                <span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$j</span>]=<span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$j</span>+<span class=\"hljs-number\">1</span>];\n                <span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$j</span>+<span class=\"hljs-number\">1</span>]=<span class=\"hljs-variable\">$temp</span>;\n                <span class=\"hljs-variable\">$swape</span>=<span class=\"hljs-literal\">false</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$swape</span>)<span class=\"hljs-keyword\">break</span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$array</span>;\n}\n\n\n"
    },
    "elixir": {
      "dir": "lib/sorting/bubble_sort.ex",
      "url": "https://github.com/TheAlgorithms/elixir/tree/master/lib/sorting/bubble_sort.ex",
      "code": "<span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">Algorithms.Sorting.BubbleSort</span></span> <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-variable\">@moduledoc</span> <span class=\"hljs-string\">&quot;&quot;&quot;\n  Implementation of BubbleSort algorithm (https://en.wikipedia.org/wiki/Bubblesort)\n\n  Given an array of numbers, sorts it in ascending order\n  using the bubblesort algorithm.\n\n  Bubble sort algorithm uses a simple iterative strategy. \n  Starting with the first element, it compares it with the second element; if \n  the first one is larger, it swaps them, remembers that it performed a swap,\n  and continues to compare elements two and three, three and four and so forth.\n  When it reaches the end of the array, if at least one swap was performed, it\n  starts again at the beginning; if no swap was performed, the array is sorted, \n  and the algorithm terminates. \n\n  Example (the star denotes the current element):\n   [*2, 1, 5, 4, 3] \n    1. 2 is larger than 1: swap them\n    2. [1, *2, 5, 4, 3]\n    3. 2 is smaller than 5: no swap, continue at next element \n    4. [1, 2, *5, 4, 3]\n    5. 5 is larger than 4: swap them \n    6. [1, 2, 4, *5, 3]\n    7. 5 is larger than 3: swap them \n    8. [1, 2, 4, 3, *5]\n    9. end of array is reached; we performed at least one swap, so start again\n    10. [*1, 2, 4, 3, 5]\n    11. 1 is smaller than 2: no swap, continue at next element \n    12. [1, *2, 4, 3, 5]\n    13. 2 is smaller than 4: no swap, continue at next element \n    14. [1, 2, *4, 3, 5]\n    15. 4 is larger than 3: swap them\n    14. [1, 2, 3, *4, 5]\n    15. 4 is smaller than 5: no swap, continue at next element \n    16. [1, 2, 3, 4, *5]\n    17. end of array is reached; we performed at least one swap, so start again\n    (we&#x27;ll skip the last couple of steps - the array is sorted, no swaps are performed, and the algorithm terminates)\n   \n   [2, 1, 5, 4, 3] =&gt; [1, 2, 3, 4, 5]\n  Complexity: O(n*n)\n  &quot;&quot;&quot;</span>\n  <span class=\"hljs-keyword\">require</span> <span class=\"hljs-title class_\">Integer</span>\n\n  <span class=\"hljs-variable\">@doc</span> <span class=\"hljs-string\">&quot;&quot;&quot;\n    take a List and return the List with the numbers ordered\n  &quot;&quot;&quot;</span>\n  <span class=\"hljs-variable\">@spec</span> bubble_pass(list(<span class=\"hljs-title class_\">Integer</span>)) :: list(<span class=\"hljs-title class_\">Integer</span>)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bubble_pass</span></span>([]), <span class=\"hljs-symbol\">do:</span> []\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bubble_pass</span></span>([x]), <span class=\"hljs-symbol\">do:</span> [x]\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bubble_pass</span></span>([ x1 | [x2 | xs]]) <span class=\"hljs-keyword\">do</span>\n    <span class=\"hljs-keyword\">case</span> x1 &lt; x2 <span class=\"hljs-keyword\">do</span>\n      <span class=\"hljs-literal\">true</span>  -&gt; <span class=\"hljs-title class_\">Enum</span>.concat([x1], bubble_pass(<span class=\"hljs-title class_\">Enum</span>.concat([x2], xs)))\n      <span class=\"hljs-literal\">false</span> -&gt; <span class=\"hljs-title class_\">Enum</span>.concat([x2], bubble_pass(<span class=\"hljs-title class_\">Enum</span>.concat([x1], xs)))\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-variable\">@spec</span> bubble_sort(list(<span class=\"hljs-title class_\">Integer</span>)) :: list(<span class=\"hljs-title class_\">Integer</span>)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bubble_sort</span></span>(lst) <span class=\"hljs-keyword\">do</span> \n    bpassed = bubble_pass(lst)\n    <span class=\"hljs-keyword\">case</span> bpassed == lst <span class=\"hljs-keyword\">do</span>\n      <span class=\"hljs-literal\">true</span> -&gt; bpassed\n      <span class=\"hljs-literal\">false</span> -&gt; bubble_sort(bpassed) \n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "kotlin": {
      "dir": "src/main/kotlin/sort/BubbleSort.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src/main/kotlin/sort/BubbleSort.kt",
      "code": "<span class=\"hljs-keyword\">package</span> sort\n\n<span class=\"hljs-comment\">/**\n * This method implements the Generic Bubble Sort\n *\n * <span class=\"hljs-doctag\">@param</span> array The array to be sorted\n * Sorts the array in increasing order\n *\n * Worst-case performance\tO(n^2)\n * Best-case performance\tO(n)\n * Average performance\tO(n^2)\n * Worst-case space complexity\tO(1)\n **/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-type\">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class=\"hljs-title\">bubbleSort</span><span class=\"hljs-params\">(array: <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">T</span>&gt;)</span></span> {\n    <span class=\"hljs-keyword\">val</span> length = array.size - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">for</span> (i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0.</span>.length) {\n        <span class=\"hljs-keyword\">var</span> isSwapped = <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">for</span> (j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1.</span>.length) {\n            <span class=\"hljs-keyword\">if</span> (array[j] &lt; array[j - <span class=\"hljs-number\">1</span>]) {\n                isSwapped = <span class=\"hljs-literal\">true</span>\n                swapElements(array, j, j - <span class=\"hljs-number\">1</span>)\n            }\n        }\n\n        <span class=\"hljs-keyword\">if</span> (!isSwapped) <span class=\"hljs-keyword\">break</span>\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * This method swaps the element at two indexes\n *\n * <span class=\"hljs-doctag\">@param</span> array The array containing the elements\n * <span class=\"hljs-doctag\">@param</span> idx1 Index of first element\n * <span class=\"hljs-doctag\">@param</span> idx2 Index of second element\n * Swaps the element at two indexes\n **/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-type\">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class=\"hljs-title\">swapElements</span><span class=\"hljs-params\">(array: <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">T</span>&gt;, idx1: <span class=\"hljs-type\">Int</span>, idx2: <span class=\"hljs-type\">Int</span>)</span></span> {\n    array[idx1] = array[idx2].also {\n        array[idx2] = array[idx1]\n    }\n}\n"
    },
    "scala": {
      "dir": "src/main/scala/Sort/BubbleSort.scala",
      "url": "https://github.com/TheAlgorithms/scala/tree/master/src/main/scala/Sort/BubbleSort.scala",
      "code": "<span class=\"hljs-keyword\">package</span> <span class=\"hljs-type\">Sort</span>\n\n<span class=\"hljs-keyword\">import</span> scala.util.control.<span class=\"hljs-type\">Breaks</span>._\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">BubbleSort</span> </span>{\n\n  <span class=\"hljs-comment\">/** @param array\n    *   - a sequence of unsorted integers\n    * @return\n    *   - sequence of sorted integers @array\n    */</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bubbleSort</span></span>(array: <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>]): <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>] = {\n\n    breakable {\n      <span class=\"hljs-keyword\">for</span> (_ &lt;- array.indices) {\n        <span class=\"hljs-keyword\">var</span> swap = <span class=\"hljs-literal\">false</span>\n\n        <span class=\"hljs-keyword\">for</span> (j &lt;- <span class=\"hljs-number\">0</span> to array.length - <span class=\"hljs-number\">2</span>) {\n          <span class=\"hljs-keyword\">if</span> (array(j) &gt; array(j + <span class=\"hljs-number\">1</span>)) {\n            <span class=\"hljs-keyword\">val</span> temp = array(j)\n            array(j) = array(j + <span class=\"hljs-number\">1</span>)\n            array(j + <span class=\"hljs-number\">1</span>) = temp\n            swap = <span class=\"hljs-literal\">true</span>\n          }\n        }\n\n        <span class=\"hljs-keyword\">if</span> (!swap) {\n          <span class=\"hljs-keyword\">break</span>()\n        }\n      }\n    }\n\n    array\n  }\n\n}\n"
    },
    "swift": {
      "dir": "sorts/BubbleSort.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/sorts/BubbleSort.swift",
      "code": "<span class=\"hljs-keyword\">import</span> Foundation\n\n<span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title class_\">Array</span> <span class=\"hljs-title class_\">where</span> <span class=\"hljs-title class_\">Element</span>: <span class=\"hljs-title class_\">Comparable</span> {\n\n    <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">bubbleSort</span>(<span class=\"hljs-params\">by</span> <span class=\"hljs-params\">areInIncreasingOrder</span>: ((<span class=\"hljs-type\">Element</span>, <span class=\"hljs-type\">Element</span>) -&gt; <span class=\"hljs-type\">Bool</span>) <span class=\"hljs-operator\">=</span> (<span class=\"hljs-operator\">&lt;</span>)) -&gt; [<span class=\"hljs-type\">Element</span>] {\n        <span class=\"hljs-keyword\">var</span> data <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">self</span>\n        \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span><span class=\"hljs-operator\">..&lt;</span>(data.count<span class=\"hljs-operator\">-</span><span class=\"hljs-number\">1</span>) { \n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span><span class=\"hljs-operator\">..&lt;</span>(data.count<span class=\"hljs-operator\">-</span>i<span class=\"hljs-operator\">-</span><span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">where</span> areInIncreasingOrder(data[j<span class=\"hljs-operator\">+</span><span class=\"hljs-number\">1</span>], data[j]) { \n                data.swapAt(j, j <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>)\n            }\n        }\n        \n        <span class=\"hljs-keyword\">return</span> data\n    }\n}\n\n<span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">swap</span>&lt;<span class=\"hljs-type\">T</span>: <span class=\"hljs-type\">Comparable</span>&gt;(<span class=\"hljs-params\">left</span>: <span class=\"hljs-keyword\">inout</span> <span class=\"hljs-type\">T</span>, <span class=\"hljs-params\">right</span>: <span class=\"hljs-keyword\">inout</span> <span class=\"hljs-type\">T</span>) {\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Swapping <span class=\"hljs-subst\">\\(left)</span> and <span class=\"hljs-subst\">\\(right)</span>&quot;</span>)\n    <span class=\"hljs-keyword\">let</span> temp <span class=\"hljs-operator\">=</span> right\n    right <span class=\"hljs-operator\">=</span> left\n    left <span class=\"hljs-operator\">=</span> temp\n}\n\n<span class=\"hljs-comment\">// The code below can be used for testing</span>\n\n<span class=\"hljs-comment\">// let numberList : Array&lt;Int&gt; = [8, 2, 10, 9, 7, 5]</span>\n<span class=\"hljs-comment\">// let results: Array&lt;Int&gt; = numberList.bubbleSort()</span>\n<span class=\"hljs-comment\">// print(results)</span>\n"
    },
    "elm": {
      "dir": "src/Sorting/BubbleSort.elm",
      "url": "https://github.com/TheAlgorithms/elm/tree/master/src/Sorting/BubbleSort.elm",
      "code": "<span class=\"hljs-keyword\">module</span> BubbleSort <span class=\"hljs-keyword\">exposing</span> (output)\n\n<span class=\"hljs-keyword\">import</span> Util <span class=\"hljs-keyword\">exposing</span> (sortingOutputDef)\n\n\n<span class=\"hljs-title\">bubbleSort</span> : <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span>\n<span class=\"hljs-title\">bubbleSort</span> inputList =\n    <span class=\"hljs-keyword\">let</span>\n        bubble : <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span>\n        bubble source tempList result =\n            <span class=\"hljs-keyword\">case</span> source <span class=\"hljs-keyword\">of</span>\n                h1 :: h2 :: tail -&gt;\n                    <span class=\"hljs-keyword\">if</span> h1 &lt; h2 <span class=\"hljs-keyword\">then</span>\n                        bubble (h2 :: tail) (h1 :: tempList) result\n\n                    <span class=\"hljs-keyword\">else</span>\n                        bubble (h1 :: tail) (h2 :: tempList) result\n\n                h1 :: [] -&gt;\n                    sort tempList (h1 :: result)\n\n                [] -&gt;\n                    result\n\n        sort : <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span>\n        sort source result =\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-type\">List</span>.isEmpty source <span class=\"hljs-keyword\">then</span>\n                result\n\n            <span class=\"hljs-keyword\">else</span>\n                bubble source [] result\n    <span class=\"hljs-keyword\">in</span>\n    sort inputList []\n\n\n<span class=\"hljs-title\">output</span> : <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">String</span> -&gt; <span class=\"hljs-type\">String</span>\n<span class=\"hljs-title\">output</span> args =\n    sortingOutputDef args bubbleSort\n"
    },
    "matlab-octave": {
      "dir": "algorithms/sorting/bubble_sort.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms/sorting/bubble_sort.m",
      "code": "<span class=\"hljs-comment\">%% Bubble sort algorithm:</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">list</span> = <span class=\"hljs-title\">bubble_sort</span><span class=\"hljs-params\">(list)</span></span>\n<span class=\"hljs-comment\">% function to sort vector &#x27;list&#x27; with using the &#x27;Bubble sort&#x27; algorithm</span>\n<span class=\"hljs-comment\">% INPUT: &#x27;list&#x27; array</span>\n<span class=\"hljs-comment\">% OUTPUT: sorted array</span>\nchanged = <span class=\"hljs-built_in\">true</span>;\ncount = <span class=\"hljs-built_in\">numel</span>(list);\n<span class=\"hljs-keyword\">while</span>(changed)\n    changed = <span class=\"hljs-built_in\">false</span>;\n    count = count - <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">for</span> index = (<span class=\"hljs-number\">1</span>:count)\n        <span class=\"hljs-keyword\">if</span>(list(index) &gt; list(index+<span class=\"hljs-number\">1</span>))\n            list([index index+<span class=\"hljs-number\">1</span>]) = list([index+<span class=\"hljs-number\">1</span> index]); <span class=\"hljs-comment\">%swap</span>\n            changed = <span class=\"hljs-built_in\">true</span>;\n        <span class=\"hljs-keyword\">end</span>\n        \n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n"
    },
    "julia": {
      "dir": "src/sorts/bubble_sort.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/sorts/bubble_sort.jl",
      "code": "<span class=\"hljs-keyword\">function</span> bubble_sort!(array::<span class=\"hljs-built_in\">Vector</span>{T}) <span class=\"hljs-keyword\">where</span> {T}\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:length(array)\n        flag = <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:(length(array)-i)\n            <span class=\"hljs-keyword\">if</span> array[j] &gt; array[j+<span class=\"hljs-number\">1</span>]\n                array[j], array[j+<span class=\"hljs-number\">1</span>] = array[j+<span class=\"hljs-number\">1</span>], array[j]\n                flag = <span class=\"hljs-literal\">true</span>\n            <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">end</span>\n\n        <span class=\"hljs-keyword\">if</span> !flag\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nothing</span>\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "lua": {
      "dir": "src/sorting/bubblesort.lua",
      "url": "https://github.com/TheAlgorithms/lua/tree/master/src/sorting/bubblesort.lua",
      "code": "<span class=\"hljs-comment\">--! Bubblesort has quadratic time complexity and should not be used in practice</span>\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(\n\t<span class=\"hljs-comment\">-- list to be sorted in-place</span>\n\tlist,\n\t<span class=\"hljs-comment\">-- function(a, b) -&gt; truthy value if a &lt; b</span>\n\tless_than\n)</span></span>\n\tless_than = less_than <span class=\"hljs-keyword\">or</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(a, b)</span></span>\n\t\t<span class=\"hljs-keyword\">return</span> a &lt; b\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">for</span> _ = <span class=\"hljs-number\">1</span>, #list <span class=\"hljs-keyword\">do</span>\n\t\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">next</span> = <span class=\"hljs-number\">2</span>, #list <span class=\"hljs-keyword\">do</span>\n\t\t\t<span class=\"hljs-keyword\">local</span> previous = <span class=\"hljs-built_in\">next</span> - <span class=\"hljs-number\">1</span>\n\t\t\t<span class=\"hljs-keyword\">if</span> less_than(list[<span class=\"hljs-built_in\">next</span>], list[previous]) <span class=\"hljs-keyword\">then</span> <span class=\"hljs-comment\">-- wrong order: previous &gt; next</span>\n\t\t\t\tlist[<span class=\"hljs-built_in\">next</span>], list[previous] = list[previous], list[<span class=\"hljs-built_in\">next</span>]\n\t\t\t<span class=\"hljs-keyword\">end</span>\n\t\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Sorters/Comparison/BubbleSorter.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/Algorithms/Sorters/Comparison/BubbleSorter.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.Comparison</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Class that implements bubble sort algorithm.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Type of array element.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BubbleSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt; : <span class=\"hljs-title\">IComparisonSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt;\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sorts array using specified comparer,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     internal, in-place, stable,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity: O(n^2),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(1),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - array length.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Array to sort.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;comparer&quot;&gt;</span>Compares elements.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\">T[] array, IComparer&lt;T&gt; comparer</span>)</span>\n        {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.Length - <span class=\"hljs-number\">1</span>; i++)\n            {\n                <span class=\"hljs-keyword\">var</span> wasChanged = <span class=\"hljs-literal\">false</span>;\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>; j &lt; array.Length - i - <span class=\"hljs-number\">1</span>; j++)\n                {\n                    <span class=\"hljs-keyword\">if</span> (comparer.Compare(array[j], array[j + <span class=\"hljs-number\">1</span>]) &gt; <span class=\"hljs-number\">0</span>)\n                    {\n                        <span class=\"hljs-keyword\">var</span> temp = array[j];\n                        array[j] = array[j + <span class=\"hljs-number\">1</span>];\n                        array[j + <span class=\"hljs-number\">1</span>] = temp;\n                        wasChanged = <span class=\"hljs-literal\">true</span>;\n                    }\n                }\n\n                <span class=\"hljs-keyword\">if</span> (!wasChanged)\n                {\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n            }\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Lalit Umbarkar",
      "email": "MrL1605@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Anup Kumar Panwar",
      "email": "1anuppanwar@gmail.com",
      "commits": 1
    },
    {
      "name": "Lalit Umbarkar",
      "email": "lalit.umbarkar9@gmail.com",
      "commits": 1
    },
    {
      "name": "Frank Schmitt",
      "email": "frankschmitt@gmx.de",
      "commits": 1
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Lars Mueller",
      "email": "appgurulars@gmx.de",
      "commits": 1
    },
    {
      "name": "Emil Suleymanov",
      "email": "emil.suleymanov@tum.de",
      "commits": 1
    },
    {
      "name": "goodnic",
      "email": "43970044+goodnic@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Artur Parowicz",
      "email": "arturparowicz@gmail,com",
      "commits": 1
    },
    {
      "name": "zys864",
      "email": "616561164@qq.com",
      "commits": 1
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "horahh",
      "email": "1816137+horahh@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Anshul",
      "email": "malikanshul29@gmail.com",
      "commits": 1
    },
    {
      "name": "Yashwanth Reddy Gondi",
      "email": "yashwanthreddy.g@live.com",
      "commits": 1
    },
    {
      "name": "Mohsen Asi",
      "email": "mohsen.asi87@gmail.com",
      "commits": 1
    },
    {
      "name": "Anirban166",
      "email": "bloodraven166@gmail.com",
      "commits": 1
    },
    {
      "name": "Alfredo Torre",
      "email": "alfredotorre@gmail.com",
      "commits": 1
    },
    {
      "name": "khanhhuynguyenvu",
      "email": "khanhhuynguyenvu@gmail.com",
      "commits": 1
    },
    {
      "name": "Ihjass Thasbekha",
      "email": "44056715+Ihjass@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Frank Schmitt",
      "email": "frank@qwhon.de",
      "commits": 1
    },
    {
      "name": "未絵音羽/服部絵美",
      "email": "46393124+mieotoha@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "PoolOfDeath20",
      "email": "53143214+GervinFung@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rratic",
      "email": "73381027+Rratic@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Doppon",
      "email": "zaxpkuraudo7777@gmail.com",
      "commits": 1
    },
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 1
    },
    {
      "name": "nomisrevol",
      "email": "vdn1999bxvp@gmail.com",
      "commits": 1
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 1
    },
    {
      "name": "q",
      "email": "qzqsmile@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 1
    },
    {
      "name": "shivam agarwal",
      "email": "43515429+shivamagarwal1999@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "thanhphuonghdhh",
      "email": "62583233+thanhphuonghdhh@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Mohan Murali",
      "email": "mohanmuralid28@gmail.com",
      "commits": 1
    },
    {
      "name": "marsonya",
      "email": "16393876+marsonya@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "zoomdong",
      "email": "1344492820@qq.com",
      "commits": 1
    },
    {
      "name": "Mohit Sharma",
      "email": "mohit1532.cse16@chitkara.edu.in",
      "commits": 1
    },
    {
      "name": "PRITI1999",
      "email": "35490584+PRITI1999@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Grigor",
      "email": "wgrigor21@nwphs.org",
      "commits": 1
    },
    {
      "name": "Ishmeet-Singh-Saggu",
      "email": "40631164+Ishmeet-Singh-Saggu@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Vaibhav Gupta",
      "email": "vaibhavgupta40@gmail.com",
      "commits": 1
    },
    {
      "name": "Shivam Singhal",
      "email": "shivamsinghal0610@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Du Yuanchao",
      "email": "duyuanchao.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Igor Kvashnin",
      "email": "astralcake@gmail.com",
      "commits": 1
    },
    {
      "name": "valery noname",
      "email": "valerydec17@gmail.com",
      "commits": 1
    },
    {
      "name": "Chase Ganey",
      "email": "11964615+cganey@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "赵坤",
      "email": "zhaokun@ziipin.com",
      "commits": 1
    },
    {
      "name": "KyleScharnhorst",
      "email": "scharkr1@uw.edu",
      "commits": 1
    },
    {
      "name": "UsernameToLon",
      "email": "casey.a.laclair@gmail.com",
      "commits": 1
    },
    {
      "name": "Ankur Chattopadhyay",
      "email": "39518771+chttrjeankr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sujitkumar Singh",
      "email": "37760194+SinghSujitkumar@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "YasirChoudhary",
      "email": "yasirchoudhary81@gmail.com",
      "commits": 1
    },
    {
      "name": "Prateek",
      "email": "43875858+prateekyo@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hossam Al-Dokkani",
      "email": "hossam.o@trufla.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Akshay Sharma",
      "email": "akshay.sharma09695@gmail.com",
      "commits": 1
    },
    {
      "name": "phlai",
      "email": "toy112221@gmail.com",
      "commits": 1
    },
    {
      "name": "yyeltsyn",
      "email": "crawler2.0@gmail.com",
      "commits": 1
    },
    {
      "name": "JakeBonek",
      "email": "jake.bonek@gmail.com",
      "commits": 1
    },
    {
      "name": "Anant Kanchan",
      "email": "66024577+anantcodes@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Mertcan Davulcu",
      "email": "54983926+mertcandav@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Ashwin Narayan",
      "email": "ashwinnarayan1994@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "nikhil kala",
      "email": "nikhilkala8@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 2
    },
    {
      "name": "Erez Shomron",
      "email": "48328872+eshom@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "vzvu3k6k",
      "email": "vzvu3k6k@gmail.com",
      "commits": 2
    },
    {
      "name": "shan",
      "email": "shanshaji@greenwavefinance.com",
      "commits": 2
    },
    {
      "name": "Connor Bottum",
      "email": "cbb692@gmail.com",
      "commits": 2
    },
    {
      "name": "Ashwek Swamy",
      "email": "39827514+ashwek@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Md. Amin Hossain",
      "email": "32355396+AminHossain@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Roland Hummel",
      "email": "roland.hummel@qaware.de",
      "commits": 2
    },
    {
      "name": "marsonya",
      "email": "akhil.marsonya27@gmail.com",
      "commits": 2
    },
    {
      "name": "mertkoca",
      "email": "mert.koca@bil.omu.edu.tr",
      "commits": 2
    },
    {
      "name": "Brayo",
      "email": "vukubrian@gmail.com",
      "commits": 3
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "sungbin",
      "email": "21700613@handong.edu",
      "commits": 3
    },
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 3
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 4
    },
    {
      "name": "varunu28",
      "email": "varun.u28@gmail.com",
      "commits": 6
    },
    {
      "name": "Abose Ukhun",
      "email": "bexis17@gmail.com",
      "commits": 6
    }
  ],
  "explanationUrl": {
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en/Sorting Algorithms/Bubble Sort.md",
    "es": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/es/Algoritmos de Ordenamiento/Ordenamiento Burbuja.md"
  }
}