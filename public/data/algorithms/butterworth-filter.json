{
  "slug": "butterworth-filter",
  "name": "Butterworth Filter",
  "categories": [
    "audiofilters"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "audio_filters/butterworth_filter.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/audio_filters/butterworth_filter.py",
      "code": "<span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> cos, sin, sqrt, tau\n\n<span class=\"hljs-keyword\">from</span> audio_filters.iir_filter <span class=\"hljs-keyword\">import</span> IIRFilter\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\nCreate 2nd-order IIR filters with Butterworth design.\n\nCode based on https://webaudio.github.io/Audio-EQ-Cookbook/audio-eq-cookbook.html\nAlternatively you can use scipy.signal.butter, which should yield the same results.\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">make_lowpass</span>(<span class=\"hljs-params\">\n    frequency: <span class=\"hljs-built_in\">int</span>, samplerate: <span class=\"hljs-built_in\">int</span>, q_factor: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">1</span> / sqrt(<span class=\"hljs-params\"><span class=\"hljs-number\">2</span></span>)\n</span>) -&gt; IIRFilter:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Creates a low-pass filter\n\n    &gt;&gt;&gt; filter = make_lowpass(1000, 48000)\n    &gt;&gt;&gt; filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.004277569313094809,\n     0.008555138626189618, 0.004277569313094809]\n    &quot;&quot;&quot;</span>\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (<span class=\"hljs-number\">2</span> * q_factor)\n\n    b0 = (<span class=\"hljs-number\">1</span> - _cos) / <span class=\"hljs-number\">2</span>\n    b1 = <span class=\"hljs-number\">1</span> - _cos\n\n    a0 = <span class=\"hljs-number\">1</span> + alpha\n    a1 = -<span class=\"hljs-number\">2</span> * _cos\n    a2 = <span class=\"hljs-number\">1</span> - alpha\n\n    filt = IIRFilter(<span class=\"hljs-number\">2</span>)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])\n    <span class=\"hljs-keyword\">return</span> filt\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">make_highpass</span>(<span class=\"hljs-params\">\n    frequency: <span class=\"hljs-built_in\">int</span>, samplerate: <span class=\"hljs-built_in\">int</span>, q_factor: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">1</span> / sqrt(<span class=\"hljs-params\"><span class=\"hljs-number\">2</span></span>)\n</span>) -&gt; IIRFilter:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Creates a high-pass filter\n\n    &gt;&gt;&gt; filter = make_highpass(1000, 48000)\n    &gt;&gt;&gt; filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9957224306869052,\n     -1.9914448613738105, 0.9957224306869052]\n    &quot;&quot;&quot;</span>\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (<span class=\"hljs-number\">2</span> * q_factor)\n\n    b0 = (<span class=\"hljs-number\">1</span> + _cos) / <span class=\"hljs-number\">2</span>\n    b1 = -<span class=\"hljs-number\">1</span> - _cos\n\n    a0 = <span class=\"hljs-number\">1</span> + alpha\n    a1 = -<span class=\"hljs-number\">2</span> * _cos\n    a2 = <span class=\"hljs-number\">1</span> - alpha\n\n    filt = IIRFilter(<span class=\"hljs-number\">2</span>)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])\n    <span class=\"hljs-keyword\">return</span> filt\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">make_bandpass</span>(<span class=\"hljs-params\">\n    frequency: <span class=\"hljs-built_in\">int</span>, samplerate: <span class=\"hljs-built_in\">int</span>, q_factor: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">1</span> / sqrt(<span class=\"hljs-params\"><span class=\"hljs-number\">2</span></span>)\n</span>) -&gt; IIRFilter:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Creates a band-pass filter\n\n    &gt;&gt;&gt; filter = make_bandpass(1000, 48000)\n    &gt;&gt;&gt; filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.06526309611002579,\n     0, -0.06526309611002579]\n    &quot;&quot;&quot;</span>\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (<span class=\"hljs-number\">2</span> * q_factor)\n\n    b0 = _sin / <span class=\"hljs-number\">2</span>\n    b1 = <span class=\"hljs-number\">0</span>\n    b2 = -b0\n\n    a0 = <span class=\"hljs-number\">1</span> + alpha\n    a1 = -<span class=\"hljs-number\">2</span> * _cos\n    a2 = <span class=\"hljs-number\">1</span> - alpha\n\n    filt = IIRFilter(<span class=\"hljs-number\">2</span>)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    <span class=\"hljs-keyword\">return</span> filt\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">make_allpass</span>(<span class=\"hljs-params\">\n    frequency: <span class=\"hljs-built_in\">int</span>, samplerate: <span class=\"hljs-built_in\">int</span>, q_factor: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">1</span> / sqrt(<span class=\"hljs-params\"><span class=\"hljs-number\">2</span></span>)\n</span>) -&gt; IIRFilter:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Creates an all-pass filter\n\n    &gt;&gt;&gt; filter = make_allpass(1000, 48000)\n    &gt;&gt;&gt; filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9077040443587427,\n     -1.9828897227476208, 1.0922959556412573]\n    &quot;&quot;&quot;</span>\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (<span class=\"hljs-number\">2</span> * q_factor)\n\n    b0 = <span class=\"hljs-number\">1</span> - alpha\n    b1 = -<span class=\"hljs-number\">2</span> * _cos\n    b2 = <span class=\"hljs-number\">1</span> + alpha\n\n    filt = IIRFilter(<span class=\"hljs-number\">2</span>)\n    filt.set_coefficients([b2, b1, b0], [b0, b1, b2])\n    <span class=\"hljs-keyword\">return</span> filt\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">make_peak</span>(<span class=\"hljs-params\">\n    frequency: <span class=\"hljs-built_in\">int</span>, samplerate: <span class=\"hljs-built_in\">int</span>, gain_db: <span class=\"hljs-built_in\">float</span>, q_factor: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">1</span> / sqrt(<span class=\"hljs-params\"><span class=\"hljs-number\">2</span></span>)\n</span>) -&gt; IIRFilter:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Creates a peak filter\n\n    &gt;&gt;&gt; filter = make_peak(1000, 48000, 6)\n    &gt;&gt;&gt; filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,\n     -1.9828897227476208, 0.8696284974398878]\n    &quot;&quot;&quot;</span>\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (<span class=\"hljs-number\">2</span> * q_factor)\n    big_a = <span class=\"hljs-number\">10</span> ** (gain_db / <span class=\"hljs-number\">40</span>)\n\n    b0 = <span class=\"hljs-number\">1</span> + alpha * big_a\n    b1 = -<span class=\"hljs-number\">2</span> * _cos\n    b2 = <span class=\"hljs-number\">1</span> - alpha * big_a\n    a0 = <span class=\"hljs-number\">1</span> + alpha / big_a\n    a1 = -<span class=\"hljs-number\">2</span> * _cos\n    a2 = <span class=\"hljs-number\">1</span> - alpha / big_a\n\n    filt = IIRFilter(<span class=\"hljs-number\">2</span>)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    <span class=\"hljs-keyword\">return</span> filt\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">make_lowshelf</span>(<span class=\"hljs-params\">\n    frequency: <span class=\"hljs-built_in\">int</span>, samplerate: <span class=\"hljs-built_in\">int</span>, gain_db: <span class=\"hljs-built_in\">float</span>, q_factor: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">1</span> / sqrt(<span class=\"hljs-params\"><span class=\"hljs-number\">2</span></span>)\n</span>) -&gt; IIRFilter:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Creates a low-shelf filter\n\n    &gt;&gt;&gt; filter = make_lowshelf(1000, 48000, 6)\n    &gt;&gt;&gt; filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [3.0409336710888786, -5.608870992220748, 2.602157875636628, 3.139954022810743,\n     -5.591841778072785, 2.5201667380627257]\n    &quot;&quot;&quot;</span>\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (<span class=\"hljs-number\">2</span> * q_factor)\n    big_a = <span class=\"hljs-number\">10</span> ** (gain_db / <span class=\"hljs-number\">40</span>)\n    pmc = (big_a + <span class=\"hljs-number\">1</span>) - (big_a - <span class=\"hljs-number\">1</span>) * _cos\n    ppmc = (big_a + <span class=\"hljs-number\">1</span>) + (big_a - <span class=\"hljs-number\">1</span>) * _cos\n    mpc = (big_a - <span class=\"hljs-number\">1</span>) - (big_a + <span class=\"hljs-number\">1</span>) * _cos\n    pmpc = (big_a - <span class=\"hljs-number\">1</span>) + (big_a + <span class=\"hljs-number\">1</span>) * _cos\n    aa2 = <span class=\"hljs-number\">2</span> * sqrt(big_a) * alpha\n\n    b0 = big_a * (pmc + aa2)\n    b1 = <span class=\"hljs-number\">2</span> * big_a * mpc\n    b2 = big_a * (pmc - aa2)\n    a0 = ppmc + aa2\n    a1 = -<span class=\"hljs-number\">2</span> * pmpc\n    a2 = ppmc - aa2\n\n    filt = IIRFilter(<span class=\"hljs-number\">2</span>)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    <span class=\"hljs-keyword\">return</span> filt\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">make_highshelf</span>(<span class=\"hljs-params\">\n    frequency: <span class=\"hljs-built_in\">int</span>, samplerate: <span class=\"hljs-built_in\">int</span>, gain_db: <span class=\"hljs-built_in\">float</span>, q_factor: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">1</span> / sqrt(<span class=\"hljs-params\"><span class=\"hljs-number\">2</span></span>)\n</span>) -&gt; IIRFilter:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Creates a high-shelf filter\n\n    &gt;&gt;&gt; filter = make_highshelf(1000, 48000, 6)\n    &gt;&gt;&gt; filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [2.2229172136088806, -3.9587208137297303, 1.7841414181566304, 4.295432981120543,\n     -7.922740859457287, 3.6756456963725253]\n    &quot;&quot;&quot;</span>\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (<span class=\"hljs-number\">2</span> * q_factor)\n    big_a = <span class=\"hljs-number\">10</span> ** (gain_db / <span class=\"hljs-number\">40</span>)\n    pmc = (big_a + <span class=\"hljs-number\">1</span>) - (big_a - <span class=\"hljs-number\">1</span>) * _cos\n    ppmc = (big_a + <span class=\"hljs-number\">1</span>) + (big_a - <span class=\"hljs-number\">1</span>) * _cos\n    mpc = (big_a - <span class=\"hljs-number\">1</span>) - (big_a + <span class=\"hljs-number\">1</span>) * _cos\n    pmpc = (big_a - <span class=\"hljs-number\">1</span>) + (big_a + <span class=\"hljs-number\">1</span>) * _cos\n    aa2 = <span class=\"hljs-number\">2</span> * sqrt(big_a) * alpha\n\n    b0 = big_a * (ppmc + aa2)\n    b1 = -<span class=\"hljs-number\">2</span> * big_a * pmpc\n    b2 = big_a * (ppmc - aa2)\n    a0 = pmc + aa2\n    a1 = <span class=\"hljs-number\">2</span> * mpc\n    a2 = pmc - aa2\n\n    filt = IIRFilter(<span class=\"hljs-number\">2</span>)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    <span class=\"hljs-keyword\">return</span> filt\n"
    }
  },
  "contributors": [
    {
      "name": "Martmists",
      "email": "mail@martmists.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}