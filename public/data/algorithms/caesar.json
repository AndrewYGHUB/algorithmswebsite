{
  "slug": "caesar",
  "name": "Caesar",
  "categories": [
    "ciphers"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/ciphers/Caesar.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/ciphers/Caesar.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.ciphers;\n\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-comment\">/**\n * A Java implementation of Caesar Cipher. /It is a type of substitution cipher\n * in which each letter in the plaintext is replaced by a letter some fixed\n * number of positions down the alphabet. /\n *\n * <span class=\"hljs-doctag\">@author</span> FAHRI YARDIMCI\n * <span class=\"hljs-doctag\">@author</span> khalil2535\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Caesar</span> {\n\n    <span class=\"hljs-comment\">/**\n     * Encrypt text by shifting every Latin char by add number shift for ASCII\n     * Example : A + 1 -&gt; B\n     *\n     * <span class=\"hljs-doctag\">@return</span> Encrypted message\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">encode</span><span class=\"hljs-params\">(String message, <span class=\"hljs-type\">int</span> shift)</span> {\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">encoded</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\n\n        shift %= <span class=\"hljs-number\">26</span>;\n\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> message.length();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; length; i++) {\n\n            <span class=\"hljs-comment\">//            int current = message.charAt(i); //using char to shift characters because ascii</span>\n            <span class=\"hljs-comment\">// is in-order latin alphabet</span>\n            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">current</span> <span class=\"hljs-operator\">=</span> message.charAt(i); <span class=\"hljs-comment\">// Java law : char + int = char</span>\n\n            <span class=\"hljs-keyword\">if</span> (IsCapitalLatinLetter(current)) {\n\n                current += shift;\n                encoded.append((<span class=\"hljs-type\">char</span>) (current &gt; <span class=\"hljs-string\">&#x27;Z&#x27;</span> ? current - <span class=\"hljs-number\">26</span> : current)); <span class=\"hljs-comment\">// 26 = number of latin letters</span>\n\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (IsSmallLatinLetter(current)) {\n\n                current += shift;\n                encoded.append((<span class=\"hljs-type\">char</span>) (current &gt; <span class=\"hljs-string\">&#x27;z&#x27;</span> ? current - <span class=\"hljs-number\">26</span> : current)); <span class=\"hljs-comment\">// 26 = number of latin letters</span>\n\n            } <span class=\"hljs-keyword\">else</span> {\n                encoded.append(current);\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> encoded.toString();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Decrypt message by shifting back every Latin char to previous the ASCII\n     * Example : B - 1 -&gt; A\n     *\n     * <span class=\"hljs-doctag\">@return</span> message\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">decode</span><span class=\"hljs-params\">(String encryptedMessage, <span class=\"hljs-type\">int</span> shift)</span> {\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">decoded</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\n\n        shift %= <span class=\"hljs-number\">26</span>;\n\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> encryptedMessage.length();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; length; i++) {\n            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">current</span> <span class=\"hljs-operator\">=</span> encryptedMessage.charAt(i);\n            <span class=\"hljs-keyword\">if</span> (IsCapitalLatinLetter(current)) {\n\n                current -= shift;\n                decoded.append((<span class=\"hljs-type\">char</span>) (current &lt; <span class=\"hljs-string\">&#x27;A&#x27;</span> ? current + <span class=\"hljs-number\">26</span> : current)); <span class=\"hljs-comment\">// 26 = number of latin letters</span>\n\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (IsSmallLatinLetter(current)) {\n\n                current -= shift;\n                decoded.append((<span class=\"hljs-type\">char</span>) (current &lt; <span class=\"hljs-string\">&#x27;a&#x27;</span> ? current + <span class=\"hljs-number\">26</span> : current)); <span class=\"hljs-comment\">// 26 = number of latin letters</span>\n\n            } <span class=\"hljs-keyword\">else</span> {\n                decoded.append(current);\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> decoded.toString();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@return</span> true if character is capital Latin letter or false for others\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">IsCapitalLatinLetter</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> c)</span> {\n        <span class=\"hljs-keyword\">return</span> c &gt;= <span class=\"hljs-string\">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class=\"hljs-string\">&#x27;Z&#x27;</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@return</span> true if character is small Latin letter or false for others\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">IsSmallLatinLetter</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> c)</span> {\n        <span class=\"hljs-keyword\">return</span> c &gt;= <span class=\"hljs-string\">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class=\"hljs-string\">&#x27;z&#x27;</span>;\n    }\n    <span class=\"hljs-comment\">/**\n     *  <span class=\"hljs-doctag\">@return</span> string array which contains all the possible decoded combination.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String[] bruteforce(String encryptedMessage) {\n        String[] listOfAllTheAnswers = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">27</span>];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;=<span class=\"hljs-number\">26</span>; i++) {\n            listOfAllTheAnswers[i] = decode(encryptedMessage, i);\n        }\n\n        <span class=\"hljs-keyword\">return</span> listOfAllTheAnswers;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">input</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">shift</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        System.out.println(<span class=\"hljs-string\">&quot;Please enter the message (Latin Alphabet)&quot;</span>);\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> input.nextLine();\n        System.out.println(message);\n        System.out.println(<span class=\"hljs-string\">&quot;(E)ncode or (D)ecode or (B)ruteforce?&quot;</span>);\n        <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">choice</span> <span class=\"hljs-operator\">=</span> input.next().charAt(<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">switch</span> (choice) {\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;E&#x27;</span>:\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;e&#x27;</span>:\n                System.out.println(<span class=\"hljs-string\">&quot;Please enter the shift number&quot;</span>);\n                shift = input.nextInt() % <span class=\"hljs-number\">26</span>;\n                System.out.println(\n                        <span class=\"hljs-string\">&quot;ENCODED MESSAGE IS \\n&quot;</span> + encode(message, shift)); <span class=\"hljs-comment\">// send our function to handle</span>\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;D&#x27;</span>:\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;d&#x27;</span>:\n                System.out.println(<span class=\"hljs-string\">&quot;Please enter the shift number&quot;</span>);\n                shift = input.nextInt() % <span class=\"hljs-number\">26</span>;\n                System.out.println(<span class=\"hljs-string\">&quot;DECODED MESSAGE IS \\n&quot;</span> + decode(message, shift));\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;B&#x27;</span>:\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;b&#x27;</span>:\n                String[] listOfAllTheAnswers = bruteforce(message);\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0</span>; i&lt;=<span class=\"hljs-number\">26</span>; i++) {\n                    System.out.println(<span class=\"hljs-string\">&quot;FOR SHIFT &quot;</span> + String.valueOf(i) + <span class=\"hljs-string\">&quot; decoded message is &quot;</span> + listOfAllTheAnswers[i]);\n                }\n            <span class=\"hljs-keyword\">default</span>:\n                System.out.println(<span class=\"hljs-string\">&quot;default case&quot;</span>);\n        }\n        \n        input.close();\n    }\n}\n"
    },
    "go": {
      "dir": "cipher/caesar/caesar.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/cipher/caesar/caesar.go",
      "code": "<span class=\"hljs-comment\">// Package caesar is the shift cipher</span>\n<span class=\"hljs-comment\">// ref: https://en.wikipedia.org/wiki/Caesar_cipher</span>\n<span class=\"hljs-keyword\">package</span> caesar\n\n<span class=\"hljs-comment\">// Encrypt encrypts by right shift of &quot;key&quot; each character of &quot;input&quot;</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Encrypt</span><span class=\"hljs-params\">(input <span class=\"hljs-type\">string</span>, key <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">string</span> {\n\t<span class=\"hljs-comment\">// if key is negative value,</span>\n\t<span class=\"hljs-comment\">// updates &quot;key&quot; the number which congruents to &quot;key&quot; modulo 26</span>\n\tkey8 := <span class=\"hljs-type\">byte</span>(key%<span class=\"hljs-number\">26</span>+<span class=\"hljs-number\">26</span>) % <span class=\"hljs-number\">26</span>\n\n\t<span class=\"hljs-keyword\">var</span> outputBuffer []<span class=\"hljs-type\">byte</span>\n\t<span class=\"hljs-comment\">// r is a rune, which is the equivalent of uint32.</span>\n\t<span class=\"hljs-keyword\">for</span> _, r := <span class=\"hljs-keyword\">range</span> input {\n\t\tnewByte := <span class=\"hljs-type\">byte</span>(r)\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&#x27;A&#x27;</span> &lt;= r &amp;&amp; r &lt;= <span class=\"hljs-string\">&#x27;Z&#x27;</span> {\n\t\t\toutputBuffer = <span class=\"hljs-built_in\">append</span>(outputBuffer, <span class=\"hljs-string\">&#x27;A&#x27;</span>+(newByte-<span class=\"hljs-string\">&#x27;A&#x27;</span>+key8)%<span class=\"hljs-number\">26</span>)\n\t\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&#x27;a&#x27;</span> &lt;= r &amp;&amp; r &lt;= <span class=\"hljs-string\">&#x27;z&#x27;</span> {\n\t\t\toutputBuffer = <span class=\"hljs-built_in\">append</span>(outputBuffer, <span class=\"hljs-string\">&#x27;a&#x27;</span>+(newByte-<span class=\"hljs-string\">&#x27;a&#x27;</span>+key8)%<span class=\"hljs-number\">26</span>)\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\toutputBuffer = <span class=\"hljs-built_in\">append</span>(outputBuffer, newByte)\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>(outputBuffer)\n}\n\n<span class=\"hljs-comment\">// Decrypt decrypts by left shift of &quot;key&quot; each character of &quot;input&quot;</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Decrypt</span><span class=\"hljs-params\">(input <span class=\"hljs-type\">string</span>, key <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">string</span> {\n\t<span class=\"hljs-comment\">// left shift of &quot;key&quot; is same as right shift of 26-&quot;key&quot;</span>\n\t<span class=\"hljs-keyword\">return</span> Encrypt(input, <span class=\"hljs-number\">26</span>-key)\n}\n"
    },
    "rust": {
      "dir": "src/ciphers/caesar.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/ciphers/caesar.rs",
      "code": "<span class=\"hljs-comment\">//! Caesar Cipher</span>\n<span class=\"hljs-comment\">//! Based on cipher_crypt::caesar</span>\n<span class=\"hljs-comment\">//!</span>\n<span class=\"hljs-comment\">//! # Algorithm</span>\n<span class=\"hljs-comment\">//!</span>\n<span class=\"hljs-comment\">//! Rotate each ascii character by shift. The most basic example is ROT 13, which rotates &#x27;a&#x27; to</span>\n<span class=\"hljs-comment\">//! &#x27;n&#x27;. This implementation does not rotate unicode characters.</span>\n\n<span class=\"hljs-comment\">/// Caesar cipher to rotate cipher text by shift and return an owned String.</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">caesar</span>(cipher: &amp;<span class=\"hljs-type\">str</span>, shift: <span class=\"hljs-type\">u8</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">String</span> {\n    cipher\n        .<span class=\"hljs-title function_ invoke__\">chars</span>()\n        .<span class=\"hljs-title function_ invoke__\">map</span>(|c| {\n            <span class=\"hljs-keyword\">if</span> c.<span class=\"hljs-title function_ invoke__\">is_ascii_alphabetic</span>() {\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">first</span> = <span class=\"hljs-keyword\">if</span> c.<span class=\"hljs-title function_ invoke__\">is_ascii_lowercase</span>() { <span class=\"hljs-string\">b&#x27;a&#x27;</span> } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-string\">b&#x27;A&#x27;</span> };\n                <span class=\"hljs-comment\">// modulo the distance to keep character range</span>\n                (first + (c <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span> + shift - first) % <span class=\"hljs-number\">26</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">char</span>\n            } <span class=\"hljs-keyword\">else</span> {\n                c\n            }\n        })\n        .<span class=\"hljs-title function_ invoke__\">collect</span>()\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">caesar</span>(<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">13</span>), <span class=\"hljs-string\">&quot;&quot;</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">caesar_rot_13</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">caesar</span>(<span class=\"hljs-string\">&quot;rust&quot;</span>, <span class=\"hljs-number\">13</span>), <span class=\"hljs-string\">&quot;ehfg&quot;</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">caesar_unicode</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">caesar</span>(<span class=\"hljs-string\">&quot;attack at dawn 攻&quot;</span>, <span class=\"hljs-number\">5</span>), <span class=\"hljs-string\">&quot;fyyfhp fy ifbs 攻&quot;</span>);\n    }\n}\n"
    },
    "ruby": {
      "dir": "ciphers/caesar.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/ciphers/caesar.rb",
      "code": "<span class=\"hljs-comment\"># Caesar Cipher replaces characters rotating X number of positions to the left or to the right.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Alphabet</span>\n<span class=\"hljs-comment\"># a b c d e f g h i j k l m n o p q r s t u v w x y z</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># shift 4 &gt;&gt; it means to rotate 4 places</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># After shifting</span>\n<span class=\"hljs-comment\"># e f g h i j k l m n o p q r s t u v w x y z a b c d</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># plaintext -&gt; apple</span>\n<span class=\"hljs-comment\"># ciphertext -&gt; ettpi</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CaesarCipher</span>\n  <span class=\"hljs-variable constant_\">ALPHABET</span> = (<span class=\"hljs-string\">&#x27;a&#x27;</span>..<span class=\"hljs-string\">&#x27;z&#x27;</span>).to_a\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">self</span>.encrypt(plaintext, shift)\n    plaintext.chars.map <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">letter</span>|\n      temp = letter.ord + shift\n      temp -= <span class=\"hljs-variable constant_\">ALPHABET</span>.length <span class=\"hljs-keyword\">while</span> temp &gt; <span class=\"hljs-string\">&#x27;z&#x27;</span>.ord\n      temp.chr\n    <span class=\"hljs-keyword\">end</span>.join\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">self</span>.decrypt(ciphertext, shift)\n    ciphertext.chars.map <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">letter</span>|\n      temp = letter.ord - shift\n      temp += <span class=\"hljs-variable constant_\">ALPHABET</span>.length <span class=\"hljs-keyword\">while</span> temp &lt; <span class=\"hljs-string\">&#x27;a&#x27;</span>.ord\n      temp.chr\n    <span class=\"hljs-keyword\">end</span>.join\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "julia": {
      "dir": "src/cipher/caesar.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/cipher/caesar.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    caesar(rot, s)\r\n\r\nProgram to implement rotational cipher for the given sentence. A full description of the algorithm can be found on [wikipedia](https://en.wikipedia.org/wiki/Caesar_cipher)\r\n\r\n# Arguments:\r\n- `rot`: The number of rotations needed.\r\n- `s` : The sentence needed to rotate\r\n\r\n# Examples/Tests \r\n```julia\r\njulia&gt; caesar(13,&quot;abcdefghijklmnopqrstuvwxyz&quot;)\r\nnopqrstuvwxyzabcdefghijklm\r\n\r\njulia&gt; caesar(5,&quot;omg&quot;)\r\ntrl\r\n\r\njulia&gt; caesar(0,&quot;hello&quot;)\r\nhello\r\n\r\n```\r\n\r\n# Algorithm: \r\n\r\n```julia\r\n\r\nif r &gt;= &#x27;a&#x27; &amp;&amp; r &lt;= &#x27;z&#x27;\r\n    v = ((r - &#x27;a&#x27;) + rot) % 26\r\n    return v + &#x27;a&#x27;\r\nend\r\nif r &gt;= &#x27;A&#x27; &amp;&amp; r &lt;= &#x27;Z&#x27;\r\n    v = ((r - &#x27;A&#x27;) + rot) % 26\r\n    return v + &#x27;A&#x27;\r\nend\r\nreturn r\r\n\r\n```\r\n\r\n# References:\r\nhttps://en.wikipedia.org/wiki/Caesar_cipher\r\n\r\n```\r\n\r\n# Contributed by:- [Ihjass Thasbekha](https://github.com/Ihjass)\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> caesar(rot, s)\r\n    rotate = <span class=\"hljs-keyword\">function</span> (r)\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&#x27;a&#x27;</span> &lt;= r &lt;= <span class=\"hljs-string\">&#x27;z&#x27;</span>\r\n            v = ((r - <span class=\"hljs-string\">&#x27;a&#x27;</span>) + rot) % <span class=\"hljs-number\">26</span>\r\n            <span class=\"hljs-keyword\">return</span> v + <span class=\"hljs-string\">&#x27;a&#x27;</span>\r\n        <span class=\"hljs-keyword\">end</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&#x27;A&#x27;</span> &lt;= r &lt;= <span class=\"hljs-string\">&#x27;Z&#x27;</span>\r\n            v = ((r - <span class=\"hljs-string\">&#x27;A&#x27;</span>) + rot) % <span class=\"hljs-number\">26</span>\r\n            <span class=\"hljs-keyword\">return</span> v + <span class=\"hljs-string\">&#x27;A&#x27;</span>\r\n        <span class=\"hljs-keyword\">end</span>\r\n        <span class=\"hljs-keyword\">return</span> r\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">if</span> s <span class=\"hljs-keyword\">isa</span> <span class=\"hljs-built_in\">Char</span>\r\n        <span class=\"hljs-keyword\">return</span> rotate(s)\r\n    <span class=\"hljs-keyword\">end</span>\r\n    result = <span class=\"hljs-string\">&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> s\r\n        result *= rotate(r)\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">return</span> result\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Encoders/CaesarEncoder.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/Algorithms/Encoders/CaesarEncoder.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System.Text;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Encoders</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Encodes using caesar cypher.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CaesarEncoder</span> : <span class=\"hljs-title\">IEncoder</span>&lt;<span class=\"hljs-title\">int</span>&gt;\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Encodes text using specified key,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity: O(n),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(n),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - text length.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;text&quot;&gt;</span>Text to be encoded.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;key&quot;&gt;</span>Key that will be used to encode the text.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Encoded text.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">Encode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text, <span class=\"hljs-built_in\">int</span> key</span>)</span> =&gt; Cipher(text, key);\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Decodes text that was encoded using specified key,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity: O(n),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(n),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - text length.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;text&quot;&gt;</span>Text to be decoded.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;key&quot;&gt;</span>Key that was used to encode the text.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Decoded text.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">Decode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text, <span class=\"hljs-built_in\">int</span> key</span>)</span> =&gt; Cipher(text, -key);\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">Cipher</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text, <span class=\"hljs-built_in\">int</span> key</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> newText = <span class=\"hljs-keyword\">new</span> StringBuilder(text.Length);\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; text.Length; i++)\n            {\n                <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">char</span>.IsLetter(text[i]))\n                {\n                    _ = newText.Append(text[i]);\n                    <span class=\"hljs-keyword\">continue</span>;\n                }\n\n                <span class=\"hljs-keyword\">var</span> letterA = <span class=\"hljs-built_in\">char</span>.IsUpper(text[i]) ? <span class=\"hljs-string\">&#x27;A&#x27;</span> : <span class=\"hljs-string\">&#x27;a&#x27;</span>;\n                <span class=\"hljs-keyword\">var</span> letterZ = <span class=\"hljs-built_in\">char</span>.IsUpper(text[i]) ? <span class=\"hljs-string\">&#x27;Z&#x27;</span> : <span class=\"hljs-string\">&#x27;z&#x27;</span>;\n\n                <span class=\"hljs-keyword\">var</span> c = text[i] + key;\n                c -= c &gt; letterZ ? <span class=\"hljs-number\">26</span> * (<span class=\"hljs-number\">1</span> + (c - letterZ - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">26</span>) : <span class=\"hljs-number\">0</span>;\n                c += c &lt; letterA ? <span class=\"hljs-number\">26</span> * (<span class=\"hljs-number\">1</span> + (letterA - c - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">26</span>) : <span class=\"hljs-number\">0</span>;\n\n                _ = newText.Append((<span class=\"hljs-built_in\">char</span>)c);\n            }\n\n            <span class=\"hljs-keyword\">return</span> newText.ToString();\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Arnav Borborah",
      "email": "arnavborborah11@gmail.com",
      "commits": 1
    },
    {
      "name": "Ivan Tham",
      "email": "pickfire@riseup.net",
      "commits": 1
    },
    {
      "name": "Soc Virnyl S. Estela",
      "email": "socvirnyl.estela@gmail.com",
      "commits": 1
    },
    {
      "name": "Ihjass Thasbekha",
      "email": "44056715+Ihjass@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Kaíque Kandy Koga",
      "email": "kaiquekandykoga@gmail.com",
      "commits": 1
    },
    {
      "name": "TheDoctor",
      "email": "doctorshacking@gmail.com",
      "commits": 1
    },
    {
      "name": "Patricio Whittingslow",
      "email": "graded.sp@gmail.com",
      "commits": 1
    },
    {
      "name": "Subhro Acharjee",
      "email": "88422396+subhroblkbox@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "Fahri YARDIMCI",
      "email": "ffahri@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Marcos",
      "email": "33052423+markettes@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}