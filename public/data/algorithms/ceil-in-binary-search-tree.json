{
  "slug": "ceil-in-binary-search-tree",
  "name": "Ceil In Binary Search Tree",
  "categories": [
    "datastructures",
    "tree"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/trees/CeilInBinarySearchTree.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/trees/CeilInBinarySearchTree.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.trees;\n\n<span class=\"hljs-keyword\">import</span> com.thealgorithms.datastructures.trees.BinaryTree.Node;\n\n<span class=\"hljs-comment\">/**\n * Problem Statement Ceil value for any number x in a collection is a number y\n * which is either equal to x or the least greater number than x.\n *\n * Problem: Given a binary search tree containing positive integer values. Find\n * ceil value for a given key in O(lg(n)) time. In case if it is not present\n * return -1.\n *\n * Ex.1. [30,20,40,10,25,35,50] represents level order traversal of a binary\n * search tree. Find ceil for 10. Answer: 20\n *\n * Ex.2. [30,20,40,10,25,35,50] represents level order traversal of a binary\n * search tree. Find ceil for 22 Answer: 25\n *\n * Ex.2. [30,20,40,10,25,35,50] represents level order traversal of a binary\n * search tree. Find ceil for 52 Answer: -1\n */</span>\n<span class=\"hljs-comment\">/**\n *\n * Solution 1: Brute Force Solution: Do an inorder traversal and save result\n * into an array. Iterate over the array to get an element equal to or greater\n * than current key. Time Complexity: O(n) Space Complexity: O(n) for auxillary\n * array to save inorder representation of tree.\n * &lt;p&gt;\n * &lt;p&gt;\n * Solution 2: Brute Force Solution: Do an inorder traversal and save result\n * into an array.Since array is sorted do a binary search over the array to get\n * an element equal to or greater than current key. Time Complexity: O(n) for\n * traversal of tree and O(lg(n)) for binary search in array. Total = O(n) Space\n * Complexity: O(n) for auxillary array to save inorder representation of tree.\n * &lt;p&gt;\n * &lt;p&gt;\n * Solution 3: Optimal We can do a DFS search on given tree in following\n * fashion. i) if root is null then return null because then ceil doesn&#x27;t exist\n * ii) If key is lesser than root value than ceil will be in right subtree so\n * call recursively on right subtree iii) if key is greater than current root,\n * then either a) the root is ceil b) ceil is in left subtree: call for left\n * subtree. If left subtree returns a non null value then that will be ceil\n * otherwise the root is ceil\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CeilInBinarySearchTree</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Node <span class=\"hljs-title function_\">getCeil</span><span class=\"hljs-params\">(Node root, <span class=\"hljs-type\">int</span> key)</span> {\n        <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n\n        <span class=\"hljs-comment\">// if root value is same as key than root is the ceiling</span>\n        <span class=\"hljs-keyword\">if</span> (root.data == key) {\n            <span class=\"hljs-keyword\">return</span> root;\n        }\n\n        <span class=\"hljs-comment\">// if root value is lesser than key then ceil must be in right subtree</span>\n        <span class=\"hljs-keyword\">if</span> (root.data &lt; key) {\n            <span class=\"hljs-keyword\">return</span> getCeil(root.right, key);\n        }\n\n        <span class=\"hljs-comment\">// if root value is greater than key then ceil can be in left subtree or if</span>\n        <span class=\"hljs-comment\">// it is not in left subtree then current node will be ceil</span>\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> getCeil(root.left, key);\n\n        <span class=\"hljs-comment\">// if result is null it means that there is no ceil in children subtrees</span>\n        <span class=\"hljs-comment\">// and the root is the ceil otherwise the returned node is the ceil.</span>\n        <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-literal\">null</span> ? root : result;\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Amit Kumar",
      "email": "kumanoit@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}