{
  "slug": "centroid-decomposition",
  "name": "Centroid Decomposition",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/graph/centroid_decomposition.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/graph/centroid_decomposition.rs",
      "code": "<span class=\"hljs-comment\">/*\nCentroid Decomposition for a tree.\n\nGiven a tree, it can be recursively decomposed into centroids. Then the\nparent of a centroid `c` is the previous centroid that splitted its connected\ncomponent into two or more components. It can be shown that in such\ndecomposition, for each path `p` with starting and ending vertices `u`, `v`,\nthe lowest common ancestor of `u` and `v` in centroid tree is a vertex of `p`.\n\nThe input tree should have its vertices numbered from 1 to n, and\n`graph_enumeration.rs` may help to convert other representations.\n */</span>\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Adj</span> = [<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;];\n\n<span class=\"hljs-keyword\">const</span> IN_DECOMPOSITION: <span class=\"hljs-type\">u64</span> = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">63</span>;\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">CentroidDecomposition</span> {\n    <span class=\"hljs-comment\">/// The root of the centroid tree, should _not_ be set by the user</span>\n    <span class=\"hljs-keyword\">pub</span> root: <span class=\"hljs-type\">usize</span>,\n    <span class=\"hljs-comment\">/// The result. decomposition[`v`] is the parent of `v` in centroid tree.</span>\n    <span class=\"hljs-comment\">/// decomposition[`root`] is 0</span>\n    <span class=\"hljs-keyword\">pub</span> decomposition: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;,\n    <span class=\"hljs-comment\">/// Used internally to save the big_child of a vertex, and whether it has</span>\n    <span class=\"hljs-comment\">/// been added to the centroid tree.</span>\n    vert_state: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u64</span>&gt;,\n    <span class=\"hljs-comment\">/// Used internally to save the subtree size of a vertex</span>\n    vert_size: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">CentroidDecomposition</span> {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>(<span class=\"hljs-keyword\">mut</span> num_vertices: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        num_vertices += <span class=\"hljs-number\">1</span>;\n        CentroidDecomposition {\n            root: <span class=\"hljs-number\">0</span>,\n            decomposition: <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; num_vertices],\n            vert_state: <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; num_vertices],\n            vert_size: <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; num_vertices],\n        }\n    }\n    <span class=\"hljs-meta\">#[inline]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">put_in_decomposition</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, v: <span class=\"hljs-type\">usize</span>, parent: <span class=\"hljs-type\">usize</span>) {\n        <span class=\"hljs-keyword\">self</span>.decomposition[v] = parent;\n        <span class=\"hljs-keyword\">self</span>.vert_state[v] |= IN_DECOMPOSITION;\n    }\n    <span class=\"hljs-meta\">#[inline]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">is_in_decomposition</span>(&amp;<span class=\"hljs-keyword\">self</span>, v: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        (<span class=\"hljs-keyword\">self</span>.vert_state[v] &amp; IN_DECOMPOSITION) != <span class=\"hljs-number\">0</span>\n    }\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">dfs_size</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, v: <span class=\"hljs-type\">usize</span>, parent: <span class=\"hljs-type\">usize</span>, adj: &amp;Adj) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\n        <span class=\"hljs-keyword\">self</span>.vert_size[v] = <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">big_child</span> = <span class=\"hljs-number\">0_usize</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">bc_size</span> = <span class=\"hljs-number\">0_usize</span>; <span class=\"hljs-comment\">// big child size</span>\n        <span class=\"hljs-keyword\">for</span> &amp;u <span class=\"hljs-keyword\">in</span> adj[v].<span class=\"hljs-title function_ invoke__\">iter</span>() {\n            <span class=\"hljs-keyword\">if</span> u == parent || <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">is_in_decomposition</span>(u) {\n                <span class=\"hljs-keyword\">continue</span>;\n            }\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">u_size</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">dfs_size</span>(u, v, adj);\n            <span class=\"hljs-keyword\">self</span>.vert_size[v] += u_size;\n            <span class=\"hljs-keyword\">if</span> u_size &gt; bc_size {\n                big_child = u;\n                bc_size = u_size;\n            }\n        }\n        <span class=\"hljs-keyword\">self</span>.vert_state[v] = big_child <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span>;\n        <span class=\"hljs-keyword\">self</span>.vert_size[v]\n    }\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">dfs_centroid</span>(&amp;<span class=\"hljs-keyword\">self</span>, v: <span class=\"hljs-type\">usize</span>, size_thr: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\n        <span class=\"hljs-comment\">// recurse until big child&#x27;s size is &lt;= `size_thr`</span>\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.vert_state[v] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span> {\n            u <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.vert_size[u] &lt;= size_thr =&gt; v,\n            u =&gt; <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">dfs_centroid</span>(u, size_thr),\n        }\n    }\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">decompose_subtree</span>(\n        &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>,\n        v: <span class=\"hljs-type\">usize</span>,\n        centroid_parent: <span class=\"hljs-type\">usize</span>,\n        calculate_vert_size: <span class=\"hljs-type\">bool</span>,\n        adj: &amp;Adj,\n    ) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\n        <span class=\"hljs-comment\">// `calculate_vert_size` determines if it is necessary to recalculate</span>\n        <span class=\"hljs-comment\">// `self.vert_size`</span>\n        <span class=\"hljs-keyword\">if</span> calculate_vert_size {\n            <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">dfs_size</span>(v, centroid_parent, adj);\n        }\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">v_size</span> = <span class=\"hljs-keyword\">self</span>.vert_size[v];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">centroid</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">dfs_centroid</span>(v, v_size &gt;&gt; <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">put_in_decomposition</span>(centroid, centroid_parent);\n        <span class=\"hljs-keyword\">for</span> &amp;u <span class=\"hljs-keyword\">in</span> adj[centroid].<span class=\"hljs-title function_ invoke__\">iter</span>() {\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">is_in_decomposition</span>(u) {\n                <span class=\"hljs-keyword\">continue</span>;\n            }\n            <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">decompose_subtree</span>(\n                u,\n                centroid,\n                <span class=\"hljs-keyword\">self</span>.vert_size[u] &gt; <span class=\"hljs-keyword\">self</span>.vert_size[centroid],\n                adj,\n            );\n        }\n        centroid\n    }\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">decompose_tree</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, adj: &amp;Adj) {\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">decompose_subtree</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">true</span>, adj);\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::CentroidDecomposition;\n    <span class=\"hljs-keyword\">use</span> crate::{\n        graph::{enumerate_graph, prufer_code},\n        math::PCG32,\n    };\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">calculate_height</span>(v: <span class=\"hljs-type\">usize</span>, heights: &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-type\">usize</span>], parents: &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-type\">usize</span>]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\n        <span class=\"hljs-keyword\">if</span> heights[v] == <span class=\"hljs-number\">0</span> {\n            heights[v] = <span class=\"hljs-title function_ invoke__\">calculate_height</span>(parents[v], heights, parents) + <span class=\"hljs-number\">1</span>;\n        }\n        heights[v]\n    }\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">single_path</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">len</span> = <span class=\"hljs-number\">16</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">adj</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[]; len];\n        adj[<span class=\"hljs-number\">1</span>].<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">2</span>);\n        adj[<span class=\"hljs-number\">15</span>].<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">14</span>);\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">2</span>..<span class=\"hljs-number\">15</span> {\n            adj[i].<span class=\"hljs-title function_ invoke__\">push</span>(i + <span class=\"hljs-number\">1</span>);\n            adj[i].<span class=\"hljs-title function_ invoke__\">push</span>(i - <span class=\"hljs-number\">1</span>);\n        }\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">cd</span> = CentroidDecomposition::<span class=\"hljs-title function_ invoke__\">new</span>(len - <span class=\"hljs-number\">1</span>);\n        cd.<span class=\"hljs-title function_ invoke__\">decompose_tree</span>(&amp;adj);\n        <span class=\"hljs-comment\">// We should get a complete binary tree</span>\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            cd.decomposition,\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">14</span>]\n        );\n    }\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-meta\">#[ignore]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">random_tree_height</span>() {\n        <span class=\"hljs-comment\">// Do not run this test in debug mode! It takes &gt; 30s to run without</span>\n        <span class=\"hljs-comment\">// optimizations!</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">n</span> = <span class=\"hljs-number\">1e6</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">max_height</span> = <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">20</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">len</span> = n + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">rng</span> = PCG32::<span class=\"hljs-title function_ invoke__\">new_default</span>(<span class=\"hljs-number\">314159</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">tree_prufer_code</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u32</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; n - <span class=\"hljs-number\">2</span>];\n        tree_prufer_code.<span class=\"hljs-title function_ invoke__\">fill_with</span>(|| (rng.<span class=\"hljs-title function_ invoke__\">get_u32</span>() % (n <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>)) + <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">vertex_list</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u32</span>&gt; = (<span class=\"hljs-number\">1</span>..=(n <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>)).<span class=\"hljs-title function_ invoke__\">collect</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">adj</span> = <span class=\"hljs-title function_ invoke__\">enumerate_graph</span>(&amp;prufer_code::<span class=\"hljs-title function_ invoke__\">prufer_decode</span>(&amp;tree_prufer_code, &amp;vertex_list));\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">cd</span> = CentroidDecomposition::<span class=\"hljs-title function_ invoke__\">new</span>(n);\n        cd.<span class=\"hljs-title function_ invoke__\">decompose_tree</span>(&amp;adj);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">heights</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; len];\n        heights[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..=n {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">h</span> = <span class=\"hljs-title function_ invoke__\">calculate_height</span>(i, &amp;<span class=\"hljs-keyword\">mut</span> heights, &amp;<span class=\"hljs-keyword\">mut</span> cd.decomposition);\n            <span class=\"hljs-built_in\">assert!</span>(h &lt;= max_height);\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Erfan Khadem",
      "email": "45465346+er888kh@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}