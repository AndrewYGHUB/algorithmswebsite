{
  "slug": "checkisnumberpoweroftwo",
  "name": "Checkisnumberpoweroftwo",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "math/binary/checkisnumberpoweroftwo.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/math/binary/checkisnumberpoweroftwo.go",
      "code": "<span class=\"hljs-comment\">// checkisnumberpoweroftwo.go</span>\n<span class=\"hljs-comment\">// description: Is the number a power of two</span>\n<span class=\"hljs-comment\">// details:</span>\n<span class=\"hljs-comment\">// Checks if a number is a power of two- [Power of two](https://en.wikipedia.org/wiki/Power_of_two)</span>\n<span class=\"hljs-comment\">// author(s) [red_byte](https://github.com/i-redbyte)</span>\n<span class=\"hljs-comment\">// see checkisnumberpoweroftwo_test.go</span>\n\n<span class=\"hljs-keyword\">package</span> binary\n\n<span class=\"hljs-comment\">// IsPowerOfTwo This function uses the fact that powers of 2 are represented</span>\n<span class=\"hljs-comment\">// like 10...0 in binary, and numbers one less than the power of 2</span>\n<span class=\"hljs-comment\">// are represented like 11...1.</span>\n<span class=\"hljs-comment\">// Therefore, using the and function:</span>\n<span class=\"hljs-comment\">//    10...0</span>\n<span class=\"hljs-comment\">//  &amp; 01...1</span>\n<span class=\"hljs-comment\">//    00...0 -&gt; 0</span>\n<span class=\"hljs-comment\">// This is also true for 0, which is not a power of 2, for which we</span>\n<span class=\"hljs-comment\">// have to add and extra condition.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">IsPowerOfTwo</span><span class=\"hljs-params\">(x <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> {\n\t<span class=\"hljs-keyword\">return</span> x &gt; <span class=\"hljs-number\">0</span> &amp;&amp; (x&amp;(x<span class=\"hljs-number\">-1</span>)) == <span class=\"hljs-number\">0</span>\n}\n\n<span class=\"hljs-comment\">// IsPowerOfTwoLeftShift This function takes advantage of the fact that left shifting a number</span>\n<span class=\"hljs-comment\">// by 1 is equivalent to multiplying by 2. For example, binary 00000001 when shifted by 3 becomes 00001000,</span>\n<span class=\"hljs-comment\">// which in decimal system is 8 or = 2 * 2 * 2</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">IsPowerOfTwoLeftShift</span><span class=\"hljs-params\">(number <span class=\"hljs-type\">uint</span>)</span></span> <span class=\"hljs-type\">bool</span> {\n\t<span class=\"hljs-keyword\">if</span> number == <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n\t}\n\t<span class=\"hljs-keyword\">for</span> p := <span class=\"hljs-type\">uint</span>(<span class=\"hljs-number\">1</span>); p &gt; <span class=\"hljs-number\">0</span>; p = p &lt;&lt; <span class=\"hljs-number\">1</span> {\n\t\t<span class=\"hljs-keyword\">if</span> number == p {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Ilya Sokolov",
      "email": "developer.sokolov@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}