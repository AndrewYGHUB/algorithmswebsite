{
  "slug": "circular-linked-list",
  "name": "Circular Linked List",
  "categories": [
    "datastructures",
    "linkedlist"
  ],
  "body": {
    "en": "<p>Circular Linked List is an end-connected data structure made of Nodes. Similar to the linear and doubly linked list, each node is composed of a variable <code>data</code> where its content is stored and a pointer to the next Node on the list.\nThe Linked List has a <code>pointer</code> to the adjacent elements but the last node is connected towards the head node i.e the first node itself, thus forming a circular shape.</p>\n<h3>Advantages over Arrays &#x26; Linear Linked List &#x26; Doubly Linked List</h3>\n<ul>\n<li>Any node can be a starting point</li>\n<li>Useful for implementation of queue</li>\n<li>Circular lists are useful in applications to repeatedly go around the list</li>\n<li>Circular Doubly Linked Lists are used for the implementation of advanced data structures like Fibonacci Heap.</li>\n<li>The size of a linked list is not fixed (dynamic size)</li>\n<li>Deleting and adding an element is not expensive compared to an array</li>\n</ul>\n<h3>Drawbacks</h3>\n<ul>\n<li>Circular lists are complex as compared to singly linked lists.</li>\n<li>Reversing of circular list is a complex as compared to singly or doubly lists.</li>\n<li>If not traversed carefully, then we could end up in an infinite loop</li>\n<li>Elements can be accessed sequentially not randomly compared to an array</li>\n<li>Extra memory allocation needs to be done for pointers which connects elements in a linked list</li>\n</ul>\n<h3>Time Complexity</h3>\n<table>\n<thead>\n<tr>\n<th>Operation</th>\n<th>Average</th>\n<th>Worst</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Initialize</td>\n<td>O(1)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Access</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Search</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Insertion</td>\n<td>O(1)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Deletion</td>\n<td>O(1)</td>\n<td>O(n)</td>\n</tr>\n</tbody>\n</table>\n<h3>Real World Application</h3>\n<ul>\n<li>Allocating CPU to resources</li>\n<li>Multiplayer Board games</li>\n</ul>\n<h3>SLL v.s. CLL</h3>\n<p><img src=\"https://i0.wp.com/algorithms.tutorialhorizon.com/files/2016/03/Circular-Linked-List.png\" alt=\"image\"></p>\n<h3>Example</h3>\n<p>Insertion</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insertHead</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> data)</span>\n</span>{\n\tNode temp = <span class=\"hljs-keyword\">new</span> Node(data);\n\tNode cur = head;\n\t<span class=\"hljs-keyword\">while</span>(cur.getNext() != head)\n\t\tcur = cur.getNext();\n\t<span class=\"hljs-keyword\">if</span>(head == <span class=\"hljs-keyword\">null</span>)\n\t{\n\t\thead = temp;\n\t\thead.setNext(head);\n\t}\n\t<span class=\"hljs-keyword\">else</span>\n\t{\n\t\ttemp.setNext(head);\n\t\thead = temp;\n\t\tcur.setNext(temp);\n\t}\n\tsize++;\n}\n</code></pre>\n<h2>Code Implementation Links</h2>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Javascript/blob/master/Data-Structures/Linked-List/SingleCircularLinkedList.js.js\">JavaScript</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/data_structures/cll/cll.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/data_structures/linked_list/circular_linked_list.py\">Python</a></li>\n</ul>\n<h2>Video Explanation</h2>\n<p><a href=\"https://youtu.be/HMkdlu5sP4A\">Video explanation on YouTube</a></p>"
  },
  "implementations": {
    "python": {
      "dir": "data_structures/linked_list/circular_linked_list.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/linked_list/circular_linked_list.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">from</span> collections.abc <span class=\"hljs-keyword\">import</span> Iterator\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Any</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>):\n        self.data: <span class=\"hljs-type\">Any</span> = data\n        self.<span class=\"hljs-built_in\">next</span>: Node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CircularLinkedList</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\n        self.head = <span class=\"hljs-literal\">None</span>\n        self.tail = <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__iter__</span>(<span class=\"hljs-params\">self</span>) -&gt; Iterator[<span class=\"hljs-type\">Any</span>]:\n        node = self.head\n        <span class=\"hljs-keyword\">while</span> self.head:\n            <span class=\"hljs-keyword\">yield</span> node.data\n            node = node.<span class=\"hljs-built_in\">next</span>\n            <span class=\"hljs-keyword\">if</span> node == self.head:\n                <span class=\"hljs-keyword\">break</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__len__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">tuple</span>(<span class=\"hljs-built_in\">iter</span>(self)))\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">iter</span>(self))\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_tail</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.insert_nth(<span class=\"hljs-built_in\">len</span>(self), data)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_head</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.insert_nth(<span class=\"hljs-number\">0</span>, data)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_nth</span>(<span class=\"hljs-params\">self, index: <span class=\"hljs-built_in\">int</span>, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> index &gt; <span class=\"hljs-built_in\">len</span>(self):\n            <span class=\"hljs-keyword\">raise</span> IndexError(<span class=\"hljs-string\">&quot;list index out of range.&quot;</span>)\n        new_node = Node(data)\n        <span class=\"hljs-keyword\">if</span> self.head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            new_node.<span class=\"hljs-built_in\">next</span> = new_node  <span class=\"hljs-comment\"># first node points itself</span>\n            self.tail = self.head = new_node\n        <span class=\"hljs-keyword\">elif</span> index == <span class=\"hljs-number\">0</span>:  <span class=\"hljs-comment\"># insert at head</span>\n            new_node.<span class=\"hljs-built_in\">next</span> = self.head\n            self.head = self.tail.<span class=\"hljs-built_in\">next</span> = new_node\n        <span class=\"hljs-keyword\">else</span>:\n            temp = self.head\n            <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(index - <span class=\"hljs-number\">1</span>):\n                temp = temp.<span class=\"hljs-built_in\">next</span>\n            new_node.<span class=\"hljs-built_in\">next</span> = temp.<span class=\"hljs-built_in\">next</span>\n            temp.<span class=\"hljs-built_in\">next</span> = new_node\n            <span class=\"hljs-keyword\">if</span> index == <span class=\"hljs-built_in\">len</span>(self) - <span class=\"hljs-number\">1</span>:  <span class=\"hljs-comment\"># insert at tail</span>\n                self.tail = new_node\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_front</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> self.delete_nth(<span class=\"hljs-number\">0</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_tail</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-type\">Any</span>:\n        <span class=\"hljs-keyword\">return</span> self.delete_nth(<span class=\"hljs-built_in\">len</span>(self) - <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_nth</span>(<span class=\"hljs-params\">self, index: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span></span>) -&gt; <span class=\"hljs-type\">Any</span>:\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-number\">0</span> &lt;= index &lt; <span class=\"hljs-built_in\">len</span>(self):\n            <span class=\"hljs-keyword\">raise</span> IndexError(<span class=\"hljs-string\">&quot;list index out of range.&quot;</span>)\n        delete_node = self.head\n        <span class=\"hljs-keyword\">if</span> self.head == self.tail:  <span class=\"hljs-comment\"># just one node</span>\n            self.head = self.tail = <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">elif</span> index == <span class=\"hljs-number\">0</span>:  <span class=\"hljs-comment\"># delete head node</span>\n            self.tail.<span class=\"hljs-built_in\">next</span> = self.tail.<span class=\"hljs-built_in\">next</span>.<span class=\"hljs-built_in\">next</span>\n            self.head = self.head.<span class=\"hljs-built_in\">next</span>\n        <span class=\"hljs-keyword\">else</span>:\n            temp = self.head\n            <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(index - <span class=\"hljs-number\">1</span>):\n                temp = temp.<span class=\"hljs-built_in\">next</span>\n            delete_node = temp.<span class=\"hljs-built_in\">next</span>\n            temp.<span class=\"hljs-built_in\">next</span> = temp.<span class=\"hljs-built_in\">next</span>.<span class=\"hljs-built_in\">next</span>\n            <span class=\"hljs-keyword\">if</span> index == <span class=\"hljs-built_in\">len</span>(self) - <span class=\"hljs-number\">1</span>:  <span class=\"hljs-comment\"># delete at tail</span>\n                self.tail = temp\n        <span class=\"hljs-keyword\">return</span> delete_node.data\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(self) == <span class=\"hljs-number\">0</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_circular_linked_list</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; test_circular_linked_list()\n    &quot;&quot;&quot;</span>\n    circular_linked_list = CircularLinkedList()\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">len</span>(circular_linked_list) == <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">assert</span> circular_linked_list.is_empty() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(circular_linked_list) == <span class=\"hljs-string\">&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">try</span>:\n        circular_linked_list.delete_front()\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">False</span>  <span class=\"hljs-comment\"># This should not happen</span>\n    <span class=\"hljs-keyword\">except</span> IndexError:\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">True</span>  <span class=\"hljs-comment\"># This should happen</span>\n\n    <span class=\"hljs-keyword\">try</span>:\n        circular_linked_list.delete_tail()\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">False</span>  <span class=\"hljs-comment\"># This should not happen</span>\n    <span class=\"hljs-keyword\">except</span> IndexError:\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">True</span>  <span class=\"hljs-comment\"># This should happen</span>\n\n    <span class=\"hljs-keyword\">try</span>:\n        circular_linked_list.delete_nth(-<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">except</span> IndexError:\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">try</span>:\n        circular_linked_list.delete_nth(<span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">except</span> IndexError:\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">assert</span> circular_linked_list.is_empty() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">len</span>(circular_linked_list) == i\n        circular_linked_list.insert_nth(i, i + <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(circular_linked_list) == <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>))\n\n    circular_linked_list.insert_tail(<span class=\"hljs-number\">6</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(circular_linked_list) == <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>))\n    circular_linked_list.insert_head(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(circular_linked_list) == <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>))\n\n    <span class=\"hljs-keyword\">assert</span> circular_linked_list.delete_front() == <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">assert</span> circular_linked_list.delete_tail() == <span class=\"hljs-number\">6</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(circular_linked_list) == <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>))\n    <span class=\"hljs-keyword\">assert</span> circular_linked_list.delete_nth(<span class=\"hljs-number\">2</span>) == <span class=\"hljs-number\">3</span>\n\n    circular_linked_list.insert_nth(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(circular_linked_list) == <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>))\n\n    <span class=\"hljs-keyword\">assert</span> circular_linked_list.is_empty() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">False</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "c-plus-plus": {
      "dir": "operations_on_datastructures/circular_linked_list.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/operations_on_datastructures/circular_linked_list.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation for a [Circular Linked\n * List](https://www.geeksforgeeks.org/circular-linked-list/).\n * @details A Circular Linked List is a variation on the regular linked list, in\n * which the last node has a pointer to the first node, which creates a full\n * circle. Consequently, this allows any node to be used as the starting point\n * for the list.\n * @author [Alvin](https://github.com/polarvoid)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace operations_on_datastructures\n * @brief Operations on Data Structures\n */</span>\n<span class=\"hljs-keyword\">namespace</span> operations_on_datastructures {\n\n<span class=\"hljs-comment\">/**\n * @namespace circular_linked_list\n * @brief Functions for the [Circular Linked\n * List](https://www.geeksforgeeks.org/circular-linked-list/) implementation\n */</span>\n<span class=\"hljs-keyword\">namespace</span> circular_linked_list {\n\n<span class=\"hljs-comment\">/**\n * @brief A Node struct that represents a single Node in a Binary Tree\n */</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-type\">int64_t</span> data;  <span class=\"hljs-comment\">///&lt; The value of the Node</span>\n    Node* next;    <span class=\"hljs-comment\">///&lt; The Node&#x27;s successor</span>\n    <span class=\"hljs-comment\">/**\n     * @brief Creates a new Node with some initial data\n     * @param _data Value of Node\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">Node</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int64_t</span> _data)</span> </span>{\n        data = _data;    <span class=\"hljs-comment\">///&lt; Set value of Node data</span>\n        next = <span class=\"hljs-literal\">nullptr</span>;  <span class=\"hljs-comment\">///&lt; Initialize successor</span>\n    }\n    <span class=\"hljs-comment\">/**\n     * @brief Creates a new Node with initial data and a successor\n     * @param _data Value of Node\n     * @param _next Pointer to the next Node\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">Node</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int64_t</span> _data, Node* _next)</span> </span>{\n        data = _data;  <span class=\"hljs-comment\">///&lt; Set value of Node data</span>\n        next = _next;  <span class=\"hljs-comment\">///&lt; Initialize successor</span>\n    }\n};\n\n<span class=\"hljs-comment\">/**\n * @brief A class that implements a Circular Linked List.\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CircularLinkedList</span> {\n <span class=\"hljs-keyword\">private</span>:\n    Node* root;   <span class=\"hljs-comment\">///&lt; Pointer to the root Node</span>\n    Node* end{};  <span class=\"hljs-comment\">///&lt; Pointer to the last Node</span>\n\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/**\n     * @brief Creates an empty CircularLinkedList.\n     */</span>\n    <span class=\"hljs-built_in\">CircularLinkedList</span>() {\n        root = <span class=\"hljs-literal\">nullptr</span>;\n        end = <span class=\"hljs-literal\">nullptr</span>;\n    }\n    <span class=\"hljs-comment\">/**\n     * @brief Copy constructor for CircularLinkedList.\n     */</span>\n    <span class=\"hljs-built_in\">CircularLinkedList</span>(<span class=\"hljs-type\">const</span> CircularLinkedList&amp; copy) {\n        <span class=\"hljs-built_in\">erase</span>();\n        root = <span class=\"hljs-literal\">nullptr</span>;\n        Node* node = copy.root;\n        <span class=\"hljs-keyword\">while</span> (node != <span class=\"hljs-literal\">nullptr</span>) {\n            <span class=\"hljs-built_in\">insert</span>(node-&gt;data);\n            node = node-&gt;next;\n        }\n    }\n    <span class=\"hljs-comment\">/**\n     * @brief Move constructor for CircularLinkedList\n     * @param source rvalue reference to a Circular Linked List\n     */</span>\n    <span class=\"hljs-built_in\">CircularLinkedList</span>(CircularLinkedList&amp;&amp; source) <span class=\"hljs-keyword\">noexcept</span> {\n        root = source.root;\n        end = source.end;\n        source.root = <span class=\"hljs-literal\">nullptr</span>;\n        source.end = <span class=\"hljs-literal\">nullptr</span>;\n    }\n    <span class=\"hljs-comment\">/**\n     * @brief Copy assignment operator\n     * @param other Reference to a Circular Linked List\n     * @returns Reference to CircularLinkedList\n     */</span>\n    CircularLinkedList&amp; <span class=\"hljs-keyword\">operator</span>=(<span class=\"hljs-type\">const</span> CircularLinkedList&amp; other) {\n        <span class=\"hljs-built_in\">erase</span>();\n        root = <span class=\"hljs-literal\">nullptr</span>;\n        Node* node = other.root;\n        <span class=\"hljs-keyword\">while</span> (node != <span class=\"hljs-literal\">nullptr</span>) {\n            <span class=\"hljs-built_in\">insert</span>(node-&gt;data);\n            node = node-&gt;next;\n        }\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n    <span class=\"hljs-comment\">/**\n     * @brief Move assignment operator\n     * @param other rvalue reference to a Circular Linked List\n     * @returns Reference to CircularLinkedList\n     */</span>\n    CircularLinkedList&amp; <span class=\"hljs-keyword\">operator</span>=(CircularLinkedList&amp;&amp; other) <span class=\"hljs-keyword\">noexcept</span> {\n        root = other.root;\n        end = other.end;\n        other.root = <span class=\"hljs-literal\">nullptr</span>;\n        other.end = <span class=\"hljs-literal\">nullptr</span>;\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n    <span class=\"hljs-comment\">/**\n     * @brief Cleans up memory when destroyed\n     */</span>\n    ~<span class=\"hljs-built_in\">CircularLinkedList</span>() { <span class=\"hljs-built_in\">erase</span>(); }\n    <span class=\"hljs-comment\">/**\n     * Iteratively frees each node in the Circular Linked List from the heap\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">erase</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">nullptr</span>) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        Node* node = root;\n        <span class=\"hljs-keyword\">do</span> {\n            Node* temp = node;\n            node = node-&gt;next;\n            <span class=\"hljs-built_in\">delete</span> (temp);\n        } <span class=\"hljs-keyword\">while</span> (node != root);\n        root = <span class=\"hljs-literal\">nullptr</span>;\n        end = <span class=\"hljs-literal\">nullptr</span>;\n    }\n    <span class=\"hljs-comment\">/**\n     * @brief Inserts all the values from a vector into the Circular Linked List\n     * @details Goes through each element in the vector sequentially, inserting\n     * it into the list\n     * @param values The vector of integer values that is to be inserted\n     * @returns void\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt;&amp; values)</span> </span>{\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int64_t</span> value : values) {\n            <span class=\"hljs-built_in\">insert</span>(value);\n        }\n    }\n    <span class=\"hljs-comment\">/**\n     * @brief Inserts a single value into the Circular Linked List\n     * @details Creates a Node with the given value, pointing to the root Node\n     * and inserts it into the list\n     * @param data The integer valus to be inserted\n     * @returns void\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int64_t</span> data)</span> </span>{\n        Node* node = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Node</span>(data, root);\n        <span class=\"hljs-built_in\">insert</span>(node);\n    }\n    <span class=\"hljs-comment\">/**\n     * @brief Inserts a given Node into the Circular Linked List\n     * @details Checks wheter the list is empty, and inserts the Node, modifying\n     * the end pointer\n     * @param node The Node that is to be inserted\n     * @returns void\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(Node* node)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">nullptr</span>) {\n            root = node;        <span class=\"hljs-comment\">///&lt; Set node as the root</span>\n            node-&gt;next = root;  <span class=\"hljs-comment\">///&lt; Point node to itself</span>\n            end = root;         <span class=\"hljs-comment\">///&lt; Set the end to the root</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            end-&gt;next = node;   <span class=\"hljs-comment\">///&lt; Append node to the end</span>\n            node-&gt;next = root;  <span class=\"hljs-comment\">///&lt; Set the next value to the root</span>\n            end = node;         <span class=\"hljs-comment\">///&lt; Make end point to node</span>\n        }\n    }\n    <span class=\"hljs-comment\">/**\n     * @brief Prints the values of the Circular Linked List, beginning from the\n     * root Node\n     * @details Goes through each Node from the root and prints them out in\n     * order\n     * @returns void\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-built_in\">print</span>(root); }\n    <span class=\"hljs-comment\">/**\n     * @brief Prints the values of the Circular Linked List, beginning from a\n     * given Node to be used as the root\n     * @details Goes through each Node from the given Node and prints them out\n     * in order. If the list is empty, it prints the message &#x27;Empty List!&#x27;\n     * @param root The Node to start at\n     * @returns void\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(Node* root)</span> </span>{\n        Node* temp = root;\n        <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">nullptr</span>) {\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Empty List!\\n&quot;</span>;\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-keyword\">do</span> {\n            std::cout &lt;&lt; temp-&gt;data &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n            temp = temp-&gt;next;\n        } <span class=\"hljs-keyword\">while</span> (temp != root);\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n    }\n    <span class=\"hljs-comment\">/**\n     * @brief Returns a std::vector of the values of the Circular Linked List\n     * @details Starting from the root Node, appends each value of the list to a\n     * std::vector and returns it\n     * @returns A std::vector of the list&#x27;s values\n     */</span>\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; <span class=\"hljs-title\">values</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">values</span>(root); }\n    <span class=\"hljs-comment\">/**\n     * @brief Returns a std::vector of the values of the Circular Linked List,\n     * beginning from a given Node\n     * @details Starting from a given Node, appends each value of the list to a\n     * std::vector and returns it\n     * @param root The Node to start at\n     * @returns A std::vector of the list&#x27;s values\n     */</span>\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; <span class=\"hljs-title\">values</span><span class=\"hljs-params\">(Node* root)</span> </span>{\n        std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; res;\n        <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">nullptr</span>) {\n            <span class=\"hljs-keyword\">return</span> res;  <span class=\"hljs-comment\">///&lt; Return empty vector</span>\n        }\n        Node* temp = root;\n        <span class=\"hljs-keyword\">do</span> {\n            res.<span class=\"hljs-built_in\">push_back</span>(temp-&gt;data);\n            temp = temp-&gt;next;\n        } <span class=\"hljs-keyword\">while</span> (temp != root);\n        <span class=\"hljs-keyword\">return</span> res;\n    }\n};\n\n}  <span class=\"hljs-comment\">// namespace circular_linked_list</span>\n\n}  <span class=\"hljs-comment\">// namespace operations_on_datastructures</span>\n\n<span class=\"hljs-comment\">/**\n * @namespace tests\n * @brief Testcases to check Circular Linked List.\n */</span>\n<span class=\"hljs-keyword\">namespace</span> tests {\n<span class=\"hljs-keyword\">using</span> operations_on_datastructures::circular_linked_list::CircularLinkedList;\n<span class=\"hljs-keyword\">using</span> operations_on_datastructures::circular_linked_list::Node;\n<span class=\"hljs-comment\">/**\n * @brief A Test to check a single value\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test1</span><span class=\"hljs-params\">()</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST CASE 1\\n&quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Intialized a = {2}\\n&quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected result: {2}\\n&quot;</span>;\n    CircularLinkedList a;\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; res = {<span class=\"hljs-number\">2</span>};\n    a.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-built_in\">assert</span>(a.<span class=\"hljs-built_in\">values</span>() == res);\n    a.<span class=\"hljs-built_in\">print</span>();\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED!\\n\\n&quot;</span>;\n}\n<span class=\"hljs-comment\">/**\n * @brief A Test to check a few values\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST CASE 2\\n&quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Intialized a = {2, 5, 6}\\n&quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected result: {2, 5, 6}\\n&quot;</span>;\n    CircularLinkedList a;\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; res = {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>};\n    a.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">2</span>);\n    a.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">5</span>);\n    a.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">6</span>);\n    <span class=\"hljs-built_in\">assert</span>(a.<span class=\"hljs-built_in\">values</span>() == res);\n    a.<span class=\"hljs-built_in\">print</span>();\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED!\\n\\n&quot;</span>;\n}\n<span class=\"hljs-comment\">/**\n * @brief A Test to check an input array\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test3</span><span class=\"hljs-params\">()</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST CASE 3\\n&quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Intialized a = {2, 7, 8, 3, 2, 6}\\n&quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected result: {2, 7, 8, 3, 2, 6}\\n&quot;</span>;\n    CircularLinkedList a;\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; res = {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>};\n    a.<span class=\"hljs-built_in\">insert</span>({<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>});\n    a.<span class=\"hljs-built_in\">print</span>();\n    <span class=\"hljs-built_in\">assert</span>(a.<span class=\"hljs-built_in\">values</span>() == res);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED!\\n\\n&quot;</span>;\n}\n<span class=\"hljs-comment\">/**\n * @brief A Test to check using a specific Node as the starting point\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test4</span><span class=\"hljs-params\">()</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST CASE 4\\n&quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Intialized a = {2, 5}\\n&quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected result: {5, 2}\\n&quot;</span>;\n    CircularLinkedList a;\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; res = {<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>};\n    a.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">2</span>);\n    Node* start = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Node</span>(<span class=\"hljs-number\">5</span>);  <span class=\"hljs-comment\">///&lt; Node we will start printing from</span>\n    a.<span class=\"hljs-built_in\">insert</span>(start);\n    <span class=\"hljs-built_in\">assert</span>(a.<span class=\"hljs-built_in\">values</span>(start) == res);\n    a.<span class=\"hljs-built_in\">print</span>(start);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED!\\n\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief A Test to check an empty list\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test5</span><span class=\"hljs-params\">()</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST CASE 5\\n&quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Intialized a = {}\\n&quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected result: Empty List!\\n&quot;</span>;\n    CircularLinkedList a;\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; res = {};\n    <span class=\"hljs-built_in\">assert</span>(a.<span class=\"hljs-built_in\">values</span>() == res);\n    a.<span class=\"hljs-built_in\">print</span>();\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED!\\n\\n&quot;</span>;\n}\n}  <span class=\"hljs-comment\">// namespace tests</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Function to test the correctness of the Circular Linked List\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    tests::<span class=\"hljs-built_in\">test1</span>();\n    tests::<span class=\"hljs-built_in\">test2</span>();\n    tests::<span class=\"hljs-built_in\">test3</span>();\n    tests::<span class=\"hljs-built_in\">test4</span>();\n    tests::<span class=\"hljs-built_in\">test5</span>();\n}\n\n<span class=\"hljs-comment\">/**\n * @brief main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "c": {
      "dir": "data_structures/linked_list/circular_linked_list.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/linked_list/circular_linked_list.c",
      "code": "<span class=\"hljs-comment\">/* Circularly Linked List (Basic Operations) - Program to create a Circularly linked list abstract data type and perform various operations on it (Variable first and last declared globally) */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span>  <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;conio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span>  <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span>  NULL  0</span>\r\n\r\n<span class=\"hljs-comment\">/* Assume that the data portion of each node consists of ONLY an integer.*/</span>\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>  <span class=\"hljs-title\">node</span>\r\n{</span>\r\n  <span class=\"hljs-type\">int</span>  data ;\r\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>  <span class=\"hljs-title\">node</span>  *<span class=\"hljs-title\">next</span> ;</span>\r\n} ;\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>  <span class=\"hljs-title\">node</span>  *<span class=\"hljs-title\">first</span>=</span><span class=\"hljs-literal\">NULL</span> ;\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>  <span class=\"hljs-title\">node</span>  *<span class=\"hljs-title\">last</span>=</span><span class=\"hljs-literal\">NULL</span> ;\r\n<span class=\"hljs-comment\">/* first and last are global variables and need not be passed to any function. Any changes made to variables first and last by any of the functions in the program will be reflected in the entire program */</span>\r\n\r\n<span class=\"hljs-comment\">/* This function is responsible for creating the Circularly Linked List right from the BEGINING. */</span>\r\n<span class=\"hljs-type\">void</span>  <span class=\"hljs-title function_\">create</span><span class=\"hljs-params\">()</span>\r\n{\r\n  <span class=\"hljs-type\">int</span>  i , n ;\r\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>  <span class=\"hljs-title\">node</span>  *<span class=\"hljs-title\">pnode</span> , *<span class=\"hljs-title\">p</span> ;</span>\r\n\r\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the number of nodes required:\\n&quot;</span>) ;\r\n  <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n) ;\r\n\r\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the data value of each node:\\n&quot;</span>) ;\r\n  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">1</span> ; i&lt;=n ; i++)\r\n  {\r\n    pnode=(<span class=\"hljs-keyword\">struct</span> node*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node)) ;\r\n    <span class=\"hljs-keyword\">if</span>(pnode==<span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Memory overflow. Unable to create.\\n&quot;</span>) ;\r\n      <span class=\"hljs-keyword\">return</span> ;\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;pnode-&gt;data) ;\r\n\r\n    <span class=\"hljs-keyword\">if</span>(first==<span class=\"hljs-literal\">NULL</span>)\r\n\t first=last=pnode ;\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n\t  last-&gt;next=pnode ;\r\n\t  last=pnode ;    <span class=\"hljs-comment\">/* last keeps track of last node */</span>\r\n    }\r\n\r\n    last-&gt;next=first ;\r\n  }\r\n}\r\n\r\n<span class=\"hljs-comment\">/* This function will delete a node with value k from the Linked List if such a node exists */</span>\r\n<span class=\"hljs-type\">void</span>  <span class=\"hljs-title function_\">deletenode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>  k)</span>\r\n{\r\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>  <span class=\"hljs-title\">node</span>  *<span class=\"hljs-title\">p</span> , *<span class=\"hljs-title\">follow</span> ;</span>\r\n\r\n  <span class=\"hljs-comment\">/* searching the required node */</span>\r\n  p=first ;\r\n  follow=<span class=\"hljs-literal\">NULL</span> ;\r\n  <span class=\"hljs-keyword\">while</span>(follow!=last)\r\n  {\r\n    <span class=\"hljs-keyword\">if</span>(p-&gt;data==k)\r\n\t  <span class=\"hljs-keyword\">break</span> ;\r\n    follow=p ;\r\n    p=p-&gt;next ;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">if</span>(follow==last)\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Required node not found.\\n&quot;</span>) ;\r\n  <span class=\"hljs-keyword\">else</span>\r\n  {\r\n    <span class=\"hljs-keyword\">if</span>(p==first&amp;&amp;p==last)  <span class=\"hljs-comment\">/* deleting the one and the only node */</span>\r\n\t  first=last=<span class=\"hljs-literal\">NULL</span> ;\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(p==first)       <span class=\"hljs-comment\">/* deleting the first node */</span>\r\n    {\r\n      first=first-&gt;next ;\r\n      last-&gt;next=first ;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(p==last)      <span class=\"hljs-comment\">/* deleting the last node */</span>\r\n    {\r\n      last=follow ;\r\n      last-&gt;next=first ;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span>\t\t<span class=\"hljs-comment\">/* deleting any other node */</span>\r\n      follow-&gt;next=p-&gt;next ;\r\n\r\n    <span class=\"hljs-built_in\">free</span>(p) ;\r\n  }\r\n}\r\n\r\n<span class=\"hljs-comment\">/* This function will go through all the nodes of Linked List exactly once and will display data value of each node */</span>\r\n<span class=\"hljs-type\">void</span>  <span class=\"hljs-title function_\">traverse</span><span class=\"hljs-params\">()</span>\r\n{\r\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>  <span class=\"hljs-title\">node</span>  *<span class=\"hljs-title\">p</span> , *<span class=\"hljs-title\">follow</span> ;</span>\r\n  <span class=\"hljs-keyword\">if</span>(first==<span class=\"hljs-literal\">NULL</span>)\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Circularly Linked List Empty&quot;</span>) ;\r\n  <span class=\"hljs-keyword\">else</span>\r\n  {\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Circularly Linked List is as shown: \\n&quot;</span>) ;\r\n\r\n    p=first ;\r\n    follow = <span class=\"hljs-literal\">NULL</span> ;\r\n    <span class=\"hljs-keyword\">while</span>(follow!=last)\r\n    {\r\n      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span> , p-&gt;data) ;\r\n      follow=p ;\r\n      p=p-&gt;next ;\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>) ;\r\n  }\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n  <span class=\"hljs-type\">int</span>  x , k , ch ;\r\n  clrscr() ;\r\n  <span class=\"hljs-keyword\">do</span>\r\n  {\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n Menu: \\n&quot;</span>) ;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;1:Create Linked List \\n&quot;</span>) ;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;2:Delete Node \\n&quot;</span>) ;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;3:Traverse \\n&quot;</span>) ;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;4:Exit \\n&quot;</span>) ;\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nEnter your choice: &quot;</span>) ;\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;ch) ;\r\n\r\n    <span class=\"hljs-keyword\">switch</span>(ch)\r\n    {\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\r\n      create() ;\r\n      <span class=\"hljs-keyword\">break</span> ;\r\n\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\r\n      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the data value of the node to be deleted: &quot;</span>) ;\r\n      <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;k) ;\r\n      deletenode(k) ;\r\n      <span class=\"hljs-keyword\">break</span> ;\r\n\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\r\n      traverse() ;\r\n      <span class=\"hljs-keyword\">break</span> ;\r\n\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\r\n      <span class=\"hljs-keyword\">break</span> ;\r\n    }\r\n }\r\n <span class=\"hljs-keyword\">while</span>(ch!=<span class=\"hljs-number\">4</span>) ;\r\n\r\n getch() ;\r\n}\r\n\r\n\r\n\r\n"
    },
    "ruby": {
      "dir": "data_structures/linked_lists/circular_linked_list.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/linked_lists/circular_linked_list.rb",
      "code": "<span class=\"hljs-comment\"># Define a node for the list</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>\n  <span class=\"hljs-keyword\">attr_accessor</span> <span class=\"hljs-symbol\">:value</span>, <span class=\"hljs-symbol\">:next</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">initialize</span>(<span class=\"hljs-params\">value</span>)\n    <span class=\"hljs-variable\">@value</span> = value\n    <span class=\"hljs-variable\">@next</span> = <span class=\"hljs-literal\">nil</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Class for circular linked list (last node points to the head node)</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CircularList</span>\n  <span class=\"hljs-keyword\">attr_reader</span> <span class=\"hljs-symbol\">:head</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">initialize</span>\n    <span class=\"hljs-variable\">@head</span> = <span class=\"hljs-literal\">nil</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_tail</span>(<span class=\"hljs-params\">value</span>)\n    newNode = <span class=\"hljs-title class_\">Node</span>.new(value)\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>?\n      <span class=\"hljs-variable\">@head</span> = newNode\n      <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-keyword\">next</span> = <span class=\"hljs-variable\">@head</span>\n    <span class=\"hljs-keyword\">else</span>\n      tempNode = <span class=\"hljs-variable\">@head</span>\n      tempNode = tempNode.<span class=\"hljs-keyword\">next</span> <span class=\"hljs-keyword\">while</span> tempNode.<span class=\"hljs-keyword\">next</span> != <span class=\"hljs-variable\">@head</span>\n      newNode.<span class=\"hljs-keyword\">next</span> = <span class=\"hljs-variable\">@head</span>\n      tempNode.<span class=\"hljs-keyword\">next</span> = newNode\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_head</span>(<span class=\"hljs-params\">value</span>)\n    newNode = <span class=\"hljs-title class_\">Node</span>.new(value)\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>?\n      <span class=\"hljs-variable\">@head</span> = newNode\n      <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-keyword\">next</span> = head\n    <span class=\"hljs-keyword\">else</span>\n      tempNode = <span class=\"hljs-variable\">@head</span>\n      tempNode = tempNode.<span class=\"hljs-keyword\">next</span> <span class=\"hljs-keyword\">while</span> tempNode.<span class=\"hljs-keyword\">next</span> != <span class=\"hljs-variable\">@head</span>\n      newNode.<span class=\"hljs-keyword\">next</span> = <span class=\"hljs-variable\">@head</span>\n      tempNode.<span class=\"hljs-keyword\">next</span> = newNode\n      <span class=\"hljs-variable\">@head</span> = newNode\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_list</span>\n    print <span class=\"hljs-string\">&#x27;[&#x27;</span>\n    <span class=\"hljs-keyword\">unless</span> <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>?\n      printNode = <span class=\"hljs-variable\">@head</span>\n      <span class=\"hljs-keyword\">while</span> printNode.<span class=\"hljs-keyword\">next</span> != <span class=\"hljs-variable\">@head</span>\n        print printNode.value.to_s\n        print <span class=\"hljs-string\">&#x27;, &#x27;</span>\n        printNode = printNode.<span class=\"hljs-keyword\">next</span>\n      <span class=\"hljs-keyword\">end</span>\n      print printNode.value\n    <span class=\"hljs-keyword\">end</span>\n    print <span class=\"hljs-string\">&#x27;]&#x27;</span>\n\n    puts(<span class=\"hljs-variable constant_\">STDOUT</span>.flush)\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_head</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>?\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-keyword\">next</span> != <span class=\"hljs-variable\">@head</span>\n      newHead = <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-keyword\">next</span>\n      tempNode = newHead\n      tempNode = tempNode.<span class=\"hljs-keyword\">next</span> <span class=\"hljs-keyword\">while</span> tempNode.<span class=\"hljs-keyword\">next</span> != <span class=\"hljs-variable\">@head</span>\n      tempNode.<span class=\"hljs-keyword\">next</span> = newHead\n      <span class=\"hljs-variable\">@head</span> = newHead\n    <span class=\"hljs-keyword\">elsif</span> !<span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>? &amp;&amp; (<span class=\"hljs-variable\">@head</span>.<span class=\"hljs-keyword\">next</span> == <span class=\"hljs-variable\">@head</span>)\n      <span class=\"hljs-variable\">@head</span> = <span class=\"hljs-literal\">nil</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_tail</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>?\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-keyword\">next</span> != <span class=\"hljs-variable\">@head</span>\n      tempNode = <span class=\"hljs-variable\">@head</span>\n      tempNode = tempNode.<span class=\"hljs-keyword\">next</span> <span class=\"hljs-keyword\">while</span> tempNode.<span class=\"hljs-keyword\">next</span>.<span class=\"hljs-keyword\">next</span> != <span class=\"hljs-variable\">@head</span>\n      tempNode.<span class=\"hljs-keyword\">next</span> = <span class=\"hljs-variable\">@head</span>\n    <span class=\"hljs-keyword\">elsif</span> !<span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>? &amp;&amp; (<span class=\"hljs-variable\">@head</span>.<span class=\"hljs-keyword\">next</span> == <span class=\"hljs-variable\">@head</span>)\n      <span class=\"hljs-variable\">@head</span> = <span class=\"hljs-literal\">nil</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>\n    <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>?\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\nobj = CircularList.new\n\nobj.insert_tail(<span class=\"hljs-number\">1</span>)\nobj.insert_tail(<span class=\"hljs-number\">2</span>)\nobj.insert_tail(<span class=\"hljs-number\">3</span>)\nobj.insert_tail(<span class=\"hljs-number\">4</span>)\nobj.insert_tail(<span class=\"hljs-number\">5</span>)\nobj.print_list\n\nobj.insert_head(<span class=\"hljs-number\">6</span>)\nobj.print_list\n\nobj.delete_tail\nobj.print_list\n\nobj.delete_head\nobj.print_list\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Alvin Philips",
      "email": "alvinphilips257@gmail.com",
      "commits": 1
    },
    {
      "name": "Parth Satodiya",
      "email": "parth.satodiya@gmail.com",
      "commits": 1
    },
    {
      "name": "onlinejudge95",
      "email": "44158581+onlinejudge95@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "NEERAJ ADITYANANTH POLAMPALLI",
      "email": "65017645+NEERAJAP2001@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en/Data Structures/Linked Lists/Circular Linked List.md"
  }
}