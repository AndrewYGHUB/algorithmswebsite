{
  "slug": "circular-queue-linked-list",
  "name": "Circular Queue Linked List",
  "categories": [
    "datastructures",
    "queues"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/queue/circular_queue_linked_list.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/queue/circular_queue_linked_list.py",
      "code": "<span class=\"hljs-comment\"># Implementation of Circular Queue using linked lists</span>\n<span class=\"hljs-comment\"># https://en.wikipedia.org/wiki/Circular_buffer</span>\n\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Any</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CircularQueueLinkedList</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Circular FIFO list with the given capacity (default queue length : 6)\n\n    &gt;&gt;&gt; cq = CircularQueueLinkedList(2)\n    &gt;&gt;&gt; cq.enqueue(&#x27;a&#x27;)\n    &gt;&gt;&gt; cq.enqueue(&#x27;b&#x27;)\n    &gt;&gt;&gt; cq.enqueue(&#x27;c&#x27;)\n    Traceback (most recent call last):\n       ...\n    Exception: Full Queue\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, initial_capacity: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">6</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.front: Node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\n        self.rear: Node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\n        self.create_linked_list(initial_capacity)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_linked_list</span>(<span class=\"hljs-params\">self, initial_capacity: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        current_node = Node()\n        self.front = current_node\n        self.rear = current_node\n        previous_node = current_node\n        <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, initial_capacity):\n            current_node = Node()\n            previous_node.<span class=\"hljs-built_in\">next</span> = current_node\n            current_node.prev = previous_node\n            previous_node = current_node\n        previous_node.<span class=\"hljs-built_in\">next</span> = self.front\n        self.front.prev = previous_node\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Checks where the queue is empty or not\n        &gt;&gt;&gt; cq = CircularQueueLinkedList()\n        &gt;&gt;&gt; cq.is_empty()\n        True\n        &gt;&gt;&gt; cq.enqueue(&#x27;a&#x27;)\n        &gt;&gt;&gt; cq.is_empty()\n        False\n        &gt;&gt;&gt; cq.dequeue()\n        &#x27;a&#x27;\n        &gt;&gt;&gt; cq.is_empty()\n        True\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">return</span> (\n            self.front == self.rear\n            <span class=\"hljs-keyword\">and</span> self.front <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n            <span class=\"hljs-keyword\">and</span> self.front.data <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n        )\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">first</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-type\">Any</span> | <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Returns the first element of the queue\n        &gt;&gt;&gt; cq = CircularQueueLinkedList()\n        &gt;&gt;&gt; cq.first()\n        Traceback (most recent call last):\n           ...\n        Exception: Empty Queue\n        &gt;&gt;&gt; cq.enqueue(&#x27;a&#x27;)\n        &gt;&gt;&gt; cq.first()\n        &#x27;a&#x27;\n        &gt;&gt;&gt; cq.dequeue()\n        &#x27;a&#x27;\n        &gt;&gt;&gt; cq.first()\n        Traceback (most recent call last):\n           ...\n        Exception: Empty Queue\n        &gt;&gt;&gt; cq.enqueue(&#x27;b&#x27;)\n        &gt;&gt;&gt; cq.enqueue(&#x27;c&#x27;)\n        &gt;&gt;&gt; cq.first()\n        &#x27;b&#x27;\n        &quot;&quot;&quot;</span>\n        self.check_can_perform_operation()\n        <span class=\"hljs-keyword\">return</span> self.front.data <span class=\"hljs-keyword\">if</span> self.front <span class=\"hljs-keyword\">else</span> <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Saves data at the end of the queue\n\n        &gt;&gt;&gt; cq = CircularQueueLinkedList()\n        &gt;&gt;&gt; cq.enqueue(&#x27;a&#x27;)\n        &gt;&gt;&gt; cq.enqueue(&#x27;b&#x27;)\n        &gt;&gt;&gt; cq.dequeue()\n        &#x27;a&#x27;\n        &gt;&gt;&gt; cq.dequeue()\n        &#x27;b&#x27;\n        &gt;&gt;&gt; cq.dequeue()\n        Traceback (most recent call last):\n           ...\n        Exception: Empty Queue\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> self.rear <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-keyword\">return</span>\n\n        self.check_is_full()\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.is_empty():\n            self.rear = self.rear.<span class=\"hljs-built_in\">next</span>\n        <span class=\"hljs-keyword\">if</span> self.rear:\n            self.rear.data = data\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dequeue</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-type\">Any</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Removes and retrieves the first element of the queue\n\n        &gt;&gt;&gt; cq = CircularQueueLinkedList()\n        &gt;&gt;&gt; cq.dequeue()\n        Traceback (most recent call last):\n           ...\n        Exception: Empty Queue\n        &gt;&gt;&gt; cq.enqueue(&#x27;a&#x27;)\n        &gt;&gt;&gt; cq.dequeue()\n        &#x27;a&#x27;\n        &gt;&gt;&gt; cq.dequeue()\n        Traceback (most recent call last):\n           ...\n        Exception: Empty Queue\n        &quot;&quot;&quot;</span>\n        self.check_can_perform_operation()\n        <span class=\"hljs-keyword\">if</span> self.rear <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">or</span> self.front <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">if</span> self.front == self.rear:\n            data = self.front.data\n            self.front.data = <span class=\"hljs-literal\">None</span>\n            <span class=\"hljs-keyword\">return</span> data\n\n        old_front = self.front\n        self.front = old_front.<span class=\"hljs-built_in\">next</span>\n        data = old_front.data\n        old_front.data = <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">return</span> data\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_can_perform_operation</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">if</span> self.is_empty():\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Empty Queue&quot;</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_is_full</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">if</span> self.rear <span class=\"hljs-keyword\">and</span> self.rear.<span class=\"hljs-built_in\">next</span> == self.front:\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Full Queue&quot;</span>)\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.data: <span class=\"hljs-type\">Any</span> | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\n        self.<span class=\"hljs-built_in\">next</span>: Node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\n        self.prev: Node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "Dylan Buchi",
      "email": "devybuchi@gmail.com",
      "commits": 1
    },
    {
      "name": "Víctor A. Rodríguez",
      "email": "victor@bit-man.guru",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}