{
  "slug": "circular-queue",
  "name": "Circular Queue",
  "categories": [
    "datastructures",
    "queues"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/queue/circular_queue.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/queue/circular_queue.py",
      "code": "<span class=\"hljs-comment\"># Implementation of Circular Queue (using Python lists)</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CircularQueue</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;Circular FIFO queue with a fixed capacity&quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, n: <span class=\"hljs-built_in\">int</span></span>):\n        self.n = n\n        self.array = [<span class=\"hljs-literal\">None</span>] * self.n\n        self.front = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># index of the first element</span>\n        self.rear = <span class=\"hljs-number\">0</span>\n        self.size = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__len__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &gt;&gt;&gt; cq = CircularQueue(5)\n        &gt;&gt;&gt; len(cq)\n        0\n        &gt;&gt;&gt; cq.enqueue(&quot;A&quot;)  # doctest: +ELLIPSIS\n        &lt;data_structures.queue.circular_queue.CircularQueue object at ...\n        &gt;&gt;&gt; len(cq)\n        1\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> self.size\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &gt;&gt;&gt; cq = CircularQueue(5)\n        &gt;&gt;&gt; cq.is_empty()\n        True\n        &gt;&gt;&gt; cq.enqueue(&quot;A&quot;).is_empty()\n        False\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> self.size == <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">first</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &gt;&gt;&gt; cq = CircularQueue(5)\n        &gt;&gt;&gt; cq.first()\n        False\n        &gt;&gt;&gt; cq.enqueue(&quot;A&quot;).first()\n        &#x27;A&#x27;\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span> <span class=\"hljs-keyword\">if</span> self.is_empty() <span class=\"hljs-keyword\">else</span> self.array[self.front]\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-params\">self, data</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        This function insert an element in the queue using self.rear value as an index\n        &gt;&gt;&gt; cq = CircularQueue(5)\n        &gt;&gt;&gt; cq.enqueue(&quot;A&quot;)  # doctest: +ELLIPSIS\n        &lt;data_structures.queue.circular_queue.CircularQueue object at ...\n        &gt;&gt;&gt; (cq.size, cq.first())\n        (1, &#x27;A&#x27;)\n        &gt;&gt;&gt; cq.enqueue(&quot;B&quot;)  # doctest: +ELLIPSIS\n        &lt;data_structures.queue.circular_queue.CircularQueue object at ...\n        &gt;&gt;&gt; (cq.size, cq.first())\n        (2, &#x27;A&#x27;)\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> self.size &gt;= self.n:\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;QUEUE IS FULL&quot;</span>)\n\n        self.array[self.rear] = data\n        self.rear = (self.rear + <span class=\"hljs-number\">1</span>) % self.n\n        self.size += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">return</span> self\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dequeue</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        This function removes an element from the queue using on self.front value as an\n        index\n        &gt;&gt;&gt; cq = CircularQueue(5)\n        &gt;&gt;&gt; cq.dequeue()\n        Traceback (most recent call last):\n           ...\n        Exception: UNDERFLOW\n        &gt;&gt;&gt; cq.enqueue(&quot;A&quot;).enqueue(&quot;B&quot;).dequeue()\n        &#x27;A&#x27;\n        &gt;&gt;&gt; (cq.size, cq.first())\n        (1, &#x27;B&#x27;)\n        &gt;&gt;&gt; cq.dequeue()\n        &#x27;B&#x27;\n        &gt;&gt;&gt; cq.dequeue()\n        Traceback (most recent call last):\n           ...\n        Exception: UNDERFLOW\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> self.size == <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;UNDERFLOW&quot;</span>)\n\n        temp = self.array[self.front]\n        self.array[self.front] = <span class=\"hljs-literal\">None</span>\n        self.front = (self.front + <span class=\"hljs-number\">1</span>) % self.n\n        self.size -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">return</span> temp\n"
    },
    "javascript": {
      "dir": "Data-Structures/Queue/CircularQueue.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures/Queue/CircularQueue.js",
      "code": "<span class=\"hljs-comment\">// Circular Queues offer a quick to store FIFO data with a maximum size.</span>\n<span class=\"hljs-comment\">// Conserves memory as we only store up to our capacity</span>\n<span class=\"hljs-comment\">// It is opposed to a queue which could continue to grow if input outpaces output</span>\n<span class=\"hljs-comment\">// Doesnâ€™t use dynamic memory so No memory leaks</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CircularQueue</span> {\n  <span class=\"hljs-title function_\">constructor</span> (maxLength) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span> = []\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">maxLength</span> = maxLength\n  }\n\n  <span class=\"hljs-comment\">// ADD ELEMENTS TO QUEUE</span>\n  enqueue (value) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">checkOverflow</span>()) <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">checkEmpty</span>()) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> += <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> += <span class=\"hljs-number\">1</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">maxLength</span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> = <span class=\"hljs-number\">1</span>\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> += <span class=\"hljs-number\">1</span>\n    }\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span>] = value\n  }\n\n  <span class=\"hljs-comment\">// REMOVES ELEMENTS</span>\n  dequeue () {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">checkEmpty</span>()) {\n      <span class=\"hljs-comment\">// UNDERFLOW</span>\n      <span class=\"hljs-keyword\">return</span>\n    }\n    <span class=\"hljs-keyword\">const</span> y = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span>]\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span>] = <span class=\"hljs-string\">&#x27;*&#x27;</span>\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">checkSingleelement</span>()) {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">maxLength</span>) <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> = <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> += <span class=\"hljs-number\">1</span>\n      }\n    }\n\n    <span class=\"hljs-keyword\">return</span> y <span class=\"hljs-comment\">// Returns the removed element and replaces it with a star</span>\n  }\n\n  <span class=\"hljs-comment\">// checks if the queue is empty or not</span>\n  checkEmpty () {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> === <span class=\"hljs-number\">0</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> === <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    }\n  }\n\n  checkSingleelement () {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> !== <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> = <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    }\n  }\n\n  <span class=\"hljs-comment\">// Checks if max capacity of queue has been reached or not</span>\n  checkOverflow () {\n    <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> === <span class=\"hljs-number\">1</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">maxLength</span>) || (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> + <span class=\"hljs-number\">1</span>)) {\n      <span class=\"hljs-comment\">// CIRCULAR QUEUE OVERFLOW</span>\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    }\n  }\n\n  <span class=\"hljs-comment\">// Prints the entire array (&#x27;*&#x27; represents blank space)</span>\n  display (output = <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value)) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">1</span>; index &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>.<span class=\"hljs-property\">length</span>; index++) {\n      <span class=\"hljs-title function_\">output</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>[index])\n    }\n  }\n\n  <span class=\"hljs-comment\">// Displays the length of queue</span>\n  length () {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>\n  }\n\n  <span class=\"hljs-comment\">// Display the top most value of queue</span>\n  peek () {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span>]\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">CircularQueue</span> }\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/queues/CircularQueue.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/queues/CircularQueue.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.queues;\n\n<span class=\"hljs-comment\">//This program implements the concept of CircularQueue in Java</span>\n<span class=\"hljs-comment\">//Link to the concept: (https://en.wikipedia.org/wiki/Circular_buffer)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CircularQueue</span> {\n\n    <span class=\"hljs-type\">int</span>[] arr;\n    <span class=\"hljs-type\">int</span> topOfQueue;\n    <span class=\"hljs-type\">int</span> beginningOfQueue;\n    <span class=\"hljs-type\">int</span> size;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">CircularQueue</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> size)</span> {\n        arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[size];\n        topOfQueue = -<span class=\"hljs-number\">1</span>;\n        beginningOfQueue = -<span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-built_in\">this</span>.size = size;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">if</span> (beginningOfQueue == -<span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isFull</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">if</span> (topOfQueue + <span class=\"hljs-number\">1</span> == beginningOfQueue) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (topOfQueue == size - <span class=\"hljs-number\">1</span> &amp;&amp; beginningOfQueue == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">enQueue</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span> {\n        <span class=\"hljs-keyword\">if</span> (isFull()) {\n            System.out.println(<span class=\"hljs-string\">&quot;The Queue is full!&quot;</span>);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isEmpty()) {\n            beginningOfQueue = <span class=\"hljs-number\">0</span>;\n            topOfQueue++;\n            arr[topOfQueue] = value;\n            System.out.println(value + <span class=\"hljs-string\">&quot; has been successfully inserted!&quot;</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">if</span> (topOfQueue + <span class=\"hljs-number\">1</span> == size) {\n                topOfQueue = <span class=\"hljs-number\">0</span>;\n            } <span class=\"hljs-keyword\">else</span> {\n                topOfQueue++;\n            }\n            arr[topOfQueue] = value;\n            System.out.println(value + <span class=\"hljs-string\">&quot; has been successfully inserted!&quot;</span>);\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">deQueue</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">if</span> (isEmpty()) {\n            System.out.println(<span class=\"hljs-string\">&quot;The Queue is Empty!&quot;</span>);\n            <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">res</span> <span class=\"hljs-operator\">=</span> arr[beginningOfQueue];\n            arr[beginningOfQueue] = Integer.MIN_VALUE;\n            <span class=\"hljs-keyword\">if</span> (beginningOfQueue == topOfQueue) {\n                beginningOfQueue = topOfQueue = -<span class=\"hljs-number\">1</span>;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (beginningOfQueue + <span class=\"hljs-number\">1</span> == size) {\n                beginningOfQueue = <span class=\"hljs-number\">0</span>;\n            } <span class=\"hljs-keyword\">else</span> {\n                beginningOfQueue++;\n            }\n            <span class=\"hljs-keyword\">return</span> res;\n        }\n\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">peek</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">if</span> (isEmpty()) {\n            System.out.println(<span class=\"hljs-string\">&quot;The Queue is Empty!&quot;</span>);\n            <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> arr[beginningOfQueue];\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteQueue</span><span class=\"hljs-params\">()</span> {\n        arr = <span class=\"hljs-literal\">null</span>;\n        System.out.println(<span class=\"hljs-string\">&quot;The Queue is deleted!&quot;</span>);\n    }\n\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">CircularQueue</span> <span class=\"hljs-variable\">cq</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CircularQueue</span>(<span class=\"hljs-number\">5</span>);\n        System.out.println(cq.isEmpty());\n        System.out.println(cq.isFull());\n        cq.enQueue(<span class=\"hljs-number\">1</span>);\n        cq.enQueue(<span class=\"hljs-number\">2</span>);\n        cq.enQueue(<span class=\"hljs-number\">3</span>);\n        cq.enQueue(<span class=\"hljs-number\">4</span>);\n        cq.enQueue(<span class=\"hljs-number\">5</span>);\n\n        System.out.println(cq.deQueue());\n        System.out.println(cq.deQueue());\n        System.out.println(cq.deQueue());\n        System.out.println(cq.deQueue());\n        System.out.println(cq.deQueue());\n        System.out.println(cq.isFull());\n        System.out.println(cq.isEmpty());\n        cq.enQueue(<span class=\"hljs-number\">6</span>);\n        cq.enQueue(<span class=\"hljs-number\">7</span>);\n        cq.enQueue(<span class=\"hljs-number\">8</span>);\n        System.out.println(cq.peek());\n        System.out.println(cq.peek());\n        cq.deleteQueue();\n\n    }\n}\n"
    },
    "dart": {
      "dir": "data_structures/Queue/Circular_Queue.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/data_structures/Queue/Circular_Queue.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\n\n<span class=\"hljs-comment\">// author: kjain1810</span>\n<span class=\"hljs-comment\">// reference: https://en.wikipedia.org/wiki/Circular_buffer</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">int</span> MAX_SIZE = <span class=\"hljs-number\">10</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CircularQueue</span>&lt;<span class=\"hljs-title\">T</span>&gt; </span>{\n  <span class=\"hljs-built_in\">int</span> start = <span class=\"hljs-number\">-1</span>, end = <span class=\"hljs-number\">-1</span>;\n  <span class=\"hljs-built_in\">List</span>&lt;T&gt; queue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">List</span>&lt;T&gt;(MAX_SIZE);\n\n  <span class=\"hljs-comment\">// insert elements into the queue</span>\n  <span class=\"hljs-keyword\">void</span> enque(T element) {\n    <span class=\"hljs-keyword\">if</span> (start == <span class=\"hljs-number\">-1</span>) {\n      start = <span class=\"hljs-number\">0</span>;\n      end = <span class=\"hljs-number\">0</span>;\n      queue[<span class=\"hljs-number\">0</span>] = element;\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (end == MAX_SIZE - <span class=\"hljs-number\">1</span> &amp;&amp; start == <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The queue is full!!!&quot;</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (end == start - <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The queue is full!!!&quot;</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    end++;\n    end %= MAX_SIZE;\n    queue[end] = element;\n  }\n\n  <span class=\"hljs-comment\">// remove elements from the queue</span>\n  T deque() {\n    <span class=\"hljs-keyword\">if</span> (start == <span class=\"hljs-number\">-1</span>) {\n      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The queue is empty!!!&quot;</span>);\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n    }\n    T here = queue[start];\n    <span class=\"hljs-keyword\">if</span> (start == end) {\n      start = <span class=\"hljs-number\">-1</span>;\n      end = <span class=\"hljs-number\">-1</span>;\n      <span class=\"hljs-keyword\">return</span> here;\n    }\n    start++;\n    start %= MAX_SIZE;\n    <span class=\"hljs-keyword\">return</span> here;\n  }\n\n  <span class=\"hljs-comment\">// get the size of the queue</span>\n  <span class=\"hljs-built_in\">int</span> size() {\n    <span class=\"hljs-keyword\">if</span> (start == <span class=\"hljs-number\">-1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">if</span> (start &lt; end) <span class=\"hljs-keyword\">return</span> end - start + <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">return</span> (MAX_SIZE - (start - end));\n  }\n\n  <span class=\"hljs-comment\">// print all the elements of the queue</span>\n  <span class=\"hljs-keyword\">void</span> printAll() {\n    <span class=\"hljs-keyword\">if</span> (start == <span class=\"hljs-number\">-1</span>) {\n      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The queue is empty!!!&quot;</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-built_in\">int</span> i = start;\n    <span class=\"hljs-keyword\">while</span> (i != end) {\n      i++;\n      i %= MAX_SIZE;\n      <span class=\"hljs-built_in\">print</span>(queue[i]);\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  test(<span class=\"hljs-string\">&quot;Initial CircularQueue is empty&quot;</span>, () {\n    CircularQueue&lt;<span class=\"hljs-built_in\">int</span>&gt; queue = <span class=\"hljs-keyword\">new</span> CircularQueue&lt;<span class=\"hljs-built_in\">int</span>&gt;();\n\n    expect(queue.deque(), isNull);\n  });\n\n  test(<span class=\"hljs-string\">&quot;deque return first item put to CircularQueue&quot;</span>, () {\n    CircularQueue&lt;<span class=\"hljs-built_in\">int</span>&gt; queue = <span class=\"hljs-keyword\">new</span> CircularQueue&lt;<span class=\"hljs-built_in\">int</span>&gt;();\n    queue.enque(<span class=\"hljs-number\">1</span>);\n\n    expect(queue.deque(), equals(<span class=\"hljs-number\">1</span>));\n  });\n\n  test(<span class=\"hljs-string\">&quot;CircularQueue act as fifo&quot;</span>, () {\n    CircularQueue&lt;<span class=\"hljs-built_in\">int</span>&gt; queue = <span class=\"hljs-keyword\">new</span> CircularQueue&lt;<span class=\"hljs-built_in\">int</span>&gt;();\n    queue.enque(<span class=\"hljs-number\">1</span>);\n    queue.enque(<span class=\"hljs-number\">2</span>);\n    queue.enque(<span class=\"hljs-number\">3</span>);\n\n    expect(queue.deque(), equals(<span class=\"hljs-number\">1</span>));\n    expect(queue.deque(), equals(<span class=\"hljs-number\">2</span>));\n    expect(queue.deque(), equals(<span class=\"hljs-number\">3</span>));\n  });\n\n  test(<span class=\"hljs-string\">&quot;deque returns null after removing all items&quot;</span>, () {\n    CircularQueue&lt;<span class=\"hljs-built_in\">int</span>&gt; queue = <span class=\"hljs-keyword\">new</span> CircularQueue&lt;<span class=\"hljs-built_in\">int</span>&gt;();\n    queue.enque(<span class=\"hljs-number\">1</span>);\n    queue.enque(<span class=\"hljs-number\">2</span>);\n    queue.enque(<span class=\"hljs-number\">3</span>);\n\n    queue.deque();\n    queue.deque();\n    queue.deque();\n\n    expect(queue.deque(), isNull);\n  });\n}\n"
    },
    "ruby": {
      "dir": "data_structures/queues/circular_queue.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/queues/circular_queue.rb",
      "code": "<span class=\"hljs-comment\"># Challenge name: Circular Queue</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Design the implementation of a circular queue.</span>\n<span class=\"hljs-comment\"># The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and</span>\n<span class=\"hljs-comment\"># the last position is connected back to the first position to make a circle. It is also called &quot;Ring Buffer&quot;.</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Complexity Analysis</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time complexity: O(1).</span>\n<span class=\"hljs-comment\"># All of the methods in our circular data structure are of constant time complexity.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Space Complexity: O(N).</span>\n<span class=\"hljs-comment\"># The overall space complexity of the data structure is linear, where N is the pre-assigned capacity of the queue.</span>\n<span class=\"hljs-comment\"># However, it is worth mentioning that the memory consumption of the data structure remains as its pre-assigned capacity during its entire life cycle.</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CircularQueue</span>\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">initialize</span>(<span class=\"hljs-params\">max_size</span>)\n    <span class=\"hljs-variable\">@max_size</span> = max_size\n    <span class=\"hljs-variable\">@queue</span> = <span class=\"hljs-title class_\">Array</span>.new(max_size, <span class=\"hljs-literal\">nil</span>)\n    <span class=\"hljs-variable\">@front</span> = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable\">@back</span> = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable\">@size</span> = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">attr_accessor</span> <span class=\"hljs-symbol\">:front</span>, <span class=\"hljs-symbol\">:back</span>, <span class=\"hljs-symbol\">:size</span>\n  <span class=\"hljs-keyword\">attr_reader</span> <span class=\"hljs-symbol\">:max_size</span>, <span class=\"hljs-symbol\">:queue</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">empty?</span>\n    size == <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">peek</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span> <span class=\"hljs-keyword\">if</span> empty?\n\n    queue[front]\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">x</span>)\n    raise <span class=\"hljs-string\">&#x27;Queue is at max capacity&#x27;</span> <span class=\"hljs-keyword\">if</span> size == max_size\n\n    queue[back] = x\n    <span class=\"hljs-variable\">@back</span> = (back + <span class=\"hljs-number\">1</span>) % max_size\n    <span class=\"hljs-variable\">@size</span> += <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pop</span>\n    raise <span class=\"hljs-string\">&#x27;Queue is empty&#x27;</span> <span class=\"hljs-keyword\">if</span> size == <span class=\"hljs-number\">0</span>\n\n    temp = queue[front]\n    queue[front] = <span class=\"hljs-literal\">nil</span>\n    <span class=\"hljs-variable\">@front</span> = (front + <span class=\"hljs-number\">1</span>) % max_size\n    <span class=\"hljs-variable\">@size</span> -= <span class=\"hljs-number\">1</span>\n\n    temp\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\nqueue = <span class=\"hljs-title class_\">CircularQueue</span>.new(<span class=\"hljs-number\">3</span>)\n\n<span class=\"hljs-keyword\">begin</span>\n  queue.pop\n<span class=\"hljs-keyword\">rescue</span> StandardError =&gt; e\n  puts e.message\n<span class=\"hljs-keyword\">end</span>\n\nqueue.add(<span class=\"hljs-number\">1</span>)\nqueue.add(<span class=\"hljs-number\">2</span>)\nqueue.add(<span class=\"hljs-number\">3</span>)\n\n<span class=\"hljs-keyword\">begin</span>\n  queue.add(<span class=\"hljs-number\">4</span>)\n<span class=\"hljs-keyword\">rescue</span> StandardError =&gt; e\n  puts e.message\n<span class=\"hljs-keyword\">end</span>\n\nputs queue.inspect\n<span class=\"hljs-comment\"># =&gt; #&lt;CircularQueue:0x00007fea23876cd8 <span class=\"hljs-doctag\">@max</span>_size=3, <span class=\"hljs-doctag\">@queue</span>=[1, 2, 3], <span class=\"hljs-doctag\">@front</span>=0, <span class=\"hljs-doctag\">@back</span>=0, <span class=\"hljs-doctag\">@size</span>=3&gt;</span>\n\nputs queue.peek\n<span class=\"hljs-comment\"># =&gt; 1</span>\n\nqueue.pop\n\nputs queue.peek\n<span class=\"hljs-comment\"># =&gt; 2</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Parowicz",
      "email": "arturparowicz@gmail.com",
      "commits": 1
    },
    {
      "name": "Vijay Siva",
      "email": "vijay.sivasubramaniam@instacart.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sandeepan-Das",
      "email": "sandeepandas2000@gmail.com",
      "commits": 1
    },
    {
      "name": "FyZhu97",
      "email": "73351452+FyZhu97@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Paridhi Jain",
      "email": "83594113+Paridhicodes@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Himanshu Bhatnagar",
      "email": "33115688+Himan10@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 2
    },
    {
      "name": "Kunal Jain",
      "email": "30985312+kjain1810@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "kjain1810",
      "email": "kunaljain.2000@yahoo.in",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}