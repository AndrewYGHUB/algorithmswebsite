{
  "slug": "climbing-stairs",
  "name": "Climbing Stairs",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "dynamic_programming/climbing_stairs.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/dynamic_programming/climbing_stairs.py",
      "code": "<span class=\"hljs-comment\">#!/usr/bin/env python3</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">climb_stairs</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    LeetCdoe No.70: Climbing Stairs\n    Distinct ways to climb a n step staircase where\n    each time you can either climb 1 or 2 steps.\n\n    Args:\n        n: number of steps of staircase\n\n    Returns:\n        Distinct ways to climb a n step staircase\n\n    Raises:\n        AssertionError: n not positive integer\n\n    &gt;&gt;&gt; climb_stairs(3)\n    3\n    &gt;&gt;&gt; climb_stairs(1)\n    1\n    &gt;&gt;&gt; climb_stairs(-7)  # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n        ...\n    AssertionError: n needs to be positive integer, your input -7\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">assert</span> (\n        <span class=\"hljs-built_in\">isinstance</span>(n, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> n &gt; <span class=\"hljs-number\">0</span>\n    ), <span class=\"hljs-string\">f&quot;n needs to be positive integer, your input <span class=\"hljs-subst\">{n}</span>&quot;</span>\n    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    dp = [<span class=\"hljs-number\">0</span>] * (n + <span class=\"hljs-number\">1</span>)\n    dp[<span class=\"hljs-number\">0</span>], dp[<span class=\"hljs-number\">1</span>] = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>, n + <span class=\"hljs-number\">1</span>):\n        dp[i] = dp[i - <span class=\"hljs-number\">1</span>] + dp[i - <span class=\"hljs-number\">2</span>]\n    <span class=\"hljs-keyword\">return</span> dp[n]\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "javascript": {
      "dir": "Dynamic-Programming/ClimbingStairs.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Dynamic-Programming/ClimbingStairs.js",
      "code": "<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> <span class=\"hljs-variable\">ClimbStairs</span>\n * <span class=\"hljs-doctag\">@description</span> You are climbing a stair case. It takes n steps to reach to the top.Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} <span class=\"hljs-variable\">n</span> - The input integer\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">Integer</span>} distinct ways can you climb to the top.\n * <span class=\"hljs-doctag\">@see</span> [Climb_Stairs](https://www.geeksforgeeks.org/count-ways-reach-nth-stair/)\n */</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">climbStairs</span> = (<span class=\"hljs-params\">n</span>) =&gt; {\n  <span class=\"hljs-keyword\">let</span> prev = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> cur = <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">let</span> temp\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n    temp = prev\n    prev = cur\n    cur += temp\n  }\n  <span class=\"hljs-keyword\">return</span> cur\n}\n\n<span class=\"hljs-keyword\">export</span> { climbStairs }\n"
    },
    "ruby": {
      "dir": "dynamic_programming/climbing_stairs.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/dynamic_programming/climbing_stairs.rb",
      "code": "<span class=\"hljs-comment\"># You are climbing a staircase. It takes n steps to reach the top.</span>\n<span class=\"hljs-comment\"># Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</span>\n\n<span class=\"hljs-comment\"># Example 1:</span>\n<span class=\"hljs-comment\"># Input: n = 2</span>\n<span class=\"hljs-comment\"># Output: 2</span>\n<span class=\"hljs-comment\"># Explanation: There are two ways to climb to the top.</span>\n<span class=\"hljs-comment\"># 1. 1 step + 1 step</span>\n<span class=\"hljs-comment\"># 2. 2 steps</span>\n\n<span class=\"hljs-comment\"># Example 2:</span>\n<span class=\"hljs-comment\"># Input: n = 3</span>\n<span class=\"hljs-comment\"># Output: 3</span>\n<span class=\"hljs-comment\"># Explanation: There are three ways to climb to the top.</span>\n<span class=\"hljs-comment\"># 1. 1 step + 1 step + 1 step</span>\n<span class=\"hljs-comment\"># 2. 1 step + 2 steps</span>\n<span class=\"hljs-comment\"># 3. 2 steps + 1 step</span>\n\n<span class=\"hljs-comment\"># Constraints:</span>\n<span class=\"hljs-comment\"># 1 &lt;= n &lt;= 45</span>\n\n<span class=\"hljs-comment\"># Dynamic Programming, Recursive Bottom Up Approach - O(n) Time / O(n) Space</span>\n<span class=\"hljs-comment\"># Init memoization hash (only 1 parameter)</span>\n<span class=\"hljs-comment\"># Set base cases which are memo[0] = 1 and memo[1] = 1, since there are only 1 way to get to each stair</span>\n<span class=\"hljs-comment\"># Iterate from 2..n and call recurse(n, memo) for each value n.</span>\n<span class=\"hljs-comment\"># Return memo[n].</span>\n\n<span class=\"hljs-comment\"># recurse(n, memo) - Recurrence Relation is n = (n - 1) + (n - 2)</span>\n<span class=\"hljs-comment\"># return memo[n] if memo[n] exists.</span>\n<span class=\"hljs-comment\"># otherwise, memo[n] = recurse(n - 1, memo) + recurse(n - 2, memo)</span>\n\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {Integer} n</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@return</span> {Integer}</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">climb_stairs</span>(<span class=\"hljs-params\">n</span>)\n  memo = {}\n\n  memo[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>\n  memo[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-keyword\">return</span> memo[n] <span class=\"hljs-keyword\">if</span> [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>].<span class=\"hljs-keyword\">include</span>?(n)\n\n  (<span class=\"hljs-number\">2</span>..n).each <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">n</span>|\n    recurse(n, memo)\n  <span class=\"hljs-keyword\">end</span>\n\n  memo[n]\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">recurse</span>(<span class=\"hljs-params\">n, memo</span>)\n  <span class=\"hljs-keyword\">return</span> memo[n] <span class=\"hljs-keyword\">if</span> memo[n]\n\n  memo[n] = recurse(n - <span class=\"hljs-number\">1</span>, memo) + recurse(n - <span class=\"hljs-number\">2</span>, memo)\n<span class=\"hljs-keyword\">end</span>\n\nputs climb_stairs(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-comment\"># =&gt; 2</span>\n\nputs climb_stairs(<span class=\"hljs-number\">4</span>)\n<span class=\"hljs-comment\"># =&gt; 5</span>\n\nputs climb_stairs(<span class=\"hljs-number\">10</span>)\n<span class=\"hljs-comment\"># =&gt; 89</span>\n\nputs climb_stairs(<span class=\"hljs-number\">45</span>)\n<span class=\"hljs-comment\"># =&gt; 1836311903</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Brett Smith",
      "email": "hello@thebrettsmith.com",
      "commits": 1
    },
    {
      "name": "illegalcall",
      "email": "44542765+illegalcall@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "CarsonHam",
      "email": "carson.ham@utexas.edu",
      "commits": 1
    },
    {
      "name": "Sanders Lin",
      "email": "45224617+SandersLin@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "sidaksohi",
      "email": "31377210+sidaksohi@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "YATIN KATHURIA",
      "email": "47096348+Yatin-kathuria@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}