{
  "slug": "cll",
  "name": "Cll",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "data_structures/cll/cll.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/cll/cll.cpp",
      "code": "<span class=\"hljs-comment\">/*\n    A simple class for Cicular Linear Linked List\n*/</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;cll.h&quot;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-comment\">/* Constructor */</span>\ncll::<span class=\"hljs-built_in\">cll</span>() {\n    head = <span class=\"hljs-literal\">NULL</span>;\n    total = <span class=\"hljs-number\">0</span>;\n}\n\ncll::~<span class=\"hljs-built_in\">cll</span>() { <span class=\"hljs-comment\">/* Desstructure, no need to fill */</span>\n}\n\n<span class=\"hljs-comment\">/* Display a list. and total element */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">cll::display</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">NULL</span>)\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;List is empty !&quot;</span> &lt;&lt; endl;\n    <span class=\"hljs-keyword\">else</span> {\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;CLL list: &quot;</span>;\n        node *current = head;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; total; i++) {\n            cout &lt;&lt; current-&gt;data &lt;&lt; <span class=\"hljs-string\">&quot; -&gt; &quot;</span>;\n            current = current-&gt;next;\n        }\n        cout &lt;&lt; head-&gt;data &lt;&lt; endl;\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;Total element: &quot;</span> &lt;&lt; total &lt;&lt; endl;\n    }\n}\n\n<span class=\"hljs-comment\">/* List insert a new value at head in list */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">cll::insert_front</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> new_data)</span> </span>{\n    node *newNode;\n    newNode = <span class=\"hljs-keyword\">new</span> node;\n    newNode-&gt;data = new_data;\n    newNode-&gt;next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">NULL</span>) {\n        head = newNode;\n        head-&gt;next = head;\n    } <span class=\"hljs-keyword\">else</span> {\n        node *current = head;\n        <span class=\"hljs-keyword\">while</span> (current-&gt;next != head) {\n            current = current-&gt;next;\n        }\n        newNode-&gt;next = head;\n        current-&gt;next = newNode;\n        head = newNode;\n    }\n    total++;\n}\n\n<span class=\"hljs-comment\">/* List insert a new value at head in list */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">cll::insert_tail</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> new_data)</span> </span>{\n    node *newNode;\n    newNode = <span class=\"hljs-keyword\">new</span> node;\n    newNode-&gt;data = new_data;\n    newNode-&gt;next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">NULL</span>) {\n        head = newNode;\n        head-&gt;next = head;\n    } <span class=\"hljs-keyword\">else</span> {\n        node *current = head;\n        <span class=\"hljs-keyword\">while</span> (current-&gt;next != head) {\n            current = current-&gt;next;\n        }\n        current-&gt;next = newNode;\n        newNode-&gt;next = head;\n    }\n    total++;\n}\n\n<span class=\"hljs-comment\">/* Get total element in list */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">cll::get_size</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> total; }\n\n<span class=\"hljs-comment\">/* Return true if the requested item (sent in as an argument)\nis in the list, otherwise return false */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cll::find_item</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> item_to_find)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">NULL</span>) {\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;List is empty !&quot;</span> &lt;&lt; endl;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        node *current = head;\n        <span class=\"hljs-keyword\">while</span> (current-&gt;next != head) {\n            <span class=\"hljs-keyword\">if</span> (current-&gt;data == item_to_find)\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            current = current-&gt;next;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}\n\n<span class=\"hljs-comment\">/* Overloading method*/</span>\n<span class=\"hljs-type\">int</span> cll::<span class=\"hljs-keyword\">operator</span>*() { <span class=\"hljs-keyword\">return</span> head-&gt;data; }\n\n<span class=\"hljs-comment\">/* Overload the pre-increment operator.\n   The iterator is advanced to the next node. */</span>\n<span class=\"hljs-type\">void</span> cll::<span class=\"hljs-keyword\">operator</span>++() {\n    <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">NULL</span>) {\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;List is empty !&quot;</span> &lt;&lt; endl;\n    } <span class=\"hljs-keyword\">else</span> {\n        node *current = head;\n        <span class=\"hljs-keyword\">while</span> (current-&gt;next != head) {\n            current = current-&gt;next;\n        }\n        current-&gt;next = head-&gt;next;\n        head = head-&gt;next;\n    }\n    total--;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Shubham Sah",
      "email": "42349247+shubhamsah@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "hai dang",
      "email": "haihoangdang91@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}