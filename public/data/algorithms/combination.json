{
  "slug": "combination",
  "name": "Combination",
  "categories": [
    "backtracking"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/backtracking/Combination.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/backtracking/Combination.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.backtracking;\n\n<span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-comment\">/**\n * Finds all permutations of given array\n * <span class=\"hljs-doctag\">@author</span> Alan Piao (https://github.com/cpiao3)\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Combination</span> {\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> length;\n    <span class=\"hljs-comment\">/**\n     * Find all combinations of given array using backtracking\n     * <span class=\"hljs-doctag\">@param</span> arr the array.\n     * <span class=\"hljs-doctag\">@param</span> n length of combination\n     * <span class=\"hljs-doctag\">@param</span> &lt;T&gt; the type of elements in the array.\n     * <span class=\"hljs-doctag\">@return</span> a list of all combinations of length n. If n == 0, return null.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; List&lt;TreeSet&lt;T&gt;&gt; <span class=\"hljs-title function_\">combination</span><span class=\"hljs-params\">(T[] arr, <span class=\"hljs-type\">int</span> n)</span> {\n        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n        length = n;\n        T[] array = arr.clone();\n        Arrays.sort(array);\n        List&lt;TreeSet&lt;T&gt;&gt; result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;&gt;();\n        backtracking(array, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSet</span>&lt;T&gt;(), result);\n        <span class=\"hljs-keyword\">return</span> result;\n    }\n    <span class=\"hljs-comment\">/**\n     * Backtrack all possible combinations of a given array\n     * <span class=\"hljs-doctag\">@param</span> arr the array.\n     * <span class=\"hljs-doctag\">@param</span> index the starting index.\n     * <span class=\"hljs-doctag\">@param</span> currSet set that tracks current combination\n     * <span class=\"hljs-doctag\">@param</span> result the list contains all combination.\n     * <span class=\"hljs-doctag\">@param</span> &lt;T&gt; the type of elements in the array.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">backtracking</span><span class=\"hljs-params\">(T[] arr, <span class=\"hljs-type\">int</span> index, TreeSet&lt;T&gt; currSet, List&lt;TreeSet&lt;T&gt;&gt; result)</span> {\n        <span class=\"hljs-keyword\">if</span> (index + length - currSet.size() &gt; arr.length) <span class=\"hljs-keyword\">return</span>;\n        <span class=\"hljs-keyword\">if</span> (length - <span class=\"hljs-number\">1</span> == currSet.size()) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> index; i &lt; arr.length; i++) {\n                currSet.add(arr[i]);\n                result.add((TreeSet&lt;T&gt;) currSet.clone());\n                currSet.remove(arr[i]);\n            }\n        }\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> index; i &lt; arr.length; i++) {\n            currSet.add(arr[i]);\n            backtracking(arr, i + <span class=\"hljs-number\">1</span>, currSet, result);\n            currSet.remove(arr[i]);\n        }\n    }\n}\n"
    },
    "go": {
      "dir": "strings/combination/combination.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/strings/combination/combination.go",
      "code": "<span class=\"hljs-comment\">// Package combination ...</span>\n<span class=\"hljs-keyword\">package</span> combination\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span>\n\n<span class=\"hljs-comment\">// Combinations structure with in and out rune</span>\n<span class=\"hljs-keyword\">type</span> Combinations <span class=\"hljs-keyword\">struct</span> {\n\tout []<span class=\"hljs-type\">rune</span>\n\tin  []<span class=\"hljs-type\">rune</span>\n}\n\n<span class=\"hljs-comment\">// Start ...</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Start</span><span class=\"hljs-params\">(input <span class=\"hljs-type\">string</span>)</span></span> {\n\tc := &amp;Combinations{\n\t\tin: []<span class=\"hljs-type\">rune</span>(input),\n\t}\n\n\tc.Combine(<span class=\"hljs-number\">0</span>)\n}\n\n<span class=\"hljs-comment\">// Combine ...</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *Combinations)</span></span> Combine(seed <span class=\"hljs-type\">int</span>) {\n\tinLen := <span class=\"hljs-built_in\">len</span>(c.in)\n\t<span class=\"hljs-keyword\">for</span> i := seed; i &lt; inLen<span class=\"hljs-number\">-1</span>; i++ {\n\t\tc.out = <span class=\"hljs-built_in\">append</span>(c.out, c.in[i])\n\t\tfmt.Println(<span class=\"hljs-type\">string</span>(c.out))\n\t\tc.Combine(i + <span class=\"hljs-number\">1</span>)\n\t\tc.out = c.out[:<span class=\"hljs-built_in\">len</span>(c.out)<span class=\"hljs-number\">-1</span>]\n\t}\n\tc.out = <span class=\"hljs-built_in\">append</span>(c.out, c.in[inLen<span class=\"hljs-number\">-1</span>])\n\tfmt.Println(<span class=\"hljs-type\">string</span>(c.out))\n\tc.out = c.out[:<span class=\"hljs-built_in\">len</span>(c.out)<span class=\"hljs-number\">-1</span>]\n}\n"
    },
    "julia": {
      "dir": "src/math/combination.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/math/combination.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n    combination(n, r)\n        \nreturns the number of ways picking r unordered outcomes from\nn possibilities, without repetition\n\n# Arguments:\n- `n`: Positive integers of items to choose from\n- &#x27;r&#x27;: Positive integers of items to choose\n\nContributed By:- [Mayur Dahibhate](https://github.com/mayurdahibhate)\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">function</span> combination(n, r)\n    <span class=\"hljs-keyword\">function</span> factorial(n)\n        fact = <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span> || n == <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">return</span> fact\n        <span class=\"hljs-keyword\">end</span>\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:n\n            fact = fact * i\n        <span class=\"hljs-keyword\">end</span>\n\n        <span class=\"hljs-keyword\">return</span> fact\n    <span class=\"hljs-keyword\">end</span>\n\n    comb = factorial(n) / (factorial(r) * factorial(n - r))\n\n    <span class=\"hljs-keyword\">return</span> convert(<span class=\"hljs-built_in\">Int64</span>, comb)\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Ihjass Thasbekha",
      "email": "44056715+Ihjass@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Mayur Dahibhate",
      "email": "52608503+mayurdahibhate@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cpiao3",
      "email": "72165966+cpiao3@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}