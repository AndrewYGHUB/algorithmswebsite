{
  "slug": "complex",
  "name": "Complex",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "lua": {
      "dir": "src/math/complex.lua",
      "url": "https://github.com/TheAlgorithms/lua/tree/master/src/math/complex.lua",
      "code": "<span class=\"hljs-comment\">-- Complex numbers with metatable-based operators</span>\n\n<span class=\"hljs-keyword\">local</span> intpow = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;math.intpow&quot;</span>)\n\n<span class=\"hljs-keyword\">local</span> complex = {}\n\n<span class=\"hljs-keyword\">local</span> metatable = { <span class=\"hljs-built_in\">__index</span> = complex }\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">complex.new</span><span class=\"hljs-params\">(\n\treal, <span class=\"hljs-comment\">--[[number, real part]]</span>\n\timaginary <span class=\"hljs-comment\">--[[number, imaginary part, defaults to 0]]</span>\n)</span></span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">setmetatable</span>({ real = real, imaginary = imaginary <span class=\"hljs-keyword\">or</span> <span class=\"hljs-number\">0</span> }, metatable)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\">-- Imaginary unit as a complex number</span>\ncomplex.i = complex.new(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">complex.from_polar_coordinates</span><span class=\"hljs-params\">(\n\tangle, <span class=\"hljs-comment\">--[[number, angle in radians]]</span>\n\tabs <span class=\"hljs-comment\">--[[number, radius / norm / length]]</span>\n)</span></span>\n\t<span class=\"hljs-keyword\">return</span> complex.new(<span class=\"hljs-built_in\">abs</span> * <span class=\"hljs-built_in\">math</span>.<span class=\"hljs-built_in\">cos</span>(angle), <span class=\"hljs-built_in\">abs</span> * <span class=\"hljs-built_in\">math</span>.<span class=\"hljs-built_in\">sin</span>(angle))\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bin_op</span><span class=\"hljs-params\">(name, operator)</span></span>\n\tmetatable[<span class=\"hljs-string\">&quot;__&quot;</span> .. name] = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(self, other)</span></span>\n\t\t<span class=\"hljs-comment\">-- Treat numbers as complex numbers with an imaginary part of 0</span>\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">type</span>(<span class=\"hljs-built_in\">self</span>) == <span class=\"hljs-string\">&quot;number&quot;</span> <span class=\"hljs-keyword\">then</span>\n\t\t\t<span class=\"hljs-built_in\">self</span> = complex.new(<span class=\"hljs-built_in\">self</span>)\n\t\t<span class=\"hljs-keyword\">elseif</span> <span class=\"hljs-built_in\">type</span>(other) == <span class=\"hljs-string\">&quot;number&quot;</span> <span class=\"hljs-keyword\">then</span>\n\t\t\tother = complex.new(other)\n\t\t<span class=\"hljs-keyword\">end</span>\n\t\t<span class=\"hljs-keyword\">return</span> operator(<span class=\"hljs-built_in\">self</span>, other)\n\t<span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\">-- Arithmetic binary operators</span>\n\nmetatable.<span class=\"hljs-built_in\">__pow</span> = intpow\n\nbin_op(<span class=\"hljs-string\">&quot;add&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(self, other)</span></span>\n\t<span class=\"hljs-keyword\">return</span> complex.new(<span class=\"hljs-built_in\">self</span>.real + other.real, <span class=\"hljs-built_in\">self</span>.imaginary + other.imaginary)\n<span class=\"hljs-keyword\">end</span>)\n\nbin_op(<span class=\"hljs-string\">&quot;sub&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(self, other)</span></span>\n\t<span class=\"hljs-keyword\">return</span> complex.new(<span class=\"hljs-built_in\">self</span>.real - other.real, <span class=\"hljs-built_in\">self</span>.imaginary - other.imaginary)\n<span class=\"hljs-keyword\">end</span>)\n\nbin_op(<span class=\"hljs-string\">&quot;mul&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(self, other)</span></span>\n\t<span class=\"hljs-keyword\">return</span> complex.new(\n\t\t<span class=\"hljs-built_in\">self</span>.real * other.real - <span class=\"hljs-built_in\">self</span>.imaginary * other.imaginary,\n\t\t<span class=\"hljs-built_in\">self</span>.real * other.imaginary + <span class=\"hljs-built_in\">self</span>.imaginary * other.real\n\t)\n<span class=\"hljs-keyword\">end</span>)\n\nbin_op(<span class=\"hljs-string\">&quot;div&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(self, other)</span></span>\n\t<span class=\"hljs-keyword\">local</span> numerator = <span class=\"hljs-built_in\">self</span> * other:conjugate()\n\t<span class=\"hljs-keyword\">local</span> denominator = other.real ^ <span class=\"hljs-number\">2</span> + other.imaginary ^ <span class=\"hljs-number\">2</span>\n\t<span class=\"hljs-keyword\">return</span> complex.new(numerator.real / denominator, numerator.imaginary / denominator)\n<span class=\"hljs-keyword\">end</span>)\n\n<span class=\"hljs-comment\">-- Unary operators</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">metatable:__unm</span><span class=\"hljs-params\">()</span></span>\n\t<span class=\"hljs-keyword\">return</span> complex.new(-<span class=\"hljs-built_in\">self</span>.real, -<span class=\"hljs-built_in\">self</span>.imaginary)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">complex:conjugate</span><span class=\"hljs-params\">()</span></span>\n\t<span class=\"hljs-keyword\">return</span> complex.new(<span class=\"hljs-built_in\">self</span>.real, -<span class=\"hljs-built_in\">self</span>.imaginary)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">complex:abs</span><span class=\"hljs-params\">()</span></span>\n\t<span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">self</span>.real ^ <span class=\"hljs-number\">2</span> + <span class=\"hljs-built_in\">self</span>.imaginary ^ <span class=\"hljs-number\">2</span>) ^ <span class=\"hljs-number\">0.5</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\">-- Comparison operators; only equality is reasonable here</span>\n\nbin_op(<span class=\"hljs-string\">&quot;eq&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(self, other)</span></span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">self</span>.real == other.real <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">self</span>.imaginary == other.imaginary\n<span class=\"hljs-keyword\">end</span>)\n\n<span class=\"hljs-comment\">-- Conversions</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">complex:to_polar_coordinates</span><span class=\"hljs-params\">()</span></span>\n\t<span class=\"hljs-keyword\">local</span> angle, <span class=\"hljs-built_in\">abs</span> = <span class=\"hljs-built_in\">math</span>.<span class=\"hljs-built_in\">atan2</span>(<span class=\"hljs-built_in\">self</span>.imaginary, <span class=\"hljs-built_in\">self</span>.real), <span class=\"hljs-built_in\">self</span>:<span class=\"hljs-built_in\">abs</span>()\n\t<span class=\"hljs-keyword\">return</span> angle <span class=\"hljs-comment\">--[[number, angle in radians]]</span>,\n\t\t<span class=\"hljs-built_in\">abs</span> <span class=\"hljs-comment\">--[[number, radius / norm / length]]</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">metatable:__tostring</span><span class=\"hljs-params\">()</span></span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">self</span>.real .. <span class=\"hljs-string\">&quot;+&quot;</span> .. <span class=\"hljs-built_in\">self</span>.imaginary .. <span class=\"hljs-string\">&quot;i&quot;</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">return</span> complex\n"
    }
  },
  "contributors": [
    {
      "name": "Lars Mueller",
      "email": "appgurulars@gmx.de",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}