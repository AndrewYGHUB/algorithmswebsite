{
  "slug": "connected-component",
  "name": "Connected Component",
  "categories": [
    "datastructures",
    "graphs"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/graphs/ConnectedComponent.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/graphs/ConnectedComponent.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.graphs;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.HashSet;\n<span class=\"hljs-keyword\">import</span> java.util.Set;\n\n<span class=\"hljs-comment\">/**\n * A class that counts the number of different connected components in a graph\n *\n * <span class=\"hljs-doctag\">@author</span> Lukas Keul, Florian Mercks\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Graph</span>&lt;E <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;E&gt;&gt; {\n\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n\n        E name;\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(E name)</span> {\n            <span class=\"hljs-built_in\">this</span>.name = name;\n        }\n    }\n\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Edge</span> {\n\n        Node startNode, endNode;\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Edge</span><span class=\"hljs-params\">(Node startNode, Node endNode)</span> {\n            <span class=\"hljs-built_in\">this</span>.startNode = startNode;\n            <span class=\"hljs-built_in\">this</span>.endNode = endNode;\n        }\n    }\n\n    ArrayList&lt;Edge&gt; edgeList;\n    ArrayList&lt;Node&gt; nodeList;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Graph</span><span class=\"hljs-params\">()</span> {\n        edgeList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Edge&gt;();\n        nodeList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Node&gt;();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Adds a new Edge to the graph. If the nodes aren&#x27;t yet in nodeList, they\n     * will be added to it.\n     *\n     * <span class=\"hljs-doctag\">@param</span> startNode the starting Node from the edge\n     * <span class=\"hljs-doctag\">@param</span> endNode the ending Node from the edge\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(E startNode, E endNode)</span> {\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>, end = <span class=\"hljs-literal\">null</span>;\n        <span class=\"hljs-keyword\">for</span> (Node node : nodeList) {\n            <span class=\"hljs-keyword\">if</span> (startNode.compareTo(node.name) == <span class=\"hljs-number\">0</span>) {\n                start = node;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (endNode.compareTo(node.name) == <span class=\"hljs-number\">0</span>) {\n                end = node;\n            }\n        }\n        <span class=\"hljs-keyword\">if</span> (start == <span class=\"hljs-literal\">null</span>) {\n            start = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(startNode);\n            nodeList.add(start);\n        }\n        <span class=\"hljs-keyword\">if</span> (end == <span class=\"hljs-literal\">null</span>) {\n            end = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(endNode);\n            nodeList.add(end);\n        }\n\n        edgeList.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Edge</span>(start, end));\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Main method used for counting the connected components. Iterates through\n     * the array of nodes to do a depth first search to get all nodes of the\n     * graph from the actual node. These nodes are added to the array\n     * markedNodes and will be ignored if they are chosen in the nodeList.\n     *\n     * <span class=\"hljs-doctag\">@return</span> returns the amount of unconnected graphs\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">countGraphs</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        Set&lt;Node&gt; markedNodes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;Node&gt;();\n\n        <span class=\"hljs-keyword\">for</span> (Node n : nodeList) {\n            <span class=\"hljs-keyword\">if</span> (!markedNodes.contains(n)) {\n                markedNodes.add(n);\n                markedNodes.addAll(depthFirstSearch(n, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Node&gt;()));\n                count++;\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> count;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Implementation of depth first search.\n     *\n     * <span class=\"hljs-doctag\">@param</span> n the actual visiting node\n     * <span class=\"hljs-doctag\">@param</span> visited A list of already visited nodes in the depth first search\n     * <span class=\"hljs-doctag\">@return</span> returns a set of visited nodes\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ArrayList&lt;Node&gt; <span class=\"hljs-title function_\">depthFirstSearch</span><span class=\"hljs-params\">(Node n, ArrayList&lt;Node&gt; visited)</span> {\n        visited.add(n);\n        <span class=\"hljs-keyword\">for</span> (Edge e : edgeList) {\n            <span class=\"hljs-keyword\">if</span> (e.startNode.equals(n) &amp;&amp; !visited.contains(e.endNode)) {\n                depthFirstSearch(e.endNode, visited);\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> visited;\n    }\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConnectedComponent</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        Graph&lt;Character&gt; graphChars = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Graph</span>&lt;&gt;();\n\n        <span class=\"hljs-comment\">// Graph 1</span>\n        graphChars.addEdge(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>);\n        graphChars.addEdge(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>);\n        graphChars.addEdge(<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>);\n        graphChars.addEdge(<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>);\n        graphChars.addEdge(<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>);\n        graphChars.addEdge(<span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>);\n\n        graphChars.addEdge(<span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;y&#x27;</span>);\n        graphChars.addEdge(<span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;z&#x27;</span>);\n\n        graphChars.addEdge(<span class=\"hljs-string\">&#x27;w&#x27;</span>, <span class=\"hljs-string\">&#x27;w&#x27;</span>);\n\n        Graph&lt;Integer&gt; graphInts = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Graph</span>&lt;&gt;();\n\n        <span class=\"hljs-comment\">// Graph 2</span>\n        graphInts.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n        graphInts.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\n        graphInts.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>);\n        graphInts.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>);\n\n        graphInts.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>);\n        graphInts.addEdge(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">10</span>);\n        graphInts.addEdge(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">8</span>);\n\n        System.out.println(<span class=\"hljs-string\">&quot;Amount of different char-graphs: &quot;</span> + graphChars.countGraphs());\n        System.out.println(<span class=\"hljs-string\">&quot;Amount of different int-graphs: &quot;</span> + graphInts.countGraphs());\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "EAlexa",
      "email": "rubi_81@outlook.de",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Febaug",
      "email": "33418541+Febaug@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}