{
  "slug": "count-bits-flip",
  "name": "Count Bits Flip",
  "categories": [
    "bitmanipulation"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "bit_manipulation/count_bits_flip.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/bit_manipulation/count_bits_flip.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation to\n * [Count number of bits to be flipped to convert A to B]\n * (https://www.geeksforgeeks.org/count-number-of-bits-to-be-flipped-to-convert-a-to-b/)\n * in an integer.\n *\n * @details\n * We are given two numbers A and B. Our task is to count the number of bits\n * needed to be flipped to convert A to B.\n *\n * Explanation:\n *\n * A  = 01010 B  = 10100\n * As we can see, the bits of A that need to be flipped are 01010.\n * If we flipthese bits, we get 10100, which is B.\n *\n * Worst Case Time Complexity: O(log n)\n * Space complexity: O(1)\n * @author [Yash Raj Singh](https://github.com/yashrajyash)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-comment\">/**\n * @namespace bit_manipulation\n * @brief Bit manipulation algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> bit_manipulation {\n<span class=\"hljs-comment\">/**\n * @namespace count_bits_flip\n * @brief Functions for the [count bits\n * flip](https://www.geeksforgeeks.org/count-set-bits-in-an-integer/)\n * implementation\n */</span>\n<span class=\"hljs-keyword\">namespace</span> count_bits_flip {\n<span class=\"hljs-comment\">/**\n * @brief The main function implements count of bits flip required\n * @param A is the given number whose bits will be flipped to get number B\n * @param B is the given target number\n * @returns total number of bits needed to be flipped to convert A to B\n */</span>\n<span class=\"hljs-function\">std::<span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">countBitsFlip</span><span class=\"hljs-params\">(\n    std::<span class=\"hljs-type\">int64_t</span> A,\n    std::<span class=\"hljs-type\">int64_t</span> B)</span> </span>{  <span class=\"hljs-comment\">// int64_t is preferred over int so that</span>\n                       <span class=\"hljs-comment\">// no Overflow can be there.</span>\n\n    <span class=\"hljs-type\">int</span> count =\n        <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// &quot;count&quot; variable is used to count number of bits flip of the</span>\n            <span class=\"hljs-comment\">// number A to form B in binary representation of number &#x27;n&#x27;</span>\n    A = A ^ B;\n    <span class=\"hljs-keyword\">while</span> (A) {\n        A = A &amp; (A - <span class=\"hljs-number\">1</span>);\n        count++;\n    }\n    <span class=\"hljs-keyword\">return</span> count;\n}\n}  <span class=\"hljs-comment\">// namespace count_bits_flip</span>\n}  <span class=\"hljs-comment\">// namespace bit_manipulation</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// A = 10, B = 20 return 4</span>\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_bits_flip::<span class=\"hljs-built_in\">countBitsFlip</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>) == <span class=\"hljs-number\">4</span>);\n    <span class=\"hljs-comment\">// A = 20, B = 25 return 3</span>\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_bits_flip::<span class=\"hljs-built_in\">countBitsFlip</span>(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">25</span>) == <span class=\"hljs-number\">3</span>);\n    <span class=\"hljs-comment\">// A = 7, B = 10 return 3</span>\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_bits_flip::<span class=\"hljs-built_in\">countBitsFlip</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>) == <span class=\"hljs-number\">3</span>);\n    <span class=\"hljs-comment\">// A = 17, B = 25 return 1</span>\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_bits_flip::<span class=\"hljs-built_in\">countBitsFlip</span>(<span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">25</span>) == <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-comment\">// A = 11, B = 8 return 2</span>\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_bits_flip::<span class=\"hljs-built_in\">countBitsFlip</span>(<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">8</span>) == <span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-comment\">// A = 21, B = 22 return 2</span>\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_bits_flip::<span class=\"hljs-built_in\">countBitsFlip</span>(<span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">22</span>) == <span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-comment\">// A = 7, B = 786 return 5</span>\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_bits_flip::<span class=\"hljs-built_in\">countBitsFlip</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">786</span>) == <span class=\"hljs-number\">5</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;All test cases successfully passed!&quot;</span> &lt;&lt; std::endl;\n}\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Yash Raj Singh",
      "email": "66232462+yashrajyash@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}