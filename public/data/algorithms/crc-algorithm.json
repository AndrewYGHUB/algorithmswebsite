{
  "slug": "crc-algorithm",
  "name": "CRC Algorithm",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/others/CRCAlgorithm.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/others/CRCAlgorithm.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.others;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.Random;\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.ThreadLocalRandom;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> dimgrichr\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CRCAlgorithm</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> correctMess;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> wrongMess;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> wrongMessCaught;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> wrongMessNotCaught;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> messSize;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span> ber;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> messageChanged;\n\n    <span class=\"hljs-keyword\">private</span> ArrayList&lt;Integer&gt; message;\n\n    <span class=\"hljs-keyword\">private</span> ArrayList&lt;Integer&gt; dividedMessage;\n\n    <span class=\"hljs-keyword\">private</span> ArrayList&lt;Integer&gt; p;\n\n    <span class=\"hljs-keyword\">private</span> Random randomGenerator;\n\n    <span class=\"hljs-comment\">/**\n     * The algorithm&#x27;s main constructor. The most significant variables, used in\n     * the algorithm, are set in their initial values.\n     *\n     * <span class=\"hljs-doctag\">@param</span> str The binary number P, in a string form, which is used by the\n     * CRC algorithm\n     * <span class=\"hljs-doctag\">@param</span> size The size of every transmitted message\n     * <span class=\"hljs-doctag\">@param</span> ber The Bit Error Rate\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">CRCAlgorithm</span><span class=\"hljs-params\">(String str, <span class=\"hljs-type\">int</span> size, <span class=\"hljs-type\">double</span> ber)</span> {\n        messageChanged = <span class=\"hljs-literal\">false</span>;\n        message = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        messSize = size;\n        dividedMessage = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; str.length(); i++) {\n            p.add(Character.getNumericValue(str.charAt(i)));\n        }\n        randomGenerator = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\n        correctMess = <span class=\"hljs-number\">0</span>;\n        wrongMess = <span class=\"hljs-number\">0</span>;\n        wrongMessCaught = <span class=\"hljs-number\">0</span>;\n        wrongMessNotCaught = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-built_in\">this</span>.ber = ber;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Returns the counter wrongMess\n     *\n     * <span class=\"hljs-doctag\">@return</span> wrongMess, the number of Wrong Messages\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getWrongMess</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> wrongMess;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Returns the counter wrongMessCaught\n     *\n     * <span class=\"hljs-doctag\">@return</span> wrongMessCaught, the number of wrong messages, which are caught\n     * by the CRC algoriithm\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getWrongMessCaught</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> wrongMessCaught;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Returns the counter wrongMessNotCaught\n     *\n     * <span class=\"hljs-doctag\">@return</span> wrongMessNotCaught, the number of wrong messages, which are not\n     * caught by the CRC algorithm\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getWrongMessNotCaught</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> wrongMessNotCaught;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Returns the counter correctMess\n     *\n     * <span class=\"hljs-doctag\">@return</span> correctMess, the number of the Correct Messages\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getCorrectMess</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> correctMess;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Resets some of the object&#x27;s values, used on the main function, so that it\n     * can be re-used, in order not to waste too much memory and time, by\n     * creating new objects.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">refactor</span><span class=\"hljs-params\">()</span> {\n        messageChanged = <span class=\"hljs-literal\">false</span>;\n        message = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        dividedMessage = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Random messages, consisted of 0&#x27;s and 1&#x27;s, are generated, so that they\n     * can later be transmitted\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">generateRandomMess</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; messSize; i++) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> ThreadLocalRandom.current().nextInt(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\n            message.add(x);\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * The most significant part of the CRC algorithm. The message is divided by\n     * P, so the dividedMessage ArrayList&lt;Integer&gt; is created. If check == true,\n     * the dividedMessaage is examined, in order to see if it contains any 1&#x27;s.\n     * If it does, the message is considered to be wrong by the receiver,so the\n     * variable wrongMessCaught changes. If it does not, it is accepted, so one\n     * of the variables correctMess, wrongMessNotCaught, changes. If check ==\n     * false, the diviided Message is added at the end of the ArrayList&lt;integer&gt;\n     * message.\n     *\n     * <span class=\"hljs-doctag\">@param</span> check the variable used to determine, if the message is going to\n     * be checked from the receiver if true, it is checked otherwise, it is not\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">divideMessageWithP</span><span class=\"hljs-params\">(<span class=\"hljs-type\">boolean</span> check)</span> {\n        ArrayList&lt;Integer&gt; x = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        ArrayList&lt;Integer&gt; k = (ArrayList&lt;Integer&gt;) message.clone();\n        <span class=\"hljs-keyword\">if</span> (!check) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; p.size() - <span class=\"hljs-number\">1</span>; i++) {\n                k.add(<span class=\"hljs-number\">0</span>);\n            }\n        }\n        <span class=\"hljs-keyword\">while</span> (!k.isEmpty()) {\n            <span class=\"hljs-keyword\">while</span> (x.size() &lt; p.size() &amp;&amp; !k.isEmpty()) {\n                x.add(k.get(<span class=\"hljs-number\">0</span>));\n                k.remove(<span class=\"hljs-number\">0</span>);\n            }\n            <span class=\"hljs-keyword\">if</span> (x.size() == p.size()) {\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; p.size(); i++) {\n                    <span class=\"hljs-keyword\">if</span> (x.get(i) == p.get(i)) {\n                        x.set(i, <span class=\"hljs-number\">0</span>);\n                    } <span class=\"hljs-keyword\">else</span> {\n                        x.set(i, <span class=\"hljs-number\">1</span>);\n                    }\n                }\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; x.size() &amp;&amp; x.get(i) != <span class=\"hljs-number\">1</span>; i++) {\n                    x.remove(<span class=\"hljs-number\">0</span>);\n                }\n            }\n        }\n        dividedMessage = (ArrayList&lt;Integer&gt;) x.clone();\n        <span class=\"hljs-keyword\">if</span> (!check) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> z : dividedMessage) {\n                message.add(z);\n            }\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">if</span> (dividedMessage.contains(<span class=\"hljs-number\">1</span>) &amp;&amp; messageChanged) {\n                wrongMessCaught++;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!dividedMessage.contains(<span class=\"hljs-number\">1</span>) &amp;&amp; messageChanged) {\n                wrongMessNotCaught++;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!messageChanged) {\n                correctMess++;\n            }\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Once the message is transmitted, some of it&#x27;s elements, is possible to\n     * change from 1 to 0, or from 0 to 1, because of the Bit Error Rate (ber).\n     * For every element of the message, a random double number is created. If\n     * that number is smaller than ber, then the spesific element changes. On\n     * the other hand, if it&#x27;s bigger than ber, it does not. Based on these\n     * changes. the boolean variable messageChanged, gets the value: true, or\n     * false.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">changeMess</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> y : message) {\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> randomGenerator.nextDouble();\n            <span class=\"hljs-keyword\">while</span> (x &lt; <span class=\"hljs-number\">0.0000</span> || x &gt; <span class=\"hljs-number\">1.00000</span>) {\n                x = randomGenerator.nextDouble();\n            }\n            <span class=\"hljs-keyword\">if</span> (x &lt; ber) {\n                messageChanged = <span class=\"hljs-literal\">true</span>;\n                <span class=\"hljs-keyword\">if</span> (y == <span class=\"hljs-number\">1</span>) {\n                    message.set(message.indexOf(y), <span class=\"hljs-number\">0</span>);\n                } <span class=\"hljs-keyword\">else</span> {\n                    message.set(message.indexOf(y), <span class=\"hljs-number\">1</span>);\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">if</span> (messageChanged) {\n            wrongMess++;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "dimgrichr",
      "email": "32580033+dimgrichr@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}