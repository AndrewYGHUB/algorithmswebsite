{
  "slug": "create-binary-tree-from-inorder-preorder",
  "name": "Create Binary Tree From Inorder Preorder",
  "categories": [
    "datastructures",
    "tree"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/trees/CreateBinaryTreeFromInorderPreorder.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/trees/CreateBinaryTreeFromInorderPreorder.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.trees;\n\n<span class=\"hljs-keyword\">import</span> java.util.HashMap;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n<span class=\"hljs-keyword\">import</span> com.thealgorithms.datastructures.trees.BinaryTree.Node;\n\n<span class=\"hljs-comment\">/**\n * Approach: Naive Solution: Create root node from first value present in\n * preorder traversal. Look for the index of root node&#x27;s value in inorder\n * traversal. That will tell total nodes present in left subtree and right\n * subtree. Based on that index create left and right subtree. Complexity: Time:\n * O(n^2) for each node there is iteration to find index in inorder array Space:\n * Stack size = O(height) = O(lg(n))\n *\n * Optimized Solution: Instead of iterating over inorder array to find index of\n * root value, create a hashmap and find out the index of root value.\n * Complexity: Time: O(n) hashmap reduced iteration to find index in inorder\n * array Space: O(n) space taken by hashmap\n *\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CreateBinaryTreeFromInorderPreorder</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        test(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[]{}, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[]{}); <span class=\"hljs-comment\">// empty tree</span>\n        test(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[]{<span class=\"hljs-number\">1</span>}, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[]{<span class=\"hljs-number\">1</span>}); <span class=\"hljs-comment\">// single node tree</span>\n        test(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[]{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>}, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[]{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>}); <span class=\"hljs-comment\">// right skewed tree</span>\n        test(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[]{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>}, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[]{<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>}); <span class=\"hljs-comment\">// left skewed tree</span>\n        test(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[]{<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">7</span>}, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[]{<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">7</span>}); <span class=\"hljs-comment\">// normal tree</span>\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Integer[] preorder, <span class=\"hljs-keyword\">final</span> Integer[] inorder)</span> {\n        System.out.println(<span class=\"hljs-string\">&quot;\\n====================================================&quot;</span>);\n        System.out.println(<span class=\"hljs-string\">&quot;Naive Solution...&quot;</span>);\n        <span class=\"hljs-type\">BinaryTree</span> <span class=\"hljs-variable\">root</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BinaryTree</span>(createTree(preorder, inorder, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, inorder.length));\n        System.out.println(<span class=\"hljs-string\">&quot;Preorder Traversal: &quot;</span>);\n        root.preOrder(root.getRoot());\n        System.out.println(<span class=\"hljs-string\">&quot;\\nInorder Traversal: &quot;</span>);\n        root.inOrder(root.getRoot());\n        System.out.println(<span class=\"hljs-string\">&quot;\\nPostOrder Traversal: &quot;</span>);\n        root.postOrder(root.getRoot());\n\n        Map&lt;Integer, Integer&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; inorder.length; i++) {\n            map.put(inorder[i], i);\n        }\n        <span class=\"hljs-type\">BinaryTree</span> <span class=\"hljs-variable\">optimizedRoot</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BinaryTree</span>(createTreeOptimized(preorder, inorder, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, inorder.length, map));\n        System.out.println(<span class=\"hljs-string\">&quot;\\n\\nOptimized solution...&quot;</span>);\n        System.out.println(<span class=\"hljs-string\">&quot;Preorder Traversal: &quot;</span>);\n        optimizedRoot.preOrder(root.getRoot());\n        System.out.println(<span class=\"hljs-string\">&quot;\\nInorder Traversal: &quot;</span>);\n        optimizedRoot.inOrder(root.getRoot());\n        System.out.println(<span class=\"hljs-string\">&quot;\\nPostOrder Traversal: &quot;</span>);\n        optimizedRoot.postOrder(root.getRoot());\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Node <span class=\"hljs-title function_\">createTree</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Integer[] preorder, <span class=\"hljs-keyword\">final</span> Integer[] inorder,\n            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> preStart, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> inStart, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> size)</span> {\n        <span class=\"hljs-keyword\">if</span> (size == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">root</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(preorder[preStart]);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> inStart;\n        <span class=\"hljs-keyword\">while</span> (preorder[preStart] != inorder[i]) {\n            i++;\n        }\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">leftNodesCount</span> <span class=\"hljs-operator\">=</span> i - inStart;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rightNodesCount</span> <span class=\"hljs-operator\">=</span> size - leftNodesCount - <span class=\"hljs-number\">1</span>;\n        root.left = createTree(preorder, inorder, preStart + <span class=\"hljs-number\">1</span>, inStart, leftNodesCount);\n        root.right = createTree(preorder, inorder, preStart + leftNodesCount + <span class=\"hljs-number\">1</span>, i + <span class=\"hljs-number\">1</span>,\n                rightNodesCount);\n        <span class=\"hljs-keyword\">return</span> root;\n\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Node <span class=\"hljs-title function_\">createTreeOptimized</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Integer[] preorder, <span class=\"hljs-keyword\">final</span> Integer[] inorder,\n            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> preStart, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> inStart, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> size,\n            <span class=\"hljs-keyword\">final</span> Map&lt;Integer, Integer&gt; inorderMap)</span> {\n        <span class=\"hljs-keyword\">if</span> (size == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">root</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(preorder[preStart]);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> inorderMap.get(preorder[preStart]);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">leftNodesCount</span> <span class=\"hljs-operator\">=</span> i - inStart;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rightNodesCount</span> <span class=\"hljs-operator\">=</span> size - leftNodesCount - <span class=\"hljs-number\">1</span>;\n        root.left = createTreeOptimized(preorder, inorder, preStart + <span class=\"hljs-number\">1</span>, inStart,\n                leftNodesCount, inorderMap);\n        root.right = createTreeOptimized(preorder, inorder, preStart + leftNodesCount + <span class=\"hljs-number\">1</span>,\n                i + <span class=\"hljs-number\">1</span>, rightNodesCount, inorderMap);\n        <span class=\"hljs-keyword\">return</span> root;\n    }\n\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Amit Kumar",
      "email": "kumanoit@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}