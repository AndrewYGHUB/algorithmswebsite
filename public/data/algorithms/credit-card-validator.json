{
  "slug": "credit-card-validator",
  "name": "Credit Card Validator",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings/credit_card_validator.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings/credit_card_validator.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nFunctions for testing the validity of credit card numbers.\n\nhttps://en.wikipedia.org/wiki/Luhn_algorithm\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">validate_initial_digits</span>(<span class=\"hljs-params\">credit_card_number: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Function to validate initial digits of a given credit card number.\n    &gt;&gt;&gt; valid = &quot;4111111111111111 41111111111111 34 35 37 412345 523456 634567&quot;\n    &gt;&gt;&gt; all(validate_initial_digits(cc) for cc in valid.split())\n    True\n    &gt;&gt;&gt; invalid = &quot;14 25 76 32323 36111111111111&quot;\n    &gt;&gt;&gt; all(validate_initial_digits(cc) is False for cc in invalid.split())\n    True\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> credit_card_number.startswith((<span class=\"hljs-string\">&quot;34&quot;</span>, <span class=\"hljs-string\">&quot;35&quot;</span>, <span class=\"hljs-string\">&quot;37&quot;</span>, <span class=\"hljs-string\">&quot;4&quot;</span>, <span class=\"hljs-string\">&quot;5&quot;</span>, <span class=\"hljs-string\">&quot;6&quot;</span>))\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">luhn_validation</span>(<span class=\"hljs-params\">credit_card_number: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Function to luhn algorithm validation for a given credit card number.\n    &gt;&gt;&gt; luhn_validation(&#x27;4111111111111111&#x27;)\n    True\n    &gt;&gt;&gt; luhn_validation(&#x27;36111111111111&#x27;)\n    True\n    &gt;&gt;&gt; luhn_validation(&#x27;41111111111111&#x27;)\n    False\n    &quot;&quot;&quot;</span>\n    cc_number = credit_card_number\n    total = <span class=\"hljs-number\">0</span>\n    half_len = <span class=\"hljs-built_in\">len</span>(cc_number) - <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(half_len, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">2</span>):\n        <span class=\"hljs-comment\">#  double the value of every second digit</span>\n        digit = <span class=\"hljs-built_in\">int</span>(cc_number[i])\n        digit *= <span class=\"hljs-number\">2</span>\n        <span class=\"hljs-comment\"># If doubling of a number results in a two digit number</span>\n        <span class=\"hljs-comment\"># i.e greater than 9(e.g., 6 Ã— 2 = 12),</span>\n        <span class=\"hljs-comment\"># then add the digits of the product (e.g., 12: 1 + 2 = 3, 15: 1 + 5 = 6),</span>\n        <span class=\"hljs-comment\"># to get a single digit number.</span>\n        <span class=\"hljs-keyword\">if</span> digit &gt; <span class=\"hljs-number\">9</span>:\n            digit %= <span class=\"hljs-number\">10</span>\n            digit += <span class=\"hljs-number\">1</span>\n        cc_number = cc_number[:i] + <span class=\"hljs-built_in\">str</span>(digit) + cc_number[i + <span class=\"hljs-number\">1</span> :]\n        total += digit\n\n    <span class=\"hljs-comment\"># Sum up the remaining digits</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(cc_number) - <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">2</span>):\n        total += <span class=\"hljs-built_in\">int</span>(cc_number[i])\n\n    <span class=\"hljs-keyword\">return</span> total % <span class=\"hljs-number\">10</span> == <span class=\"hljs-number\">0</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">validate_credit_card_number</span>(<span class=\"hljs-params\">credit_card_number: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Function to validate the given credit card number.\n    &gt;&gt;&gt; validate_credit_card_number(&#x27;4111111111111111&#x27;)\n    4111111111111111 is a valid credit card number.\n    True\n    &gt;&gt;&gt; validate_credit_card_number(&#x27;helloworld$&#x27;)\n    helloworld$ is an invalid credit card number because it has nonnumerical characters.\n    False\n    &gt;&gt;&gt; validate_credit_card_number(&#x27;32323&#x27;)\n    32323 is an invalid credit card number because of its length.\n    False\n    &gt;&gt;&gt; validate_credit_card_number(&#x27;32323323233232332323&#x27;)\n    32323323233232332323 is an invalid credit card number because of its length.\n    False\n    &gt;&gt;&gt; validate_credit_card_number(&#x27;36111111111111&#x27;)\n    36111111111111 is an invalid credit card number because of its first two digits.\n    False\n    &gt;&gt;&gt; validate_credit_card_number(&#x27;41111111111111&#x27;)\n    41111111111111 is an invalid credit card number because it fails the Luhn check.\n    False\n    &quot;&quot;&quot;</span>\n    error_message = <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{credit_card_number}</span> is an invalid credit card number because&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> credit_card_number.isdigit():\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{error_message}</span> it has nonnumerical characters.&quot;</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-number\">13</span> &lt;= <span class=\"hljs-built_in\">len</span>(credit_card_number) &lt;= <span class=\"hljs-number\">16</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{error_message}</span> of its length.&quot;</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> validate_initial_digits(credit_card_number):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{error_message}</span> of its first two digits.&quot;</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> luhn_validation(credit_card_number):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{error_message}</span> it fails the Luhn check.&quot;</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{credit_card_number}</span> is a valid credit card number.&quot;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n    validate_credit_card_number(<span class=\"hljs-string\">&quot;4111111111111111&quot;</span>)\n    validate_credit_card_number(<span class=\"hljs-string\">&quot;32323&quot;</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "@im_8055",
      "email": "38890773+Bhargavishnu@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}