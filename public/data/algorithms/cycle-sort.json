{
  "slug": "cycle-sort",
  "name": "Cycle Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts/cycle_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/cycle_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nCode contributed by Honey Sharma\nSource: https://en.wikipedia.org/wiki/Cycle_sort\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cycle_sort</span>(<span class=\"hljs-params\">array: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; cycle_sort([4, 3, 2, 1])\n    [1, 2, 3, 4]\n\n    &gt;&gt;&gt; cycle_sort([-4, 20, 0, -50, 100, -1])\n    [-50, -4, -1, 0, 20, 100]\n\n    &gt;&gt;&gt; cycle_sort([-.1, -.2, 1.3, -.8])\n    [-0.8, -0.2, -0.1, 1.3]\n\n    &gt;&gt;&gt; cycle_sort([])\n    []\n    &quot;&quot;&quot;</span>\n    array_len = <span class=\"hljs-built_in\">len</span>(array)\n    <span class=\"hljs-keyword\">for</span> cycle_start <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, array_len - <span class=\"hljs-number\">1</span>):\n        item = array[cycle_start]\n\n        pos = cycle_start\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(cycle_start + <span class=\"hljs-number\">1</span>, array_len):\n            <span class=\"hljs-keyword\">if</span> array[i] &lt; item:\n                pos += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">if</span> pos == cycle_start:\n            <span class=\"hljs-keyword\">continue</span>\n\n        <span class=\"hljs-keyword\">while</span> item == array[pos]:\n            pos += <span class=\"hljs-number\">1</span>\n\n        array[pos], item = item, array[pos]\n        <span class=\"hljs-keyword\">while</span> pos != cycle_start:\n            pos = cycle_start\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(cycle_start + <span class=\"hljs-number\">1</span>, array_len):\n                <span class=\"hljs-keyword\">if</span> array[i] &lt; item:\n                    pos += <span class=\"hljs-number\">1</span>\n\n            <span class=\"hljs-keyword\">while</span> item == array[pos]:\n                pos += <span class=\"hljs-number\">1</span>\n\n            array[pos], item = item, array[pos]\n\n    <span class=\"hljs-keyword\">return</span> array\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">assert</span> cycle_sort([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]) == [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n    <span class=\"hljs-keyword\">assert</span> cycle_sort([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">2</span>]) == [-<span class=\"hljs-number\">10</span>, -<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">15</span>]\n"
    },
    "javascript": {
      "dir": "Sorts/CycleSort.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts/CycleSort.js",
      "code": "<span class=\"hljs-comment\">/**\n * Cycle sort is an in-place, unstable sorting algorithm,\n * a comparison sort that is theoretically optimal in terms of the total\n * number of writes to the original array, unlike any other in-place sorting\n * algorithm. It is based on the idea that the permutation to be sorted can\n * be factored into cycles, which can individually be rotated to give a sorted result.\n *\n * Wikipedia: https://en.wikipedia.org/wiki/Cycle_sort\n */</span>\n\n<span class=\"hljs-comment\">/**\n * cycleSort takes an input array of numbers and returns the array sorted in increasing order.\n *\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number[]</span>} list An array of numbers to be sorted.\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">number[]</span>} An array of numbers sorted in increasing order.\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">cycleSort</span> (list) {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> cycleStart = <span class=\"hljs-number\">0</span>; cycleStart &lt; list.<span class=\"hljs-property\">length</span>; cycleStart++) {\n    <span class=\"hljs-keyword\">let</span> value = list[cycleStart]\n    <span class=\"hljs-keyword\">let</span> position = cycleStart\n\n    <span class=\"hljs-comment\">// search position</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = cycleStart + <span class=\"hljs-number\">1</span>; i &lt; list.<span class=\"hljs-property\">length</span>; i++) {\n      <span class=\"hljs-keyword\">if</span> (list[i] &lt; value) {\n        position++\n      }\n    }\n    <span class=\"hljs-comment\">// if it is the same, continue</span>\n    <span class=\"hljs-keyword\">if</span> (position === cycleStart) {\n      <span class=\"hljs-keyword\">continue</span>\n    }\n    <span class=\"hljs-keyword\">while</span> (value === list[position]) {\n      position++\n    }\n\n    <span class=\"hljs-keyword\">const</span> oldValue = list[position]\n    list[position] = value\n    value = oldValue\n\n    <span class=\"hljs-comment\">// rotate the rest</span>\n    <span class=\"hljs-keyword\">while</span> (position !== cycleStart) {\n      position = cycleStart\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = cycleStart + <span class=\"hljs-number\">1</span>; i &lt; list.<span class=\"hljs-property\">length</span>; i++) {\n        <span class=\"hljs-keyword\">if</span> (list[i] &lt; value) {\n          position++\n        }\n      }\n      <span class=\"hljs-keyword\">while</span> (value === list[position]) {\n        position++\n      }\n      <span class=\"hljs-keyword\">const</span> oldValueCycle = list[position]\n      list[position] = value\n      value = oldValueCycle\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> list\n}\n\n<span class=\"hljs-keyword\">export</span> { cycleSort }\n"
    },
    "c-plus-plus": {
      "dir": "sorting/cycle_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/cycle_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of [Cycle\n * sort](https://en.wikipedia.org/wiki/Cycle_sort) algorithm\n * @details\n * Cycle Sort is a sorting algorithm that works in \\f$O(n^2)\\f$ time in the best\n * case and works in \\f$O(n^2)\\f$ in worst case. If a element is already at its\n * correct  position, do nothing. If a element is not at its correct position,\n * we then need to move it to its correct position by computing the correct\n * positions.Therefore, we should make sure the duplicate elements.\n * @author [TsungHan Ho](https://github.com/dalaoqi)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">/// for std::is_sorted, std::swap</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">/// for io operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>     <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace sorting\n * @brief Sorting algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> sorting {\n<span class=\"hljs-comment\">/**\n * @namespace cycle_sort\n * @brief Functions for [Cycle sort](https://en.wikipedia.org/wiki/Cycle_sort)\n * algorithm\n */</span>\n<span class=\"hljs-keyword\">namespace</span> cycle_sort {\n<span class=\"hljs-comment\">/**\n * @brief The main function implements cycleSort\n * @tparam T type of array\n * @param in_arr array to be sorted\n * @returns void\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">std::vector&lt;T&gt; <span class=\"hljs-title\">cycleSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;T&gt; &amp;in_arr)</span> </span>{\n    <span class=\"hljs-function\">std::vector&lt;T&gt; <span class=\"hljs-title\">arr</span><span class=\"hljs-params\">(in_arr)</span></span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> cycle_start = <span class=\"hljs-number\">0</span>; cycle_start &lt;= arr.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; cycle_start++) {\n        <span class=\"hljs-comment\">// initialize item</span>\n        T item = arr[cycle_start];\n\n        <span class=\"hljs-comment\">// Count the number of elements smaller than item, this  number is the</span>\n        <span class=\"hljs-comment\">// correct index of item.</span>\n        <span class=\"hljs-type\">int</span> pos = cycle_start;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = cycle_start + <span class=\"hljs-number\">1</span>; i &lt; arr.<span class=\"hljs-built_in\">size</span>(); i++) {\n            <span class=\"hljs-keyword\">if</span> (arr[i] &lt; item) {\n                pos++;\n            }\n        }\n\n        <span class=\"hljs-comment\">// item is already in correct position</span>\n        <span class=\"hljs-keyword\">if</span> (pos == cycle_start) {\n            <span class=\"hljs-keyword\">continue</span>;\n        }\n\n        <span class=\"hljs-comment\">// duplicate  elements</span>\n        <span class=\"hljs-keyword\">while</span> (item == arr[pos]) pos += <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">if</span> (pos == cycle_start) {\n            <span class=\"hljs-keyword\">continue</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            std::<span class=\"hljs-built_in\">swap</span>(item, arr[pos]);\n        }\n        <span class=\"hljs-comment\">// Rest of the  elements</span>\n        <span class=\"hljs-keyword\">while</span> (pos != cycle_start) {\n            pos = cycle_start;\n            <span class=\"hljs-comment\">// Find position where we put the element</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = cycle_start + <span class=\"hljs-number\">1</span>; i &lt; arr.<span class=\"hljs-built_in\">size</span>(); i++) {\n                <span class=\"hljs-keyword\">if</span> (arr[i] &lt; item) {\n                    pos += <span class=\"hljs-number\">1</span>;\n                }\n            }\n            <span class=\"hljs-comment\">// duplicate  elements</span>\n            <span class=\"hljs-keyword\">while</span> (item == arr[pos]) pos += <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">if</span> (item == arr[pos]) {\n                <span class=\"hljs-keyword\">continue</span>;\n            } <span class=\"hljs-keyword\">else</span> {\n                std::<span class=\"hljs-built_in\">swap</span>(item, arr[pos]);\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> arr;\n}\n}  <span class=\"hljs-comment\">// namespace cycle_sort</span>\n}  <span class=\"hljs-comment\">// namespace sorting</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Test 1</span>\n    <span class=\"hljs-comment\">// [4, 3, 2, 1] return [1, 2, 3, 4]</span>\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; array1 = {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1... &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; arr1 = sorting::cycle_sort::<span class=\"hljs-built_in\">cycleSort</span>(array1);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(arr1), std::<span class=\"hljs-built_in\">end</span>(arr1)));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// [4.3, -6.5, -7.4, 0, 2.7, 1.8] return [-7.4, -6.5, 0, 1.8, 2.7, 4.3]</span>\n    std::vector&lt;<span class=\"hljs-type\">double</span>&gt; array2 = {<span class=\"hljs-number\">4.3</span>, <span class=\"hljs-number\">-6.5</span>, <span class=\"hljs-number\">-7.4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2.7</span>, <span class=\"hljs-number\">1.8</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2... &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">double</span>&gt; arr2 = sorting::cycle_sort::<span class=\"hljs-built_in\">cycleSort</span>(array2);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(arr2), std::<span class=\"hljs-built_in\">end</span>(arr2)));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// Test 3</span>\n    <span class=\"hljs-comment\">// [3, 3, 3, 3] return [3, 3, 3, 3]</span>\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; array3 = {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 3... &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; arr3 = sorting::cycle_sort::<span class=\"hljs-built_in\">cycleSort</span>(array3);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(arr3), std::<span class=\"hljs-built_in\">end</span>(arr3)));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// [9, 4, 6, 8, 14, 3] return [9, 4, 6, 8, 14, 3]</span>\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; array4 = {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">14</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 4... &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; arr4 = sorting::cycle_sort::<span class=\"hljs-built_in\">cycleSort</span>(array4);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(arr4), std::<span class=\"hljs-built_in\">end</span>(arr4)));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// execute the test</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/sorts/CycleSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/sorts/CycleSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> com.thealgorithms.sorts.SortUtils.less;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> com.thealgorithms.sorts.SortUtils.print;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> Podshivalov Nikita (https://github.com/nikitap492)\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CycleSort</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SortAlgorithm</span> {\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; T[] sort(T[] arr) {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> arr.length;\n\n        <span class=\"hljs-comment\">// traverse array elements</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt;= n - <span class=\"hljs-number\">2</span>; j++) {\n            <span class=\"hljs-comment\">// initialize item as starting point</span>\n            <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">item</span> <span class=\"hljs-operator\">=</span> arr[j];\n\n            <span class=\"hljs-comment\">// Find position where we put the item.</span>\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pos</span> <span class=\"hljs-operator\">=</span> j;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> j + <span class=\"hljs-number\">1</span>; i &lt; n; i++) {\n                <span class=\"hljs-keyword\">if</span> (less(arr[i], item)) {\n                    pos++;\n                }\n            }\n\n            <span class=\"hljs-comment\">// If item is already in correct position</span>\n            <span class=\"hljs-keyword\">if</span> (pos == j) {\n                <span class=\"hljs-keyword\">continue</span>;\n            }\n\n            <span class=\"hljs-comment\">// ignore all duplicate elements</span>\n            <span class=\"hljs-keyword\">while</span> (item.compareTo(arr[pos]) == <span class=\"hljs-number\">0</span>) {\n                pos += <span class=\"hljs-number\">1</span>;\n            }\n\n            <span class=\"hljs-comment\">// put the item to it&#x27;s right position</span>\n            <span class=\"hljs-keyword\">if</span> (pos != j) {\n                item = replace(arr, pos, item);\n            }\n\n            <span class=\"hljs-comment\">// Rotate rest of the cycle</span>\n            <span class=\"hljs-keyword\">while</span> (pos != j) {\n                pos = j;\n\n                <span class=\"hljs-comment\">// Find position where we put the element</span>\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> j + <span class=\"hljs-number\">1</span>; i &lt; n; i++) {\n                    <span class=\"hljs-keyword\">if</span> (less(arr[i], item)) {\n                        pos += <span class=\"hljs-number\">1</span>;\n                    }\n                }\n\n                <span class=\"hljs-comment\">// ignore all duplicate elements</span>\n                <span class=\"hljs-keyword\">while</span> (item.compareTo(arr[pos]) == <span class=\"hljs-number\">0</span>) {\n                    pos += <span class=\"hljs-number\">1</span>;\n                }\n\n                <span class=\"hljs-comment\">// put the item to it&#x27;s right position</span>\n                <span class=\"hljs-keyword\">if</span> (item != arr[pos]) {\n                    item = replace(arr, pos, item);\n                }\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> arr;\n    }\n\n    <span class=\"hljs-keyword\">private</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; T <span class=\"hljs-title function_\">replace</span><span class=\"hljs-params\">(T[] arr, <span class=\"hljs-type\">int</span> pos, T item)</span> {\n        <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> item;\n        item = arr[pos];\n        arr[pos] = temp;\n        <span class=\"hljs-keyword\">return</span> item;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        Integer arr[] = {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">26</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">231</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">12</span>};\n        <span class=\"hljs-type\">CycleSort</span> <span class=\"hljs-variable\">cycleSort</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CycleSort</span>();\n        cycleSort.sort(arr);\n\n        System.out.println(<span class=\"hljs-string\">&quot;After sort : &quot;</span>);\n        print(arr);\n    }\n}\n"
    },
    "c": {
      "dir": "sorting/cycle_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/cycle_sort.c",
      "code": "<span class=\"hljs-comment\">// Sorting of array list using cycle sort</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-comment\">// Displays the array, passed to this method</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> n)</span>\n{\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, arr[i]);\n    }\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n}\n\n<span class=\"hljs-comment\">// Swap function to swap two values</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *first, <span class=\"hljs-type\">int</span> *second)</span>\n{\n    <span class=\"hljs-type\">int</span> temp = *first;\n    *first = *second;\n    *second = temp;\n}\n\n<span class=\"hljs-comment\">// Function sort the array using Cycle sort</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">cycleSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> n)</span>\n{\n    <span class=\"hljs-comment\">// count number of memory writes</span>\n    <span class=\"hljs-type\">int</span> writes = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">// traverse array elements and put it to on</span>\n    <span class=\"hljs-comment\">// the right place</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> cycle_start = <span class=\"hljs-number\">0</span>; cycle_start &lt;= n - <span class=\"hljs-number\">2</span>; cycle_start++)\n    {\n        <span class=\"hljs-comment\">// initialize item as starting point</span>\n        <span class=\"hljs-type\">int</span> item = arr[cycle_start];\n\n        <span class=\"hljs-comment\">// Find position where we put the item. We basically</span>\n        <span class=\"hljs-comment\">// count all smaller elements on right side of item.</span>\n        <span class=\"hljs-type\">int</span> pos = cycle_start;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = cycle_start + <span class=\"hljs-number\">1</span>; i &lt; n; i++)\n            <span class=\"hljs-keyword\">if</span> (arr[i] &lt; item)\n                pos++;\n\n        <span class=\"hljs-comment\">// If item is already in correct position</span>\n        <span class=\"hljs-keyword\">if</span> (pos == cycle_start)\n            <span class=\"hljs-keyword\">continue</span>;\n\n        <span class=\"hljs-comment\">// ignore all duplicate elements</span>\n        <span class=\"hljs-keyword\">while</span> (item == arr[pos]) pos += <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-comment\">// put the item to it&#x27;s right position</span>\n        <span class=\"hljs-keyword\">if</span> (pos != cycle_start)\n        {\n            swap(&amp;item, &amp;arr[pos]);\n            writes++;\n        }\n\n        <span class=\"hljs-comment\">// Rotate rest of the cycle</span>\n        <span class=\"hljs-keyword\">while</span> (pos != cycle_start)\n        {\n            pos = cycle_start;\n\n            <span class=\"hljs-comment\">// Find position where we put the element</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = cycle_start + <span class=\"hljs-number\">1</span>; i &lt; n; i++)\n                <span class=\"hljs-keyword\">if</span> (arr[i] &lt; item)\n                    pos += <span class=\"hljs-number\">1</span>;\n\n            <span class=\"hljs-comment\">// ignore all duplicate elements</span>\n            <span class=\"hljs-keyword\">while</span> (item == arr[pos]) pos += <span class=\"hljs-number\">1</span>;\n\n            <span class=\"hljs-comment\">// put the item to it&#x27;s right position</span>\n            <span class=\"hljs-keyword\">if</span> (item != arr[pos])\n            {\n                swap(&amp;item, &amp;arr[pos]);\n                writes++;\n            }\n        }\n    }\n}\n\n<span class=\"hljs-comment\">// Driver program to test above function</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> n;  <span class=\"hljs-comment\">// Size of array elements</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter size of array:\\n&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);  <span class=\"hljs-comment\">// E.g. 8</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the elements of the array\\n&quot;</span>);\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-type\">int</span> *arr = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(n * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;arr[i]);\n    }\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Original array: &quot;</span>);\n    display(arr, n);\n\n    cycleSort(arr, n);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Sorted array: &quot;</span>);\n    display(arr, n);\n\n    <span class=\"hljs-built_in\">free</span>(arr);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "f-sharp": {
      "dir": "Algorithms/Sort/Cycle_Sort.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms/Sort/Cycle_Sort.fs",
      "code": "﻿<span class=\"hljs-keyword\">namespace</span> Algorithms.Sort\n\n<span class=\"hljs-keyword\">module</span> CycleSort <span class=\"hljs-operator\">=</span>\n    <span class=\"hljs-keyword\">let</span> Sort list<span class=\"hljs-operator\">:</span> <span class=\"hljs-symbol\">&#x27;T</span> [] <span class=\"hljs-operator\">=</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> list <span class=\"hljs-operator\">=</span> list <span class=\"hljs-operator\">|&gt;</span> Array.copy\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> writes <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..</span> list.Length <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> value <span class=\"hljs-operator\">=</span> list.[index]\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> pos <span class=\"hljs-operator\">=</span> index\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> index <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">..</span> list.Length <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\n                <span class=\"hljs-keyword\">if</span> list.[i] <span class=\"hljs-operator\">&lt;</span> value <span class=\"hljs-keyword\">then</span> pos <span class=\"hljs-operator\">&lt;-</span> pos <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> pos <span class=\"hljs-operator\">&lt;&gt;</span> index <span class=\"hljs-keyword\">then</span>\n                <span class=\"hljs-keyword\">while</span> value <span class=\"hljs-operator\">=</span> list.[pos] <span class=\"hljs-keyword\">do</span>\n                    pos <span class=\"hljs-operator\">&lt;-</span> pos <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> tmp <span class=\"hljs-operator\">=</span> list.[pos]\n                list.[pos] <span class=\"hljs-operator\">&lt;-</span> value\n                value <span class=\"hljs-operator\">&lt;-</span> tmp\n                writes <span class=\"hljs-operator\">&lt;-</span> writes <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\n                <span class=\"hljs-keyword\">while</span> pos <span class=\"hljs-operator\">&lt;&gt;</span> index <span class=\"hljs-keyword\">do</span>\n                    pos <span class=\"hljs-operator\">&lt;-</span> index\n                    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> index <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">..</span> list.Length <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\n                        <span class=\"hljs-keyword\">if</span> list.[i] <span class=\"hljs-operator\">&lt;</span> value <span class=\"hljs-keyword\">then</span> pos <span class=\"hljs-operator\">&lt;-</span> pos <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\n                    <span class=\"hljs-keyword\">while</span> value <span class=\"hljs-operator\">=</span> list.[pos] <span class=\"hljs-keyword\">do</span>\n                        pos <span class=\"hljs-operator\">&lt;-</span> pos <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\n                    tmp <span class=\"hljs-operator\">&lt;-</span> list.[pos]\n                    list.[pos] <span class=\"hljs-operator\">&lt;-</span> value\n                    value <span class=\"hljs-operator\">&lt;-</span> tmp\n                    writes <span class=\"hljs-operator\">&lt;-</span> writes <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\n        list\n"
    },
    "rust": {
      "dir": "src/sorting/cycle_sort.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/sorting/cycle_sort.rs",
      "code": "<span class=\"hljs-comment\">// sorts with the minimum number of rewrites. Runs through all values in the array, placing them in their correct spots. O(n^2).</span>\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">cycle_sort</span>(arr: &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-type\">i32</span>]) {\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">cycle_start</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..arr.<span class=\"hljs-title function_ invoke__\">len</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">item</span> = arr[cycle_start];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">pos</span> = cycle_start;\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> arr.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">skip</span>(cycle_start + <span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-keyword\">if</span> *i &lt; item {\n                pos += <span class=\"hljs-number\">1</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">if</span> pos == cycle_start {\n            <span class=\"hljs-keyword\">continue</span>;\n        }\n        <span class=\"hljs-keyword\">while</span> item == arr[pos] {\n            pos += <span class=\"hljs-number\">1</span>;\n        }\n        std::mem::<span class=\"hljs-title function_ invoke__\">swap</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr[pos], &amp;<span class=\"hljs-keyword\">mut</span> item);\n        <span class=\"hljs-keyword\">while</span> pos != cycle_start {\n            pos = cycle_start;\n            <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> arr.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">skip</span>(cycle_start + <span class=\"hljs-number\">1</span>) {\n                <span class=\"hljs-keyword\">if</span> *i &lt; item {\n                    pos += <span class=\"hljs-number\">1</span>;\n                }\n            }\n            <span class=\"hljs-keyword\">while</span> item == arr[pos] {\n                pos += <span class=\"hljs-number\">1</span>;\n            }\n            std::mem::<span class=\"hljs-title function_ invoke__\">swap</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr[pos], &amp;<span class=\"hljs-keyword\">mut</span> item);\n        }\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::super::is_sorted;\n    <span class=\"hljs-keyword\">use</span> super::*;\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">it_works</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr1</span> = [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-title function_ invoke__\">cycle_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr1);\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;arr1));\n        arr1 = [<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">343</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">21</span>];\n        <span class=\"hljs-title function_ invoke__\">cycle_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr1);\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;arr1));\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr2</span> = [<span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-title function_ invoke__\">cycle_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr2);\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;arr2));\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr3</span> = [<span class=\"hljs-number\">213</span>, <span class=\"hljs-number\">542</span>, <span class=\"hljs-number\">90</span>, -<span class=\"hljs-number\">23412</span>, -<span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">324</span>, -<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">3324</span>, <span class=\"hljs-number\">54</span>];\n        <span class=\"hljs-title function_ invoke__\">cycle_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr3);\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;arr3));\n    }\n}\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Sorters/Comparison/CycleSorter.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/Algorithms/Sorters/Comparison/CycleSorter.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.Comparison</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Cycle sort is an in-place, unstable sorting algorithm,</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     a comparison sort that is theoretically optimal in terms of the total</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     number of writes to the original array.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     It is based on the idea that the permutation to be sorted can be factored</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     into cycles, which can individually be rotated to give a sorted result.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Type array input.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CycleSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt; : <span class=\"hljs-title\">IComparisonSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt;\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sorts input array using Cycle sort.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Input array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;comparer&quot;&gt;</span>Integer comparer.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\">T[] array, IComparer&lt;T&gt; comparer</span>)</span>\n        {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.Length - <span class=\"hljs-number\">1</span>; i++)\n            {\n                MoveCycle(array, i, comparer);\n            }\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MoveCycle</span>(<span class=\"hljs-params\">T[] array, <span class=\"hljs-built_in\">int</span> startingIndex, IComparer&lt;T&gt; comparer</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> item = array[startingIndex];\n            <span class=\"hljs-keyword\">var</span> pos = startingIndex + CountSmallerElements(array, startingIndex + <span class=\"hljs-number\">1</span>, item, comparer);\n\n            <span class=\"hljs-keyword\">if</span> (pos == startingIndex)\n            {\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\n            pos = SkipSameElements(array, pos, item, comparer);\n\n            <span class=\"hljs-keyword\">var</span> temp = array[pos];\n            array[pos] = item;\n            item = temp;\n\n            <span class=\"hljs-keyword\">while</span> (pos != startingIndex)\n            {\n                pos = startingIndex + CountSmallerElements(array, startingIndex + <span class=\"hljs-number\">1</span>, item, comparer);\n                pos = SkipSameElements(array, pos, item, comparer);\n\n                temp = array[pos];\n                array[pos] = item;\n                item = temp;\n            }\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">SkipSameElements</span>(<span class=\"hljs-params\">T[] array, <span class=\"hljs-built_in\">int</span> nextIndex, T item, IComparer&lt;T&gt; comparer</span>)</span>\n        {\n            <span class=\"hljs-keyword\">while</span> (comparer.Compare(array[nextIndex], item) == <span class=\"hljs-number\">0</span>)\n            {\n                nextIndex++;\n            }\n\n            <span class=\"hljs-keyword\">return</span> nextIndex;\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">CountSmallerElements</span>(<span class=\"hljs-params\">T[] array, <span class=\"hljs-built_in\">int</span> startingIndex, T element, IComparer&lt;T&gt; comparer</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> smallerElements = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = startingIndex; i &lt; array.Length; i++)\n            {\n                <span class=\"hljs-keyword\">if</span> (comparer.Compare(array[i], element) &lt; <span class=\"hljs-number\">0</span>)\n                {\n                    smallerElements++;\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> smallerElements;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Mertcan Davulcu",
      "email": "54983926+mertcandav@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "pwygab",
      "email": "88221256+merelymyself@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "RenCloud",
      "email": "thedarkrencloud@yandex.ru",
      "commits": 1
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 1
    },
    {
      "name": "Swastika Gupta",
      "email": "64654203+Swastyy@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 1
    },
    {
      "name": "Zykiel",
      "email": "48471587+ZykielErx@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "KuLi",
      "email": "KuLi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Kaustubh Damania",
      "email": "kaustubh.damania@gmail.com",
      "commits": 1
    },
    {
      "name": "Tsung-Han Ho",
      "email": "mystes3016@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "Sayan Bandyopadhyay",
      "email": "sayan.bandyopadhyay@yahoo.co.in",
      "commits": 1
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Honey Sharma",
      "email": "softwaretester2016pro@gmail.com",
      "commits": 2
    },
    {
      "name": "mateuszz0000",
      "email": "mtszzwdzk@gmail.com",
      "commits": 2
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 4
    },
    {
      "name": "marsonya",
      "email": "akhil.marsonya27@gmail.com",
      "commits": 4
    },
    {
      "name": "Charlie Moore",
      "email": "moorejchar@gmail.com",
      "commits": 8
    }
  ],
  "explanationUrl": {}
}