{
  "slug": "cyclic",
  "name": "Cyclic",
  "categories": [
    "structure",
    "linkedlist"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "structure/linkedlist/cyclic.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/structure/linkedlist/cyclic.go",
      "code": "<span class=\"hljs-keyword\">package</span> linkedlist\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span>\n\n<span class=\"hljs-comment\">// Cyclic Struct which cycles the linked list in this implementation.</span>\n<span class=\"hljs-keyword\">type</span> Cyclic <span class=\"hljs-keyword\">struct</span> {\n\tSize <span class=\"hljs-type\">int</span>\n\tHead *Node\n}\n\n<span class=\"hljs-comment\">// Create new list.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewCyclic</span><span class=\"hljs-params\">()</span></span> *Cyclic {\n\t<span class=\"hljs-keyword\">return</span> &amp;Cyclic{<span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">nil</span>}\n}\n\n<span class=\"hljs-comment\">// Inserting the first node is a special case. It will</span>\n<span class=\"hljs-comment\">// point to itself. For other cases, the node will be added</span>\n<span class=\"hljs-comment\">// to the end of the list. End of the list is Prev field of</span>\n<span class=\"hljs-comment\">// current item. Complexity O(1).</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(cl *Cyclic)</span></span> Add(val any) {\n\tn := NewNode(val)\n\tcl.Size++\n\t<span class=\"hljs-keyword\">if</span> cl.Head == <span class=\"hljs-literal\">nil</span> {\n\t\tn.Prev = n\n\t\tn.Next = n\n\t\tcl.Head = n\n\t} <span class=\"hljs-keyword\">else</span> {\n\t\tn.Prev = cl.Head.Prev\n\t\tn.Next = cl.Head\n\t\tcl.Head.Prev.Next = n\n\t\tcl.Head.Prev = n\n\t}\n}\n\n<span class=\"hljs-comment\">// Rotate list by P places.</span>\n<span class=\"hljs-comment\">// This method is interesting for optimization.</span>\n<span class=\"hljs-comment\">// For first optimization we must decrease</span>\n<span class=\"hljs-comment\">// P value so that it ranges from 0 to N-1.</span>\n<span class=\"hljs-comment\">// For this we need to use the operation of</span>\n<span class=\"hljs-comment\">// division modulo. But be careful if P is less than 0.</span>\n<span class=\"hljs-comment\">// if it is - make it positive. This can be done without</span>\n<span class=\"hljs-comment\">// violating the meaning of the number by adding to it</span>\n<span class=\"hljs-comment\">// a multiple of N. Now you can decrease P modulo N to</span>\n<span class=\"hljs-comment\">// rotate the list by the minimum number of places.</span>\n<span class=\"hljs-comment\">// We use the fact that moving forward in a circle by P</span>\n<span class=\"hljs-comment\">// places is the same as moving N - P places back.</span>\n<span class=\"hljs-comment\">// Therefore, if P &gt; N / 2, you can turn the list by N-P places back.</span>\n<span class=\"hljs-comment\">// Complexity O(n).</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(cl *Cyclic)</span></span> Rotate(places <span class=\"hljs-type\">int</span>) {\n\t<span class=\"hljs-keyword\">if</span> cl.Size &gt; <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">if</span> places &lt; <span class=\"hljs-number\">0</span> {\n\t\t\tmultiple := cl.Size - <span class=\"hljs-number\">1</span> - places/cl.Size\n\t\t\tplaces += multiple * cl.Size\n\t\t}\n\t\tplaces %= cl.Size\n\n\t\t<span class=\"hljs-keyword\">if</span> places &gt; cl.Size/<span class=\"hljs-number\">2</span> {\n\t\t\tplaces = cl.Size - places\n\t\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; places; i++ {\n\t\t\t\tcl.Head = cl.Head.Prev\n\t\t\t}\n\t\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> places == <span class=\"hljs-number\">0</span> {\n\t\t\t<span class=\"hljs-keyword\">return</span>\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; places; i++ {\n\t\t\t\tcl.Head = cl.Head.Next\n\t\t\t}\n\n\t\t}\n\t}\n}\n\n<span class=\"hljs-comment\">// Delete the current item.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(cl *Cyclic)</span></span> Delete() <span class=\"hljs-type\">bool</span> {\n\t<span class=\"hljs-keyword\">var</span> deleted <span class=\"hljs-type\">bool</span>\n\t<span class=\"hljs-keyword\">var</span> prevItem, thisItem, nextItem *Node\n\n\t<span class=\"hljs-keyword\">if</span> cl.Size == <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> deleted\n\t}\n\n\tdeleted = <span class=\"hljs-literal\">true</span>\n\tthisItem = cl.Head\n\tnextItem = thisItem.Next\n\tprevItem = thisItem.Prev\n\n\t<span class=\"hljs-keyword\">if</span> cl.Size == <span class=\"hljs-number\">1</span> {\n\t\tcl.Head = <span class=\"hljs-literal\">nil</span>\n\t} <span class=\"hljs-keyword\">else</span> {\n\t\tcl.Head = nextItem\n\t\tnextItem.Prev = prevItem\n\t\tprevItem.Next = nextItem\n\t}\n\tcl.Size--\n\n\t<span class=\"hljs-keyword\">return</span> deleted\n}\n\n<span class=\"hljs-comment\">// Destroy all items in the list.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(cl *Cyclic)</span></span> Destroy() {\n\t<span class=\"hljs-keyword\">for</span> cl.Delete() {\n\t\t<span class=\"hljs-keyword\">continue</span>\n\t}\n}\n\n<span class=\"hljs-comment\">// Show list body.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(cl *Cyclic)</span></span> Walk() *Node {\n\t<span class=\"hljs-keyword\">var</span> start *Node\n\tstart = cl.Head\n\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; cl.Size; i++ {\n\t\tfmt.Printf(<span class=\"hljs-string\">&quot;%v \\n&quot;</span>, start.Val)\n\t\tstart = start.Next\n\t}\n\t<span class=\"hljs-keyword\">return</span> start\n}\n\n<span class=\"hljs-comment\">// https://en.wikipedia.org/wiki/Josephus_problem</span>\n<span class=\"hljs-comment\">// This is a struct-based solution for Josephus problem.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">JosephusProblem</span><span class=\"hljs-params\">(cl *Cyclic, k <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> {\n\t<span class=\"hljs-keyword\">for</span> cl.Size &gt; <span class=\"hljs-number\">1</span> {\n\t\tcl.Rotate(k)\n\t\tcl.Delete()\n\t\tcl.Rotate(<span class=\"hljs-number\">-1</span>)\n\t}\n\tretval := cl.Head.Val.(<span class=\"hljs-type\">int</span>)\n\tcl.Destroy()\n\t<span class=\"hljs-keyword\">return</span> retval\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Ritik Bhandari",
      "email": "ritikbhandari68@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}