{
  "slug": "depth-first-search-recursive",
  "name": "Depth First Search Recursive",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Graphs/DepthFirstSearchRecursive.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Graphs/DepthFirstSearchRecursive.js",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GraphUnweightedUndirected</span> {\n  <span class=\"hljs-comment\">// Unweighted Undirected Graph class</span>\n  <span class=\"hljs-title function_\">constructor</span> () {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span> = {}\n  }\n\n  addNode (node) {\n    <span class=\"hljs-comment\">// Function to add a node to the graph (connection represented by set)</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>()\n  }\n\n  addEdge (node1, node2) {\n    <span class=\"hljs-comment\">// Function to add an edge (adds the node too if they are not present in the graph)</span>\n    <span class=\"hljs-keyword\">if</span> (!(node1 <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>)) { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">addNode</span>(node1) }\n    <span class=\"hljs-keyword\">if</span> (!(node2 <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>)) { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">addNode</span>(node2) }\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node1].<span class=\"hljs-title function_\">add</span>(node2)\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node2].<span class=\"hljs-title function_\">add</span>(node1)\n  }\n\n  <span class=\"hljs-title class_\">DFSRecursive</span> (node, value, visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>()) {\n    <span class=\"hljs-comment\">// DFS Function to search if a node with the given value is present in the graph</span>\n    <span class=\"hljs-comment\">// checking if the searching node has been found</span>\n    <span class=\"hljs-keyword\">if</span> (node === value) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span> }\n    <span class=\"hljs-comment\">// adding the current node to the visited set</span>\n    visited.<span class=\"hljs-title function_\">add</span>(node)\n    <span class=\"hljs-comment\">// calling the helper function recursively for all unvisited nodes</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> neighbour <span class=\"hljs-keyword\">of</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node]) {\n      <span class=\"hljs-keyword\">if</span> (!visited.<span class=\"hljs-title function_\">has</span>(neighbour)) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title class_\">DFSRecursive</span>(neighbour, value, visited)) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span> }\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">GraphUnweightedUndirected</span> }\n\n<span class=\"hljs-comment\">// const graph = new GraphUnweightedUndirected()</span>\n<span class=\"hljs-comment\">// graph.addEdge(1, 2)</span>\n<span class=\"hljs-comment\">// graph.addEdge(2, 3)</span>\n<span class=\"hljs-comment\">// graph.addEdge(2, 4)</span>\n<span class=\"hljs-comment\">// graph.addEdge(3, 5)</span>\n<span class=\"hljs-comment\">// graph.DFSRecursive(5, 1)</span>\n<span class=\"hljs-comment\">// graph.DFSRecursive(5, 100)</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Tapajyoti Bose",
      "email": "44058757+ruppysuppy@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}