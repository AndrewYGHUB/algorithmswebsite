{
  "slug": "detecting-english-programmatically",
  "name": "Detecting English Programmatically",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings/detecting_english_programmatically.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings/detecting_english_programmatically.py",
      "code": "<span class=\"hljs-keyword\">import</span> os\n\nUPPERLETTERS = <span class=\"hljs-string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>\nLETTERS_AND_SPACE = UPPERLETTERS + UPPERLETTERS.lower() + <span class=\"hljs-string\">&quot; \\t\\n&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">load_dictionary</span>() -&gt; <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-literal\">None</span>]:\n    path = os.path.split(os.path.realpath(__file__))\n    english_words: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-literal\">None</span>] = {}\n    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(path[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-string\">&quot;/dictionary.txt&quot;</span>) <span class=\"hljs-keyword\">as</span> dictionary_file:\n        <span class=\"hljs-keyword\">for</span> word <span class=\"hljs-keyword\">in</span> dictionary_file.read().split(<span class=\"hljs-string\">&quot;\\n&quot;</span>):\n            english_words[word] = <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">return</span> english_words\n\n\nENGLISH_WORDS = load_dictionary()\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_english_count</span>(<span class=\"hljs-params\">message: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    message = message.upper()\n    message = remove_non_letters(message)\n    possible_words = message.split()\n\n    <span class=\"hljs-keyword\">if</span> possible_words == []:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0.0</span>\n\n    matches = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> word <span class=\"hljs-keyword\">in</span> possible_words:\n        <span class=\"hljs-keyword\">if</span> word <span class=\"hljs-keyword\">in</span> ENGLISH_WORDS:\n            matches += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">float</span>(matches) / <span class=\"hljs-built_in\">len</span>(possible_words)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">remove_non_letters</span>(<span class=\"hljs-params\">message: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    letters_only = []\n    <span class=\"hljs-keyword\">for</span> symbol <span class=\"hljs-keyword\">in</span> message:\n        <span class=\"hljs-keyword\">if</span> symbol <span class=\"hljs-keyword\">in</span> LETTERS_AND_SPACE:\n            letters_only.append(symbol)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(letters_only)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_english</span>(<span class=\"hljs-params\">\n    message: <span class=\"hljs-built_in\">str</span>, word_percentage: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">20</span>, letter_percentage: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">85</span>\n</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; is_english(&#x27;Hello World&#x27;)\n    True\n    &gt;&gt;&gt; is_english(&#x27;llold HorWd&#x27;)\n    False\n    &quot;&quot;&quot;</span>\n    words_match = get_english_count(message) * <span class=\"hljs-number\">100</span> &gt;= word_percentage\n    num_letters = <span class=\"hljs-built_in\">len</span>(remove_non_letters(message))\n    message_letters_percentage = (<span class=\"hljs-built_in\">float</span>(num_letters) / <span class=\"hljs-built_in\">len</span>(message)) * <span class=\"hljs-number\">100</span>\n    letters_match = message_letters_percentage &gt;= letter_percentage\n    <span class=\"hljs-keyword\">return</span> words_match <span class=\"hljs-keyword\">and</span> letters_match\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "Rohan R Bharadwaj",
      "email": "rohanrbharadwaj@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "MickaÃ«l Schoentgen",
      "email": "contact@tiger-222.fr",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}