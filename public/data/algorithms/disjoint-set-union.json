{
  "slug": "disjoint-set-union",
  "name": "Disjoint Set Union",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/graph/disjoint_set_union.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/graph/disjoint_set_union.rs",
      "code": "<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">DSUNode</span> {\n    parent: <span class=\"hljs-type\">usize</span>,\n    size: <span class=\"hljs-type\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">DisjointSetUnion</span> {\n    nodes: <span class=\"hljs-type\">Vec</span>&lt;DSUNode&gt;,\n}\n\n<span class=\"hljs-comment\">// We are using both path compression and union by size</span>\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">DisjointSetUnion</span> {\n    <span class=\"hljs-comment\">// Create n+1 sets [0, n]</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>(n: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> DisjointSetUnion {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">nodes</span> = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n        nodes.<span class=\"hljs-title function_ invoke__\">reserve_exact</span>(n + <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..=n {\n            nodes.<span class=\"hljs-title function_ invoke__\">push</span>(DSUNode { parent: i, size: <span class=\"hljs-number\">1</span> });\n        }\n        DisjointSetUnion { nodes }\n    }\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">find_set</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, v: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\n        <span class=\"hljs-keyword\">if</span> v == <span class=\"hljs-keyword\">self</span>.nodes[v].parent {\n            <span class=\"hljs-keyword\">return</span> v;\n        }\n        <span class=\"hljs-keyword\">self</span>.nodes[v].parent = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">find_set</span>(<span class=\"hljs-keyword\">self</span>.nodes[v].parent);\n        <span class=\"hljs-keyword\">self</span>.nodes[v].parent\n    }\n    <span class=\"hljs-comment\">// Returns the new component of the merged sets,</span>\n    <span class=\"hljs-comment\">// or std::usize::MAX if they were the same.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">merge</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, u: <span class=\"hljs-type\">usize</span>, v: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">a</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">find_set</span>(u);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">b</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">find_set</span>(v);\n        <span class=\"hljs-keyword\">if</span> a == b {\n            <span class=\"hljs-keyword\">return</span> std::usize::MAX;\n        }\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.nodes[a].size &lt; <span class=\"hljs-keyword\">self</span>.nodes[b].size {\n            std::mem::<span class=\"hljs-title function_ invoke__\">swap</span>(&amp;<span class=\"hljs-keyword\">mut</span> a, &amp;<span class=\"hljs-keyword\">mut</span> b);\n        }\n        <span class=\"hljs-keyword\">self</span>.nodes[b].parent = a;\n        <span class=\"hljs-keyword\">self</span>.nodes[a].size += <span class=\"hljs-keyword\">self</span>.nodes[b].size;\n        a\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">create_acyclic_graph</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">dsu</span> = DisjointSetUnion::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">10</span>);\n        <span class=\"hljs-comment\">// Add edges such that vertices 1..=9 are connected</span>\n        <span class=\"hljs-comment\">// and vertex 10 is not connected to the other ones</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">edges</span>: <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">usize</span>, <span class=\"hljs-type\">usize</span>)&gt; = <span class=\"hljs-built_in\">vec!</span>[\n            (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>), <span class=\"hljs-comment\">// +</span>\n            (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>),\n            (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>), <span class=\"hljs-comment\">// +</span>\n            (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>),\n            (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>), <span class=\"hljs-comment\">// +</span>\n            (<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>), <span class=\"hljs-comment\">// +</span>\n            (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>), <span class=\"hljs-comment\">// +</span>\n            (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>), <span class=\"hljs-comment\">// +</span>\n            (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>), <span class=\"hljs-comment\">// +</span>\n            (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">9</span>),\n            (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>),\n            (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>),\n            (<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>),\n            (<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>), <span class=\"hljs-comment\">// +</span>\n            (<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>),\n        ];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">expected_edges</span>: <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">usize</span>, <span class=\"hljs-type\">usize</span>)&gt; = <span class=\"hljs-built_in\">vec!</span>[\n            (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>),\n            (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>),\n            (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>),\n            (<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>),\n            (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>),\n            (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>),\n            (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>),\n            (<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>),\n        ];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">added_edges</span>: <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">usize</span>, <span class=\"hljs-type\">usize</span>)&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-title function_ invoke__\">for</span> (u, v) <span class=\"hljs-keyword\">in</span> edges {\n            <span class=\"hljs-keyword\">if</span> dsu.<span class=\"hljs-title function_ invoke__\">merge</span>(u, v) &lt; std::usize::MAX {\n                added_edges.<span class=\"hljs-title function_ invoke__\">push</span>((u, v));\n            }\n            <span class=\"hljs-comment\">// Now they should be the same</span>\n            <span class=\"hljs-built_in\">assert!</span>(dsu.<span class=\"hljs-title function_ invoke__\">merge</span>(u, v) == std::usize::MAX);\n        }\n        <span class=\"hljs-built_in\">assert_eq!</span>(added_edges, expected_edges);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">comp_1</span> = dsu.<span class=\"hljs-title function_ invoke__\">find_set</span>(<span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">2</span>..=<span class=\"hljs-number\">9</span> {\n            <span class=\"hljs-built_in\">assert_eq!</span>(comp_1, dsu.<span class=\"hljs-title function_ invoke__\">find_set</span>(i));\n        }\n        <span class=\"hljs-built_in\">assert_ne!</span>(comp_1, dsu.<span class=\"hljs-title function_ invoke__\">find_set</span>(<span class=\"hljs-number\">10</span>));\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Erfan Khadem",
      "email": "45465346+er888kh@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}