{
  "slug": "dnf-sort",
  "name": "Dnf Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "sorting/dnf_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/dnf_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of the [DNF\n * sort](https://www.geeksforgeeks.org/sort-an-array-of-0s-1s-and-2s/)\n * implementation\n * @details\n * C++ program to sort an array with 0, 1 and 2 in a single pass(DNF sort).\n * Since one traversal of the array is there hence it works in O(n) time\n * complexity.\n * @author [Sujal Gupta](https://github.com/heysujal)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">/// for std::is_sorted</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">/// for std::swap and io operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>     <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace sorting\n * @breif Sorting algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> sorting {\n<span class=\"hljs-comment\">/**\n * @namespace dnf_sort\n * @brief Functions for the [DNF\n * sort](https://en.wikipedia.org/wiki/Dutch_national_flag_problem)\n * implementation\n */</span>\n<span class=\"hljs-keyword\">namespace</span> dnf_sort {\n<span class=\"hljs-comment\">/**\n * @brief The main function implements DNF sort\n * @tparam T type of array\n * @param a array to be sorted,\n * @param arr_size size of array\n * @returns void\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">std::vector&lt;T&gt; <span class=\"hljs-title\">dnfSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;T&gt; &amp;in_arr)</span> </span>{\n    <span class=\"hljs-function\">std::vector&lt;T&gt; <span class=\"hljs-title\">arr</span><span class=\"hljs-params\">(in_arr)</span></span>;\n    <span class=\"hljs-type\">uint64_t</span> lo = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">uint64_t</span> hi = arr.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-type\">uint64_t</span> mid = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">// Iterate till all the elements</span>\n    <span class=\"hljs-comment\">// are sorted</span>\n    <span class=\"hljs-keyword\">while</span> (mid &lt;= hi) {\n        <span class=\"hljs-keyword\">switch</span> (arr[mid]) {\n            <span class=\"hljs-comment\">// If the element is 0</span>\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:\n                std::<span class=\"hljs-built_in\">swap</span>(arr[lo++], arr[mid++]);\n                <span class=\"hljs-keyword\">break</span>;\n\n            <span class=\"hljs-comment\">// If the element is 1 .</span>\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n                mid++;\n                <span class=\"hljs-keyword\">break</span>;\n\n            <span class=\"hljs-comment\">// If the element is 2</span>\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n                std::<span class=\"hljs-built_in\">swap</span>(arr[mid], arr[hi--]);\n                <span class=\"hljs-keyword\">break</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> arr;\n}\n}  <span class=\"hljs-comment\">// namespace dnf_sort</span>\n}  <span class=\"hljs-comment\">// namespace sorting</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// 1st test</span>\n    <span class=\"hljs-comment\">// [1, 0, 2, 1] return [0, 1, 1, 2]</span>\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; array1 = {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1... &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; arr1 = sorting::dnf_sort::<span class=\"hljs-built_in\">dnfSort</span>(array1);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(arr1), std::<span class=\"hljs-built_in\">end</span>(arr1)));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// 2nd test</span>\n    <span class=\"hljs-comment\">// [1, 0, 0, 1, 1, 0, 2, 1] return [0, 0, 0, 1, 1, 1, 1, 2]</span>\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; array2 = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2... &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; arr2 = sorting::dnf_sort::<span class=\"hljs-built_in\">dnfSort</span>(array2);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(arr2), std::<span class=\"hljs-built_in\">end</span>(arr2)));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// 3rd test</span>\n    <span class=\"hljs-comment\">// [1, 1, 0, 0, 1, 2, 2, 0, 2, 1] return [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]</span>\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; array3 = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 3... &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; arr3 = sorting::dnf_sort::<span class=\"hljs-built_in\">dnfSort</span>(array3);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(arr3), std::<span class=\"hljs-built_in\">end</span>(arr3)));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// 4th test</span>\n    <span class=\"hljs-comment\">// [2, 2, 2, 0, 0, 1, 1] return [0, 0, 1, 1, 2, 2, 2]</span>\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; array4 = {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 4... &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; arr4 = sorting::dnf_sort::<span class=\"hljs-built_in\">dnfSort</span>(array4);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(arr4), std::<span class=\"hljs-built_in\">end</span>(arr4)));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// execute the test</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/sorts/DNFSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/sorts/DNFSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DNFSort</span> {\n\n    <span class=\"hljs-comment\">// Sort the input array, the array is assumed to</span>\n    <span class=\"hljs-comment\">// have values in {0, 1, 2}</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sort012</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> arr_size)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">low</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">high</span> <span class=\"hljs-operator\">=</span> arr_size - <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mid</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, temp = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">while</span> (mid &lt;= high) {\n            <span class=\"hljs-keyword\">switch</span> (a[mid]) {\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>: {\n                    temp = a[low];\n                    a[low] = a[mid];\n                    a[mid] = temp;\n                    low++;\n                    mid++;\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n                    mid++;\n                    <span class=\"hljs-keyword\">break</span>;\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>: {\n                    temp = a[mid];\n                    a[mid] = a[high];\n                    a[high] = temp;\n                    high--;\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n            }\n        }\n    }\n\n    <span class=\"hljs-comment\">/* Utility function to print array arr[] */</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> arr_size)</span> {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; arr_size; i++) {\n            System.out.print(arr[i] + <span class=\"hljs-string\">&quot; &quot;</span>);\n        }\n        System.out.println(<span class=\"hljs-string\">&quot;&quot;</span>);\n    }\n\n    <span class=\"hljs-comment\">/*Driver function to check for above functions*/</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">int</span> arr[] = {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>};\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">arr_size</span> <span class=\"hljs-operator\">=</span> arr.length;\n        sort012(arr, arr_size);\n        System.out.println(<span class=\"hljs-string\">&quot;Array after seggregation &quot;</span>);\n        printArray(arr, arr_size);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "ERR !",
      "email": "75872316+amino19@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sujal Gupta",
      "email": "55016909+heysujal@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "G.V.AKHIL CHANDRA",
      "email": "75377985+GV-Akhil-Chandra@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}