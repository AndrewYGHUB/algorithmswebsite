{
  "slug": "double-ended-queue",
  "name": "Double Ended Queue",
  "categories": [
    "datastructures",
    "queues"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/queue/double_ended_queue.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/queue/double_ended_queue.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nImplementation of double ended queue.\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">from</span> collections.abc <span class=\"hljs-keyword\">import</span> Iterable\n<span class=\"hljs-keyword\">from</span> dataclasses <span class=\"hljs-keyword\">import</span> dataclass\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Any</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Deque</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Deque data structure.\n    Operations\n    ----------\n    append(val: Any) -&gt; None\n    appendleft(val: Any) -&gt; None\n    extend(iter: Iterable) -&gt; None\n    extendleft(iter: Iterable) -&gt; None\n    pop() -&gt; Any\n    popleft() -&gt; Any\n    Observers\n    ---------\n    is_empty() -&gt; bool\n    Attributes\n    ----------\n    _front: _Node\n        front of the deque a.k.a. the first element\n    _back: _Node\n        back of the element a.k.a. the last element\n    _len: int\n        the number of nodes\n    &quot;&quot;&quot;</span>\n\n    __slots__ = [<span class=\"hljs-string\">&quot;_front&quot;</span>, <span class=\"hljs-string\">&quot;_back&quot;</span>, <span class=\"hljs-string\">&quot;_len&quot;</span>]\n\n<span class=\"hljs-meta\">    @dataclass</span>\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">_Node</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Representation of a node.\n        Contains a value and a pointer to the next node as well as to the previous one.\n        &quot;&quot;&quot;</span>\n\n        val: <span class=\"hljs-type\">Any</span> = <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-built_in\">next</span>: Deque._Node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\n        prev: Deque._Node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">_Iterator</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Helper class for iteration. Will be used to implement iteration.\n        Attributes\n        ----------\n        _cur: _Node\n            the current node of the iteration.\n        &quot;&quot;&quot;</span>\n\n        __slots__ = [<span class=\"hljs-string\">&quot;_cur&quot;</span>]\n\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, cur: Deque._Node | <span class=\"hljs-literal\">None</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n            self._cur = cur\n\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__iter__</span>(<span class=\"hljs-params\">self</span>) -&gt; Deque._Iterator:\n            <span class=\"hljs-string\">&quot;&quot;&quot;\n            &gt;&gt;&gt; our_deque = Deque([1, 2, 3])\n            &gt;&gt;&gt; iterator = iter(our_deque)\n            &quot;&quot;&quot;</span>\n            <span class=\"hljs-keyword\">return</span> self\n\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__next__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-type\">Any</span>:\n            <span class=\"hljs-string\">&quot;&quot;&quot;\n            &gt;&gt;&gt; our_deque = Deque([1, 2, 3])\n            &gt;&gt;&gt; iterator = iter(our_deque)\n            &gt;&gt;&gt; next(iterator)\n            1\n            &gt;&gt;&gt; next(iterator)\n            2\n            &gt;&gt;&gt; next(iterator)\n            3\n            &quot;&quot;&quot;</span>\n            <span class=\"hljs-keyword\">if</span> self._cur <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n                <span class=\"hljs-comment\"># finished iterating</span>\n                <span class=\"hljs-keyword\">raise</span> StopIteration\n            val = self._cur.val\n            self._cur = self._cur.<span class=\"hljs-built_in\">next</span>\n\n            <span class=\"hljs-keyword\">return</span> val\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, iterable: Iterable[<span class=\"hljs-type\">Any</span>] | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self._front: <span class=\"hljs-type\">Any</span> = <span class=\"hljs-literal\">None</span>\n        self._back: <span class=\"hljs-type\">Any</span> = <span class=\"hljs-literal\">None</span>\n        self._<span class=\"hljs-built_in\">len</span>: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span>\n\n        <span class=\"hljs-keyword\">if</span> iterable <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-comment\"># append every value to the deque</span>\n            <span class=\"hljs-keyword\">for</span> val <span class=\"hljs-keyword\">in</span> iterable:\n                self.append(val)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">append</span>(<span class=\"hljs-params\">self, val: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Adds val to the end of the deque.\n        Time complexity: O(1)\n        &gt;&gt;&gt; our_deque_1 = Deque([1, 2, 3])\n        &gt;&gt;&gt; our_deque_1.append(4)\n        &gt;&gt;&gt; our_deque_1\n        [1, 2, 3, 4]\n        &gt;&gt;&gt; our_deque_2 = Deque(&#x27;ab&#x27;)\n        &gt;&gt;&gt; our_deque_2.append(&#x27;c&#x27;)\n        &gt;&gt;&gt; our_deque_2\n        [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]\n        &gt;&gt;&gt; from collections import deque\n        &gt;&gt;&gt; deque_collections_1 = deque([1, 2, 3])\n        &gt;&gt;&gt; deque_collections_1.append(4)\n        &gt;&gt;&gt; deque_collections_1\n        deque([1, 2, 3, 4])\n        &gt;&gt;&gt; deque_collections_2 = deque(&#x27;ab&#x27;)\n        &gt;&gt;&gt; deque_collections_2.append(&#x27;c&#x27;)\n        &gt;&gt;&gt; deque_collections_2\n        deque([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])\n        &gt;&gt;&gt; list(our_deque_1) == list(deque_collections_1)\n        True\n        &gt;&gt;&gt; list(our_deque_2) == list(deque_collections_2)\n        True\n        &quot;&quot;&quot;</span>\n        node = self._Node(val, <span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>)\n        <span class=\"hljs-keyword\">if</span> self.is_empty():\n            <span class=\"hljs-comment\"># front = back</span>\n            self._front = self._back = node\n            self._<span class=\"hljs-built_in\">len</span> = <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-comment\"># connect nodes</span>\n            self._back.<span class=\"hljs-built_in\">next</span> = node\n            node.prev = self._back\n            self._back = node  <span class=\"hljs-comment\"># assign new back to the new node</span>\n\n            self._<span class=\"hljs-built_in\">len</span> += <span class=\"hljs-number\">1</span>\n\n            <span class=\"hljs-comment\"># make sure there were no errors</span>\n            <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> self.is_empty(), <span class=\"hljs-string\">&quot;Error on appending value.&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">appendleft</span>(<span class=\"hljs-params\">self, val: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Adds val to the beginning of the deque.\n        Time complexity: O(1)\n        &gt;&gt;&gt; our_deque_1 = Deque([2, 3])\n        &gt;&gt;&gt; our_deque_1.appendleft(1)\n        &gt;&gt;&gt; our_deque_1\n        [1, 2, 3]\n        &gt;&gt;&gt; our_deque_2 = Deque(&#x27;bc&#x27;)\n        &gt;&gt;&gt; our_deque_2.appendleft(&#x27;a&#x27;)\n        &gt;&gt;&gt; our_deque_2\n        [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]\n        &gt;&gt;&gt; from collections import deque\n        &gt;&gt;&gt; deque_collections_1 = deque([2, 3])\n        &gt;&gt;&gt; deque_collections_1.appendleft(1)\n        &gt;&gt;&gt; deque_collections_1\n        deque([1, 2, 3])\n        &gt;&gt;&gt; deque_collections_2 = deque(&#x27;bc&#x27;)\n        &gt;&gt;&gt; deque_collections_2.appendleft(&#x27;a&#x27;)\n        &gt;&gt;&gt; deque_collections_2\n        deque([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])\n        &gt;&gt;&gt; list(our_deque_1) == list(deque_collections_1)\n        True\n        &gt;&gt;&gt; list(our_deque_2) == list(deque_collections_2)\n        True\n        &quot;&quot;&quot;</span>\n        node = self._Node(val, <span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>)\n        <span class=\"hljs-keyword\">if</span> self.is_empty():\n            <span class=\"hljs-comment\"># front = back</span>\n            self._front = self._back = node\n            self._<span class=\"hljs-built_in\">len</span> = <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-comment\"># connect nodes</span>\n            node.<span class=\"hljs-built_in\">next</span> = self._front\n            self._front.prev = node\n            self._front = node  <span class=\"hljs-comment\"># assign new front to the new node</span>\n\n            self._<span class=\"hljs-built_in\">len</span> += <span class=\"hljs-number\">1</span>\n\n            <span class=\"hljs-comment\"># make sure there were no errors</span>\n            <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> self.is_empty(), <span class=\"hljs-string\">&quot;Error on appending value.&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">extend</span>(<span class=\"hljs-params\">self, <span class=\"hljs-built_in\">iter</span>: Iterable[<span class=\"hljs-type\">Any</span>]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Appends every value of iter to the end of the deque.\n        Time complexity: O(n)\n        &gt;&gt;&gt; our_deque_1 = Deque([1, 2, 3])\n        &gt;&gt;&gt; our_deque_1.extend([4, 5])\n        &gt;&gt;&gt; our_deque_1\n        [1, 2, 3, 4, 5]\n        &gt;&gt;&gt; our_deque_2 = Deque(&#x27;ab&#x27;)\n        &gt;&gt;&gt; our_deque_2.extend(&#x27;cd&#x27;)\n        &gt;&gt;&gt; our_deque_2\n        [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]\n        &gt;&gt;&gt; from collections import deque\n        &gt;&gt;&gt; deque_collections_1 = deque([1, 2, 3])\n        &gt;&gt;&gt; deque_collections_1.extend([4, 5])\n        &gt;&gt;&gt; deque_collections_1\n        deque([1, 2, 3, 4, 5])\n        &gt;&gt;&gt; deque_collections_2 = deque(&#x27;ab&#x27;)\n        &gt;&gt;&gt; deque_collections_2.extend(&#x27;cd&#x27;)\n        &gt;&gt;&gt; deque_collections_2\n        deque([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;])\n        &gt;&gt;&gt; list(our_deque_1) == list(deque_collections_1)\n        True\n        &gt;&gt;&gt; list(our_deque_2) == list(deque_collections_2)\n        True\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">for</span> val <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">iter</span>:\n            self.append(val)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">extendleft</span>(<span class=\"hljs-params\">self, <span class=\"hljs-built_in\">iter</span>: Iterable[<span class=\"hljs-type\">Any</span>]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Appends every value of iter to the beginning of the deque.\n        Time complexity: O(n)\n        &gt;&gt;&gt; our_deque_1 = Deque([1, 2, 3])\n        &gt;&gt;&gt; our_deque_1.extendleft([0, -1])\n        &gt;&gt;&gt; our_deque_1\n        [-1, 0, 1, 2, 3]\n        &gt;&gt;&gt; our_deque_2 = Deque(&#x27;cd&#x27;)\n        &gt;&gt;&gt; our_deque_2.extendleft(&#x27;ba&#x27;)\n        &gt;&gt;&gt; our_deque_2\n        [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]\n        &gt;&gt;&gt; from collections import deque\n        &gt;&gt;&gt; deque_collections_1 = deque([1, 2, 3])\n        &gt;&gt;&gt; deque_collections_1.extendleft([0, -1])\n        &gt;&gt;&gt; deque_collections_1\n        deque([-1, 0, 1, 2, 3])\n        &gt;&gt;&gt; deque_collections_2 = deque(&#x27;cd&#x27;)\n        &gt;&gt;&gt; deque_collections_2.extendleft(&#x27;ba&#x27;)\n        &gt;&gt;&gt; deque_collections_2\n        deque([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;])\n        &gt;&gt;&gt; list(our_deque_1) == list(deque_collections_1)\n        True\n        &gt;&gt;&gt; list(our_deque_2) == list(deque_collections_2)\n        True\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">for</span> val <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">iter</span>:\n            self.appendleft(val)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pop</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-type\">Any</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Removes the last element of the deque and returns it.\n        Time complexity: O(1)\n        @returns topop.val: the value of the node to pop.\n        &gt;&gt;&gt; our_deque = Deque([1, 2, 3, 15182])\n        &gt;&gt;&gt; our_popped = our_deque.pop()\n        &gt;&gt;&gt; our_popped\n        15182\n        &gt;&gt;&gt; our_deque\n        [1, 2, 3]\n        &gt;&gt;&gt; from collections import deque\n        &gt;&gt;&gt; deque_collections = deque([1, 2, 3, 15182])\n        &gt;&gt;&gt; collections_popped = deque_collections.pop()\n        &gt;&gt;&gt; collections_popped\n        15182\n        &gt;&gt;&gt; deque_collections\n        deque([1, 2, 3])\n        &gt;&gt;&gt; list(our_deque) == list(deque_collections)\n        True\n        &gt;&gt;&gt; our_popped == collections_popped\n        True\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-comment\"># make sure the deque has elements to pop</span>\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> self.is_empty(), <span class=\"hljs-string\">&quot;Deque is empty.&quot;</span>\n\n        topop = self._back\n        self._back = self._back.prev  <span class=\"hljs-comment\"># set new back</span>\n        self._back.<span class=\"hljs-built_in\">next</span> = (\n            <span class=\"hljs-literal\">None</span>  <span class=\"hljs-comment\"># drop the last node - python will deallocate memory automatically</span>\n        )\n\n        self._<span class=\"hljs-built_in\">len</span> -= <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">return</span> topop.val\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">popleft</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-type\">Any</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Removes the first element of the deque and returns it.\n        Time complexity: O(1)\n        @returns topop.val: the value of the node to pop.\n        &gt;&gt;&gt; our_deque = Deque([15182, 1, 2, 3])\n        &gt;&gt;&gt; our_popped = our_deque.popleft()\n        &gt;&gt;&gt; our_popped\n        15182\n        &gt;&gt;&gt; our_deque\n        [1, 2, 3]\n        &gt;&gt;&gt; from collections import deque\n        &gt;&gt;&gt; deque_collections = deque([15182, 1, 2, 3])\n        &gt;&gt;&gt; collections_popped = deque_collections.popleft()\n        &gt;&gt;&gt; collections_popped\n        15182\n        &gt;&gt;&gt; deque_collections\n        deque([1, 2, 3])\n        &gt;&gt;&gt; list(our_deque) == list(deque_collections)\n        True\n        &gt;&gt;&gt; our_popped == collections_popped\n        True\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-comment\"># make sure the deque has elements to pop</span>\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> self.is_empty(), <span class=\"hljs-string\">&quot;Deque is empty.&quot;</span>\n\n        topop = self._front\n        self._front = self._front.<span class=\"hljs-built_in\">next</span>  <span class=\"hljs-comment\"># set new front and drop the first node</span>\n        self._front.prev = <span class=\"hljs-literal\">None</span>\n\n        self._<span class=\"hljs-built_in\">len</span> -= <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">return</span> topop.val\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Checks if the deque is empty.\n        Time complexity: O(1)\n        &gt;&gt;&gt; our_deque = Deque([1, 2, 3])\n        &gt;&gt;&gt; our_deque.is_empty()\n        False\n        &gt;&gt;&gt; our_empty_deque = Deque()\n        &gt;&gt;&gt; our_empty_deque.is_empty()\n        True\n        &gt;&gt;&gt; from collections import deque\n        &gt;&gt;&gt; empty_deque_collections = deque()\n        &gt;&gt;&gt; list(our_empty_deque) == list(empty_deque_collections)\n        True\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> self._front <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__len__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Implements len() function. Returns the length of the deque.\n        Time complexity: O(1)\n        &gt;&gt;&gt; our_deque = Deque([1, 2, 3])\n        &gt;&gt;&gt; len(our_deque)\n        3\n        &gt;&gt;&gt; our_empty_deque = Deque()\n        &gt;&gt;&gt; len(our_empty_deque)\n        0\n        &gt;&gt;&gt; from collections import deque\n        &gt;&gt;&gt; deque_collections = deque([1, 2, 3])\n        &gt;&gt;&gt; len(deque_collections)\n        3\n        &gt;&gt;&gt; empty_deque_collections = deque()\n        &gt;&gt;&gt; len(empty_deque_collections)\n        0\n        &gt;&gt;&gt; len(our_empty_deque) == len(empty_deque_collections)\n        True\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> self._<span class=\"hljs-built_in\">len</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__eq__</span>(<span class=\"hljs-params\">self, other: <span class=\"hljs-built_in\">object</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Implements &quot;==&quot; operator. Returns if *self* is equal to *other*.\n        Time complexity: O(n)\n        &gt;&gt;&gt; our_deque_1 = Deque([1, 2, 3])\n        &gt;&gt;&gt; our_deque_2 = Deque([1, 2, 3])\n        &gt;&gt;&gt; our_deque_1 == our_deque_2\n        True\n        &gt;&gt;&gt; our_deque_3 = Deque([1, 2])\n        &gt;&gt;&gt; our_deque_1 == our_deque_3\n        False\n        &gt;&gt;&gt; from collections import deque\n        &gt;&gt;&gt; deque_collections_1 = deque([1, 2, 3])\n        &gt;&gt;&gt; deque_collections_2 = deque([1, 2, 3])\n        &gt;&gt;&gt; deque_collections_1 == deque_collections_2\n        True\n        &gt;&gt;&gt; deque_collections_3 = deque([1, 2])\n        &gt;&gt;&gt; deque_collections_1 == deque_collections_3\n        False\n        &gt;&gt;&gt; (our_deque_1 == our_deque_2) == (deque_collections_1 == deque_collections_2)\n        True\n        &gt;&gt;&gt; (our_deque_1 == our_deque_3) == (deque_collections_1 == deque_collections_3)\n        True\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(other, Deque):\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NotImplemented</span>\n\n        me = self._front\n        oth = other._front\n\n        <span class=\"hljs-comment\"># if the length of the deques are not the same, they are not equal</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self) != <span class=\"hljs-built_in\">len</span>(other):\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n        <span class=\"hljs-keyword\">while</span> me <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> oth <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-comment\"># compare every value</span>\n            <span class=\"hljs-keyword\">if</span> me.val != oth.val:\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n            me = me.<span class=\"hljs-built_in\">next</span>\n            oth = oth.<span class=\"hljs-built_in\">next</span>\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__iter__</span>(<span class=\"hljs-params\">self</span>) -&gt; Deque._Iterator:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Implements iteration.\n        Time complexity: O(1)\n        &gt;&gt;&gt; our_deque = Deque([1, 2, 3])\n        &gt;&gt;&gt; for v in our_deque:\n        ...     print(v)\n        1\n        2\n        3\n        &gt;&gt;&gt; from collections import deque\n        &gt;&gt;&gt; deque_collections = deque([1, 2, 3])\n        &gt;&gt;&gt; for v in deque_collections:\n        ...     print(v)\n        1\n        2\n        3\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> Deque._Iterator(self._front)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Implements representation of the deque.\n        Represents it as a list, with its values between &#x27;[&#x27; and &#x27;]&#x27;.\n        Time complexity: O(n)\n        &gt;&gt;&gt; our_deque = Deque([1, 2, 3])\n        &gt;&gt;&gt; our_deque\n        [1, 2, 3]\n        &quot;&quot;&quot;</span>\n        values_list = []\n        aux = self._front\n        <span class=\"hljs-keyword\">while</span> aux <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-comment\"># append the values in a list to display</span>\n            values_list.append(aux.val)\n            aux = aux.<span class=\"hljs-built_in\">next</span>\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;[&quot;</span> + <span class=\"hljs-string\">&quot;, &quot;</span>.join(<span class=\"hljs-built_in\">repr</span>(val) <span class=\"hljs-keyword\">for</span> val <span class=\"hljs-keyword\">in</span> values_list) + <span class=\"hljs-string\">&quot;]&quot;</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "Dylan Buchi",
      "email": "devybuchi@gmail.com",
      "commits": 1
    },
    {
      "name": "Benjamín García Roqués",
      "email": "62822419+grbenjamin@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "yijoonsu",
      "email": "44707391+paulo9428@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}