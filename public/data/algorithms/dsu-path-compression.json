{
  "slug": "dsu-path-compression",
  "name": "Dsu Path Compression",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "data_structures/dsu_path_compression.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/dsu_path_compression.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief [DSU (Disjoint\n * sets)](https://en.wikipedia.org/wiki/Disjoint-set-data_structure)\n * @details\n * It is a very powerful data structure that keeps track of different\n * clusters(sets) of elements, these sets are disjoint(doesnot have a common\n * element). Disjoint sets uses cases : for finding connected components in a\n * graph, used in Kruskal&#x27;s algorithm for finding Minimum Spanning tree.\n * Operations that can be performed:\n * 1) UnionSet(i,j): add(element i and j to the set)\n * 2) findSet(i): returns the representative of the set to which i belogngs to.\n * 3) get_max(i),get_min(i) : returns the maximum and minimum\n * Below is the class-based approach which uses the heuristic of path\n * compression. Using path compression in findSet(i),we are able to get to the\n * representative of i in O(1) time.\n * @author [AayushVyasKIIT](https://github.com/AayushVyasKIIT)\n * @see dsu_union_rank.cpp\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-keyword\">using</span> std::cout;\n<span class=\"hljs-keyword\">using</span> std::endl;\n<span class=\"hljs-keyword\">using</span> std::vector;\n\n<span class=\"hljs-comment\">/**\n * @brief Disjoint sets union data structure, class based representation.\n * @param n number of elements\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">dsu</span> {\n <span class=\"hljs-keyword\">private</span>:\n    vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; p;           <span class=\"hljs-comment\">///&lt; keeps track of the parent of ith element</span>\n    vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; depth;       <span class=\"hljs-comment\">///&lt; tracks the depth(rank) of i in the tree</span>\n    vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; setSize;     <span class=\"hljs-comment\">///&lt; size of each chunk(set)</span>\n    vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; maxElement;  <span class=\"hljs-comment\">///&lt; maximum of each set to which i belongs to</span>\n    vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; minElement;  <span class=\"hljs-comment\">///&lt; minimum of each set to which i belongs to</span>\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/**\n     * @brief contructor for initialising all data members.\n     * @param n number of elements\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">dsu</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n)</span> </span>{\n        p.<span class=\"hljs-built_in\">assign</span>(n, <span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-comment\">/// initially, all of them are their own parents</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n            p[i] = i;\n        }\n        <span class=\"hljs-comment\">/// initially all have depth are equals to zero</span>\n        depth.<span class=\"hljs-built_in\">assign</span>(n, <span class=\"hljs-number\">0</span>);\n        maxElement.<span class=\"hljs-built_in\">assign</span>(n, <span class=\"hljs-number\">0</span>);\n        minElement.<span class=\"hljs-built_in\">assign</span>(n, <span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n            depth[i] = <span class=\"hljs-number\">0</span>;\n            maxElement[i] = i;\n            minElement[i] = i;\n        }\n        setSize.<span class=\"hljs-built_in\">assign</span>(n, <span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-comment\">/// initially set size will be equals to one</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n            setSize[i] = <span class=\"hljs-number\">1</span>;\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief Method to find the representative of the set to which i belongs\n     * to, T(n) = O(1)\n     * @param i element of some set\n     * @returns representative of the set to which i belongs to.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">findSet</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> i)</span> </span>{\n        <span class=\"hljs-comment\">/// using path compression</span>\n        <span class=\"hljs-keyword\">if</span> (p[i] == i) {\n            <span class=\"hljs-keyword\">return</span> i;\n        }\n        <span class=\"hljs-keyword\">return</span> (p[i] = <span class=\"hljs-built_in\">findSet</span>(p[i]));\n    }\n    <span class=\"hljs-comment\">/**\n     * @brief Method that combines two disjoint sets to which i and j belongs to\n     * and make a single set having a common representative.\n     * @param i element of some set\n     * @param j element of some set\n     * @returns void\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">UnionSet</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> i, <span class=\"hljs-type\">uint64_t</span> j)</span> </span>{\n        <span class=\"hljs-comment\">/// check if both belongs to the same set or not</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isSame</span>(i, j)) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n\n        <span class=\"hljs-comment\">// we find the representative of the i and j</span>\n        <span class=\"hljs-type\">uint64_t</span> x = <span class=\"hljs-built_in\">findSet</span>(i);\n        <span class=\"hljs-type\">uint64_t</span> y = <span class=\"hljs-built_in\">findSet</span>(j);\n\n        <span class=\"hljs-comment\">/// always keeping the min as x</span>\n        <span class=\"hljs-comment\">/// shallow tree</span>\n        <span class=\"hljs-keyword\">if</span> (depth[x] &gt; depth[y]) {\n            std::<span class=\"hljs-built_in\">swap</span>(x, y);\n        }\n        <span class=\"hljs-comment\">/// making the shallower root&#x27;s parent the deeper root</span>\n        p[x] = y;\n\n        <span class=\"hljs-comment\">/// if same depth, then increase one&#x27;s depth</span>\n        <span class=\"hljs-keyword\">if</span> (depth[x] == depth[y]) {\n            depth[y]++;\n        }\n        <span class=\"hljs-comment\">/// total size of the resultant set</span>\n        setSize[y] += setSize[x];\n        <span class=\"hljs-comment\">/// changing the maximum elements</span>\n        maxElement[y] = std::<span class=\"hljs-built_in\">max</span>(maxElement[x], maxElement[y]);\n        minElement[y] = std::<span class=\"hljs-built_in\">min</span>(minElement[x], minElement[y]);\n    }\n    <span class=\"hljs-comment\">/**\n     * @brief A utility function which check whether i and j belongs to\n     * same set or not\n     * @param i element of some set\n     * @param j element of some set\n     * @returns `true` if element `i` and `j` ARE in the same set\n     * @returns `false` if element `i` and `j` are NOT in same set\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">isSame</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> i, <span class=\"hljs-type\">uint64_t</span> j)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">findSet</span>(i) == <span class=\"hljs-built_in\">findSet</span>(j)) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-comment\">/**\n     * @brief prints the minimum, maximum and size of the set to which i belongs\n     * to\n     * @param i element of some set\n     * @returns void\n     */</span>\n    <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> i)</span> </span>{\n        vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; ans;\n        ans.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">get_min</span>(i));\n        ans.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">get_max</span>(i));\n        ans.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">size</span>(i));\n        <span class=\"hljs-keyword\">return</span> ans;\n    }\n    <span class=\"hljs-comment\">/**\n     * @brief A utility function that returns the size of the set to which i\n     * belongs to\n     * @param i element of some set\n     * @returns size of the set to which i belongs to\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">size</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> i)</span> </span>{ <span class=\"hljs-keyword\">return</span> setSize[<span class=\"hljs-built_in\">findSet</span>(i)]; }\n    <span class=\"hljs-comment\">/**\n     * @brief A utility function that returns the max element of the set to\n     * which i belongs to\n     * @param i element of some set\n     * @returns maximum of the set to which i belongs to\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">get_max</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> i)</span> </span>{ <span class=\"hljs-keyword\">return</span> maxElement[<span class=\"hljs-built_in\">findSet</span>(i)]; }\n    <span class=\"hljs-comment\">/**\n     * @brief A utility function that returns the min element of the set to\n     * which i belongs to\n     * @param i element of some set\n     * @returns minimum of the set to which i belongs to\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">get_min</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> i)</span> </span>{ <span class=\"hljs-keyword\">return</span> minElement[<span class=\"hljs-built_in\">findSet</span>(i)]; }\n};\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations, 1st test\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test1</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// the minimum, maximum, and size of the set</span>\n    <span class=\"hljs-type\">uint64_t</span> n = <span class=\"hljs-number\">10</span>;  <span class=\"hljs-comment\">///&lt; number of items</span>\n    <span class=\"hljs-function\">dsu <span class=\"hljs-title\">d</span><span class=\"hljs-params\">(n + <span class=\"hljs-number\">1</span>)</span></span>;     <span class=\"hljs-comment\">///&lt; object of class disjoint sets</span>\n    <span class=\"hljs-comment\">// set 1</span>\n    d.<span class=\"hljs-built_in\">UnionSet</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">// performs union operation on 1 and 2</span>\n    d.<span class=\"hljs-built_in\">UnionSet</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>);  <span class=\"hljs-comment\">// performs union operation on 1 and 4</span>\n    vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; ans = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>};\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; ans.<span class=\"hljs-built_in\">size</span>(); i++) {\n        <span class=\"hljs-built_in\">assert</span>(d.<span class=\"hljs-built_in\">get</span>(<span class=\"hljs-number\">4</span>).<span class=\"hljs-built_in\">at</span>(i) == ans[i]);  <span class=\"hljs-comment\">// makes sure algorithm works fine</span>\n    }\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;1st test passed!&quot;</span> &lt;&lt; endl;\n}\n<span class=\"hljs-comment\">/**\n * @brief Self-implementations, 2nd test\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// the minimum, maximum, and size of the set</span>\n    <span class=\"hljs-type\">uint64_t</span> n = <span class=\"hljs-number\">10</span>;  <span class=\"hljs-comment\">///&lt; number of items</span>\n    <span class=\"hljs-function\">dsu <span class=\"hljs-title\">d</span><span class=\"hljs-params\">(n + <span class=\"hljs-number\">1</span>)</span></span>;     <span class=\"hljs-comment\">///&lt; object of class disjoint sets</span>\n    <span class=\"hljs-comment\">// set 1</span>\n    d.<span class=\"hljs-built_in\">UnionSet</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>);\n    d.<span class=\"hljs-built_in\">UnionSet</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>);\n    d.<span class=\"hljs-built_in\">UnionSet</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>);\n    vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; ans = {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>};\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; ans.<span class=\"hljs-built_in\">size</span>(); i++) {\n        <span class=\"hljs-built_in\">assert</span>(d.<span class=\"hljs-built_in\">get</span>(<span class=\"hljs-number\">3</span>).<span class=\"hljs-built_in\">at</span>(i) == ans[i]);  <span class=\"hljs-comment\">// makes sure algorithm works fine</span>\n    }\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;2nd test passed!&quot;</span> &lt;&lt; endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n * */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">uint64_t</span> n = <span class=\"hljs-number\">10</span>;  <span class=\"hljs-comment\">///&lt; number of items</span>\n    <span class=\"hljs-function\">dsu <span class=\"hljs-title\">d</span><span class=\"hljs-params\">(n + <span class=\"hljs-number\">1</span>)</span></span>;     <span class=\"hljs-comment\">///&lt; object of class disjoint sets</span>\n\n    <span class=\"hljs-built_in\">test1</span>();  <span class=\"hljs-comment\">// run 1st test case</span>\n    <span class=\"hljs-built_in\">test2</span>();  <span class=\"hljs-comment\">// run 2nd test case</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Lajat5",
      "email": "64376519+Lazeeez@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aayush Vyas",
      "email": "1830002@kiit.ac.in",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}