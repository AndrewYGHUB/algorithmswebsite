{
  "slug": "dynamic",
  "name": "Dynamic",
  "categories": [
    "problems",
    "dynamiccoinchange"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./Algorithms/Problems/CoinChange/DynamicCoinChangeSolver.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/Algorithms/Problems/CoinChange/DynamicCoinChangeSolver.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n<span class=\"hljs-keyword\">using</span> System.Linq;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Problems.CoinChange</span>\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DynamicCoinChangeSolver</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Generates an array of changes for current coin.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> For instance, having coin C = 6 and array A = [1,3,4] it returns an array R = [2,3,5].</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Because, 6 - 4 = 2, 6 - 3 = 3, 6 - 1 = 5.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;coin&quot;&gt;</span>The value of the coin to be exchanged.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;coins&quot;&gt;</span>An array of available coins.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Array of changes of current coins by available coins.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span>[] <span class=\"hljs-title\">GenerateSingleCoinChanges</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> coin, <span class=\"hljs-built_in\">int</span>[] coins</span>)</span>\n        {\n            ValidateCoin(coin);\n            ValidateCoinsArray(coins);\n\n            <span class=\"hljs-keyword\">var</span> coinsArrayCopy = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[coins.Length];\n\n            Array.Copy(coins, coinsArrayCopy, coins.Length);\n            Array.Sort(coinsArrayCopy);\n            Array.Reverse(coinsArrayCopy);\n\n            <span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-keyword\">new</span> List&lt;<span class=\"hljs-built_in\">int</span>&gt;();\n\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> item <span class=\"hljs-keyword\">in</span> coinsArrayCopy)\n            {\n                <span class=\"hljs-keyword\">if</span> (item &gt; coin)\n                {\n                    <span class=\"hljs-keyword\">continue</span>;\n                }\n\n                <span class=\"hljs-keyword\">var</span> difference = coin - item;\n\n                list.Add(difference);\n            }\n\n            <span class=\"hljs-keyword\">var</span> result = list.ToArray();\n\n            <span class=\"hljs-keyword\">return</span> result;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Given a positive integer N, such as coin.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Generates a change dictionary for all values [1,N].</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Used in so-called backward induction in search of the minimum exchange.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;coin&quot;&gt;</span>The value of coin.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;coins&quot;&gt;</span>Array of available coins.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Change dictionary for all values [1,N], where N is the coin.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Dictionary&lt;<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>[]&gt; GenerateChangesDictionary(<span class=\"hljs-built_in\">int</span> coin, <span class=\"hljs-built_in\">int</span>[] coins)\n        {\n            <span class=\"hljs-keyword\">var</span> dict = <span class=\"hljs-keyword\">new</span> Dictionary&lt;<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>[]&gt;();\n            <span class=\"hljs-keyword\">var</span> currentCoin = <span class=\"hljs-number\">1</span>;\n\n            <span class=\"hljs-keyword\">while</span> (currentCoin &lt;= coin)\n            {\n                <span class=\"hljs-keyword\">var</span> changeArray = GenerateSingleCoinChanges(currentCoin, coins);\n                dict[currentCoin] = changeArray;\n                currentCoin++;\n            }\n\n            <span class=\"hljs-keyword\">return</span> dict;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Gets a next coin value, such that changes array contains the minimal change overall possible changes.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> For example, having coin N = 6 and A = [1,3,4] coins array.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> The minimum next coin for 6 will be 3, because changes of 3 by A = [1,3,4] contains 0, the minimal change.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;coin&quot;&gt;</span>Coin to be exchanged.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;exchanges&quot;&gt;</span>Dictionary of exchanges for [1, coin].<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Index of the next coin with minimal exchange.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">GetMinimalNextCoin</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> coin, Dictionary&lt;<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>[]&gt; exchanges</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> nextCoin = <span class=\"hljs-built_in\">int</span>.MaxValue;\n            <span class=\"hljs-keyword\">var</span> minChange = <span class=\"hljs-built_in\">int</span>.MaxValue;\n\n            <span class=\"hljs-keyword\">var</span> coinChanges = exchanges[coin];\n\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> change <span class=\"hljs-keyword\">in</span> coinChanges)\n            {\n                <span class=\"hljs-keyword\">if</span> (change == <span class=\"hljs-number\">0</span>)\n                {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n                }\n\n                <span class=\"hljs-keyword\">var</span> currentChange = exchanges[change];\n                <span class=\"hljs-keyword\">var</span> min = currentChange.Min();\n\n                <span class=\"hljs-keyword\">var</span> minIsLesser = min &lt; minChange;\n\n                <span class=\"hljs-keyword\">if</span> (minIsLesser)\n                {\n                    nextCoin = change;\n                    minChange = min;\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> nextCoin;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Performs a coin change such that an amount of coins is minimal.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;coin&quot;&gt;</span>The value of coin to be exchanged.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;coins&quot;&gt;</span>An array of available coins.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Array of exchanges.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span>[] <span class=\"hljs-title\">MakeCoinChangeDynamic</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> coin, <span class=\"hljs-built_in\">int</span>[] coins</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> changesTable = GenerateChangesDictionary(coin, coins);\n            <span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-keyword\">new</span> List&lt;<span class=\"hljs-built_in\">int</span>&gt;();\n\n            <span class=\"hljs-keyword\">var</span> currentCoin = coin;\n            <span class=\"hljs-keyword\">var</span> nextCoin = <span class=\"hljs-built_in\">int</span>.MaxValue;\n\n            <span class=\"hljs-keyword\">while</span> (nextCoin != <span class=\"hljs-number\">0</span>)\n            {\n                nextCoin = GetMinimalNextCoin(currentCoin, changesTable);\n                <span class=\"hljs-keyword\">var</span> difference = currentCoin - nextCoin;\n                list.Add(difference);\n                currentCoin = nextCoin;\n            }\n\n            <span class=\"hljs-keyword\">var</span> result = list.ToArray();\n\n            <span class=\"hljs-keyword\">return</span> result;\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ValidateCoin</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> coin</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (coin &lt;= <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">$&quot;The coin cannot be lesser or equal to zero <span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(coin)}</span>.&quot;</span>);\n            }\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ValidateCoinsArray</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span>[] coinsArray</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> coinsAsArray = coinsArray.ToArray();\n\n            <span class=\"hljs-keyword\">if</span> (coinsAsArray.Length == <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">$&quot;Coins array cannot be empty <span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(coinsAsArray)}</span>.&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">var</span> coinsContainOne = coinsAsArray.Any(x =&gt; x == <span class=\"hljs-number\">1</span>);\n\n            <span class=\"hljs-keyword\">if</span> (!coinsContainOne)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">$&quot;Coins array must contain coin 1 <span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(coinsAsArray)}</span>.&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">var</span> containsNonPositive = coinsAsArray.Any(x =&gt; x &lt;= <span class=\"hljs-number\">0</span>);\n\n            <span class=\"hljs-keyword\">if</span> (containsNonPositive)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(\n                    <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(coinsAsArray)}</span> cannot contain numbers less than or equal to zero&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">var</span> containsDuplicates = coinsAsArray.GroupBy(x =&gt; x).Any(g =&gt; g.Count() &gt; <span class=\"hljs-number\">1</span>);\n\n            <span class=\"hljs-keyword\">if</span> (containsDuplicates)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">$&quot;Coins array cannot contain duplicates <span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(coinsAsArray)}</span>.&quot;</span>);\n            }\n        }\n    }\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}