{
  "slug": "fibonacci-numbers",
  "name": "Fibonacci Numbers",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {
    "en": "<p>In mathematics, the Fibonacci numbers commonly denoted F(n), form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1.  The Sequence looks like this:</p>\n<p><code>[0, 1, 1, 2, 3, 5, 8, 13, 21, 34,  ...]</code></p>\n<h2>Applications</h2>\n<p>Finding\n<code>N-th</code> member of this sequence would be useful in many Applications:</p>\n<ul>\n<li>Recently Fibonacci sequence and the golden ratio are of great interest to researchers in many fields of</li>\n</ul>\n<p>science including high energy physics, quantum mechanics, Cryptography and Coding.</p>\n<h2>Steps</h2>\n<ol>\n<li>Prepare Base Matrice</li>\n<li>Calculate the power of this Matrice</li>\n<li>Take Corresponding value from Matrix</li>\n</ol>\n<h2>Example</h2>\n<p>Find <code>8-th</code> member of Fibonacci</p>\n<h3>Step 0</h3>\n<pre><code class=\"hljs language-reasonml\"><span class=\"hljs-pattern-match\">| <span class=\"hljs-constructor\">F(<span class=\"hljs-params\">n</span>+1)</span>  <span class=\"hljs-constructor\">F(<span class=\"hljs-params\">n</span>)</span>  |\n| <span class=\"hljs-constructor\">F(<span class=\"hljs-params\">n</span>)</span>    <span class=\"hljs-constructor\">F(<span class=\"hljs-params\">n</span>-1)</span>|\n</span></code></pre>\n<h3>Step 1</h3>\n<pre><code class=\"hljs language-gherkin\">Calculate matrix^1\n|<span class=\"hljs-string\"> 1 1 </span>|\n|<span class=\"hljs-string\"> 1 0 </span>|\n</code></pre>\n<h3>Step 2</h3>\n<pre><code class=\"hljs language-gherkin\">Calculate matrix^2\n|<span class=\"hljs-string\"> 2 1 </span>|\n|<span class=\"hljs-string\"> 1 1 </span>|\n</code></pre>\n<h3>Step 3</h3>\n<pre><code class=\"hljs language-gherkin\">Calculate matrix^4\n|<span class=\"hljs-string\"> 5 3 </span>|\n|<span class=\"hljs-string\"> 3 2 </span>|\n</code></pre>\n<h3>Step 4</h3>\n<pre><code class=\"hljs language-gherkin\">Calculate matrix^8\n|<span class=\"hljs-string\"> 34 21 </span>|\n|<span class=\"hljs-string\"> 21 13 </span>|\n</code></pre>\n<h3>Step 5</h3>\n<p>F(8)=21</p>\n<h2>Implementation</h2>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/C/blob/master/misc/fibonacci.c\">C</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/math/fibonacci.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Elixir/blob/master/lib/dynamic_programming/fibonacci.ex\">Elixir</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/F-Sharp/blob/main/Algorithms/Math/Fibonacci.fs\">F#</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Go/blob/master/dynamic/fibonacci.go\">Go</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Haskell/blob/master/src/Maths/Fibonacci.hs\">Haskell</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/src/main/java/com/thealgorithms/maths/FibonacciNumber.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Javascript/blob/master/Maths/Fibonacci.js\">JavaScript</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/PHP/blob/master/Maths/Fibonacci.php\">PHP</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/maths/fibonacci.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/R/blob/master/Mathematics/Fibonacci.R\">R</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/maths/fibonacci.rb\">Ruby</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/fibonacci.rs\">Rust</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Scala/blob/master/src/main/scala/Mathematics/Fibonacci.scala\">Scala</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Swift/blob/master/recursion/fibonacci.swift\">Swift</a></li>\n</ul>\n<h2>Video URL</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=EEb6JP3NXBI\">Youtube</a></li>\n</ul>\n<h2>Others</h2>\n<ul>\n<li><a href=\"https://brilliant.org/wiki/fast-fibonacci-transform/\">Proof</a></li>\n</ul>"
  },
  "implementations": {
    "python": {
      "dir": "maths/fibonacci.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/fibonacci.py",
      "code": "<span class=\"hljs-comment\"># fibonacci.py</span>\n<span class=\"hljs-string\">&quot;&quot;&quot;\nCalculates the Fibonacci sequence using iteration, recursion, memoization,\nand a simplified form of Binet&#x27;s formula\n\nNOTE 1: the iterative, recursive, memoization functions are more accurate than\nthe Binet&#x27;s formula function because the Binet formula function  uses floats\n\nNOTE 2: the Binet&#x27;s formula function is much more limited in the size of inputs\nthat it can handle due to the size limitations of Python floats\n\nRESULTS: (n = 20)\nfib_iterative runtime: 0.0055 ms\nfib_recursive runtime: 6.5627 ms\nfib_memoization runtime: 0.0107 ms\nfib_binet runtime: 0.0174 ms\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> sqrt\n<span class=\"hljs-keyword\">from</span> time <span class=\"hljs-keyword\">import</span> time\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">time_func</span>(<span class=\"hljs-params\">func, *args, **kwargs</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Times the execution of a function with parameters\n    &quot;&quot;&quot;</span>\n    start = time()\n    output = func(*args, **kwargs)\n    end = time()\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">int</span>(end - start) &gt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{func.__name__}</span> runtime: <span class=\"hljs-subst\">{(end - start):<span class=\"hljs-number\">0.4</span>f}</span> s&quot;</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{func.__name__}</span> runtime: <span class=\"hljs-subst\">{(end - start) * <span class=\"hljs-number\">1000</span>:<span class=\"hljs-number\">0.4</span>f}</span> ms&quot;</span>)\n    <span class=\"hljs-keyword\">return</span> output\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fib_iterative</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculates the first n (0-indexed) Fibonacci numbers using iteration\n    &gt;&gt;&gt; fib_iterative(0)\n    [0]\n    &gt;&gt;&gt; fib_iterative(1)\n    [0, 1]\n    &gt;&gt;&gt; fib_iterative(5)\n    [0, 1, 1, 2, 3, 5]\n    &gt;&gt;&gt; fib_iterative(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    &gt;&gt;&gt; fib_iterative(-1)\n    Traceback (most recent call last):\n    ...\n    Exception: n is negative\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;n is negative&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-number\">0</span>]\n    fib = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n - <span class=\"hljs-number\">1</span>):\n        fib.append(fib[-<span class=\"hljs-number\">1</span>] + fib[-<span class=\"hljs-number\">2</span>])\n    <span class=\"hljs-keyword\">return</span> fib\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fib_recursive</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculates the first n (0-indexed) Fibonacci numbers using recursion\n    &gt;&gt;&gt; fib_iterative(0)\n    [0]\n    &gt;&gt;&gt; fib_iterative(1)\n    [0, 1]\n    &gt;&gt;&gt; fib_iterative(5)\n    [0, 1, 1, 2, 3, 5]\n    &gt;&gt;&gt; fib_iterative(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    &gt;&gt;&gt; fib_iterative(-1)\n    Traceback (most recent call last):\n    ...\n    Exception: n is negative\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fib_recursive_term</span>(<span class=\"hljs-params\">i: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Calculates the i-th (0-indexed) Fibonacci number using recursion\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> i &lt; <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;n is negative&quot;</span>)\n        <span class=\"hljs-keyword\">if</span> i &lt; <span class=\"hljs-number\">2</span>:\n            <span class=\"hljs-keyword\">return</span> i\n        <span class=\"hljs-keyword\">return</span> fib_recursive_term(i - <span class=\"hljs-number\">1</span>) + fib_recursive_term(i - <span class=\"hljs-number\">2</span>)\n\n    <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;n is negative&quot;</span>)\n    <span class=\"hljs-keyword\">return</span> [fib_recursive_term(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n + <span class=\"hljs-number\">1</span>)]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fib_memoization</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculates the first n (0-indexed) Fibonacci numbers using memoization\n    &gt;&gt;&gt; fib_memoization(0)\n    [0]\n    &gt;&gt;&gt; fib_memoization(1)\n    [0, 1]\n    &gt;&gt;&gt; fib_memoization(5)\n    [0, 1, 1, 2, 3, 5]\n    &gt;&gt;&gt; fib_memoization(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    &gt;&gt;&gt; fib_iterative(-1)\n    Traceback (most recent call last):\n    ...\n    Exception: n is negative\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;n is negative&quot;</span>)\n    <span class=\"hljs-comment\"># Cache must be outside recursuive function</span>\n    <span class=\"hljs-comment\"># other it will reset every time it calls itself.</span>\n    cache: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>] = {<span class=\"hljs-number\">0</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>: <span class=\"hljs-number\">1</span>}  <span class=\"hljs-comment\"># Prefilled cache</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rec_fn_memoized</span>(<span class=\"hljs-params\">num: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-keyword\">if</span> num <span class=\"hljs-keyword\">in</span> cache:\n            <span class=\"hljs-keyword\">return</span> cache[num]\n\n        value = rec_fn_memoized(num - <span class=\"hljs-number\">1</span>) + rec_fn_memoized(num - <span class=\"hljs-number\">2</span>)\n        cache[num] = value\n        <span class=\"hljs-keyword\">return</span> value\n\n    <span class=\"hljs-keyword\">return</span> [rec_fn_memoized(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n + <span class=\"hljs-number\">1</span>)]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fib_binet</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculates the first n (0-indexed) Fibonacci numbers using a simplified form\n    of Binet&#x27;s formula:\n    https://en.m.wikipedia.org/wiki/Fibonacci_number#Computation_by_rounding\n\n    NOTE 1: this function diverges from fib_iterative at around n = 71, likely\n    due to compounding floating-point arithmetic errors\n\n    NOTE 2: this function doesn&#x27;t accept n &gt;= 1475 because it overflows\n    thereafter due to the size limitations of Python floats\n    &gt;&gt;&gt; fib_binet(0)\n    [0]\n    &gt;&gt;&gt; fib_binet(1)\n    [0, 1]\n    &gt;&gt;&gt; fib_binet(5)\n    [0, 1, 1, 2, 3, 5]\n    &gt;&gt;&gt; fib_binet(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    &gt;&gt;&gt; fib_binet(-1)\n    Traceback (most recent call last):\n    ...\n    Exception: n is negative\n    &gt;&gt;&gt; fib_binet(1475)\n    Traceback (most recent call last):\n    ...\n    Exception: n is too large\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;n is negative&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> n &gt;= <span class=\"hljs-number\">1475</span>:\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;n is too large&quot;</span>)\n    sqrt_5 = sqrt(<span class=\"hljs-number\">5</span>)\n    phi = (<span class=\"hljs-number\">1</span> + sqrt_5) / <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-built_in\">round</span>(phi**i / sqrt_5) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n + <span class=\"hljs-number\">1</span>)]\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    num = <span class=\"hljs-number\">20</span>\n    time_func(fib_iterative, num)\n    time_func(fib_recursive, num)\n    time_func(fib_memoization, num)\n    time_func(fib_binet, num)\n"
    },
    "javascript": {
      "dir": "Maths/Fibonacci.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/Fibonacci.js",
      "code": "<span class=\"hljs-comment\">// https://en.wikipedia.org/wiki/Generalizations_of_Fibonacci_numbers#Extension_to_negative_integers</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">FibonacciIterative</span> = (<span class=\"hljs-params\">num</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> isNeg = num &lt; <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">if</span> (isNeg) num *= -<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">const</span> sequence = [<span class=\"hljs-number\">0</span>]\n\n  <span class=\"hljs-keyword\">if</span> (num &gt;= <span class=\"hljs-number\">1</span>) sequence.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-keyword\">if</span> (num &gt;= <span class=\"hljs-number\">2</span>) sequence.<span class=\"hljs-title function_\">push</span>(isNeg ? -<span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">1</span>)\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">2</span>; i &lt; num; i++) {\n    sequence.<span class=\"hljs-title function_\">push</span>(\n      isNeg ? sequence[i - <span class=\"hljs-number\">1</span>] - sequence[i] : sequence[i] + sequence[i - <span class=\"hljs-number\">1</span>]\n    )\n  }\n\n  <span class=\"hljs-keyword\">return</span> sequence\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">FibonacciGenerator</span> = <span class=\"hljs-keyword\">function</span> * (neg) {\n  <span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">yield</span> a\n  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n    <span class=\"hljs-keyword\">yield</span> b;\n    [a, b] = neg ? [b, a - b] : [b, a + b]\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> list = []\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">FibonacciRecursive</span> = (<span class=\"hljs-params\">num</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> isNeg = num &lt; <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">if</span> (isNeg) num *= -<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">switch</span> (list.<span class=\"hljs-property\">length</span>) {\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:\n        list.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">FibonacciRecursive</span>(num)\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n        list.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">FibonacciRecursive</span>(num)\n      <span class=\"hljs-keyword\">case</span> num + <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span> list\n      <span class=\"hljs-attr\">default</span>:\n        list.<span class=\"hljs-title function_\">push</span>(list.<span class=\"hljs-title function_\">at</span>(-<span class=\"hljs-number\">1</span>) + list.<span class=\"hljs-title function_\">at</span>(-<span class=\"hljs-number\">2</span>))\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">FibonacciRecursive</span>(num)\n    }\n  })().<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">fib, i</span>) =&gt;</span> fib * (isNeg ? (-<span class=\"hljs-number\">1</span>) ** (i + <span class=\"hljs-number\">1</span>) : <span class=\"hljs-number\">1</span>))\n}\n\n<span class=\"hljs-keyword\">const</span> dict = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>()\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">FibonacciRecursiveDP</span> = (<span class=\"hljs-params\">stairs</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> isNeg = stairs &lt; <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">if</span> (isNeg) stairs *= -<span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-keyword\">if</span> (stairs &lt;= <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> stairs\n\n  <span class=\"hljs-comment\">// Memoize stair count</span>\n  <span class=\"hljs-keyword\">if</span> (dict.<span class=\"hljs-title function_\">has</span>(stairs)) <span class=\"hljs-keyword\">return</span> (isNeg ? (-<span class=\"hljs-number\">1</span>) ** (stairs + <span class=\"hljs-number\">1</span>) : <span class=\"hljs-number\">1</span>) * dict.<span class=\"hljs-title function_\">get</span>(stairs)\n\n  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-title class_\">FibonacciRecursiveDP</span>(stairs - <span class=\"hljs-number\">1</span>) + <span class=\"hljs-title class_\">FibonacciRecursiveDP</span>(stairs - <span class=\"hljs-number\">2</span>)\n\n  dict.<span class=\"hljs-title function_\">set</span>(stairs, res)\n\n  <span class=\"hljs-keyword\">return</span> (isNeg ? (-<span class=\"hljs-number\">1</span>) ** (stairs + <span class=\"hljs-number\">1</span>) : <span class=\"hljs-number\">1</span>) * res\n}\n\n<span class=\"hljs-comment\">// Algorithms</span>\n<span class=\"hljs-comment\">// Calculates Fibonacci(n) such that Fibonacci(n) = Fibonacci(n - 1) + Fibonacci(n - 2)</span>\n<span class=\"hljs-comment\">// Fibonacci(0) = Fibonacci(1) = 1</span>\n<span class=\"hljs-comment\">// Uses a bottom up dynamic programming approach</span>\n<span class=\"hljs-comment\">// Solve each sub-problem once, using results of previous sub-problems</span>\n<span class=\"hljs-comment\">// which are n-1 and n-2 for Fibonacci numbers</span>\n<span class=\"hljs-comment\">// Although this algorithm is linear in space and time as a function</span>\n<span class=\"hljs-comment\">// of the input value n, it is exponential in the size of n as</span>\n<span class=\"hljs-comment\">// a function of the number of input bits</span>\n<span class=\"hljs-comment\">// @Satzyakiz</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">FibonacciDpWithoutRecursion</span> = (<span class=\"hljs-params\">num</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> isNeg = num &lt; <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">if</span> (isNeg) num *= -<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">const</span> table = [<span class=\"hljs-number\">0</span>]\n  table.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">1</span>)\n  table.<span class=\"hljs-title function_\">push</span>(isNeg ? -<span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">2</span>; i &lt; num; ++i) {\n    table.<span class=\"hljs-title function_\">push</span>(\n      isNeg ? table[i - <span class=\"hljs-number\">1</span>] - table[i] : table[i] + table[i - <span class=\"hljs-number\">1</span>]\n    )\n  }\n  <span class=\"hljs-keyword\">return</span> table\n}\n\n<span class=\"hljs-comment\">// Using Matrix exponentiation to find n-th fibonacci in O(log n) time</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">copyMatrix</span> = (<span class=\"hljs-params\">A</span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> A.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> row.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">cell</span> =&gt;</span> cell))\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Identity</span> = (<span class=\"hljs-params\">size</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> isBigInt = <span class=\"hljs-keyword\">typeof</span> size === <span class=\"hljs-string\">&#x27;bigint&#x27;</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">ZERO</span> = isBigInt ? <span class=\"hljs-number\">0n</span> : <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">ONE</span> = isBigInt ? <span class=\"hljs-number\">1n</span> : <span class=\"hljs-number\">1</span>\n  size = <span class=\"hljs-title class_\">Number</span>(size)\n  <span class=\"hljs-keyword\">const</span> I = <span class=\"hljs-title class_\">Array</span>(size).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-literal\">null</span>).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title class_\">Array</span>(size).<span class=\"hljs-title function_\">fill</span>())\n  <span class=\"hljs-keyword\">return</span> I.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">row, rowIdx</span>) =&gt;</span> row.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">_col, colIdx</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> rowIdx === colIdx ? <span class=\"hljs-variable constant_\">ONE</span> : <span class=\"hljs-variable constant_\">ZERO</span>\n  }))\n}\n\n<span class=\"hljs-comment\">// A of size (l x m) and B of size (m x n)</span>\n<span class=\"hljs-comment\">// product C will be of size (l x n).</span>\n<span class=\"hljs-comment\">// both matrices must have same-type numeric values</span>\n<span class=\"hljs-comment\">// either both BigInt or both Number</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">matrixMultiply</span> = (<span class=\"hljs-params\">A, B</span>) =&gt; {\n  A = <span class=\"hljs-title function_\">copyMatrix</span>(A)\n  B = <span class=\"hljs-title function_\">copyMatrix</span>(B)\n  <span class=\"hljs-keyword\">const</span> isBigInt = <span class=\"hljs-keyword\">typeof</span> A[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] === <span class=\"hljs-string\">&#x27;bigint&#x27;</span>\n  <span class=\"hljs-keyword\">const</span> l = A.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">const</span> m = B.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">const</span> n = B[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span> <span class=\"hljs-comment\">// Assuming non-empty matrices</span>\n  <span class=\"hljs-keyword\">const</span> C = <span class=\"hljs-title class_\">Array</span>(l).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-literal\">null</span>).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title class_\">Array</span>(n).<span class=\"hljs-title function_\">fill</span>())\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; l; i++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) {\n      C[i][j] = isBigInt ? <span class=\"hljs-number\">0n</span> : <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> k = <span class=\"hljs-number\">0</span>; k &lt; m; k++) {\n        C[i][j] += A[i][k] * B[k][j]\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> C\n}\n\n<span class=\"hljs-comment\">/**\n * Computes A raised to the power n i.e. pow(A, n) where A is a square matrix\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">*</span>} A the square matrix\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">*</span>} n the exponent\n */</span>\n<span class=\"hljs-comment\">// A is a square matrix</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">matrixExpo</span> = (<span class=\"hljs-params\">A, n</span>) =&gt; {\n  A = <span class=\"hljs-title function_\">copyMatrix</span>(A)\n  <span class=\"hljs-keyword\">const</span> isBigInt = <span class=\"hljs-keyword\">typeof</span> n === <span class=\"hljs-string\">&#x27;bigint&#x27;</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">ZERO</span> = isBigInt ? <span class=\"hljs-number\">0n</span> : <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">TWO</span> = isBigInt ? <span class=\"hljs-number\">2n</span> : <span class=\"hljs-number\">2</span>\n\n  <span class=\"hljs-comment\">// Just like Binary exponentiation mentioned in ./BinaryExponentiationIterative.js</span>\n  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-title class_\">Identity</span>((isBigInt ? <span class=\"hljs-title class_\">BigInt</span> : <span class=\"hljs-title class_\">Number</span>)(A.<span class=\"hljs-property\">length</span>)) <span class=\"hljs-comment\">// Identity matrix</span>\n  <span class=\"hljs-keyword\">while</span> (n &gt; <span class=\"hljs-variable constant_\">ZERO</span>) {\n    <span class=\"hljs-keyword\">if</span> (n % <span class=\"hljs-variable constant_\">TWO</span> !== <span class=\"hljs-variable constant_\">ZERO</span>) result = <span class=\"hljs-title function_\">matrixMultiply</span>(result, A)\n    n /= <span class=\"hljs-variable constant_\">TWO</span>\n    <span class=\"hljs-keyword\">if</span> (!isBigInt) n = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(n)\n    <span class=\"hljs-keyword\">if</span> (n &gt; <span class=\"hljs-variable constant_\">ZERO</span>) A = <span class=\"hljs-title function_\">matrixMultiply</span>(A, A)\n  }\n  <span class=\"hljs-keyword\">return</span> result\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">FibonacciMatrixExpo</span> = (<span class=\"hljs-params\">num</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> isBigInt = <span class=\"hljs-keyword\">typeof</span> num === <span class=\"hljs-string\">&#x27;bigint&#x27;</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">ZERO</span> = isBigInt ? <span class=\"hljs-number\">0n</span> : <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">ONE</span> = isBigInt ? <span class=\"hljs-number\">1n</span> : <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-comment\">// F(0) = 0, F(1) = 1</span>\n  <span class=\"hljs-comment\">// F(n) = F(n-1) + F(n-2)</span>\n  <span class=\"hljs-comment\">// Consider below matrix multiplication:</span>\n\n  <span class=\"hljs-comment\">// | F(n) |   |1  1|   |F(n-1)|</span>\n  <span class=\"hljs-comment\">// |      | = |    | * |      |</span>\n  <span class=\"hljs-comment\">// |F(n-1)|   |1  0|   |F(n-2)|</span>\n\n  <span class=\"hljs-comment\">// Let&#x27;s rewrite it as F(n, n-1) = A * F(n-1, n-2)</span>\n  <span class=\"hljs-comment\">// or                  F(n, n-1) = A * A * F(n-2, n-3)</span>\n  <span class=\"hljs-comment\">// or                  F(n, n-1) = pow(A, n-1) * F(1, 0)</span>\n\n  <span class=\"hljs-keyword\">if</span> (num === <span class=\"hljs-variable constant_\">ZERO</span>) <span class=\"hljs-keyword\">return</span> num\n\n  <span class=\"hljs-keyword\">const</span> isNeg = num &lt; <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">if</span> (isNeg) num *= -<span class=\"hljs-variable constant_\">ONE</span>\n\n  <span class=\"hljs-keyword\">const</span> A = [\n    [<span class=\"hljs-variable constant_\">ONE</span>, <span class=\"hljs-variable constant_\">ONE</span>],\n    [<span class=\"hljs-variable constant_\">ONE</span>, <span class=\"hljs-variable constant_\">ZERO</span>]\n  ]\n\n  <span class=\"hljs-keyword\">const</span> poweredA = <span class=\"hljs-title function_\">matrixExpo</span>(A, num - <span class=\"hljs-variable constant_\">ONE</span>) <span class=\"hljs-comment\">// A raised to the power n-1</span>\n  <span class=\"hljs-keyword\">let</span> F = [\n    [<span class=\"hljs-variable constant_\">ONE</span>],\n    [<span class=\"hljs-variable constant_\">ZERO</span>]\n  ]\n  F = <span class=\"hljs-title function_\">matrixMultiply</span>(poweredA, F)\n  <span class=\"hljs-keyword\">return</span> F[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] * (isNeg ? (-<span class=\"hljs-variable constant_\">ONE</span>) ** (num + <span class=\"hljs-variable constant_\">ONE</span>) : <span class=\"hljs-variable constant_\">ONE</span>)\n}\n\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">FibonacciDpWithoutRecursion</span> }\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">FibonacciIterative</span> }\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">FibonacciGenerator</span> }\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">FibonacciRecursive</span> }\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">FibonacciRecursiveDP</span> }\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">FibonacciMatrixExpo</span> }\n"
    },
    "c-plus-plus": {
      "dir": "math/fibonacci.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/fibonacci.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Generate fibonacci sequence\n *\n * Calculate the the value on Fibonacci&#x27;s sequence given an\n * integer as input.\n * \\f[\\text{fib}(n) = \\text{fib}(n-1) + \\text{fib}(n-2)\\f]\n *\n * @see fibonacci_large.cpp, fibonacci_fast.cpp, string_fibonacci.cpp\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * Recursively compute sequences\n * @param n input\n * @returns n-th element of the Fbinacci&#x27;s sequence\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">fibonacci</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n)</span> </span>{\n    <span class=\"hljs-comment\">/* If the input is 0 or 1 just return the same\n       This will set the first 2 values of the sequence */</span>\n    <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">return</span> n;\n    }\n\n    <span class=\"hljs-comment\">/* Add the last 2 values of the sequence to get next */</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fibonacci</span>(n - <span class=\"hljs-number\">1</span>) + <span class=\"hljs-built_in\">fibonacci</span>(n - <span class=\"hljs-number\">2</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * Function for testing the fibonacci() function with a few\n * test cases and assert statement.\n * @returns `void`\n*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">uint64_t</span> test_case_1 = <span class=\"hljs-built_in\">fibonacci</span>(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_1 == <span class=\"hljs-number\">0</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 1!&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">uint64_t</span> test_case_2 = <span class=\"hljs-built_in\">fibonacci</span>(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_2 == <span class=\"hljs-number\">1</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 2!&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">uint64_t</span> test_case_3 = <span class=\"hljs-built_in\">fibonacci</span>(<span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_3 == <span class=\"hljs-number\">1</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 3!&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">uint64_t</span> test_case_4 = <span class=\"hljs-built_in\">fibonacci</span>(<span class=\"hljs-number\">3</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_4 == <span class=\"hljs-number\">2</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 4!&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">uint64_t</span> test_case_5 = <span class=\"hljs-built_in\">fibonacci</span>(<span class=\"hljs-number\">4</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_5 == <span class=\"hljs-number\">3</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 5!&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">uint64_t</span> test_case_6 = <span class=\"hljs-built_in\">fibonacci</span>(<span class=\"hljs-number\">15</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_6 == <span class=\"hljs-number\">610</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 6!&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/// Main function</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">0</span>;\n    std::cin &gt;&gt; n;\n    <span class=\"hljs-built_in\">assert</span>(n &gt;= <span class=\"hljs-number\">0</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;F(&quot;</span> &lt;&lt; n &lt;&lt; <span class=\"hljs-string\">&quot;)= &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">fibonacci</span>(n) &lt;&lt; std::endl;\n}\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/dynamicprogramming/Fibonacci.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/dynamicprogramming/Fibonacci.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\n\n<span class=\"hljs-keyword\">import</span> java.util.HashMap;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> Varun Upadhyay (https://github.com/varunu28)\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Fibonacci</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Map&lt;Integer, Integer&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n        <span class=\"hljs-comment\">// Methods all returning [0, 1, 1, 2, 3, 5, ...] for n = [0, 1, 2, 3, 4, 5, ...]</span>\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> sc.nextInt();\n\n        System.out.println(fibMemo(n));\n        System.out.println(fibBotUp(n));\n        System.out.println(fibOptimized(n));\n        sc.close();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * This method finds the nth fibonacci number using memoization technique\n     *\n     * <span class=\"hljs-doctag\">@param</span> n The input n for which we have to determine the fibonacci number\n     * Outputs the nth fibonacci number\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">fibMemo</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> {\n        <span class=\"hljs-keyword\">if</span> (map.containsKey(n)) {\n            <span class=\"hljs-keyword\">return</span> map.get(n);\n        }\n\n        <span class=\"hljs-type\">int</span> f;\n\n        <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">1</span>) {\n            f = n;\n        } <span class=\"hljs-keyword\">else</span> {\n            f = fibMemo(n - <span class=\"hljs-number\">1</span>) + fibMemo(n - <span class=\"hljs-number\">2</span>);\n            map.put(n, f);\n        }\n        <span class=\"hljs-keyword\">return</span> f;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * This method finds the nth fibonacci number using bottom up\n     *\n     * <span class=\"hljs-doctag\">@param</span> n The input n for which we have to determine the fibonacci number\n     * Outputs the nth fibonacci number\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">fibBotUp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> {\n\n        Map&lt;Integer, Integer&gt; fib = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt;= n; i++) {\n            <span class=\"hljs-type\">int</span> f;\n            <span class=\"hljs-keyword\">if</span> (i &lt;= <span class=\"hljs-number\">1</span>) {\n                f = i;\n            } <span class=\"hljs-keyword\">else</span> {\n                f = fib.get(i - <span class=\"hljs-number\">1</span>) + fib.get(i - <span class=\"hljs-number\">2</span>);\n            }\n            fib.put(i, f);\n        }\n\n        <span class=\"hljs-keyword\">return</span> fib.get(n);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * This method finds the nth fibonacci number using bottom up\n     *\n     * <span class=\"hljs-doctag\">@param</span> n The input n for which we have to determine the fibonacci number\n     * Outputs the nth fibonacci number\n     * &lt;p&gt;\n     * This is optimized version of Fibonacci Program. Without using Hashmap and\n     * recursion. It saves both memory and time. Space Complexity will be O(1)\n     * Time Complexity will be O(n)\n     * &lt;p&gt;\n     * Whereas , the above functions will take O(n) Space.\n     * <span class=\"hljs-doctag\">@author</span> Shoaib Rayeen (https://github.com/shoaibrayeen)\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">fibOptimized</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> {\n        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        }\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">prev</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, res = <span class=\"hljs-number\">1</span>, next;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; i &lt;= n; i++) {\n            next = prev + res;\n            prev = res;\n            res = next;\n        }\n        <span class=\"hljs-keyword\">return</span> res;\n    }\n}\n"
    },
    "c": {
      "dir": "misc/fibonacci.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc/fibonacci.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-comment\">// Fibonnacci function</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">fib</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (number == <span class=\"hljs-number\">1</span> || number == <span class=\"hljs-number\">2</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-keyword\">return</span> fib(number - <span class=\"hljs-number\">1</span>) + fib(number - <span class=\"hljs-number\">2</span>);\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> number;\n\n    <span class=\"hljs-comment\">// Asks for the number that is in n position in Fibonnacci sequence</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Number: &quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;number);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d \\n&quot;</span>, fib(number));\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}"
    },
    "haskell": {
      "dir": "src/Maths/Fibonacci.hs",
      "url": "https://github.com/TheAlgorithms/haskell/tree/master/src/Maths/Fibonacci.hs",
      "code": "<span class=\"hljs-keyword\">module</span> Maths.Fibonacci <span class=\"hljs-keyword\">where</span>\n\n<span class=\"hljs-title\">fib</span> :: <span class=\"hljs-type\">Integer</span> -&gt; <span class=\"hljs-type\">Integer</span>\n<span class=\"hljs-title\">fib</span> <span class=\"hljs-number\">0</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-title\">fib</span> <span class=\"hljs-number\">1</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-title\">fib</span> n = fib (n-<span class=\"hljs-number\">1</span>) + fib (n-<span class=\"hljs-number\">2</span>)\n\n<span class=\"hljs-title\">main</span> :: <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\n    print (fib <span class=\"hljs-number\">10</span>)"
    },
    "f-sharp": {
      "dir": "Algorithms/Math/Fibonacci.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms/Math/Fibonacci.fs",
      "code": "﻿<span class=\"hljs-keyword\">namespace</span> Algorithms.Math\n\n<span class=\"hljs-keyword\">module</span> Fibonacci <span class=\"hljs-operator\">=</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">rec</span> PrintSerie (one<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span>) (two<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span>) <span class=\"hljs-operator\">=</span>\n        <span class=\"hljs-keyword\">let</span> fibo <span class=\"hljs-operator\">=</span> one <span class=\"hljs-operator\">+</span> two\n        System.Console.WriteLine fibo\n        PrintSerie two fibo"
    },
    "go": {
      "dir": "math/fibonacci/fibonacci.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/math/fibonacci/fibonacci.go",
      "code": "<span class=\"hljs-comment\">// fibonacci.go</span>\n<span class=\"hljs-comment\">// description: Get the nth Fibonacci Number</span>\n<span class=\"hljs-comment\">// details:</span>\n<span class=\"hljs-comment\">// In mathematics, the Fibonacci numbers, commonly denoted Fn, form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. [Fibonacci number](https://en.wikipedia.org/wiki/Fibonacci_number)</span>\n<span class=\"hljs-comment\">// author(s) [red_byte](https://github.com/i-redbyte)</span>\n<span class=\"hljs-comment\">// see fibonacci_test.go</span>\n\n<span class=\"hljs-keyword\">package</span> fibonacci\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;math&quot;</span>\n)\n\n<span class=\"hljs-comment\">// Matrix This function calculates the n-th fibonacci number using the matrix method. [See](https://en.wikipedia.org/wiki/Fibonacci_number#Matrix_form)</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Matrix</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">uint</span>)</span></span> <span class=\"hljs-type\">uint</span> {\n\ta, b := <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>\n\tc, rc, tc := <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>\n\td, rd := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>\n\n\t<span class=\"hljs-keyword\">for</span> n != <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">if</span> n&amp;<span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> {\n\t\t\ttc = rc\n\t\t\trc = rc*a + rd*c\n\t\t\trd = tc*b + rd*d\n\t\t}\n\n\t\tta := a\n\t\ttb := b\n\t\ttc = c\n\t\ta = a*a + b*c\n\t\tb = ta*b + b*d\n\t\tc = c*ta + d*c\n\t\td = tc*tb + d*d\n\n\t\tn &gt;&gt;= <span class=\"hljs-number\">1</span>\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">uint</span>(rc)\n}\n\n<span class=\"hljs-comment\">// Formula This function calculates the n-th fibonacci number using the [formula](https://en.wikipedia.org/wiki/Fibonacci_number#Relation_to_the_golden_ratio)</span>\n<span class=\"hljs-comment\">// Attention! Tests for large values fall due to rounding error of floating point numbers, works well, only on small numbers</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Formula</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">uint</span>)</span></span> <span class=\"hljs-type\">uint</span> {\n\tsqrt5 := math.Sqrt(<span class=\"hljs-number\">5</span>)\n\tphi := (sqrt5 + <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>\n\tpowPhi := math.Pow(phi, <span class=\"hljs-type\">float64</span>(n))\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">uint</span>(powPhi/sqrt5 + <span class=\"hljs-number\">0.5</span>)\n}\n"
    },
    "rust": {
      "dir": "src/dynamic_programming/fibonacci.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/dynamic_programming/fibonacci.rs",
      "code": "<span class=\"hljs-comment\">/// Fibonacci via Dynamic Programming</span>\n<span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n\n<span class=\"hljs-comment\">/// fibonacci(n) returns the nth fibonacci number</span>\n<span class=\"hljs-comment\">/// This function uses the definition of Fibonacci where:</span>\n<span class=\"hljs-comment\">/// F(0) = F(1) = 1 and F(n+1) = F(n) + F(n-1) for n&gt;0</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Warning: This will overflow the 128-bit unsigned integer at n=186</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fibonacci</span>(n: <span class=\"hljs-type\">u32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u128</span> {\n    <span class=\"hljs-comment\">// Use a and b to store the previous two values in the sequence</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">a</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">b</span> = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">_i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..n {\n        <span class=\"hljs-comment\">// As we iterate through, move b&#x27;s value into a and the new computed</span>\n        <span class=\"hljs-comment\">// value into b.</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">c</span> = a + b;\n        a = b;\n        b = c;\n    }\n    b\n}\n\n<span class=\"hljs-comment\">/// fibonacci(n) returns the nth fibonacci number</span>\n<span class=\"hljs-comment\">/// This function uses the definition of Fibonacci where:</span>\n<span class=\"hljs-comment\">/// F(0) = F(1) = 1 and F(n+1) = F(n) + F(n-1) for n&gt;0</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Warning: This will overflow the 128-bit unsigned integer at n=186</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">recursive_fibonacci</span>(n: <span class=\"hljs-type\">u32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u128</span> {\n    <span class=\"hljs-comment\">// Call the actual tail recursive implementation, with the extra</span>\n    <span class=\"hljs-comment\">// arguments set up.</span>\n    _recursive_fibonacci(n, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">_recursive_fibonacci</span>(n: <span class=\"hljs-type\">u32</span>, previous: <span class=\"hljs-type\">u128</span>, current: <span class=\"hljs-type\">u128</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u128</span> {\n    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span> {\n        current\n    } <span class=\"hljs-keyword\">else</span> {\n        _recursive_fibonacci(n - <span class=\"hljs-number\">1</span>, current, current + previous)\n    }\n}\n\n<span class=\"hljs-comment\">/// classical_fibonacci(n) returns the nth fibonacci number</span>\n<span class=\"hljs-comment\">/// This function uses the definition of Fibonacci where:</span>\n<span class=\"hljs-comment\">/// F(0) = 0, F(1) = 1 and F(n+1) = F(n) + F(n-1) for n&gt;0</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Warning: This will overflow the 128-bit unsigned integer at n=186</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">classical_fibonacci</span>(n: <span class=\"hljs-type\">u32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u128</span> {\n    <span class=\"hljs-keyword\">match</span> n {\n        <span class=\"hljs-number\">0</span> =&gt; <span class=\"hljs-number\">0</span>,\n        <span class=\"hljs-number\">1</span> =&gt; <span class=\"hljs-number\">1</span>,\n        _ =&gt; {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">k</span> = n / <span class=\"hljs-number\">2</span>;\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">f1</span> = <span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(k);\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">f2</span> = <span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(k - <span class=\"hljs-number\">1</span>);\n\n            <span class=\"hljs-keyword\">match</span> n % <span class=\"hljs-number\">4</span> {\n                <span class=\"hljs-number\">0</span> | <span class=\"hljs-number\">2</span> =&gt; f1 * (f1 + <span class=\"hljs-number\">2</span> * f2),\n                <span class=\"hljs-number\">1</span> =&gt; (<span class=\"hljs-number\">2</span> * f1 + f2) * (<span class=\"hljs-number\">2</span> * f1 - f2) + <span class=\"hljs-number\">2</span>,\n                _ =&gt; (<span class=\"hljs-number\">2</span> * f1 + f2) * (<span class=\"hljs-number\">2</span> * f1 - f2) - <span class=\"hljs-number\">2</span>,\n            }\n        }\n    }\n}\n\n<span class=\"hljs-comment\">/// logarithmic_fibonacci(n) returns the nth fibonacci number</span>\n<span class=\"hljs-comment\">/// This function uses the definition of Fibonacci where:</span>\n<span class=\"hljs-comment\">/// F(0) = 0, F(1) = 1 and F(n+1) = F(n) + F(n-1) for n&gt;0</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Warning: This will overflow the 128-bit unsigned integer at n=186</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">logarithmic_fibonacci</span>(n: <span class=\"hljs-type\">u32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u128</span> {\n    <span class=\"hljs-comment\">// if it is the max value before overflow, use n-1 then get the second</span>\n    <span class=\"hljs-comment\">// value in the tuple</span>\n    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">186</span> {\n        <span class=\"hljs-keyword\">let</span> (_, second) = _logarithmic_fibonacci(<span class=\"hljs-number\">185</span>);\n        second\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">let</span> (first, _) = _logarithmic_fibonacci(n);\n        first\n    }\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">_logarithmic_fibonacci</span>(n: <span class=\"hljs-type\">u32</span>) <span class=\"hljs-punctuation\">-&gt;</span> (<span class=\"hljs-type\">u128</span>, <span class=\"hljs-type\">u128</span>) {\n    <span class=\"hljs-keyword\">match</span> n {\n        <span class=\"hljs-number\">0</span> =&gt; (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>),\n        _ =&gt; {\n            <span class=\"hljs-keyword\">let</span> (current, next) = _logarithmic_fibonacci(n / <span class=\"hljs-number\">2</span>);\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">c</span> = current * (next * <span class=\"hljs-number\">2</span> - current);\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">d</span> = current * current + next * next;\n\n            <span class=\"hljs-keyword\">match</span> n % <span class=\"hljs-number\">2</span> {\n                <span class=\"hljs-number\">0</span> =&gt; (c, d),\n                _ =&gt; (d, c + d),\n            }\n        }\n    }\n}\n\n<span class=\"hljs-comment\">/// Memoized fibonacci.</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">memoized_fibonacci</span>(n: <span class=\"hljs-type\">u32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u128</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">cache</span>: HashMap&lt;<span class=\"hljs-type\">u32</span>, <span class=\"hljs-type\">u128</span>&gt; = HashMap::<span class=\"hljs-title function_ invoke__\">new</span>();\n\n    _memoized_fibonacci(n, &amp;<span class=\"hljs-keyword\">mut</span> cache)\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">_memoized_fibonacci</span>(n: <span class=\"hljs-type\">u32</span>, cache: &amp;<span class=\"hljs-keyword\">mut</span> HashMap&lt;<span class=\"hljs-type\">u32</span>, <span class=\"hljs-type\">u128</span>&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u128</span> {\n    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">1</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">f</span> = <span class=\"hljs-keyword\">match</span> cache.<span class=\"hljs-title function_ invoke__\">get</span>(&amp;n) {\n        <span class=\"hljs-title function_ invoke__\">Some</span>(f) =&gt; f,\n        <span class=\"hljs-literal\">None</span> =&gt; {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">f1</span> = _memoized_fibonacci(n - <span class=\"hljs-number\">1</span>, cache);\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">f2</span> = _memoized_fibonacci(n - <span class=\"hljs-number\">2</span>, cache);\n            cache.<span class=\"hljs-title function_ invoke__\">insert</span>(n, f1 + f2);\n            cache.<span class=\"hljs-title function_ invoke__\">get</span>(&amp;n).<span class=\"hljs-title function_ invoke__\">unwrap</span>()\n        }\n    };\n\n    *f\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::classical_fibonacci;\n    <span class=\"hljs-keyword\">use</span> super::fibonacci;\n    <span class=\"hljs-keyword\">use</span> super::logarithmic_fibonacci;\n    <span class=\"hljs-keyword\">use</span> super::memoized_fibonacci;\n    <span class=\"hljs-keyword\">use</span> super::recursive_fibonacci;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_fibonacci</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">3</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">4</span>), <span class=\"hljs-number\">5</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">8</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">89</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">10946</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">100</span>), <span class=\"hljs-number\">573147844013817084101</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">184</span>), <span class=\"hljs-number\">205697230343233228174223751303346572685</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_recursive_fibonacci</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">3</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">4</span>), <span class=\"hljs-number\">5</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">8</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">89</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">10946</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">100</span>), <span class=\"hljs-number\">573147844013817084101</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">184</span>),\n            <span class=\"hljs-number\">205697230343233228174223751303346572685</span>\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_classical_fibonacci</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">4</span>), <span class=\"hljs-number\">3</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">5</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">55</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">6765</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">21</span>), <span class=\"hljs-number\">10946</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">100</span>), <span class=\"hljs-number\">354224848179261915075</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">184</span>),\n            <span class=\"hljs-number\">127127879743834334146972278486287885163</span>\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_logarithmic_fibonacci</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">4</span>), <span class=\"hljs-number\">3</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">5</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">55</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">6765</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">21</span>), <span class=\"hljs-number\">10946</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">100</span>), <span class=\"hljs-number\">354224848179261915075</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">184</span>),\n            <span class=\"hljs-number\">127127879743834334146972278486287885163</span>\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-comment\">/// Check that the itterative and recursive fibonacci</span>\n    <span class=\"hljs-comment\">/// produce the same value. Both are combinatorial ( F(0) = F(1) = 1 )</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_iterative_and_recursive_equivalence</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">0</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">1</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">2</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">3</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">4</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">4</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">5</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">10</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">10</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">20</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">20</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">100</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">100</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">184</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">184</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-comment\">/// Check that classical and combinatorial fibonacci produce the</span>\n    <span class=\"hljs-comment\">/// same value when &#x27;n&#x27; differs by 1.</span>\n    <span class=\"hljs-comment\">/// classical fibonacci: ( F(0) = 0, F(1) = 1 )</span>\n    <span class=\"hljs-comment\">/// combinatorial fibonacci: ( F(0) = F(1) = 1 )</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_classical_and_combinatorial_are_off_by_one</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">0</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">1</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">2</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">4</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">3</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">4</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">6</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">5</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">11</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">10</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">20</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">19</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">21</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">20</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">101</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">100</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">185</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">184</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_memoized_fibonacci</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">4</span>), <span class=\"hljs-number\">3</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">5</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">55</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">6765</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">21</span>), <span class=\"hljs-number\">10946</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">100</span>), <span class=\"hljs-number\">354224848179261915075</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">184</span>),\n            <span class=\"hljs-number\">127127879743834334146972278486287885163</span>\n        );\n    }\n}\n"
    },
    "r": {
      "dir": "Mathematics/Fibonacci.R",
      "url": "https://github.com/TheAlgorithms/r/tree/master/Mathematics/Fibonacci.R",
      "code": "Fibonacci <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>n<span class=\"hljs-punctuation\">)</span>\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-keyword\">if</span><span class=\"hljs-punctuation\">(</span>n <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">|</span>n <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">)</span>\n  <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span>\n  <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-keyword\">else</span>\n  <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span>Fibonacci<span class=\"hljs-punctuation\">(</span>n<span class=\"hljs-operator\">-</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">+</span> Fibonacci<span class=\"hljs-punctuation\">(</span>n <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n\nFibonacci<span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span>\nFibonacci<span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">11</span><span class=\"hljs-punctuation\">)</span>\n"
    },
    "ruby": {
      "dir": "maths/fibonacci.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/maths/fibonacci.rb",
      "code": "<span class=\"hljs-comment\"># The Fibonacci numbers, commonly denoted F(n) form a sequence,</span>\n<span class=\"hljs-comment\"># called the Fibonacci sequence, such that each number is the sum</span>\n<span class=\"hljs-comment\"># of the two preceding ones, starting from 0 and 1. That is,</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># F(0) = 0, F(1) = 1</span>\n<span class=\"hljs-comment\"># F(n) = F(n - 1) + F(n - 2), for n &gt; 1.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Given n, calculate F(n).</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach: Math</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\"># Intuition: Using the golden ratio, a.k.a Binet&#x27;s formula</span>\n\n<span class=\"hljs-comment\"># Algorithm: Use the golden ratio formula to calculate the Nth Fibonacci number.</span>\n<span class=\"hljs-comment\"># https://demonstrations.wolfram.com/GeneralizedFibonacciSequenceAndTheGoldenRatio/</span>\n\n<span class=\"hljs-comment\"># Complexity Analysis</span>\n\n<span class=\"hljs-comment\"># Time complexity: O(1). Constant time complexity since we are using no loops or recursion</span>\n<span class=\"hljs-comment\"># and the time is based on the result of performing the calculation using Binet&#x27;s formula.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Space complexity: O(1). The space used is the space needed to create the variable</span>\n<span class=\"hljs-comment\"># to store the golden ratio formula.</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fibonacci</span>(<span class=\"hljs-params\">n</span>)\n  golden_ratio = (<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">5</span>**<span class=\"hljs-number\">0.5</span>) / <span class=\"hljs-number\">2</span>\n  ((golden_ratio**n + <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">5</span>**<span class=\"hljs-number\">0.5</span>).to_i\n<span class=\"hljs-keyword\">end</span>\n\nn = <span class=\"hljs-number\">2</span>\nputs(fibonacci(n))\n<span class=\"hljs-comment\"># Output: 1</span>\n<span class=\"hljs-comment\"># Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.</span>\n\nn = <span class=\"hljs-number\">3</span>\nputs(fibonacci(n))\n<span class=\"hljs-comment\"># Output: 2</span>\n<span class=\"hljs-comment\"># Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.</span>\n\nn = <span class=\"hljs-number\">4</span>\nputs(fibonacci(n))\n<span class=\"hljs-comment\"># Output: 3</span>\n<span class=\"hljs-comment\"># Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.</span>\n"
    },
    "php": {
      "dir": "Maths/Fibonacci.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/Maths/Fibonacci.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-comment\">/*\n * Run script and test execution time with following script\n        $executionTime = New ExecutionTime();\n        print_r(fibonacciRecursive(10));\n */</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ExecutionTime</span>\n</span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$start_time</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$end_time</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$execution_time</span> = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span>(<span class=\"hljs-params\"></span>)\n    </span>{\n        <span class=\"hljs-variable language_\">$this</span>-&gt;start_time = <span class=\"hljs-title function_ invoke__\">microtime</span>(<span class=\"hljs-literal\">true</span>);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__destruct</span>(<span class=\"hljs-params\"></span>)\n    </span>{\n        <span class=\"hljs-variable language_\">$this</span>-&gt;end_time = <span class=\"hljs-title function_ invoke__\">microtime</span>(<span class=\"hljs-literal\">true</span>);\n        <span class=\"hljs-variable language_\">$this</span>-&gt;execution_time = <span class=\"hljs-variable language_\">$this</span>-&gt;end_time - <span class=\"hljs-variable language_\">$this</span>-&gt;start_time;\n        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">&quot;Executed in <span class=\"hljs-subst\">$this</span>-&gt;execution_time seconds\\n&quot;</span>;\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fibonacciRecursive</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$num</span></span>)\n</span>{\n    <span class=\"hljs-comment\">/*\n     * Fibonacci series using recursive approach\n     */</span>\n\n    <span class=\"hljs-variable\">$fibonacciRecursive</span> = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$i</span> &lt; <span class=\"hljs-variable\">$num</span>; <span class=\"hljs-variable\">$i</span>++) {\n        <span class=\"hljs-title function_ invoke__\">array_push</span>(<span class=\"hljs-variable\">$fibonacciRecursive</span>, <span class=\"hljs-title function_ invoke__\">recursive</span>(<span class=\"hljs-variable\">$i</span>));\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$fibonacciRecursive</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">recursive</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$num</span></span>)\n</span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$num</span> &lt; <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">\\Exception</span>(<span class=\"hljs-string\">&quot;Number must be greater than 0.&quot;</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$num</span> == <span class=\"hljs-number\">0</span> || <span class=\"hljs-variable\">$num</span> == <span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$num</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">recursive</span>(<span class=\"hljs-variable\">$num</span> - <span class=\"hljs-number\">1</span>) + <span class=\"hljs-title function_ invoke__\">recursive</span>(<span class=\"hljs-variable\">$num</span> - <span class=\"hljs-number\">2</span>);\n        }\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fibonacciWithBinetFormula</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$num</span></span>)\n</span>{\n    <span class=\"hljs-comment\">/*\n     * Fibonacci series using Binet&#x27;s formula given below\n     * binet&#x27;s formula =  ((1 + sqrt(5) / 2 ) ^ n - (1 - sqrt(5) / 2 ) ^ n ) ) / sqrt(5)\n     * More about Binet&#x27;s formula found at http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/fibFormula.html#section1\n     */</span>\n\n    <span class=\"hljs-variable\">$fib_series</span> = [];\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$num</span> &lt; <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">\\Exception</span>(<span class=\"hljs-string\">&quot;Number must be greater than 0.&quot;</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-variable\">$sqrt</span> = <span class=\"hljs-title function_ invoke__\">sqrt</span>(<span class=\"hljs-number\">5</span>);\n        <span class=\"hljs-variable\">$phi_1</span> = (<span class=\"hljs-number\">1</span> + <span class=\"hljs-variable\">$sqrt</span>) / <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-variable\">$phi_2</span> = (<span class=\"hljs-number\">1</span> - <span class=\"hljs-variable\">$sqrt</span>) / <span class=\"hljs-number\">2</span>;\n\n        <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-title function_ invoke__\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-variable\">$num</span> - <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$n</span>) {\n            <span class=\"hljs-variable\">$seriesNumber</span> = (<span class=\"hljs-title function_ invoke__\">pow</span>(<span class=\"hljs-variable\">$phi_1</span>, <span class=\"hljs-variable\">$n</span>) - <span class=\"hljs-title function_ invoke__\">pow</span>(<span class=\"hljs-variable\">$phi_2</span>, <span class=\"hljs-variable\">$n</span>)) / <span class=\"hljs-variable\">$sqrt</span>;\n            <span class=\"hljs-title function_ invoke__\">array_push</span>(<span class=\"hljs-variable\">$fib_series</span>, (<span class=\"hljs-keyword\">int</span>)<span class=\"hljs-variable\">$seriesNumber</span>);\n        }\n\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$fib_series</span>;\n}"
    },
    "elixir": {
      "dir": "lib/dynamic_programming/fibonacci.ex",
      "url": "https://github.com/TheAlgorithms/elixir/tree/master/lib/dynamic_programming/fibonacci.ex",
      "code": "<span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">Algorithms.DynamicProgramming.Fibonacci</span></span> <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-variable\">@moduledoc</span> <span class=\"hljs-string\">&quot;&quot;&quot;\n  Implementation of the Fibonacci sequence using Dynamic Programming / Memoization.\n  &quot;&quot;&quot;</span>\n  <span class=\"hljs-keyword\">require</span> <span class=\"hljs-title class_\">Integer</span>\n  <span class=\"hljs-keyword\">require</span> <span class=\"hljs-title class_\">Map</span>\n\n  <span class=\"hljs-variable\">@doc</span> <span class=\"hljs-string\">&quot;&quot;&quot;\n    Given an index i, returns the i-th Fibonacci number\n  &quot;&quot;&quot;</span>\n  <span class=\"hljs-variable\">@spec</span> fibonacci(<span class=\"hljs-title class_\">Integer</span>) :: <span class=\"hljs-title class_\">Integer</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fibonacci</span></span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-symbol\">do:</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fibonacci</span></span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-symbol\">do:</span> <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fibonacci</span></span>(n) <span class=\"hljs-keyword\">do</span> \n    {val, _} = memoize(n, %{<span class=\"hljs-number\">0</span> =&gt; <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> =&gt; <span class=\"hljs-number\">1</span>})\n    val\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-variable\">@doc</span> <span class=\"hljs-string\">&quot;&quot;&quot;\n    Given an index n and a map of known Fibonacci numbers, returns the n-th Fibonacci\n    number and a map containing all i -&gt; Fib_i pairs up to (including) n\n  &quot;&quot;&quot;</span>\n  <span class=\"hljs-variable\">@spec</span> memoize(<span class=\"hljs-title class_\">Integer</span>, map) :: {<span class=\"hljs-title class_\">Integer</span>, map}\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">memoize</span></span>(n, memo) <span class=\"hljs-keyword\">do</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">Map</span>.has_key?(memo, n) <span class=\"hljs-keyword\">do</span>\n      <span class=\"hljs-literal\">true</span> -&gt; {<span class=\"hljs-title class_\">Map</span>.get(memo, n), memo}\n      <span class=\"hljs-literal\">false</span> -&gt; {val2, m2} = memoize(n<span class=\"hljs-number\">-2</span>, memo)\n               {val1, m1} = memoize(n<span class=\"hljs-number\">-1</span>, m2)\n               val = val1 + val2  \n               memoize(n, <span class=\"hljs-title class_\">Map</span>.merge(m1, %{ n =&gt; val}))\n    <span class=\"hljs-keyword\">end</span> \n  <span class=\"hljs-keyword\">end</span>\n    \n<span class=\"hljs-keyword\">end</span>\n"
    },
    "scala": {
      "dir": "src/main/scala/Mathematics/Fibonacci.scala",
      "url": "https://github.com/TheAlgorithms/scala/tree/master/src/main/scala/Mathematics/Fibonacci.scala",
      "code": "<span class=\"hljs-keyword\">package</span> <span class=\"hljs-type\">Mathematics</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">Fibonacci</span> </span>{\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> allFibonacci: <span class=\"hljs-type\">LazyList</span>[<span class=\"hljs-type\">Int</span>] = <span class=\"hljs-number\">1</span> #:: <span class=\"hljs-number\">1</span> #:: allFibonacci.zip(allFibonacci.tail).map(t =&gt; t._1 + t._2)\n\n  <span class=\"hljs-comment\">/** Method to use the allFibonacci stream to take the first total numbers Using streams is both an easy and\n    * efficient way to generate fibonacci numbers (streams are memoized)\n    *\n    * @param total\n    *   Maximum number of elements of the sequence\n    * @return\n    */</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fibGenerate</span></span>(total: <span class=\"hljs-type\">Int</span>): <span class=\"hljs-type\">Seq</span>[<span class=\"hljs-type\">Int</span>] = allFibonacci.take(total)\n}\n"
    },
    "swift": {
      "dir": "recursion/fibonacci.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/recursion/fibonacci.swift",
      "code": "<span class=\"hljs-comment\">// The Fibonacci numbers, commonly denoted F(n) form a sequence,</span>\n<span class=\"hljs-comment\">// called the Fibonacci sequence, such that # each number is the sum</span>\n<span class=\"hljs-comment\">// of the two preceding ones, starting from 0 and 1. That is,</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// F(0) = 0, F(1) = 1</span>\n<span class=\"hljs-comment\">// F(n) = F(n - 1) + F(n - 2), for n &gt; 1</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// Given n, calculate F(n).</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// @leticiafaleia</span>\n<span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">fibonacci</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">number</span>: <span class=\"hljs-type\">Int</span>) -&gt; <span class=\"hljs-type\">Int</span> {\n    <span class=\"hljs-keyword\">guard</span> number <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-keyword\">return</span> number }\n    <span class=\"hljs-keyword\">return</span> fibonacci(number <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>) <span class=\"hljs-operator\">+</span> fibonacci(number <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">2</span>)\n}\n\nfibonacci(<span class=\"hljs-number\">5</span>)\n"
    }
  },
  "contributors": [],
  "explanationUrl": {
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en/Basic Math/Fibonacci_Numbers.md"
  }
}