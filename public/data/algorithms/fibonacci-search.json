{
  "slug": "fibonacci-search",
  "name": "Fibonacci Search",
  "categories": [
    "searches"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "searches/fibonacci_search.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/searches/fibonacci_search.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nThis is pure Python implementation of fibonacci search.\n\nResources used:\nhttps://en.wikipedia.org/wiki/Fibonacci_search_technique\n\nFor doctests run following command:\npython3 -m doctest -v fibonacci_search.py\n\nFor manual testing run:\npython3 fibonacci_search.py\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> functools <span class=\"hljs-keyword\">import</span> lru_cache\n\n\n<span class=\"hljs-meta\">@lru_cache</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fibonacci</span>(<span class=\"hljs-params\">k: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;Finds fibonacci number in index k.\n\n    Parameters\n    ----------\n    k :\n        Index of fibonacci.\n\n    Returns\n    -------\n    int\n        Fibonacci number in position k.\n\n    &gt;&gt;&gt; fibonacci(0)\n    0\n    &gt;&gt;&gt; fibonacci(2)\n    1\n    &gt;&gt;&gt; fibonacci(5)\n    5\n    &gt;&gt;&gt; fibonacci(15)\n    610\n    &gt;&gt;&gt; fibonacci(&#x27;a&#x27;)\n    Traceback (most recent call last):\n    TypeError: k must be an integer.\n    &gt;&gt;&gt; fibonacci(-5)\n    Traceback (most recent call last):\n    ValueError: k integer must be greater or equal to zero.\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(k, <span class=\"hljs-built_in\">int</span>):\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;k must be an integer.&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> k &lt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;k integer must be greater or equal to zero.&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> k == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">elif</span> k == <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> fibonacci(k - <span class=\"hljs-number\">1</span>) + fibonacci(k - <span class=\"hljs-number\">2</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fibonacci_search</span>(<span class=\"hljs-params\">arr: <span class=\"hljs-built_in\">list</span>, val: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;A pure Python implementation of a fibonacci search algorithm.\n\n    Parameters\n    ----------\n    arr\n        List of sorted elements.\n    val\n        Element to search in list.\n\n    Returns\n    -------\n    int\n        The index of the element in the array.\n        -1 if the element is not found.\n\n    &gt;&gt;&gt; fibonacci_search([4, 5, 6, 7], 4)\n    0\n    &gt;&gt;&gt; fibonacci_search([4, 5, 6, 7], -10)\n    -1\n    &gt;&gt;&gt; fibonacci_search([-18, 2], -18)\n    0\n    &gt;&gt;&gt; fibonacci_search([5], 5)\n    0\n    &gt;&gt;&gt; fibonacci_search([&#x27;a&#x27;, &#x27;c&#x27;, &#x27;d&#x27;], &#x27;c&#x27;)\n    1\n    &gt;&gt;&gt; fibonacci_search([&#x27;a&#x27;, &#x27;c&#x27;, &#x27;d&#x27;], &#x27;f&#x27;)\n    -1\n    &gt;&gt;&gt; fibonacci_search([], 1)\n    -1\n    &gt;&gt;&gt; fibonacci_search([.1, .4 , 7], .4)\n    1\n    &gt;&gt;&gt; fibonacci_search([], 9)\n    -1\n    &gt;&gt;&gt; fibonacci_search(list(range(100)), 63)\n    63\n    &gt;&gt;&gt; fibonacci_search(list(range(100)), 99)\n    99\n    &gt;&gt;&gt; fibonacci_search(list(range(-100, 100, 3)), -97)\n    1\n    &gt;&gt;&gt; fibonacci_search(list(range(-100, 100, 3)), 0)\n    -1\n    &gt;&gt;&gt; fibonacci_search(list(range(-100, 100, 5)), 0)\n    20\n    &gt;&gt;&gt; fibonacci_search(list(range(-100, 100, 5)), 95)\n    39\n    &quot;&quot;&quot;</span>\n    len_list = <span class=\"hljs-built_in\">len</span>(arr)\n    <span class=\"hljs-comment\"># Find m such that F_m &gt;= n where F_i is the i_th fibonacci number.</span>\n    i = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n        <span class=\"hljs-keyword\">if</span> fibonacci(i) &gt;= len_list:\n            fibb_k = i\n            <span class=\"hljs-keyword\">break</span>\n        i += <span class=\"hljs-number\">1</span>\n    offset = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span> fibb_k &gt; <span class=\"hljs-number\">0</span>:\n        index_k = <span class=\"hljs-built_in\">min</span>(\n            offset + fibonacci(fibb_k - <span class=\"hljs-number\">1</span>), len_list - <span class=\"hljs-number\">1</span>\n        )  <span class=\"hljs-comment\"># Prevent out of range</span>\n        item_k_1 = arr[index_k]\n        <span class=\"hljs-keyword\">if</span> item_k_1 == val:\n            <span class=\"hljs-keyword\">return</span> index_k\n        <span class=\"hljs-keyword\">elif</span> val &lt; item_k_1:\n            fibb_k -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">elif</span> val &gt; item_k_1:\n            offset += fibonacci(fibb_k - <span class=\"hljs-number\">1</span>)\n            fibb_k -= <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "javascript": {
      "dir": "Search/FibonacciSearch.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Search/FibonacciSearch.js",
      "code": "<span class=\"hljs-comment\">/****************************************************************************\n * Fibonacci Search JavaScript Implementation\n * Author   Alhassan Atama Isiaka\n * Version v1.0.0\n * Copyright 2020\n * https://github.com/komputarist\n *\n * This implementation is based on Generalizing the Fibonacci search we\n * define the Fibonacci search of degree K. Like the Fibonacci search,\n * which it reduces to for K = 2, the Fibonacci search of degree K\n * involves only addition and subtraction.\n *  Capocelli R.M. (1991) A Generalization of the Fibonacci Search. In:\n * Bergum G.E., Philippou A.N., Horadam A.F. (eds) Applications of Fibonacci\n * Numbers. Springer, Dordrecht. https://doi.org/10.1007/978-94-011-3586-3_9\n *\n * This snippet is free. Feel free to improve on it\n *\n * We define a function fibonacciSearch() that takes an array of numbers,\n * the item (number) to be searched for and the length of the items in the array\n ****************************************************************************/</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">fibonacciSearch</span> = (<span class=\"hljs-params\">arr, x, n</span>) =&gt; {\n  <span class=\"hljs-keyword\">let</span> fib2 = <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">// (K-2)&#x27;th Fibonacci Number</span>\n  <span class=\"hljs-keyword\">let</span> fib1 = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// (K-1)&#x27;th Fibonacci Number.</span>\n  <span class=\"hljs-keyword\">let</span> fibK = fib2 + fib1 <span class=\"hljs-comment\">// Kth Fibonacci</span>\n\n  <span class=\"hljs-comment\">/* We want to store the smallest fibonacci number smaller such that\n    number is greater than or equal to n, we use fibK for this */</span>\n  <span class=\"hljs-keyword\">while</span> (fibK &lt; n) {\n    fib2 = fib1\n    fib1 = fibK\n    fibK = fib2 + fib1\n  }\n  <span class=\"hljs-comment\">//  This marks the eliminated range from front</span>\n  <span class=\"hljs-keyword\">let</span> offset = -<span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-comment\">/* while there are elements to be checked. We compare arr[fib2] with x.\n    When fibM becomes 1, fib2 becomes 0 */</span>\n\n  <span class=\"hljs-keyword\">while</span> (fibK &gt; <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-comment\">// Check if fibK is a valid location</span>\n    <span class=\"hljs-keyword\">const</span> i = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(offset + fib2, n - <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-comment\">/*  If x is greater than the value at\n      index fib2, Partition the subarray array\n      from offset to i */</span>\n    <span class=\"hljs-keyword\">if</span> (arr[i] &lt; x) {\n      fibK = fib1\n      fib1 = fib2\n      fib2 = fibK - fib1\n      offset = i\n      <span class=\"hljs-comment\">/* If x is greater than the value at\n            index fib2, cut the subarray array\n            from offset to i */</span>\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (arr[i] &gt; x) {\n      fibK = fib2\n      fib1 = fib1 - fib2\n      fib2 = fibK - fib1\n    } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">//  return index for found element</span>\n      <span class=\"hljs-keyword\">return</span> i\n    }\n  }\n\n  <span class=\"hljs-comment\">//    comparing the last element with x */</span>\n  <span class=\"hljs-keyword\">if</span> (fib1 &amp;&amp; arr[offset + <span class=\"hljs-number\">1</span>] === x) {\n    <span class=\"hljs-keyword\">return</span> offset + <span class=\"hljs-number\">1</span>\n  }\n  <span class=\"hljs-comment\">//    element not found. return -1</span>\n  <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-comment\">// Example</span>\n<span class=\"hljs-comment\">// const myArray = [10, 22, 35, 40, 45, 50, 80, 82, 85, 90, 100]</span>\n<span class=\"hljs-comment\">// const n = myArray.length</span>\n<span class=\"hljs-comment\">// const x = 90</span>\n<span class=\"hljs-comment\">// const fibFinder = fibonacciSearch(myArray, x, n)</span>\n"
    },
    "c-plus-plus": {
      "dir": "search/fibonacci_search.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/search/fibonacci_search.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @author sprintyaf\n * @file fibonacci_search.cpp\n * @brief [Fibonacci search\n * algorithm](https://en.wikipedia.org/wiki/Fibonacci_search_technique)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span> <span class=\"hljs-comment\">// for std::vector class</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span> <span class=\"hljs-comment\">// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdlib&gt;</span> <span class=\"hljs-comment\">// for random numbers</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span> <span class=\"hljs-comment\">// for sorting</span></span>\n\n\n\n<span class=\"hljs-comment\">/**\n * @brief using fibonacci search algorithm finds an index of a given element in a sorted array\n * \n * @param arr sorted array\n * @param value value that we&#x27;re looking for\n * @returns if the array contains the value, returns an index of the element. otherwise -1.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">fibonacci_search</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;arr, <span class=\"hljs-type\">int</span> value)</span></span>{\n    <span class=\"hljs-comment\">// initialize last and current members of Fibonacci sequence </span>\n    <span class=\"hljs-type\">int</span> last = <span class=\"hljs-number\">0</span>, current = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-type\">int</span> length = arr.<span class=\"hljs-built_in\">size</span>(); <span class=\"hljs-comment\">// array size</span>\n    <span class=\"hljs-comment\">// next member of Fibonacci sequence which is &quot;last&quot; + &quot;current&quot;</span>\n    <span class=\"hljs-type\">int</span> next = last + current; \n\n    <span class=\"hljs-comment\">// &quot;next&quot; will store the smallest Fibonacci number greater or equal to &quot;length&quot;</span>\n    <span class=\"hljs-keyword\">while</span>(next &lt; length){\n        last = current;\n        current = next;\n        next = last + current;\n    }\n\n    <span class=\"hljs-comment\">// &quot;offset&quot; is the end of eliminated range from front</span>\n    <span class=\"hljs-type\">int</span> offset = <span class=\"hljs-number\">-1</span>, index;\n    <span class=\"hljs-comment\">// while loop until there are elements left to consider.</span>\n    <span class=\"hljs-comment\">// when &quot;next&quot; becomes 1, last is equal to 0, so search is done,</span>\n    <span class=\"hljs-comment\">// because arr[offset] will already be eliminated</span>\n    <span class=\"hljs-keyword\">while</span>(next &gt; <span class=\"hljs-number\">1</span>){\n        <span class=\"hljs-comment\">// check if &quot;last&quot; is valid location</span>\n        index = std::<span class=\"hljs-built_in\">min</span>(offset + last, length<span class=\"hljs-number\">-1</span>);\n        <span class=\"hljs-comment\">// if value is greater than the value at &quot;index&quot;, eliminate the subarray from offset to index</span>\n        <span class=\"hljs-keyword\">if</span>(arr[index] &lt; value){\n            next = current;\n            current = last;\n            last = next - current;\n            offset = index;\n        <span class=\"hljs-comment\">// if value is less than the value at &quot;index&quot;, eliminate the subarray after index+1</span>\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(arr[index] &gt; value){\n            next = last;\n            current = current - last;\n            last = next - current;\n        <span class=\"hljs-comment\">// element is found</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> index;\n        }\n    }\n    <span class=\"hljs-comment\">// comparing the last element</span>\n    <span class=\"hljs-keyword\">if</span>(current &amp;&amp; !arr.<span class=\"hljs-built_in\">empty</span>() &amp;&amp; arr[offset+<span class=\"hljs-number\">1</span>] == value){\n        <span class=\"hljs-keyword\">return</span> offset+<span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-comment\">// value was not found, return -1</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief random tests for checking performance when an array doesn&#x27;t contain an element\n*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">no_occurence_tests</span><span class=\"hljs-params\">()</span></span>{\n    <span class=\"hljs-type\">bool</span> passed = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-type\">int</span> rand_num, rand_value, index, num_tests = <span class=\"hljs-number\">1000</span>;\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; arr;\n    <span class=\"hljs-keyword\">while</span>(num_tests--){\n        arr.<span class=\"hljs-built_in\">clear</span>();\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++){\n            rand_num = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">1000</span>;\n            arr.<span class=\"hljs-built_in\">push_back</span>(rand_num);\n        }\n        rand_value = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">1000</span>;\n        <span class=\"hljs-keyword\">while</span>(std::<span class=\"hljs-built_in\">find</span>(arr.<span class=\"hljs-built_in\">begin</span>(), arr.<span class=\"hljs-built_in\">end</span>(), rand_value) != arr.<span class=\"hljs-built_in\">end</span>()){\n            std::<span class=\"hljs-built_in\">remove</span>(arr.<span class=\"hljs-built_in\">begin</span>(), arr.<span class=\"hljs-built_in\">end</span>(), rand_value);\n        }\n        <span class=\"hljs-built_in\">sort</span>(arr.<span class=\"hljs-built_in\">begin</span>(), arr.<span class=\"hljs-built_in\">end</span>());\n        index = <span class=\"hljs-built_in\">fibonacci_search</span>(arr, rand_value);\n        passed = passed &amp;&amp; (index == <span class=\"hljs-number\">-1</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> passed;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief random tests which cover cases when we have one, multiple or zero occurences of the value we&#x27;re looking for\n*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">random_tests</span><span class=\"hljs-params\">()</span></span>{\n    <span class=\"hljs-type\">bool</span> passed = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-type\">int</span> rand_num, rand_value, index, real_value, num_tests = <span class=\"hljs-number\">10000</span>;\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; arr;\n    <span class=\"hljs-keyword\">while</span>(num_tests--){\n        arr.<span class=\"hljs-built_in\">clear</span>();\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++){\n            rand_num = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">1000</span>;\n            arr.<span class=\"hljs-built_in\">push_back</span>(rand_num);\n        }\n        rand_value = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">1000</span>;\n        std::<span class=\"hljs-built_in\">sort</span>(arr.<span class=\"hljs-built_in\">begin</span>(), arr.<span class=\"hljs-built_in\">end</span>());\n        index = <span class=\"hljs-built_in\">fibonacci_search</span>(arr, rand_value);\n        <span class=\"hljs-keyword\">if</span>(index != <span class=\"hljs-number\">-1</span>){\n            real_value = arr[index];\n            passed = passed &amp;&amp; (real_value == rand_value);\n        } <span class=\"hljs-keyword\">else</span> {\n            passed = passed &amp;&amp; (std::<span class=\"hljs-built_in\">find</span>(arr.<span class=\"hljs-built_in\">begin</span>(), arr.<span class=\"hljs-built_in\">end</span>(), rand_value) == arr.<span class=\"hljs-built_in\">end</span>());\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> passed;\n}\n\n<span class=\"hljs-comment\">/**\n * Main Function\n * testing the algorithm\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">no_occurence_tests</span>());\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">random_tests</span>());\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/searches/FibonacciSearch.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/searches/FibonacciSearch.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.searches;\n\n<span class=\"hljs-keyword\">import</span> com.thealgorithms.devutils.searches.SearchAlgorithm;\n\n<span class=\"hljs-comment\">/*\n*  Fibonacci Search is a popular algorithm which finds the position of a target value in\n*  a sorted array\n*\n*  The time complexity for this search algorithm is O(log3(n))\n*  The space complexity for this search algorithm is O(1)\n*  @author Kanakalatha Vemuru (https://github.com/KanakalathaVemuru)\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FibonacciSearch</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SearchAlgorithm</span> {\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@param</span> array is a sorted array where the element has to be searched\n     * <span class=\"hljs-doctag\">@param</span> key is an element whose position has to be found\n     * <span class=\"hljs-doctag\">@param</span> &lt;T&gt; is any comparable type\n     * <span class=\"hljs-doctag\">@return</span> index of the element\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">find</span><span class=\"hljs-params\">(T[] array, T key)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">fibMinus1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">fibMinus2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">fibNumber</span> <span class=\"hljs-operator\">=</span> fibMinus1 + fibMinus2;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> array.length;\n\n        <span class=\"hljs-keyword\">while</span> (fibNumber &lt; n) {\n            fibMinus2 = fibMinus1;\n            fibMinus1 = fibNumber;\n            fibNumber = fibMinus2 + fibMinus1;\n        }\n\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">offset</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">while</span> (fibNumber &gt; <span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> Math.min(offset + fibMinus2, n - <span class=\"hljs-number\">1</span>);\n\n            <span class=\"hljs-keyword\">if</span> (array[i].compareTo(key) &lt; <span class=\"hljs-number\">0</span>) {\n                fibNumber = fibMinus1;\n                fibMinus1 = fibMinus2;\n                fibMinus2 = fibNumber - fibMinus1;\n                offset = i;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (array[i].compareTo(key) &gt; <span class=\"hljs-number\">0</span>) {\n                fibNumber = fibMinus2;\n                fibMinus1 = fibMinus1 - fibMinus2;\n                fibMinus2 = fibNumber - fibMinus1;\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">return</span> i;\n            }\n        }\n\n        <span class=\"hljs-keyword\">if</span> (fibMinus1 == <span class=\"hljs-number\">1</span> &amp;&amp; array[offset + <span class=\"hljs-number\">1</span>] == key) {\n            <span class=\"hljs-keyword\">return</span> offset + <span class=\"hljs-number\">1</span>;\n        }\n\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-comment\">// Driver Program</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        Integer[] integers = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">128</span>, <span class=\"hljs-number\">256</span>, <span class=\"hljs-number\">512</span>};\n\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> integers.length;\n        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">shouldBeFound</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">128</span>;\n        <span class=\"hljs-type\">FibonacciSearch</span> <span class=\"hljs-variable\">fsearch</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FibonacciSearch</span>();\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">atIndex</span> <span class=\"hljs-operator\">=</span> fsearch.find(integers, shouldBeFound);\n\n        System.out.println(\n                <span class=\"hljs-string\">&quot;Should be found: &quot;</span> + shouldBeFound + <span class=\"hljs-string\">&quot;. Found &quot;</span> + integers[atIndex] + <span class=\"hljs-string\">&quot; at index &quot;</span> + atIndex + <span class=\"hljs-string\">&quot;. An array length &quot;</span> + size);\n    }\n\n}\n"
    },
    "c": {
      "dir": "searching/fibonacci_search.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/searching/fibonacci_search.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">fibMonaccianSearch</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> n)</span>\n{\n    <span class=\"hljs-comment\">/* Initialize fibonacci numbers */</span>\n    <span class=\"hljs-type\">int</span> fibMMm2 = <span class=\"hljs-number\">0</span>;               <span class=\"hljs-comment\">// (m-2)&#x27;th Fibonacci No.</span>\n    <span class=\"hljs-type\">int</span> fibMMm1 = <span class=\"hljs-number\">1</span>;               <span class=\"hljs-comment\">// (m-1)&#x27;th Fibonacci No.</span>\n    <span class=\"hljs-type\">int</span> fibM = fibMMm2 + fibMMm1;  <span class=\"hljs-comment\">// m&#x27;th Fibonacci</span>\n\n    <span class=\"hljs-comment\">/* fibM is going to store the smallest Fibonacci\n       Number greater than or equal to n */</span>\n    <span class=\"hljs-keyword\">while</span> (fibM &lt; n)\n    {\n        fibMMm2 = fibMMm1;\n        fibMMm1 = fibM;\n        fibM = fibMMm2 + fibMMm1;\n    }\n\n    <span class=\"hljs-comment\">// Marks the eliminated range from front</span>\n    <span class=\"hljs-type\">int</span> offset = <span class=\"hljs-number\">-1</span>;\n\n    <span class=\"hljs-comment\">/* while there are elements to be inspected. Note that\n       we compare arr[fibMm2] with x. When fibM becomes 1,\n       fibMm2 becomes 0 */</span>\n    <span class=\"hljs-keyword\">while</span> (fibM &gt; <span class=\"hljs-number\">1</span>)\n    {\n        <span class=\"hljs-comment\">// Check if fibMm2 is a valid location</span>\n\n        <span class=\"hljs-comment\">// sets i to the min. of (offset+fibMMm2) and (n-1)</span>\n        <span class=\"hljs-type\">int</span> i = ((offset + fibMMm2) &lt; (n - <span class=\"hljs-number\">1</span>)) ? (offset + fibMMm2) : (n - <span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-comment\">/* If x is greater than the value at index fibMm2,\n           cut the subarray array from offset to i */</span>\n        <span class=\"hljs-keyword\">if</span> (arr[i] &lt; x)\n        {\n            fibM = fibMMm1;\n            fibMMm1 = fibMMm2;\n            fibMMm2 = fibM - fibMMm1;\n            offset = i;\n        }\n\n        <span class=\"hljs-comment\">/* If x is greater than the value at index fibMm2,\n           cut the subarray after i+1  */</span>\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (arr[i] &gt; x)\n        {\n            fibM = fibMMm2;\n            fibMMm1 = fibMMm1 - fibMMm2;\n            fibMMm2 = fibM - fibMMm1;\n        }\n\n        <span class=\"hljs-comment\">/* element found. return index */</span>\n        <span class=\"hljs-keyword\">else</span>\n            <span class=\"hljs-keyword\">return</span> i;\n    }\n\n    <span class=\"hljs-comment\">/* comparing the last element with x */</span>\n    <span class=\"hljs-keyword\">if</span> (fibMMm1 &amp;&amp; arr[offset + <span class=\"hljs-number\">1</span>] == x)\n        <span class=\"hljs-keyword\">return</span> offset + <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-comment\">/*element not found. return -1 */</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\n{\n    <span class=\"hljs-type\">int</span> arr[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">82</span>, <span class=\"hljs-number\">85</span>, <span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">100</span>};\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-keyword\">sizeof</span>(arr) / <span class=\"hljs-keyword\">sizeof</span>(arr[<span class=\"hljs-number\">0</span>]);\n    <span class=\"hljs-type\">int</span> x = <span class=\"hljs-number\">85</span>;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Found at index: %d&quot;</span>, fibMonaccianSearch(arr, x, n));\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "rust": {
      "dir": "src/searching/fibonacci_search.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/searching/fibonacci_search.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::cmp::min;\n<span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fibonacci_search</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(item: &amp;T, arr: &amp;[T]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">usize</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">len</span> = arr.<span class=\"hljs-title function_ invoke__\">len</span>();\n    <span class=\"hljs-keyword\">if</span> len == <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>;\n    }\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">start</span> = -<span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">f0</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">f1</span> = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">f2</span> = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">while</span> f2 &lt; len {\n        f0 = f1;\n        f1 = f2;\n        f2 = f0 + f1;\n    }\n    <span class=\"hljs-keyword\">while</span> f2 &gt; <span class=\"hljs-number\">1</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">min</span>((f0 <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">isize</span> + start) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>, len - <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">match</span> item.<span class=\"hljs-title function_ invoke__\">cmp</span>(&amp;arr[index]) {\n            Ordering::Less =&gt; {\n                f2 = f0;\n                f1 -= f0;\n                f0 = f2 - f1;\n            }\n            Ordering::Equal =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Some</span>(index),\n            Ordering::Greater =&gt; {\n                f2 = f1;\n                f1 = f0;\n                f0 = f2 - f1;\n                start = index <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">isize</span>;\n            }\n        }\n    }\n    <span class=\"hljs-title function_ invoke__\">if</span> (f1 != <span class=\"hljs-number\">0</span>) &amp;&amp; (&amp;arr[len - <span class=\"hljs-number\">1</span>] == item) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Some</span>(len - <span class=\"hljs-number\">1</span>);\n    }\n    <span class=\"hljs-literal\">None</span>\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">fibonacci_search</span>(&amp;<span class=\"hljs-string\">&quot;a&quot;</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-literal\">None</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">one_item</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">fibonacci_search</span>(&amp;<span class=\"hljs-string\">&quot;a&quot;</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">0</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">search_strings</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">fibonacci_search</span>(&amp;<span class=\"hljs-string\">&quot;a&quot;</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;google&quot;</span>, <span class=\"hljs-string\">&quot;zoo&quot;</span>]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">0</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">search_ints</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">fibonacci_search</span>(&amp;<span class=\"hljs-number\">4</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">3</span>));\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">fibonacci_search</span>(&amp;<span class=\"hljs-number\">3</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">2</span>));\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">fibonacci_search</span>(&amp;<span class=\"hljs-number\">2</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">1</span>));\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">fibonacci_search</span>(&amp;<span class=\"hljs-number\">1</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">0</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">not_found</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">fibonacci_search</span>(&amp;<span class=\"hljs-number\">5</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-literal\">None</span>);\n    }\n}\n"
    },
    "dart": {
      "dir": "search/fibonacci_Search.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/search/fibonacci_Search.dart",
      "code": "<span class=\"hljs-comment\">//Title:Fibonacci Search</span>\n<span class=\"hljs-comment\">//Author:Shawn</span>\n<span class=\"hljs-comment\">//Email:stepfencurryxiao@gmail.com</span>\n\n<span class=\"hljs-built_in\">int</span> fibMaonaccianSearch(<span class=\"hljs-built_in\">List</span> arr, <span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> n) {\n  <span class=\"hljs-comment\">//Initialize fibonacci numbers</span>\n  <span class=\"hljs-comment\">//(m - 2)&#x27;th Fibonacci No</span>\n  <span class=\"hljs-built_in\">int</span> fibMMm2 = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-comment\">//(m - 2)&#x27;th Fibonacci No</span>\n  <span class=\"hljs-built_in\">int</span> fibMMm1 = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-comment\">//m&#x27;th Fibonacci</span>\n  <span class=\"hljs-built_in\">int</span> fibM = fibMMm2 + fibMMm1;\n\n  <span class=\"hljs-comment\">//fibM is going to store the smallest Fibonacci</span>\n  <span class=\"hljs-comment\">//Number greater than or equal to n</span>\n  <span class=\"hljs-keyword\">while</span> (fibM &lt; n) {\n    fibMMm2 = fibMMm1;\n    fibMMm1 = fibM;\n    fibM = fibMMm2 + fibMMm1;\n  }\n\n  <span class=\"hljs-comment\">// Marks the eliminated range from front</span>\n  <span class=\"hljs-built_in\">int</span> offset = <span class=\"hljs-number\">-1</span>;\n\n  <span class=\"hljs-comment\">/*While three are elements to be inspected.\n   * Note that we compare arr[fibMMm2] with x.\n   * When fibM becomes 1,\n   * fibMm2 becomes 0 */</span>\n  <span class=\"hljs-keyword\">while</span> (fibM &gt; <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-comment\">//Check if fibMMm2 is a valid location</span>\n\n    <span class=\"hljs-comment\">//sets i to the min. of (offset + fibMMm2) and (n - 1)</span>\n    <span class=\"hljs-built_in\">int</span> i = ((offset + fibMMm2) &lt; (n - <span class=\"hljs-number\">1</span>)) ? (offset + fibMMm2) : (n - <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-comment\">/* If x is greater than the value at index fibMmm2\n     * cut the subarray array from offset to i\n     */</span>\n\n    <span class=\"hljs-keyword\">if</span> (arr[i] &lt; x) {\n      fibM = fibMMm1;\n      fibMMm1 = fibMMm2;\n      fibMMm2 = fibM - fibMMm1;\n      offset = i;\n    }\n\n    <span class=\"hljs-comment\">/* If x is greater than the value at index fibMmm2\n     * cut the subarray array after i + 1.\n     */</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (arr[i] &gt; x) {\n      fibM = fibMMm2;\n      fibMMm1 = fibMMm1 - fibMMm2;\n      fibMMm2 = fibM - fibMMm1;\n    }\n\n    <span class=\"hljs-comment\">//elwment found.Return index</span>\n    <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> i;\n    }\n  }\n\n  <span class=\"hljs-comment\">//Comparing the last element with x</span>\n  <span class=\"hljs-keyword\">if</span> (arr[offset + <span class=\"hljs-number\">1</span>] == x) {\n    <span class=\"hljs-keyword\">return</span> offset + <span class=\"hljs-number\">1</span>;\n  }\n\n  <span class=\"hljs-comment\">//element not found :(</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  <span class=\"hljs-comment\">//Get the array</span>\n  <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>];\n\n  <span class=\"hljs-keyword\">var</span> result;\n\n  <span class=\"hljs-comment\">//Print the array</span>\n  <span class=\"hljs-built_in\">print</span>(arr);\n\n  <span class=\"hljs-comment\">//The size of the array</span>\n  <span class=\"hljs-keyword\">var</span> n = arr.length;\n\n  <span class=\"hljs-comment\">//Key to be searched in the array</span>\n  <span class=\"hljs-keyword\">var</span> key = <span class=\"hljs-number\">7</span>;\n\n  <span class=\"hljs-comment\">//Search the key using ternarySearch</span>\n  result = fibMaonaccianSearch(arr, key, n);\n\n  <span class=\"hljs-comment\">//Print the result</span>\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Index of &quot;</span> + key.toString() + <span class=\"hljs-string\">&quot; is &quot;</span> + result.toString());\n}\n"
    },
    "ruby": {
      "dir": "searches/fibonacci_search.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/searches/fibonacci_search.rb",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fibonacci_search</span> int arr, int element\n    n = n.size\n    f2 = <span class=\"hljs-number\">0</span>\n    f1 = <span class=\"hljs-number\">1</span>\n    f  = f2 + f1\n    offset = -<span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">while</span> f &lt; n <span class=\"hljs-keyword\">do</span>\n\tf2 = f1;\n\tf1 = f;\n\tf  = f2 + f1;\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-keyword\">while</span> f &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\n\ti = [offset+f2, n-<span class=\"hljs-number\">1</span>].min\n\n\t<span class=\"hljs-keyword\">if</span> arr[i] &lt; element\n\t    f  = f1\n\t    f1 = f2\n\t    f2 = f - f1\n\t    offset = i\n\t<span class=\"hljs-keyword\">elsif</span> arr[i] &gt; element\n\t    f  = f2\n\t    f1 = f1 - f2\n\t    f2 = f - f1\t\n\t<span class=\"hljs-keyword\">else</span>\n\t    <span class=\"hljs-keyword\">return</span> i\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-keyword\">return</span> offset + <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> f1 &amp;&amp; arr[offset + <span class=\"hljs-number\">1</span>] == element\n\n    -<span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "php": {
      "dir": "searches/fibonacciSearch.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/searches/fibonacciSearch.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-comment\">/*\n * Function to find nth number in Fibonacci sequence.\n * Uses a version of memoization and runs very fast!\n */</span>\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@param</span> int $n position to check\n * <span class=\"hljs-doctag\">@param</span> array $m array to store solved trees\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fibonacciPosition</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$n</span>, <span class=\"hljs-keyword\">array</span> &amp;<span class=\"hljs-variable\">$m</span> = []</span>)\n</span>{\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$m</span>[<span class=\"hljs-variable\">$n</span>])) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$m</span>[<span class=\"hljs-variable\">$n</span>];\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable\">$n</span> &lt; <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$n</span>;\n\n    <span class=\"hljs-variable\">$m</span>[<span class=\"hljs-variable\">$n</span>] = <span class=\"hljs-title function_ invoke__\">fibonacciPosition</span>(<span class=\"hljs-variable\">$n</span> - <span class=\"hljs-number\">1</span>, <span class=\"hljs-variable\">$m</span>) + <span class=\"hljs-title function_ invoke__\">fibonacciPosition</span>(<span class=\"hljs-variable\">$n</span> - <span class=\"hljs-number\">2</span>, <span class=\"hljs-variable\">$m</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$m</span>[<span class=\"hljs-variable\">$n</span>];\n\n}\n\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-title function_ invoke__\">fibonacciPosition</span>(<span class=\"hljs-number\">59</span>);\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Search/FibonacciSearcher.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/Algorithms/Search/FibonacciSearcher.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Search</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Class that implements Fibonacci search algorithm.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Type of array element.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FibonacciSearcher</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-title\">T</span> : <span class=\"hljs-title\">IComparable</span>&lt;<span class=\"hljs-title\">T</span>&gt;\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Finds the index of the item searched for in the array.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Time complexity:</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     worst-case: O(log n),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     average-case: O(log n),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     best-case: O(1).</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Sorted array to be searched in. Cannot be null.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;item&quot;&gt;</span>Item to be searched for. Cannot be null.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>If an item is found, return index. If the array is empty or an item is not found, return -1.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ArgumentNullException&quot;&gt;</span>Gets thrown when the given array or item is null.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">FindIndex</span>(<span class=\"hljs-params\">T[] array, T item</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (array <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentNullException(<span class=\"hljs-string\">&quot;array&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">if</span> (item <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentNullException(<span class=\"hljs-string\">&quot;item&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">var</span> arrayLength = array.Length;\n\n            <span class=\"hljs-keyword\">if</span> (arrayLength &gt; <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-comment\">// find the smallest Fibonacci number that equals or is greater than the array length</span>\n                <span class=\"hljs-keyword\">var</span> fibonacciNumberBeyondPrevious = <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">var</span> fibonacciNumPrevious = <span class=\"hljs-number\">1</span>;\n                <span class=\"hljs-keyword\">var</span> fibonacciNum = fibonacciNumPrevious;\n\n                <span class=\"hljs-keyword\">while</span> (fibonacciNum &lt;= arrayLength)\n                {\n                    fibonacciNumberBeyondPrevious = fibonacciNumPrevious;\n                    fibonacciNumPrevious = fibonacciNum;\n                    fibonacciNum = fibonacciNumberBeyondPrevious + fibonacciNumPrevious;\n                }\n\n                <span class=\"hljs-comment\">// offset to drop the left part of the array</span>\n                <span class=\"hljs-keyword\">var</span> offset = <span class=\"hljs-number\">-1</span>;\n\n                <span class=\"hljs-keyword\">while</span> (fibonacciNum &gt; <span class=\"hljs-number\">1</span>)\n                {\n                    <span class=\"hljs-keyword\">var</span> index = Math.Min(offset + fibonacciNumberBeyondPrevious, arrayLength - <span class=\"hljs-number\">1</span>);\n\n                    <span class=\"hljs-keyword\">switch</span> (item.CompareTo(array[index]))\n                    {\n                        <span class=\"hljs-comment\">// reject approximately 1/3 of the existing array in front</span>\n                        <span class=\"hljs-comment\">// by moving Fibonacci numbers</span>\n                        <span class=\"hljs-keyword\">case</span> &gt; <span class=\"hljs-number\">0</span>:\n                            fibonacciNum = fibonacciNumPrevious;\n                            fibonacciNumPrevious = fibonacciNumberBeyondPrevious;\n                            fibonacciNumberBeyondPrevious = fibonacciNum - fibonacciNumPrevious;\n                            offset = index;\n                            <span class=\"hljs-keyword\">break</span>;\n\n                        <span class=\"hljs-comment\">// reject approximately 2/3 of the existing array behind</span>\n                        <span class=\"hljs-comment\">// by moving Fibonacci numbers</span>\n                        <span class=\"hljs-keyword\">case</span> &lt; <span class=\"hljs-number\">0</span>:\n                            fibonacciNum = fibonacciNumberBeyondPrevious;\n                            fibonacciNumPrevious = fibonacciNumPrevious - fibonacciNumberBeyondPrevious;\n                            fibonacciNumberBeyondPrevious = fibonacciNum - fibonacciNumPrevious;\n                            <span class=\"hljs-keyword\">break</span>;\n                        <span class=\"hljs-literal\">default</span>:\n                            <span class=\"hljs-keyword\">return</span> index;\n                    }\n                }\n\n                <span class=\"hljs-comment\">// check the last element</span>\n                <span class=\"hljs-keyword\">if</span> (fibonacciNumPrevious == <span class=\"hljs-number\">1</span> &amp;&amp; item.Equals(array[^<span class=\"hljs-number\">1</span>]))\n                {\n                    <span class=\"hljs-keyword\">return</span> arrayLength - <span class=\"hljs-number\">1</span>;\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 1
    },
    {
      "name": "Alejandro",
      "email": "47539231+ale94lko@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "DONSIMON92",
      "email": "47272787+DONSIMON92@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Philip Schikora",
      "email": "pschikora87@googlemail.com",
      "commits": 1
    },
    {
      "name": "Administrator",
      "email": "pi@pglp.noip.me",
      "commits": 1
    },
    {
      "name": "James Mc Dermott",
      "email": "james.mcdermott89@gmail.com",
      "commits": 1
    },
    {
      "name": "Ankush263",
      "email": "86042508+Ankush263@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Alhassan Atama",
      "email": "Komputarist@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "KanakalathaVemuru",
      "email": "46847239+KanakalathaVemuru@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "poloso",
      "email": "posorio@sier.com.co",
      "commits": 1
    },
    {
      "name": "Ankur Chattopadhyay",
      "email": "39518771+chttrjeankr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Laisha Wadhwa",
      "email": "laisha.w16@iiits.in",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Andrew S Erwin",
      "email": "andrew@andrewerwin.com",
      "commits": 2
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 3
    },
    {
      "name": "sprintyaf",
      "email": "sstur17@freeuni.edu.ge",
      "commits": 10
    }
  ],
  "explanationUrl": {}
}