{
  "slug": "find-max-recursion",
  "name": "Find Max Recursion",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/find_max_recursion.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/find_max_recursion.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n\n<span class=\"hljs-comment\"># Divide and Conquer algorithm</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find_max</span>(<span class=\"hljs-params\">nums: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span> | <span class=\"hljs-built_in\">float</span>], left: <span class=\"hljs-built_in\">int</span>, right: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    find max value in list\n    :param nums: contains elements\n    :param left: index of first element\n    :param right: index of last element\n    :return: max in nums\n\n    &gt;&gt;&gt; for nums in ([3, 2, 1], [-3, -2, -1], [3, -3, 0], [3.0, 3.1, 2.9]):\n    ...     find_max(nums, 0, len(nums) - 1) == max(nums)\n    True\n    True\n    True\n    True\n    &gt;&gt;&gt; nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n    &gt;&gt;&gt; find_max(nums, 0, len(nums) - 1) == max(nums)\n    True\n    &gt;&gt;&gt; find_max([], 0, 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: find_max() arg is an empty sequence\n    &gt;&gt;&gt; find_max(nums, 0, len(nums)) == max(nums)\n    Traceback (most recent call last):\n        ...\n    IndexError: list index out of range\n    &gt;&gt;&gt; find_max(nums, -len(nums), -1) == max(nums)\n    True\n    &gt;&gt;&gt; find_max(nums, -len(nums) - 1, -1) == max(nums)\n    Traceback (most recent call last):\n        ...\n    IndexError: list index out of range\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(nums) == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;find_max() arg is an empty sequence&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> (\n        left &gt;= <span class=\"hljs-built_in\">len</span>(nums)\n        <span class=\"hljs-keyword\">or</span> left &lt; -<span class=\"hljs-built_in\">len</span>(nums)\n        <span class=\"hljs-keyword\">or</span> right &gt;= <span class=\"hljs-built_in\">len</span>(nums)\n        <span class=\"hljs-keyword\">or</span> right &lt; -<span class=\"hljs-built_in\">len</span>(nums)\n    ):\n        <span class=\"hljs-keyword\">raise</span> IndexError(<span class=\"hljs-string\">&quot;list index out of range&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> left == right:\n        <span class=\"hljs-keyword\">return</span> nums[left]\n    mid = (left + right) &gt;&gt; <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># the middle</span>\n    left_max = find_max(nums, left, mid)  <span class=\"hljs-comment\"># find max in range[left, mid]</span>\n    right_max = find_max(nums, mid + <span class=\"hljs-number\">1</span>, right)  <span class=\"hljs-comment\"># find max in range[mid + 1, right]</span>\n\n    <span class=\"hljs-keyword\">return</span> left_max <span class=\"hljs-keyword\">if</span> left_max &gt;= right_max <span class=\"hljs-keyword\">else</span> right_max\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod(verbose=<span class=\"hljs-literal\">True</span>)\n"
    },
    "javascript": {
      "dir": "Maths/FindMaxRecursion.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/FindMaxRecursion.js",
      "code": "<span class=\"hljs-comment\">/**\r\n * <span class=\"hljs-doctag\">@function</span> <span class=\"hljs-variable\">findMaxRecursion</span>\r\n * <span class=\"hljs-doctag\">@description</span> This algorithm will find the maximum value of a array of numbers.\r\n *\r\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer[]</span>} arr Array of numbers\r\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} left Index of the first element\r\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer</span>} right Index of the last element\r\n *\r\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">Integer</span>} Maximum value of the array\r\n *\r\n * <span class=\"hljs-doctag\">@see</span> [Maximum value](https://en.wikipedia.org/wiki/Maximum_value)\r\n *\r\n * <span class=\"hljs-doctag\">@example</span> findMaxRecursion([1, 2, 4, 5]) = 5\r\n * <span class=\"hljs-doctag\">@example</span> findMaxRecursion([10, 40, 100, 20]) = 100\r\n * <span class=\"hljs-doctag\">@example</span> findMaxRecursion([-1, -2, -4, -5]) = -1\r\n */</span>\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">findMaxRecursion</span> (arr, left, right) {\r\n  <span class=\"hljs-keyword\">const</span> len = arr.<span class=\"hljs-property\">length</span>\r\n\r\n  <span class=\"hljs-keyword\">if</span> (len === <span class=\"hljs-number\">0</span> || !arr) {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">if</span> (left &gt;= len || left &lt; -len || right &gt;= len || right &lt; -len) {\r\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Index out of range&#x27;</span>)\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">if</span> (left === right) {\r\n    <span class=\"hljs-keyword\">return</span> arr[left]\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// n &gt;&gt; m is equivalent to floor(n / pow(2, m)), floor(n / 2) in this case, which is the mid index</span>\r\n  <span class=\"hljs-keyword\">const</span> mid = (left + right) &gt;&gt; <span class=\"hljs-number\">1</span>\r\n\r\n  <span class=\"hljs-keyword\">const</span> leftMax = <span class=\"hljs-title function_\">findMaxRecursion</span>(arr, left, mid)\r\n  <span class=\"hljs-keyword\">const</span> rightMax = <span class=\"hljs-title function_\">findMaxRecursion</span>(arr, mid + <span class=\"hljs-number\">1</span>, right)\r\n\r\n  <span class=\"hljs-comment\">// Return the maximum</span>\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(leftMax, rightMax)\r\n}\r\n\r\n<span class=\"hljs-keyword\">export</span> { findMaxRecursion }\r\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/maths/FindMaxRecursion.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/maths/FindMaxRecursion.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\n\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n<span class=\"hljs-keyword\">import</span> java.util.Random;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FindMaxRecursion</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">rand</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\n\n        <span class=\"hljs-comment\">/* rand size */</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> rand.nextInt(<span class=\"hljs-number\">100</span>) + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-type\">int</span>[] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[size];\n\n        <span class=\"hljs-comment\">/* init array with rand numbers */</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\n            array[i] = rand.nextInt() % <span class=\"hljs-number\">100</span>;\n        }\n\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">max</span><span class=\"hljs-params\">(array, array.length)</span> == Arrays.stream(array).max().getAsInt();\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">max</span><span class=\"hljs-params\">(array, <span class=\"hljs-number\">0</span>, array.length - <span class=\"hljs-number\">1</span>)</span> == Arrays.stream(array).max().getAsInt();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Get max of array using divide and conquer algorithm\n     *\n     * <span class=\"hljs-doctag\">@param</span> array contains elements\n     * <span class=\"hljs-doctag\">@param</span> low the index of the first element\n     * <span class=\"hljs-doctag\">@param</span> high the index of the last element\n     * <span class=\"hljs-doctag\">@return</span> max of {<span class=\"hljs-doctag\">@code</span> array}\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">max</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] array, <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> high)</span> {\n        <span class=\"hljs-keyword\">if</span> (low == high) {\n            <span class=\"hljs-keyword\">return</span> array[low]; <span class=\"hljs-comment\">// or array[high]</span>\n        }\n\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mid</span> <span class=\"hljs-operator\">=</span> (low + high) &gt;&gt;&gt; <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">leftMax</span> <span class=\"hljs-operator\">=</span> max(array, low, mid); <span class=\"hljs-comment\">// get max in [low, mid]</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rightMax</span> <span class=\"hljs-operator\">=</span> max(array, mid + <span class=\"hljs-number\">1</span>, high); <span class=\"hljs-comment\">// get max in [mid+1, high]</span>\n\n        <span class=\"hljs-keyword\">return</span> Math.max(leftMax, rightMax);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Get max of array using recursion algorithm\n     *\n     * <span class=\"hljs-doctag\">@param</span> array contains elements\n     * <span class=\"hljs-doctag\">@param</span> len length of given array\n     * <span class=\"hljs-doctag\">@return</span> max value of {<span class=\"hljs-doctag\">@code</span> array}\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">max</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] array, <span class=\"hljs-type\">int</span> len)</span> {\n        <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-number\">1</span> ? array[<span class=\"hljs-number\">0</span>] : Math.max(max(array, len - <span class=\"hljs-number\">1</span>), array[len - <span class=\"hljs-number\">1</span>]);\n    }\n}\n"
    },
    "dart": {
      "dir": "maths/find_max_recursion.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths/find_max_recursion.dart",
      "code": "<span class=\"hljs-keyword\">void</span> main() {\n  <span class=\"hljs-built_in\">List</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">10</span>];\n  <span class=\"hljs-built_in\">int</span> max = find_max_recursion(numbers, <span class=\"hljs-number\">0</span>, numbers.length - <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;max = <span class=\"hljs-subst\">$max</span>&quot;</span>);\n}\n\n<span class=\"hljs-comment\"><span class=\"language-markdown\">/<span class=\"hljs-strong\">**\n <span class=\"hljs-emphasis\">*</span></span></span> find min using <span class=\"language-markdown\"><span class=\"hljs-strong\"><span class=\"hljs-emphasis\">divide-and-conquer algorithm\n *</span>/</span></span></span>\n<span class=\"hljs-built_in\">int</span> find_max_recursion(<span class=\"hljs-built_in\">List</span> numbers, <span class=\"hljs-built_in\">int</span> low, <span class=\"hljs-built_in\">int</span> high) {\n  <span class=\"hljs-keyword\">if</span> (low == high) {\n    <span class=\"hljs-keyword\">return</span> numbers[low]; <span class=\"hljs-comment\">// or numbers[high]</span>\n  }\n  <span class=\"hljs-built_in\">int</span> mid = (low + high) &gt;&gt; <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-built_in\">int</span> leftMax =\n      find_max_recursion(numbers, low, mid); <span class=\"hljs-comment\">/* max in range [low mid] */</span>\n  <span class=\"hljs-built_in\">int</span> rightMax = find_max_recursion(\n      numbers, mid + <span class=\"hljs-number\">1</span>, high); <span class=\"hljs-comment\">/* max in range [mid + 1, high] */</span>\n  <span class=\"hljs-keyword\">return</span> leftMax &gt;= rightMax ? leftMax : rightMax;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Lewis Tian",
      "email": "taseikyo@gmail.com",
      "commits": 1
    },
    {
      "name": "Exortions",
      "email": "75327059+Exortions@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}