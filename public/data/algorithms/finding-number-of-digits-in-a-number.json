{
  "slug": "finding-number-of-digits-in-a-number",
  "name": "Finding Number of Digits in a Number",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/finding_number_of_digits_in_a_number.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/finding_number_of_digits_in_a_number.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @author [aminos ðŸ‡®ðŸ‡³](https://github.com/amino19)\n * @file\n *\n * @brief [Program to count digits\n * in an\n * integer](https://www.geeksforgeeks.org/program-count-digits-integer-3-different-methods)\n * @details It is a very basic math of finding number of digits in a given\n * number i.e, we can use it by inputting values whether it can be a\n * positive/negative value, let&#x27;s say: an integer. There is also a second\n * method: by using &quot;K = floor(log10(N) + 1)&quot;, but it&#x27;s only applicable for\n * numbers (not integers).\n * For more details, refer to the\n * [Algorithms-Explanation](https://github.com/TheAlgorithms/Algorithms-Explanation/blob/master/en/Basic%20Math/Finding\n * the number of digits in a number.md) repository.\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief The main function that checks\n * the number of digits in a number.\n * @param n the number to check its digits\n * @returns the digits count\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">finding_number_of_digits_in_a_number</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n)</span> </span>{\n    <span class=\"hljs-type\">uint64_t</span> count = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">///&lt; the variable used for the digits count</span>\n\n    <span class=\"hljs-comment\">// iterate until `n` becomes 0</span>\n    <span class=\"hljs-comment\">// remove last digit from `n` in each iteration</span>\n    <span class=\"hljs-comment\">// increase `count` by 1 in each iteration</span>\n    <span class=\"hljs-keyword\">while</span> (n != <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-comment\">// we can also use `n = n / 10`</span>\n        n /= <span class=\"hljs-number\">10</span>;\n        <span class=\"hljs-comment\">// each time the loop is running, `count` will be incremented by 1.</span>\n        ++count;\n    }\n\n    <span class=\"hljs-keyword\">return</span> count;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">finding_number_of_digits_in_a_number</span>(<span class=\"hljs-number\">5492</span>) == <span class=\"hljs-number\">4</span>);\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">finding_number_of_digits_in_a_number</span>(<span class=\"hljs-number\">-0</span>) == <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">finding_number_of_digits_in_a_number</span>(<span class=\"hljs-number\">10000</span>) == <span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">finding_number_of_digits_in_a_number</span>(<span class=\"hljs-number\">9</span>) == <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">finding_number_of_digits_in_a_number</span>(<span class=\"hljs-number\">100000</span>) == <span class=\"hljs-number\">6</span>);\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">finding_number_of_digits_in_a_number</span>(<span class=\"hljs-number\">13</span>) == <span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">finding_number_of_digits_in_a_number</span>(<span class=\"hljs-number\">564</span>) == <span class=\"hljs-number\">3</span>);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;All tests have successfully passed!\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}