{
  "slug": "flood-fill",
  "name": "Flood Fill",
  "categories": [
    "recursive"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Recursive/FloodFill.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Recursive/FloodFill.js",
      "code": "<span class=\"hljs-comment\">/**\r\n * Flood fill.\r\n *\r\n * Flood fill, also called seed fill, is an algorithm that determines and alters the area connected to a given node in a\r\n * multi-dimensional array with some matching attribute. It is used in the &quot;bucket&quot; fill tool of paint programs to fill\r\n * connected, similarly-colored areas with a different color.\r\n *\r\n * (description adapted from https://en.wikipedia.org/wiki/Flood_fill)\r\n * <span class=\"hljs-doctag\">@see</span> https://www.techiedelight.com/flood-fill-algorithm/\r\n */</span>\r\n\r\n<span class=\"hljs-keyword\">const</span> neighbors = [[-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>], [-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], [-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]]\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Implements the flood fill algorithm through a breadth-first approach using a queue.\r\n *\r\n * <span class=\"hljs-doctag\">@param</span> rgbData The image to which the algorithm is applied.\r\n * <span class=\"hljs-doctag\">@param</span> location The start location on the image.\r\n * <span class=\"hljs-doctag\">@param</span> targetColor The old color to be replaced.\r\n * <span class=\"hljs-doctag\">@param</span> replacementColor The new color to replace the old one.\r\n */</span>\r\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">breadthFirstSearch</span> (rgbData, location, targetColor, replacementColor) {\r\n  <span class=\"hljs-keyword\">if</span> (location[<span class=\"hljs-number\">0</span>] &lt; <span class=\"hljs-number\">0</span> ||\r\n    location[<span class=\"hljs-number\">0</span>] &gt;= rgbData.<span class=\"hljs-property\">length</span> ||\r\n    location[<span class=\"hljs-number\">1</span>] &lt; <span class=\"hljs-number\">0</span> ||\r\n    location[<span class=\"hljs-number\">1</span>] &gt;= rgbData[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span>) {\r\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;location should point to a pixel within the rgbData&#x27;</span>)\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">const</span> queue = []\r\n  queue.<span class=\"hljs-title function_\">push</span>(location)\r\n\r\n  <span class=\"hljs-keyword\">while</span> (queue.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>) {\r\n    <span class=\"hljs-title function_\">breadthFirstFill</span>(rgbData, location, targetColor, replacementColor, queue)\r\n  }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Implements the flood fill algorithm through a depth-first approach using recursion.\r\n *\r\n * <span class=\"hljs-doctag\">@param</span> rgbData The image to which the algorithm is applied.\r\n * <span class=\"hljs-doctag\">@param</span> location The start location on the image.\r\n * <span class=\"hljs-doctag\">@param</span> targetColor The old color to be replaced.\r\n * <span class=\"hljs-doctag\">@param</span> replacementColor The new color to replace the old one.\r\n */</span>\r\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">depthFirstSearch</span> (rgbData, location, targetColor, replacementColor) {\r\n  <span class=\"hljs-keyword\">if</span> (location[<span class=\"hljs-number\">0</span>] &lt; <span class=\"hljs-number\">0</span> ||\r\n    location[<span class=\"hljs-number\">0</span>] &gt;= rgbData.<span class=\"hljs-property\">length</span> ||\r\n    location[<span class=\"hljs-number\">1</span>] &lt; <span class=\"hljs-number\">0</span> ||\r\n    location[<span class=\"hljs-number\">1</span>] &gt;= rgbData[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span>) {\r\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;location should point to a pixel within the rgbData&#x27;</span>)\r\n  }\r\n\r\n  <span class=\"hljs-title function_\">depthFirstFill</span>(rgbData, location, targetColor, replacementColor)\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Utility-function to implement the breadth-first loop.\r\n *\r\n * <span class=\"hljs-doctag\">@param</span> rgbData The image to which the algorithm is applied.\r\n * <span class=\"hljs-doctag\">@param</span> location The start location on the image.\r\n * <span class=\"hljs-doctag\">@param</span> targetColor The old color to be replaced.\r\n * <span class=\"hljs-doctag\">@param</span> replacementColor The new color to replace the old one.\r\n * <span class=\"hljs-doctag\">@param</span> queue The locations that still need to be visited.\r\n */</span>\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">breadthFirstFill</span> (rgbData, location, targetColor, replacementColor, queue) {\r\n  <span class=\"hljs-keyword\">const</span> currentLocation = queue[<span class=\"hljs-number\">0</span>]\r\n  queue.<span class=\"hljs-title function_\">shift</span>()\r\n\r\n  <span class=\"hljs-keyword\">if</span> (rgbData[currentLocation[<span class=\"hljs-number\">0</span>]][currentLocation[<span class=\"hljs-number\">1</span>]] === targetColor) {\r\n    rgbData[currentLocation[<span class=\"hljs-number\">0</span>]][currentLocation[<span class=\"hljs-number\">1</span>]] = replacementColor\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; neighbors.<span class=\"hljs-property\">length</span>; i++) {\r\n      <span class=\"hljs-keyword\">const</span> x = currentLocation[<span class=\"hljs-number\">0</span>] + neighbors[i][<span class=\"hljs-number\">0</span>]\r\n      <span class=\"hljs-keyword\">const</span> y = currentLocation[<span class=\"hljs-number\">1</span>] + neighbors[i][<span class=\"hljs-number\">1</span>]\r\n      <span class=\"hljs-keyword\">if</span> (x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; x &lt; rgbData.<span class=\"hljs-property\">length</span> &amp;&amp; y &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; y &lt; rgbData[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span>) {\r\n        queue.<span class=\"hljs-title function_\">push</span>([x, y])\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Utility-function to implement the depth-first loop.\r\n *\r\n * <span class=\"hljs-doctag\">@param</span> rgbData The image to which the algorithm is applied.\r\n * <span class=\"hljs-doctag\">@param</span> location The start location on the image.\r\n * <span class=\"hljs-doctag\">@param</span> targetColor The old color to be replaced.\r\n * <span class=\"hljs-doctag\">@param</span> replacementColor The new color to replace the old one.\r\n */</span>\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">depthFirstFill</span> (rgbData, location, targetColor, replacementColor) {\r\n  <span class=\"hljs-keyword\">if</span> (rgbData[location[<span class=\"hljs-number\">0</span>]][location[<span class=\"hljs-number\">1</span>]] === targetColor) {\r\n    rgbData[location[<span class=\"hljs-number\">0</span>]][location[<span class=\"hljs-number\">1</span>]] = replacementColor\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; neighbors.<span class=\"hljs-property\">length</span>; i++) {\r\n      <span class=\"hljs-keyword\">const</span> x = location[<span class=\"hljs-number\">0</span>] + neighbors[i][<span class=\"hljs-number\">0</span>]\r\n      <span class=\"hljs-keyword\">const</span> y = location[<span class=\"hljs-number\">1</span>] + neighbors[i][<span class=\"hljs-number\">1</span>]\r\n      <span class=\"hljs-keyword\">if</span> (x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; x &lt; rgbData.<span class=\"hljs-property\">length</span> &amp;&amp; y &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; y &lt; rgbData[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span>) {\r\n        <span class=\"hljs-title function_\">depthFirstFill</span>(rgbData, [x, y], targetColor, replacementColor)\r\n      }\r\n    }\r\n  }\r\n}\r\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/backtracking/FloodFill.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/backtracking/FloodFill.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.backtracking;\n\n<span class=\"hljs-comment\">/**\n * Java program for Flood fill algorithm.\n * <span class=\"hljs-doctag\">@author</span> Akshay Dubey (https://github.com/itsAkshayDubey)\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FloodFill</span> {\n\n    <span class=\"hljs-comment\">/**\n     * Get the color at the given co-odrinates of a 2D image\n     *\n     * <span class=\"hljs-doctag\">@param</span> image The image to be filled\n     * <span class=\"hljs-doctag\">@param</span> x The x co-ordinate of which color is to be obtained\n     * <span class=\"hljs-doctag\">@param</span> y The y co-ordinate of which color is to be obtained\n     */</span>\n\t\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getPixel</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] image, <span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span> {\n\t\n\t\t<span class=\"hljs-keyword\">return</span> image[x][y];\n\t\n\t}\n\t\n    <span class=\"hljs-comment\">/**\n     * Put the color at the given co-odrinates of a 2D image\n     *\n     * <span class=\"hljs-doctag\">@param</span> image The image to be filed\n     * <span class=\"hljs-doctag\">@param</span> x The x co-ordinate at which color is to be filled\n     * <span class=\"hljs-doctag\">@param</span> y The y co-ordinate at which color is to be filled\n     */</span>\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">putPixel</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] image, <span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y, <span class=\"hljs-type\">int</span> newColor)</span> {\n\t\t\n\t\timage[x][y] = newColor;\n\t\n\t}\n\t\n\t\n    <span class=\"hljs-comment\">/**\n     * Fill the 2D image with new color\n     *\n     * <span class=\"hljs-doctag\">@param</span> image The image to be filed\n     * <span class=\"hljs-doctag\">@param</span> x The x co-ordinate at which color is to be filled\n     * <span class=\"hljs-doctag\">@param</span> y The y co-ordinate at which color is to be filled\n     * <span class=\"hljs-doctag\">@param</span> newColor The new color which to be filled in the image\n     * <span class=\"hljs-doctag\">@param</span> oldColor The old color which is to be replaced in the image\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">floodFill</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] image, <span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y, <span class=\"hljs-type\">int</span> newColor, <span class=\"hljs-type\">int</span> oldColor)</span> {\n\n\t\t<span class=\"hljs-keyword\">if</span>(x &lt; <span class=\"hljs-number\">0</span> || x &gt;= image.length) <span class=\"hljs-keyword\">return</span>;\n\t\t<span class=\"hljs-keyword\">if</span>(y &lt; <span class=\"hljs-number\">0</span> || y &gt;= image[x].length) <span class=\"hljs-keyword\">return</span>;\n\t\t<span class=\"hljs-keyword\">if</span>(getPixel(image, x, y) != oldColor) <span class=\"hljs-keyword\">return</span>;\n\n\t\tputPixel(image, x, y, newColor);\n\n\t\t<span class=\"hljs-comment\">/* Recursively check for horizontally &amp; vertically adjacent coordinates */</span>\n\t\tfloodFill(image, x + <span class=\"hljs-number\">1</span>, y, newColor, oldColor);\n\t\tfloodFill(image, x - <span class=\"hljs-number\">1</span>, y, newColor, oldColor);\n\t\tfloodFill(image, x, y + <span class=\"hljs-number\">1</span>, newColor, oldColor);\n\t\tfloodFill(image, x, y - <span class=\"hljs-number\">1</span>, newColor, oldColor);\n\n\t\t<span class=\"hljs-comment\">/* Recursively check for diagonally adjacent coordinates  */</span>\n\t\tfloodFill(image, x + <span class=\"hljs-number\">1</span>, y - <span class=\"hljs-number\">1</span>, newColor, oldColor);\n\t\tfloodFill(image, x - <span class=\"hljs-number\">1</span>, y + <span class=\"hljs-number\">1</span>, newColor, oldColor);\n\t\tfloodFill(image, x + <span class=\"hljs-number\">1</span>, y + <span class=\"hljs-number\">1</span>, newColor, oldColor);\n\t\tfloodFill(image, x - <span class=\"hljs-number\">1</span>, y - <span class=\"hljs-number\">1</span>, newColor, oldColor);\n\n\t}\n\n}"
    },
    "c-sharp": {
      "dir": "./Algorithms/Other/FloodFill.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/Algorithms/Other/FloodFill.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n<span class=\"hljs-keyword\">using</span> System.Drawing;\n<span class=\"hljs-keyword\">using</span> System.Numerics;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Other</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Flood fill, also called seed fill, is an algorithm that determines and</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> alters the area connected to a given node in a multi-dimensional array with</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> some matching attribute. It is used in the &quot;bucket&quot; fill tool of paint</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> programs to fill connected, similarly-colored areas with a different color.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> (description adapted from https://en.wikipedia.org/wiki/Flood_fill)</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> (see also: https://www.techiedelight.com/flood-fill-algorithm/).</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FloodFill</span>\n    {\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">readonly</span> List&lt;(<span class=\"hljs-built_in\">int</span> xOffset, <span class=\"hljs-built_in\">int</span> yOffset)&gt; Neighbors = <span class=\"hljs-keyword\">new</span>() { (<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>), (<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">0</span>), (<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>), (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>), (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-1</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>) };\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Implements the flood fill algorithm through a breadth-first approach using a queue.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;bitmap&quot;&gt;</span>The bitmap to which the algorithm is applied.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;location&quot;&gt;</span>The start location on the bitmap.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;targetColor&quot;&gt;</span>The old color to be replaced.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;replacementColor&quot;&gt;</span>The new color to replace the old one.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BreadthFirstSearch</span>(<span class=\"hljs-params\">Bitmap bitmap, (<span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y</span>) location, Color targetColor, Color replacementColor)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (location.x &lt; <span class=\"hljs-number\">0</span> || location.x &gt;= bitmap.Width || location.y &lt; <span class=\"hljs-number\">0</span> || location.y &gt;= bitmap.Height)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(<span class=\"hljs-keyword\">nameof</span>(location), <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(location)}</span> should point to a pixel within the bitmap&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">var</span> queue = <span class=\"hljs-keyword\">new</span> List&lt;(<span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y)&gt;();\n            queue.Add(location);\n\n            <span class=\"hljs-keyword\">while</span> (queue.Count &gt; <span class=\"hljs-number\">0</span>)\n            {\n                BreadthFirstFill(bitmap, location, targetColor, replacementColor, queue);\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Implements the flood fill algorithm through a depth-first approach through recursion.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;bitmap&quot;&gt;</span>The bitmap to which the algorithm is applied.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;location&quot;&gt;</span>The start location on the bitmap.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;targetColor&quot;&gt;</span>The old color to be replaced.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;replacementColor&quot;&gt;</span>The new color to replace the old one.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DepthFirstSearch</span>(<span class=\"hljs-params\">Bitmap bitmap, (<span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y</span>) location, Color targetColor, Color replacementColor)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (location.x &lt; <span class=\"hljs-number\">0</span> || location.x &gt;= bitmap.Width || location.y &lt; <span class=\"hljs-number\">0</span> || location.y &gt;= bitmap.Height)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(<span class=\"hljs-keyword\">nameof</span>(location), <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(location)}</span> should point to a pixel within the bitmap&quot;</span>);\n            }\n\n            DepthFirstFill(bitmap, location, targetColor, replacementColor);\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BreadthFirstFill</span>(<span class=\"hljs-params\">Bitmap bitmap, (<span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y</span>) location, Color targetColor, Color replacementColor, List&lt;(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y</span>)&gt; queue)</span>\n        {\n            (<span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y) currentLocation = queue[<span class=\"hljs-number\">0</span>];\n            queue.RemoveAt(<span class=\"hljs-number\">0</span>);\n\n            <span class=\"hljs-keyword\">if</span> (bitmap.GetPixel(currentLocation.x, currentLocation.y) == targetColor)\n            {\n                bitmap.SetPixel(currentLocation.x, currentLocation.y, replacementColor);\n\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; Neighbors.Count; i++)\n                {\n                    <span class=\"hljs-built_in\">int</span> x = currentLocation.x + Neighbors[i].xOffset;\n                    <span class=\"hljs-built_in\">int</span> y = currentLocation.y + Neighbors[i].yOffset;\n                    <span class=\"hljs-keyword\">if</span> (x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; x &lt; bitmap.Width &amp;&amp; y &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; y &lt; bitmap.Height)\n                    {\n                        queue.Add((x, y));\n                    }\n                }\n            }\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DepthFirstFill</span>(<span class=\"hljs-params\">Bitmap bitmap, (<span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y</span>) location, Color targetColor, Color replacementColor)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (bitmap.GetPixel(location.x, location.y) == targetColor)\n            {\n                bitmap.SetPixel(location.x, location.y, replacementColor);\n\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; Neighbors.Count; i++)\n                {\n                    <span class=\"hljs-built_in\">int</span> x = location.x + Neighbors[i].xOffset;\n                    <span class=\"hljs-built_in\">int</span> y = location.y + Neighbors[i].yOffset;\n                    <span class=\"hljs-keyword\">if</span> (x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; x &lt; bitmap.Width &amp;&amp; y &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; y &lt; bitmap.Height)\n                    {\n                        DepthFirstFill(bitmap, (x, y), targetColor, replacementColor);\n                    }\n                }\n            }\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "Akshay Dubey",
      "email": "38462415+itsAkshayDubey@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Nikhil Bisht",
      "email": "90137914+nikslyon19@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "algobytewise",
      "email": "algobytewise@gmail.com",
      "commits": 2
    },
    {
      "name": "Roland Hummel",
      "email": "roland.hummel@qaware.de",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}