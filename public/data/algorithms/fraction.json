{
  "slug": "fraction",
  "name": "Fraction",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "lua": {
      "dir": "src/math/fraction.lua",
      "url": "https://github.com/TheAlgorithms/lua/tree/master/src/math/fraction.lua",
      "code": "<span class=\"hljs-comment\">-- Fraction &quot;class&quot; with metatable-based operators, featuring modulo and integer exponentiation</span>\n<span class=\"hljs-comment\">-- Fractions are often used to improve numerical stability in algorithms that rely on accurate division</span>\n<span class=\"hljs-comment\">-- which imprecise floating-point operations often can&#x27;t provide</span>\n\n<span class=\"hljs-keyword\">local</span> gcd = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;math.greatest_common_divisor&quot;</span>)\n<span class=\"hljs-keyword\">local</span> intpow = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;math.intpow&quot;</span>)\n\n<span class=\"hljs-keyword\">local</span> fraction = {}\n\n<span class=\"hljs-keyword\">local</span> metatable = { <span class=\"hljs-built_in\">__index</span> = fraction }\n\n<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shorten</span><span class=\"hljs-params\">(self)</span></span>\n\t<span class=\"hljs-comment\">-- Divide numerator &amp; denominator by their GCD</span>\n\t<span class=\"hljs-keyword\">local</span> divisor = gcd(<span class=\"hljs-built_in\">self</span>.numerator, <span class=\"hljs-built_in\">self</span>.denominator)\n\t<span class=\"hljs-built_in\">self</span>.numerator = <span class=\"hljs-built_in\">self</span>.numerator / divisor\n\t<span class=\"hljs-built_in\">self</span>.denominator = <span class=\"hljs-built_in\">self</span>.denominator / divisor\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">self</span>.denominator &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span> <span class=\"hljs-comment\">-- always move signs to the numerator</span>\n\t\t<span class=\"hljs-built_in\">self</span>.denominator = -<span class=\"hljs-built_in\">self</span>.denominator\n\t\t<span class=\"hljs-built_in\">self</span>.numerator = -<span class=\"hljs-built_in\">self</span>.numerator\n\t<span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">extend_to_common_denominator</span><span class=\"hljs-params\">(self, other)</span></span>\n\t<span class=\"hljs-keyword\">local</span> divisor = gcd(<span class=\"hljs-built_in\">self</span>.denominator, other.denominator)\n\t<span class=\"hljs-keyword\">local</span> extend_other = <span class=\"hljs-built_in\">self</span>.denominator / divisor\n\t<span class=\"hljs-keyword\">return</span> other.denominator / divisor * <span class=\"hljs-built_in\">self</span>.numerator,\n\t\textend_other * other.numerator,\n\t\textend_other * other.denominator\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">new</span><span class=\"hljs-params\">(numerator, denominator)</span></span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">setmetatable</span>({ numerator = numerator, denominator = denominator }, metatable)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fraction.new</span><span class=\"hljs-params\">(numerator, denominator)</span></span>\n\t<span class=\"hljs-built_in\">assert</span>(denominator ~= <span class=\"hljs-number\">0</span>)\n\t<span class=\"hljs-keyword\">local</span> <span class=\"hljs-built_in\">self</span> = new(numerator, denominator)\n\tshorten(<span class=\"hljs-built_in\">self</span>)\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">self</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fraction.from_number</span><span class=\"hljs-params\">(\n\tnumber <span class=\"hljs-comment\">-- may be decimal; note that some decimals aren&#x27;t accurately represented by floats</span>\n)</span></span>\n\t<span class=\"hljs-keyword\">local</span> denominator = <span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-keyword\">while</span> number % <span class=\"hljs-number\">1</span> ~= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">do</span>\n\t\tnumber = number * <span class=\"hljs-number\">2</span>\n\t\tdenominator = denominator * <span class=\"hljs-number\">2</span>\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">return</span> fraction.new(number, denominator)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bin_op</span><span class=\"hljs-params\">(name, operator)</span></span>\n\tmetatable[<span class=\"hljs-string\">&quot;__&quot;</span> .. name] = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(self, other)</span></span>\n\t\t<span class=\"hljs-comment\">-- Treat numbers as fractions with denominator 1</span>\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">type</span>(<span class=\"hljs-built_in\">self</span>) == <span class=\"hljs-string\">&quot;number&quot;</span> <span class=\"hljs-keyword\">then</span>\n\t\t\t<span class=\"hljs-built_in\">self</span> = fraction.from_number(<span class=\"hljs-built_in\">self</span>)\n\t\t<span class=\"hljs-keyword\">elseif</span> <span class=\"hljs-built_in\">type</span>(other) == <span class=\"hljs-string\">&quot;number&quot;</span> <span class=\"hljs-keyword\">then</span>\n\t\t\tother = fraction.from_number(other)\n\t\t<span class=\"hljs-keyword\">end</span>\n\t\t<span class=\"hljs-keyword\">return</span> operator(<span class=\"hljs-built_in\">self</span>, other)\n\t<span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\">-- Arithmetic binary operators</span>\n\nmetatable.<span class=\"hljs-built_in\">__pow</span> = intpow\n\nbin_op(<span class=\"hljs-string\">&quot;add&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(self, other)</span></span>\n\t<span class=\"hljs-keyword\">local</span> self_numerator, other_numerator, common_denominator = extend_to_common_denominator(<span class=\"hljs-built_in\">self</span>, other)\n\t<span class=\"hljs-keyword\">return</span> fraction.new(self_numerator + other_numerator, common_denominator)\n<span class=\"hljs-keyword\">end</span>)\n\nbin_op(<span class=\"hljs-string\">&quot;sub&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(self, other)</span></span>\n\t<span class=\"hljs-keyword\">local</span> self_numerator, other_numerator, common_denominator = extend_to_common_denominator(<span class=\"hljs-built_in\">self</span>, other)\n\t<span class=\"hljs-keyword\">return</span> fraction.new(self_numerator - other_numerator, common_denominator)\n<span class=\"hljs-keyword\">end</span>)\n\nbin_op(<span class=\"hljs-string\">&quot;mul&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(self, other)</span></span>\n\t<span class=\"hljs-keyword\">return</span> fraction.new(<span class=\"hljs-built_in\">self</span>.numerator * other.numerator, <span class=\"hljs-built_in\">self</span>.denominator * other.denominator)\n<span class=\"hljs-keyword\">end</span>)\n\nbin_op(<span class=\"hljs-string\">&quot;div&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(self, other)</span></span>\n\t<span class=\"hljs-built_in\">assert</span>(other.numerator ~= <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;division by zero&quot;</span>)\n\t<span class=\"hljs-keyword\">return</span> fraction.new(<span class=\"hljs-built_in\">self</span>.numerator * other.denominator, <span class=\"hljs-built_in\">self</span>.denominator * other.numerator)\n<span class=\"hljs-keyword\">end</span>)\n\nbin_op(<span class=\"hljs-string\">&quot;mod&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(self, other)</span></span>\n\t<span class=\"hljs-keyword\">local</span> self_numerator, other_numerator, common_denominator = extend_to_common_denominator(<span class=\"hljs-built_in\">self</span>, other)\n\t<span class=\"hljs-keyword\">return</span> fraction.new(self_numerator % other_numerator, common_denominator)\n<span class=\"hljs-keyword\">end</span>)\n\n<span class=\"hljs-comment\">-- Unary minus</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">metatable:__unm</span><span class=\"hljs-params\">()</span></span>\n\t<span class=\"hljs-keyword\">return</span> new(-<span class=\"hljs-built_in\">self</span>.numerator, <span class=\"hljs-built_in\">self</span>.denominator)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\">-- Comparison operators</span>\n\nbin_op(<span class=\"hljs-string\">&quot;eq&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(self, other)</span></span>\n\t<span class=\"hljs-comment\">-- extending the fractions is not needed for equality comparison as fractions are always shortened</span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">self</span>.numerator == other.numerator <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">self</span>.denominator == other.denominator\n<span class=\"hljs-keyword\">end</span>)\n\nbin_op(<span class=\"hljs-string\">&quot;lt&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(self, other)</span></span>\n\t<span class=\"hljs-keyword\">local</span> self_numerator, other_numerator = extend_to_common_denominator(<span class=\"hljs-built_in\">self</span>, other)\n\t<span class=\"hljs-keyword\">return</span> self_numerator &lt; other_numerator\n<span class=\"hljs-keyword\">end</span>)\n\nbin_op(<span class=\"hljs-string\">&quot;le&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(self, other)</span></span>\n\t<span class=\"hljs-keyword\">local</span> self_numerator, other_numerator = extend_to_common_denominator(<span class=\"hljs-built_in\">self</span>, other)\n\t<span class=\"hljs-keyword\">return</span> self_numerator &lt;= other_numerator\n<span class=\"hljs-keyword\">end</span>)\n\n<span class=\"hljs-comment\">-- Conversions</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">metatable:__tostring</span><span class=\"hljs-params\">()</span></span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">self</span>.numerator .. <span class=\"hljs-string\">&quot;/&quot;</span> .. <span class=\"hljs-built_in\">self</span>.denominator\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fraction:to_number</span><span class=\"hljs-params\">()</span></span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">self</span>.numerator / <span class=\"hljs-built_in\">self</span>.denominator <span class=\"hljs-comment\">-- numeric value of the fraction - possibly lossy</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">return</span> fraction\n"
    }
  },
  "contributors": [
    {
      "name": "Lars Mueller",
      "email": "appgurulars@gmx.de",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}