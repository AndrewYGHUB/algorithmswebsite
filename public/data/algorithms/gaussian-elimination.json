{
  "slug": "gaussian-elimination",
  "name": "Gaussian Elimination",
  "categories": [
    "numericalanalysis"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "arithmetic_analysis/gaussian_elimination.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/arithmetic_analysis/gaussian_elimination.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nGaussian elimination method for solving a system of linear equations.\nGaussian elimination - https://en.wikipedia.org/wiki/Gaussian_elimination\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">from</span> numpy <span class=\"hljs-keyword\">import</span> float64\n<span class=\"hljs-keyword\">from</span> numpy.typing <span class=\"hljs-keyword\">import</span> NDArray\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">retroactive_resolution</span>(<span class=\"hljs-params\">\n    coefficients: NDArray[float64], vector: NDArray[float64]\n</span>) -&gt; NDArray[float64]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    This function performs a retroactive linear system resolution\n        for triangular matrix\n\n    Examples:\n        2x1 + 2x2 - 1x3 = 5         2x1 + 2x2 = -1\n        0x1 - 2x2 - 1x3 = -7        0x1 - 2x2 = -1\n        0x1 + 0x2 + 5x3 = 15\n    &gt;&gt;&gt; gaussian_elimination([[2, 2, -1], [0, -2, -1], [0, 0, 5]], [[5], [-7], [15]])\n    array([[2.],\n           [2.],\n           [3.]])\n    &gt;&gt;&gt; gaussian_elimination([[2, 2], [0, -2]], [[-1], [-1]])\n    array([[-1. ],\n           [ 0.5]])\n    &quot;&quot;&quot;</span>\n\n    rows, columns = np.shape(coefficients)\n\n    x: NDArray[float64] = np.zeros((rows, <span class=\"hljs-number\">1</span>), dtype=<span class=\"hljs-built_in\">float</span>)\n    <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">reversed</span>(<span class=\"hljs-built_in\">range</span>(rows)):\n        <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> col <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(row + <span class=\"hljs-number\">1</span>, columns):\n            <span class=\"hljs-built_in\">sum</span> += coefficients[row, col] * x[col]\n\n        x[row, <span class=\"hljs-number\">0</span>] = (vector[row] - <span class=\"hljs-built_in\">sum</span>) / coefficients[row, row]\n\n    <span class=\"hljs-keyword\">return</span> x\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gaussian_elimination</span>(<span class=\"hljs-params\">\n    coefficients: NDArray[float64], vector: NDArray[float64]\n</span>) -&gt; NDArray[float64]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    This function performs Gaussian elimination method\n\n    Examples:\n        1x1 - 4x2 - 2x3 = -2        1x1 + 2x2 = 5\n        5x1 + 2x2 - 2x3 = -3        5x1 + 2x2 = 5\n        1x1 - 1x2 + 0x3 = 4\n    &gt;&gt;&gt; gaussian_elimination([[1, -4, -2], [5, 2, -2], [1, -1, 0]], [[-2], [-3], [4]])\n    array([[ 2.3 ],\n           [-1.7 ],\n           [ 5.55]])\n    &gt;&gt;&gt; gaussian_elimination([[1, 2], [5, 2]], [[5], [5]])\n    array([[0. ],\n           [2.5]])\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># coefficients must to be a square matrix so we need to check first</span>\n    rows, columns = np.shape(coefficients)\n    <span class=\"hljs-keyword\">if</span> rows != columns:\n        <span class=\"hljs-keyword\">return</span> np.array((), dtype=<span class=\"hljs-built_in\">float</span>)\n\n    <span class=\"hljs-comment\"># augmented matrix</span>\n    augmented_mat: NDArray[float64] = np.concatenate((coefficients, vector), axis=<span class=\"hljs-number\">1</span>)\n    augmented_mat = augmented_mat.astype(<span class=\"hljs-string\">&quot;float64&quot;</span>)\n\n    <span class=\"hljs-comment\"># scale the matrix leaving it triangular</span>\n    <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(rows - <span class=\"hljs-number\">1</span>):\n        pivot = augmented_mat[row, row]\n        <span class=\"hljs-keyword\">for</span> col <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(row + <span class=\"hljs-number\">1</span>, columns):\n            factor = augmented_mat[col, row] / pivot\n            augmented_mat[col, :] -= factor * augmented_mat[row, :]\n\n    x = retroactive_resolution(\n        augmented_mat[:, <span class=\"hljs-number\">0</span>:columns], augmented_mat[:, columns : columns + <span class=\"hljs-number\">1</span>]\n    )\n\n    <span class=\"hljs-keyword\">return</span> x\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "c-plus-plus": {
      "dir": "numerical_methods/gaussian_elimination.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/numerical_methods/gaussian_elimination.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * \\file\n * \\brief [Gaussian elimination\n * method](https://en.wikipedia.org/wiki/Gaussian_elimination)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> mat_size, i, j, step;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Matrix size: &quot;</span>;\n    std::cin &gt;&gt; mat_size;\n\n    <span class=\"hljs-comment\">// create a 2D matrix by dynamic memory allocation</span>\n    <span class=\"hljs-type\">double</span> **mat = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">double</span> *[mat_size + <span class=\"hljs-number\">1</span>], **x = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">double</span> *[mat_size];\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt;= mat_size; i++) {\n        mat[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">double</span>[mat_size + <span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-keyword\">if</span> (i &lt; mat_size)\n            x[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">double</span>[mat_size + <span class=\"hljs-number\">1</span>];\n    }\n\n    <span class=\"hljs-comment\">// get the matrix elements from user</span>\n    std::cout &lt;&lt; std::endl &lt;&lt; <span class=\"hljs-string\">&quot;Enter value of the matrix: &quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; mat_size; i++) {\n        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt;= mat_size; j++) {\n            std::cin &gt;&gt;\n                mat[i][j];  <span class=\"hljs-comment\">// Enter (mat_size*mat_size) value of the matrix.</span>\n        }\n    }\n\n    <span class=\"hljs-comment\">// perform Gaussian elimination</span>\n    <span class=\"hljs-keyword\">for</span> (step = <span class=\"hljs-number\">0</span>; step &lt; mat_size - <span class=\"hljs-number\">1</span>; step++) {\n        <span class=\"hljs-keyword\">for</span> (i = step; i &lt; mat_size - <span class=\"hljs-number\">1</span>; i++) {\n            <span class=\"hljs-type\">double</span> a = (mat[i + <span class=\"hljs-number\">1</span>][step] / mat[step][step]);\n\n            <span class=\"hljs-keyword\">for</span> (j = step; j &lt;= mat_size; j++)\n                mat[i + <span class=\"hljs-number\">1</span>][j] = mat[i + <span class=\"hljs-number\">1</span>][j] - (a * mat[step][j]);\n        }\n    }\n\n    std::cout &lt;&lt; std::endl\n              &lt;&lt; <span class=\"hljs-string\">&quot;Matrix using Gaussian Elimination method: &quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; mat_size; i++) {\n        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt;= mat_size; j++) {\n            x[i][j] = mat[i][j];\n            std::cout &lt;&lt; mat[i][j] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n        }\n        std::cout &lt;&lt; std::endl;\n    }\n    std::cout &lt;&lt; std::endl\n              &lt;&lt; <span class=\"hljs-string\">&quot;Value of the Gaussian Elimination method: &quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-keyword\">for</span> (i = mat_size - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n        <span class=\"hljs-type\">double</span> sum = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (j = mat_size - <span class=\"hljs-number\">1</span>; j &gt; i; j--) {\n            x[i][j] = x[j][j] * x[i][j];\n            sum = x[i][j] + sum;\n        }\n        <span class=\"hljs-keyword\">if</span> (x[i][i] == <span class=\"hljs-number\">0</span>)\n            x[i][i] = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">else</span>\n            x[i][i] = (x[i][mat_size] - sum) / (x[i][i]);\n\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;x&quot;</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot;= &quot;</span> &lt;&lt; x[i][i] &lt;&lt; std::endl;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt;= mat_size; i++) {\n        <span class=\"hljs-keyword\">delete</span>[] mat[i];\n        <span class=\"hljs-keyword\">if</span> (i &lt; mat_size)\n            <span class=\"hljs-keyword\">delete</span>[] x[i];\n    }\n    <span class=\"hljs-keyword\">delete</span>[] mat;\n    <span class=\"hljs-keyword\">delete</span>[] x;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "rust": {
      "dir": "src/math/gaussian_elimination.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/math/gaussian_elimination.rs",
      "code": "<span class=\"hljs-comment\">// Gaussian Elimination of Quadratic Matrices</span>\n<span class=\"hljs-comment\">// Takes an augmented matrix as input, returns vector of results</span>\n<span class=\"hljs-comment\">// Wikipedia reference: augmented matrix: https://en.wikipedia.org/wiki/Augmented_matrix</span>\n<span class=\"hljs-comment\">// Wikipedia reference: algorithm: https://en.wikipedia.org/wiki/Gaussian_elimination</span>\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">gaussian_elimination</span>(matrix: &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">f32</span>&gt;]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">f32</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">size</span> = matrix.<span class=\"hljs-title function_ invoke__\">len</span>();\n    <span class=\"hljs-built_in\">assert_eq!</span>(size, matrix[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size - <span class=\"hljs-number\">1</span> {\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-keyword\">in</span> i..size - <span class=\"hljs-number\">1</span> {\n            <span class=\"hljs-title function_ invoke__\">echelon</span>(matrix, i, j);\n        }\n    }\n\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">1</span>..size).<span class=\"hljs-title function_ invoke__\">rev</span>() {\n        <span class=\"hljs-title function_ invoke__\">eliminate</span>(matrix, i);\n    }\n\n    <span class=\"hljs-comment\">// Disable cargo clippy warnings about needless range loops.</span>\n    <span class=\"hljs-comment\">// Checking the diagonal like this is simpler than any alternative.</span>\n    <span class=\"hljs-meta\">#[allow(clippy::needless_range_loop)]</span>\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n        <span class=\"hljs-keyword\">if</span> matrix[i][i] == <span class=\"hljs-number\">0f32</span> {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;Infinitely many solutions&quot;</span>);\n        }\n    }\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">f32</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0f32</span>; size];\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n        result[i] = matrix[i][size] / matrix[i][i];\n    }\n    result\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">echelon</span>(matrix: &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">f32</span>&gt;], i: <span class=\"hljs-type\">usize</span>, j: <span class=\"hljs-type\">usize</span>) {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">size</span> = matrix.<span class=\"hljs-title function_ invoke__\">len</span>();\n    <span class=\"hljs-keyword\">if</span> matrix[i][i] == <span class=\"hljs-number\">0f32</span> {\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">factor</span> = matrix[j + <span class=\"hljs-number\">1</span>][i] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f32</span> / matrix[i][i] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f32</span>;\n        (i..size + <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">for_each</span>(|k| {\n            matrix[j + <span class=\"hljs-number\">1</span>][k] -= factor * matrix[i][k];\n        });\n    }\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">eliminate</span>(matrix: &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">f32</span>&gt;], i: <span class=\"hljs-type\">usize</span>) {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">size</span> = matrix.<span class=\"hljs-title function_ invoke__\">len</span>();\n    <span class=\"hljs-keyword\">if</span> matrix[i][i] == <span class=\"hljs-number\">0f32</span> {\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">1</span>..i + <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">rev</span>() {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">factor</span> = matrix[j - <span class=\"hljs-number\">1</span>][i] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f32</span> / matrix[i][i] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f32</span>;\n            <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">0</span>..size + <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">rev</span>() {\n                matrix[j - <span class=\"hljs-number\">1</span>][k] -= factor * matrix[i][k] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f32</span>;\n            }\n        }\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::gaussian_elimination;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_gauss</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">matrix</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">f32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1.5</span>, <span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">1.0</span>, -<span class=\"hljs-number\">1.0</span>, -<span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.0</span>],\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3.0</span>, <span class=\"hljs-number\">3.0</span>, -<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">16.0</span>, <span class=\"hljs-number\">18.0</span>, <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.0</span>],\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">3.0</span>, -<span class=\"hljs-number\">2.0</span>, -<span class=\"hljs-number\">6.0</span>, <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.0</span>],\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">99.0</span>, <span class=\"hljs-number\">19.0</span>, <span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.0</span>],\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1.0</span>, -<span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">16.0</span>, <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">9.0</span>, <span class=\"hljs-number\">10.0</span>, <span class=\"hljs-number\">1.0</span>],\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">3.0</span>, <span class=\"hljs-number\">1.0</span>, -<span class=\"hljs-number\">5.0</span>, <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">95.0</span>],\n        ];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">result</span> = <span class=\"hljs-built_in\">vec!</span>[\n            -<span class=\"hljs-number\">264.05893</span>, <span class=\"hljs-number\">159.63196</span>, -<span class=\"hljs-number\">6.156921</span>, <span class=\"hljs-number\">35.310387</span>, -<span class=\"hljs-number\">18.806696</span>, <span class=\"hljs-number\">81.67839</span>,\n        ];\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">gaussian_elimination</span>(&amp;<span class=\"hljs-keyword\">mut</span> matrix), result);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "LeonAmtmann",
      "email": "35031775+LeonAmtmann@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 1
    },
    {
      "name": "algobytewise",
      "email": "algobytewise@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Fahim",
      "email": "farhadurFahim@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Leoriem-code",
      "email": "73761711+Leoriem-code@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Isaac Gomes de Oliveira",
      "email": "isaacgdoliveira@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}