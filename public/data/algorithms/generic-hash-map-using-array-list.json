{
  "slug": "generic-hash-map-using-array-list",
  "name": "Generic Hash Map Using Array List",
  "categories": [
    "datastructures",
    "hashmap",
    "hashing"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/hashmap/hashing/GenericHashMapUsingArrayList.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/hashmap/hashing/GenericHashMapUsingArrayList.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.hashmap.hashing;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.LinkedList;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GenericHashMapUsingArrayList</span>&lt;K, V&gt; {\n    ArrayList&lt;LinkedList&lt;Node&gt;&gt; buckets;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">lf</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0.5f</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> size;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">GenericHashMapUsingArrayList</span><span class=\"hljs-params\">()</span> {\n        buckets = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n            buckets.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;&gt;());\n        }\n        size = <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(K key, V value)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> Math.abs(key.hashCode() % buckets.size());\n        LinkedList&lt;Node&gt; nodes = buckets.get(hash);\n\n        <span class=\"hljs-keyword\">for</span> (Node node : nodes) {\n            <span class=\"hljs-keyword\">if</span> (node.key.equals(key)) {\n                node.val = value;\n                <span class=\"hljs-keyword\">return</span>;\n            }\n        }\n\n        nodes.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(key, value));\n        size++;\n\n        <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-type\">float</span>) size / buckets.size() &gt; lf) {\n            reHash();\n        }\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">reHash</span><span class=\"hljs-params\">()</span> {\n        ArrayList&lt;LinkedList&lt;Node&gt;&gt; old = buckets;\n        buckets = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        size = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; old.size() * <span class=\"hljs-number\">2</span>; i++) {\n            buckets.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;&gt;());\n        }\n        <span class=\"hljs-keyword\">for</span> (LinkedList&lt;Node&gt; nodes : buckets) {\n            <span class=\"hljs-keyword\">for</span> (Node node : nodes) {\n                put(node.key, node.val);\n            }\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> V <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(K key)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> Math.abs(key.hashCode() % buckets.size());\n        LinkedList&lt;Node&gt; nodes = buckets.get(hash);\n        <span class=\"hljs-keyword\">for</span> (Node node : nodes) {\n            <span class=\"hljs-keyword\">if</span> (node.key.equals(key)) {\n                <span class=\"hljs-keyword\">return</span> node.val;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">(K key)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> Math.abs(key.hashCode() % buckets.size());\n        LinkedList&lt;Node&gt; nodes = buckets.get(hash);\n\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\n        <span class=\"hljs-keyword\">for</span> (Node node : nodes) {\n            <span class=\"hljs-keyword\">if</span> (node.key.equals(key)) {\n                target = node;\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n        nodes.remove(target);\n        size--;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">containsKey</span><span class=\"hljs-params\">(K key)</span> {\n        <span class=\"hljs-keyword\">return</span> get(key) != <span class=\"hljs-literal\">null</span>;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.size;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\n        builder.append(<span class=\"hljs-string\">&quot;{&quot;</span>);\n        <span class=\"hljs-keyword\">for</span> (LinkedList&lt;Node&gt; nodes : buckets) {\n            <span class=\"hljs-keyword\">for</span> (Node node : nodes) {\n                builder.append(node.key);\n                builder.append(<span class=\"hljs-string\">&quot; : &quot;</span>);\n                builder.append(node.val);\n                builder.append(<span class=\"hljs-string\">&quot;, &quot;</span>);\n            }\n        }\n        builder.append(<span class=\"hljs-string\">&quot;}&quot;</span>);\n        <span class=\"hljs-keyword\">return</span> builder.toString();\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n        K key;\n        V val;\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(K key, V val)</span> {\n            <span class=\"hljs-built_in\">this</span>.key = key;\n            <span class=\"hljs-built_in\">this</span>.val = val;\n        }\n    }\n\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Divya Raichura",
      "email": "92081543+divya-raichura@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}