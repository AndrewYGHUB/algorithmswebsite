{
  "slug": "genetic",
  "name": "Genetic",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "strings/genetic/genetic.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/strings/genetic/genetic.go",
      "code": "<span class=\"hljs-comment\">// Package genetic provides functions to work with strings</span>\n<span class=\"hljs-comment\">// using genetic algorithm. https://en.wikipedia.org/wiki/Genetic_algorithm</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// Author: D4rkia</span>\n<span class=\"hljs-keyword\">package</span> genetic\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;errors&quot;</span>\n\t<span class=\"hljs-string\">&quot;fmt&quot;</span>\n\t<span class=\"hljs-string\">&quot;math/rand&quot;</span>\n\t<span class=\"hljs-string\">&quot;sort&quot;</span>\n\t<span class=\"hljs-string\">&quot;strconv&quot;</span>\n\t<span class=\"hljs-string\">&quot;time&quot;</span>\n\t<span class=\"hljs-string\">&quot;unicode/utf8&quot;</span>\n)\n\n<span class=\"hljs-comment\">// Population item represent a single step in the evolution process.</span>\n<span class=\"hljs-comment\">// One can think of population item as a single species.</span>\n<span class=\"hljs-comment\">// Key stands for the actual data entity of the species, which is a string</span>\n<span class=\"hljs-comment\">// in current implementation. Key can be interpreted as species DNA.</span>\n<span class=\"hljs-comment\">// Value shows how close this species to the desired target, where 1 means,</span>\n<span class=\"hljs-comment\">// that species DNA equals to the targeted one, 0 for no matchings in the DNA.</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// **Note** In the current implementation species DNA length is suppose to be</span>\n<span class=\"hljs-comment\">// equal to the target length for algorithm to work.</span>\n<span class=\"hljs-keyword\">type</span> PopulationItem <span class=\"hljs-keyword\">struct</span> {\n\tKey   <span class=\"hljs-type\">string</span>\n\tValue <span class=\"hljs-type\">float64</span>\n}\n\n<span class=\"hljs-comment\">// Conf stands for cofigurations set provided to GeneticString function.</span>\n<span class=\"hljs-keyword\">type</span> Conf <span class=\"hljs-keyword\">struct</span> {\n\t<span class=\"hljs-comment\">// Maximum size of the population.</span>\n\t<span class=\"hljs-comment\">// Bigger could be faster but more memory expensive.</span>\n\tPopulationNum <span class=\"hljs-type\">int</span>\n\n\t<span class=\"hljs-comment\">// Number of elements selected in every generation for evolution</span>\n\t<span class=\"hljs-comment\">// the selection takes. Place from the best to the worst of that</span>\n\t<span class=\"hljs-comment\">// generation must be smaller than PopulationNum.</span>\n\tSelectionNum <span class=\"hljs-type\">int</span>\n\n\t<span class=\"hljs-comment\">// Probability that an element of a generation can mutate changing one of</span>\n\t<span class=\"hljs-comment\">// its genes this guarantees that all genes will be used during evolution.</span>\n\tMutationProb <span class=\"hljs-type\">float64</span>\n\n\t<span class=\"hljs-comment\">// Enables debugging output to the console.</span>\n\tDebug <span class=\"hljs-type\">bool</span>\n}\n\n<span class=\"hljs-comment\">// Result structure contains generation process statistics, as well as the</span>\n<span class=\"hljs-comment\">// best resulted population item.</span>\n<span class=\"hljs-keyword\">type</span> Result <span class=\"hljs-keyword\">struct</span> {\n\t<span class=\"hljs-comment\">// Number of generations steps performed.</span>\n\tGeneration <span class=\"hljs-type\">int</span>\n\n\t<span class=\"hljs-comment\">// Number of generated population items.</span>\n\tAnalyzed <span class=\"hljs-type\">int</span>\n\n\t<span class=\"hljs-comment\">// Result of generation with the best Value.</span>\n\tBest PopulationItem\n}\n\n<span class=\"hljs-comment\">// GeneticString generates PopultaionItem based on the imputed target</span>\n<span class=\"hljs-comment\">// string, and a set of possible runes to build a string with. In order</span>\n<span class=\"hljs-comment\">// to optimise string generation additional configurations can be provided</span>\n<span class=\"hljs-comment\">// with Conf instance. Empty instance of Conf (&amp;Conf{}) can be provided,</span>\n<span class=\"hljs-comment\">// then default values would be set.</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// Link to the same algorithm implemented in python:</span>\n<span class=\"hljs-comment\">// https://github.com/TheAlgorithms/Python/blob/master/genetic_algorithm/basic_string.py</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GeneticString</span><span class=\"hljs-params\">(target <span class=\"hljs-type\">string</span>, charmap []<span class=\"hljs-type\">rune</span>, conf *Conf)</span></span> (*Result, <span class=\"hljs-type\">error</span>) {\n\tpopulationNum := conf.PopulationNum\n\t<span class=\"hljs-keyword\">if</span> populationNum == <span class=\"hljs-number\">0</span> {\n\t\tpopulationNum = <span class=\"hljs-number\">200</span>\n\t}\n\n\tselectionNum := conf.SelectionNum\n\t<span class=\"hljs-keyword\">if</span> selectionNum == <span class=\"hljs-number\">0</span> {\n\t\tselectionNum = <span class=\"hljs-number\">50</span>\n\t}\n\n\t<span class=\"hljs-comment\">// Verify if &#x27;populationNum&#x27; s bigger than &#x27;selectionNum&#x27;</span>\n\t<span class=\"hljs-keyword\">if</span> populationNum &lt; selectionNum {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, errors.New(<span class=\"hljs-string\">&quot;populationNum must be bigger than selectionNum&quot;</span>)\n\t}\n\n\tmutationProb := conf.MutationProb\n\t<span class=\"hljs-keyword\">if</span> mutationProb == <span class=\"hljs-number\">.0</span> {\n\t\tmutationProb = <span class=\"hljs-number\">.4</span>\n\t}\n\n\tdebug := conf.Debug\n\n\t<span class=\"hljs-comment\">// Just a seed to improve randomness required by the algorithm</span>\n\trand.Seed(time.Now().UnixNano())\n\n\t<span class=\"hljs-comment\">// Verify that the target contains no genes besides the ones inside genes variable.</span>\n\t<span class=\"hljs-keyword\">for</span> position, r := <span class=\"hljs-keyword\">range</span> target {\n\t\tinvalid := <span class=\"hljs-literal\">true</span>\n\t\t<span class=\"hljs-keyword\">for</span> _, n := <span class=\"hljs-keyword\">range</span> charmap {\n\t\t\t<span class=\"hljs-keyword\">if</span> n == r {\n\t\t\t\tinvalid = <span class=\"hljs-literal\">false</span>\n\t\t\t}\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> invalid {\n\t\t\tmessage := fmt.Sprintf(<span class=\"hljs-string\">&quot;character not available in charmap at position: %v&quot;</span>, position)\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, errors.New(message)\n\t\t}\n\t}\n\n\t<span class=\"hljs-comment\">// Generate random starting population</span>\n\tpop := <span class=\"hljs-built_in\">make</span>([]PopulationItem, populationNum)\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; populationNum; i++ {\n\t\tkey := <span class=\"hljs-string\">&quot;&quot;</span>\n\t\t<span class=\"hljs-keyword\">for</span> x := <span class=\"hljs-number\">0</span>; x &lt; utf8.RuneCountInString(target); x++ {\n\t\t\tchoice := rand.Intn(<span class=\"hljs-built_in\">len</span>(charmap))\n\t\t\tkey += <span class=\"hljs-type\">string</span>(charmap[choice])\n\t\t}\n\t\tpop[i] = PopulationItem{key, <span class=\"hljs-number\">0</span>}\n\t}\n\n\t<span class=\"hljs-comment\">// Just some logs to know what the algorithms is doing</span>\n\tgen, generatedPop := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>\n\n\t<span class=\"hljs-comment\">// This loop will end when we will find a perfect match for our target</span>\n\t<span class=\"hljs-keyword\">for</span> {\n\t\tgen++\n\t\tgeneratedPop += <span class=\"hljs-built_in\">len</span>(pop)\n\n\t\t<span class=\"hljs-comment\">// Random population created now it&#x27;s time to evaluate</span>\n\t\t<span class=\"hljs-keyword\">for</span> i, item := <span class=\"hljs-keyword\">range</span> pop {\n\t\t\tpop[i].Value = <span class=\"hljs-number\">0</span>\n\t\t\titemKey, targetRune := []<span class=\"hljs-type\">rune</span>(item.Key), []<span class=\"hljs-type\">rune</span>(target)\n\t\t\t<span class=\"hljs-keyword\">for</span> x := <span class=\"hljs-number\">0</span>; x &lt; <span class=\"hljs-built_in\">len</span>(target); x++ {\n\t\t\t\t<span class=\"hljs-keyword\">if</span> itemKey[x] == targetRune[x] {\n\t\t\t\t\tpop[i].Value++\n\t\t\t\t}\n\t\t\t}\n\t\t\tpop[i].Value = pop[i].Value / <span class=\"hljs-type\">float64</span>(<span class=\"hljs-built_in\">len</span>(targetRune))\n\t\t}\n\t\tsort.SliceStable(pop, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i, j <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> { <span class=\"hljs-keyword\">return</span> pop[i].Value &gt; pop[j].Value })\n\n\t\t<span class=\"hljs-comment\">// Check if there is a matching evolution</span>\n\t\t<span class=\"hljs-keyword\">if</span> pop[<span class=\"hljs-number\">0</span>].Key == target {\n\t\t\t<span class=\"hljs-keyword\">break</span>\n\t\t}\n\n\t\t<span class=\"hljs-comment\">// Print the best resultPrint the Best result every 10 generations</span>\n\t\t<span class=\"hljs-comment\">// just to know that the algorithm is working</span>\n\t\t<span class=\"hljs-keyword\">if</span> debug &amp;&amp; gen%<span class=\"hljs-number\">10</span> == <span class=\"hljs-number\">0</span> {\n\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;Generation:&quot;</span>, strconv.Itoa(gen), <span class=\"hljs-string\">&quot;Analyzed:&quot;</span>, generatedPop, <span class=\"hljs-string\">&quot;Best:&quot;</span>, pop[<span class=\"hljs-number\">0</span>])\n\t\t}\n\n\t\t<span class=\"hljs-comment\">// Generate a new population vector keeping some of the best evolutions</span>\n\t\t<span class=\"hljs-comment\">// Keeping this avoid regression of evolution</span>\n\t\t<span class=\"hljs-keyword\">var</span> popChildren []PopulationItem\n\t\tpopChildren = <span class=\"hljs-built_in\">append</span>(popChildren, pop[<span class=\"hljs-number\">0</span>:<span class=\"hljs-type\">int</span>(selectionNum/<span class=\"hljs-number\">3</span>)]...)\n\n\t\t<span class=\"hljs-comment\">// This is Selection</span>\n\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-type\">int</span>(selectionNum); i++ {\n\t\t\tparent1 := pop[i]\n\t\t\t<span class=\"hljs-comment\">// Generate more child proportionally to the fitness score</span>\n\t\t\tnChild := (parent1.Value * <span class=\"hljs-number\">100</span>) + <span class=\"hljs-number\">1</span>\n\t\t\t<span class=\"hljs-keyword\">if</span> nChild &gt;= <span class=\"hljs-number\">10</span> {\n\t\t\t\tnChild = <span class=\"hljs-number\">10</span>\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">for</span> x := <span class=\"hljs-number\">0.0</span>; x &lt; nChild; x++ {\n\t\t\t\tparent2 := pop[rand.Intn(selectionNum)]\n\t\t\t\t<span class=\"hljs-comment\">// Crossover</span>\n\t\t\t\tsplit := rand.Intn(utf8.RuneCountInString(target))\n\t\t\t\tchild1 := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">rune</span>(parent1.Key)[:split], []<span class=\"hljs-type\">rune</span>(parent2.Key)[split:]...)\n\t\t\t\tchild2 := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-type\">rune</span>(parent2.Key)[:split], []<span class=\"hljs-type\">rune</span>(parent1.Key)[split:]...)\n\t\t\t\t<span class=\"hljs-comment\">// Clean fitness value</span>\n\t\t\t\t<span class=\"hljs-comment\">// Mutate</span>\n\t\t\t\t<span class=\"hljs-keyword\">if</span> rand.Float64() &lt; mutationProb {\n\t\t\t\t\tchild1[rand.Intn(<span class=\"hljs-built_in\">len</span>(child1))] = charmap[rand.Intn(<span class=\"hljs-built_in\">len</span>(charmap))]\n\t\t\t\t}\n\t\t\t\t<span class=\"hljs-keyword\">if</span> rand.Float64() &lt; mutationProb {\n\t\t\t\t\tchild2[rand.Intn(<span class=\"hljs-built_in\">len</span>(child2))] = charmap[rand.Intn(<span class=\"hljs-built_in\">len</span>(charmap))]\n\t\t\t\t}\n\t\t\t\t<span class=\"hljs-comment\">// Push into &#x27;popChildren&#x27;</span>\n\t\t\t\tpopChildren = <span class=\"hljs-built_in\">append</span>(popChildren, PopulationItem{<span class=\"hljs-type\">string</span>(child1), <span class=\"hljs-number\">0</span>})\n\t\t\t\tpopChildren = <span class=\"hljs-built_in\">append</span>(popChildren, PopulationItem{<span class=\"hljs-type\">string</span>(child2), <span class=\"hljs-number\">0</span>})\n\n\t\t\t\t<span class=\"hljs-comment\">// Check if the population has already reached the maximum value and if so,</span>\n\t\t\t\t<span class=\"hljs-comment\">// break the cycle. If this check is disabled the algorithm will take</span>\n\t\t\t\t<span class=\"hljs-comment\">// forever to compute large strings but will also calculate small string in</span>\n\t\t\t\t<span class=\"hljs-comment\">// a lot fewer generationsù</span>\n\t\t\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(popChildren) &gt;= selectionNum {\n\t\t\t\t\t<span class=\"hljs-keyword\">break</span>\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpop = popChildren\n\t}\n\t<span class=\"hljs-keyword\">return</span> &amp;Result{gen, generatedPop, pop[<span class=\"hljs-number\">0</span>]}, <span class=\"hljs-literal\">nil</span>\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 1
    },
    {
      "name": "Abel",
      "email": "abel.tay@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}