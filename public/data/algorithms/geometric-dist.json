{
  "slug": "geometric-dist",
  "name": "Geometric Dist",
  "categories": [
    "probability"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "probability/geometric_dist.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/probability/geometric_dist.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief [Geometric\n * Distribution](https://en.wikipedia.org/wiki/Geometric_distribution)\n *\n * @details\n * The geometric distribution models the experiment of doing Bernoulli trials\n * until a sucess was observed. There are two formulations of the geometric\n * distribution: 1) The probability distribution of the number X of Bernoulli\n * trials needed to get one success, supported on the set { 1, 2, 3, ... } 2)\n * The probability distribution of the number Y = X âˆ’ 1 of failures before the\n * first success, supported on the set { 0, 1, 2, 3, ... } Here, the first one\n * is implemented.\n *\n * Common variables used:\n * p - The success probability\n * k - The number of tries\n *\n * @author [Domenic Zingsheim](https://github.com/DerAndereDomenic)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span>     <span class=\"hljs-comment\">/// for math functions</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdint&gt;</span>   <span class=\"hljs-comment\">/// for fixed size data types</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctime&gt;</span>     <span class=\"hljs-comment\">/// for time to initialize rng</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for std::cout</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;limits&gt;</span>    <span class=\"hljs-comment\">/// for std::numeric_limits</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;random&gt;</span>    <span class=\"hljs-comment\">/// for random numbers</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace probability\n * @brief Probability algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> probability {\n<span class=\"hljs-comment\">/**\n * @namespace geometric_dist\n * @brief Functions for the [Geometric\n * Distribution](https://en.wikipedia.org/wiki/Geometric_distribution) algorithm\n * implementation\n */</span>\n<span class=\"hljs-keyword\">namespace</span> geometric_dist {\n<span class=\"hljs-comment\">/**\n * @brief Returns a random number between [0,1]\n * @returns A uniformly distributed random number between 0 (included) and 1\n * (included)\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">generate_uniform</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">float</span>&gt;(<span class=\"hljs-built_in\">rand</span>()) / <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">float</span>&gt;(RAND_MAX);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief A class to model the geometric distribution\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">geometric_distribution</span> {\n <span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-type\">float</span> p;  <span class=\"hljs-comment\">///&lt; The succes probability p</span>\n\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/**\n     * @brief Constructor for the geometric distribution\n     * @param p The success probability\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">geometric_distribution</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">float</span>&amp; p)</span> : p(p) {</span>}\n\n    <span class=\"hljs-comment\">/**\n     * @brief The expected value of a geometrically distributed random variable\n     * X\n     * @returns E[X] = 1/p\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">expected_value</span><span class=\"hljs-params\">()</span> <span class=\"hljs-type\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1.0f</span> / p; }\n\n    <span class=\"hljs-comment\">/**\n     * @brief The variance of a geometrically distributed random variable X\n     * @returns V[X] = (1 - p) / p^2\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">variance</span><span class=\"hljs-params\">()</span> <span class=\"hljs-type\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">1.0f</span> - p) / (p * p); }\n\n    <span class=\"hljs-comment\">/**\n     * @brief The standard deviation of a geometrically distributed random\n     * variable X\n     * @returns \\sigma = \\sqrt{V[X]}\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">standard_deviation</span><span class=\"hljs-params\">()</span> <span class=\"hljs-type\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">sqrt</span>(<span class=\"hljs-built_in\">variance</span>()); }\n\n    <span class=\"hljs-comment\">/**\n     * @brief The probability density function\n     * @details As we use the first definition of the geometric series (1),\n     * we are doing k - 1 failed trials and the k-th trial is a success.\n     * @param k The number of trials to observe the first success in [1,\\infty)\n     * @returns A number between [0,1] according to p * (1-p)^{k-1}\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">probability_density</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">uint32_t</span>&amp; k)</span> <span class=\"hljs-type\">const</span> </span>{\n        <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">pow</span>((<span class=\"hljs-number\">1.0f</span> - p), <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">float</span>&gt;(k - <span class=\"hljs-number\">1</span>)) * p;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief The cumulative distribution function\n     * @details The sum of all probabilities up to (and including) k trials.\n     * Basically CDF(k) = P(x &lt;= k)\n     * @param k The number of trials in [1,\\infty)\n     * @returns The probability to have success within k trials\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">cumulative_distribution</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">uint32_t</span>&amp; k)</span> <span class=\"hljs-type\">const</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1.0f</span> - std::<span class=\"hljs-built_in\">pow</span>((<span class=\"hljs-number\">1.0f</span> - p), <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">float</span>&gt;(k));\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief The inverse cumulative distribution function\n     * @details This functions answers the question: Up to how many trials are\n     * needed to have success with a probability of cdf? The exact floating\n     * point value is reported.\n     * @param cdf The probability in [0,1]\n     * @returns The number of (exact) trials.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">inverse_cumulative_distribution</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">float</span>&amp; cdf)</span> <span class=\"hljs-type\">const</span> </span>{\n        <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-number\">1.0f</span> - cdf) / std::<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-number\">1.0f</span> - p);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief Generates a (discrete) sample according to the geometrical\n     * distribution\n     * @returns A geometrically distributed number in [1,\\infty)\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint32_t</span> <span class=\"hljs-title\">draw_sample</span><span class=\"hljs-params\">()</span> <span class=\"hljs-type\">const</span> </span>{\n        <span class=\"hljs-type\">float</span> uniform_sample = <span class=\"hljs-built_in\">generate_uniform</span>();\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">uint32_t</span>&gt;(\n                   <span class=\"hljs-built_in\">inverse_cumulative_distribution</span>(uniform_sample)) +\n               <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief This function computes the probability to have success in a given\n     * range of tries\n     * @details Computes P(min_tries &lt;= x &lt;= max_tries).\n     * Can be used to calculate P(x &gt;= min_tries) by not passing a second\n     * argument. Can be used to calculate P(x &lt;= max_tries) by passing 1 as the\n     * first argument\n     * @param min_tries The minimum number of tries in [1,\\infty) (inclusive)\n     * @param max_tries The maximum number of tries in [min_tries, \\infty)\n     * (inclusive)\n     * @returns The probability of having success within a range of tries\n     * [min_tries, max_tries]\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">range_tries</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">uint32_t</span>&amp; min_tries = <span class=\"hljs-number\">1</span>,\n                      <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">uint32_t</span>&amp; max_tries =\n                          std::numeric_limits&lt;<span class=\"hljs-type\">uint32_t</span>&gt;::max())</span> <span class=\"hljs-type\">const</span> </span>{\n        <span class=\"hljs-type\">float</span> cdf_lower = <span class=\"hljs-built_in\">cumulative_distribution</span>(min_tries - <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-type\">float</span> cdf_upper = max_tries == std::numeric_limits&lt;<span class=\"hljs-type\">uint32_t</span>&gt;::<span class=\"hljs-built_in\">max</span>()\n                              ? <span class=\"hljs-number\">1.0f</span>\n                              : <span class=\"hljs-built_in\">cumulative_distribution</span>(max_tries);\n        <span class=\"hljs-keyword\">return</span> cdf_upper - cdf_lower;\n    }\n};\n}  <span class=\"hljs-comment\">// namespace geometric_dist</span>\n}  <span class=\"hljs-comment\">// namespace probability</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Tests the sampling method of the geometric distribution\n * @details Draws 1000000 random samples and estimates mean and variance\n * These should be close to the expected value and variance of the given\n * distribution to pass.\n * @param dist The distribution to test\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">sample_test</span><span class=\"hljs-params\">(\n    <span class=\"hljs-type\">const</span> probability::geometric_dist::geometric_distribution&amp; dist)</span> </span>{\n    <span class=\"hljs-type\">uint32_t</span> n_tries = <span class=\"hljs-number\">1000000</span>;\n    std::vector&lt;<span class=\"hljs-type\">float</span>&gt; tries;\n    tries.<span class=\"hljs-built_in\">resize</span>(n_tries);\n\n    <span class=\"hljs-type\">float</span> mean = <span class=\"hljs-number\">0.0f</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; n_tries; ++i) {\n        tries[i] = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">float</span>&gt;(dist.<span class=\"hljs-built_in\">draw_sample</span>());\n        mean += tries[i];\n    }\n\n    mean /= <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">float</span>&gt;(n_tries);\n\n    <span class=\"hljs-type\">float</span> var = <span class=\"hljs-number\">0.0f</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; n_tries; ++i) {\n        var += (tries[i] - mean) * (tries[i] - mean);\n    }\n\n    <span class=\"hljs-comment\">// Unbiased estimate of variance</span>\n    var /= <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">float</span>&gt;(n_tries - <span class=\"hljs-number\">1</span>);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;This value should be near &quot;</span> &lt;&lt; dist.<span class=\"hljs-built_in\">expected_value</span>() &lt;&lt; <span class=\"hljs-string\">&quot;: &quot;</span>\n              &lt;&lt; mean &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;This value should be near &quot;</span> &lt;&lt; dist.<span class=\"hljs-built_in\">variance</span>() &lt;&lt; <span class=\"hljs-string\">&quot;: &quot;</span> &lt;&lt; var\n              &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    probability::<span class=\"hljs-function\">geometric_dist::geometric_distribution <span class=\"hljs-title\">dist</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0.3</span>)</span></span>;\n\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">float</span> threshold = <span class=\"hljs-number\">1e-3</span>f;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Starting tests for p = 0.3...&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">expected_value</span>() - <span class=\"hljs-number\">3.33333333f</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">variance</span>() - <span class=\"hljs-number\">7.77777777f</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">standard_deviation</span>() - <span class=\"hljs-number\">2.788866755</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">probability_density</span>(<span class=\"hljs-number\">5</span>) - <span class=\"hljs-number\">0.07203</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">cumulative_distribution</span>(<span class=\"hljs-number\">6</span>) - <span class=\"hljs-number\">0.882351</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">inverse_cumulative_distribution</span>(\n                        dist.<span class=\"hljs-built_in\">cumulative_distribution</span>(<span class=\"hljs-number\">8</span>)) -\n                    <span class=\"hljs-number\">8</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">range_tries</span>() - <span class=\"hljs-number\">1.0f</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">range_tries</span>(<span class=\"hljs-number\">3</span>) - <span class=\"hljs-number\">0.49f</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">range_tries</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">11</span>) - <span class=\"hljs-number\">0.2203267f</span>) &lt; threshold);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;All tests passed&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">sample_test</span>(dist);\n\n    dist = probability::geometric_dist::<span class=\"hljs-built_in\">geometric_distribution</span>(<span class=\"hljs-number\">0.5f</span>);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Starting tests for p = 0.5...&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">expected_value</span>() - <span class=\"hljs-number\">2.0f</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">variance</span>() - <span class=\"hljs-number\">2.0f</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">standard_deviation</span>() - <span class=\"hljs-number\">1.4142135f</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">probability_density</span>(<span class=\"hljs-number\">5</span>) - <span class=\"hljs-number\">0.03125</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">cumulative_distribution</span>(<span class=\"hljs-number\">6</span>) - <span class=\"hljs-number\">0.984375</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">inverse_cumulative_distribution</span>(\n                        dist.<span class=\"hljs-built_in\">cumulative_distribution</span>(<span class=\"hljs-number\">8</span>)) -\n                    <span class=\"hljs-number\">8</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">range_tries</span>() - <span class=\"hljs-number\">1.0f</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">range_tries</span>(<span class=\"hljs-number\">3</span>) - <span class=\"hljs-number\">0.25f</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">range_tries</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">11</span>) - <span class=\"hljs-number\">0.062011f</span>) &lt; threshold);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;All tests passed&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">sample_test</span>(dist);\n\n    dist = probability::geometric_dist::<span class=\"hljs-built_in\">geometric_distribution</span>(<span class=\"hljs-number\">0.8f</span>);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Starting tests for p = 0.8...&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">expected_value</span>() - <span class=\"hljs-number\">1.25f</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">variance</span>() - <span class=\"hljs-number\">0.3125f</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">standard_deviation</span>() - <span class=\"hljs-number\">0.559016f</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">probability_density</span>(<span class=\"hljs-number\">5</span>) - <span class=\"hljs-number\">0.00128</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">cumulative_distribution</span>(<span class=\"hljs-number\">6</span>) - <span class=\"hljs-number\">0.999936</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">inverse_cumulative_distribution</span>(\n                        dist.<span class=\"hljs-built_in\">cumulative_distribution</span>(<span class=\"hljs-number\">8</span>)) -\n                    <span class=\"hljs-number\">8</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">range_tries</span>() - <span class=\"hljs-number\">1.0f</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">range_tries</span>(<span class=\"hljs-number\">3</span>) - <span class=\"hljs-number\">0.04f</span>) &lt; threshold);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(dist.<span class=\"hljs-built_in\">range_tries</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">11</span>) - <span class=\"hljs-number\">0.00159997f</span>) &lt; threshold);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;All tests have successfully passed!&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">sample_test</span>(dist);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @return 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">srand</span>(<span class=\"hljs-built_in\">time</span>(<span class=\"hljs-literal\">nullptr</span>));\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Domenic Zingsheim",
      "email": "domeniczingsheim@gmail.com",
      "commits": 1
    },
    {
      "name": "Anuran Roy",
      "email": "76481787+anuran-roy@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}