{
  "slug": "graph-3",
  "name": "Graph 3",
  "categories": [
    "datastructures",
    "graphs"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Data-Structures/Graph/Graph3.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures/Graph/Graph3.js",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Graph</span> {\n  <span class=\"hljs-title function_\">constructor</span> () {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyObject</span> = {}\n  }\n\n  addVertex (vertex) {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyObject</span>[vertex]) <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyObject</span>[vertex] = []\n  }\n\n  addEdge (vertex1, vertex2) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyObject</span>[vertex1].<span class=\"hljs-title function_\">push</span>(vertex2)\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyObject</span>[vertex2].<span class=\"hljs-title function_\">push</span>(vertex1)\n  }\n\n  removeEdge (vertex1, vertex2) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyObject</span>[vertex1] = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyObject</span>[vertex1].<span class=\"hljs-title function_\">filter</span>(\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =&gt;</span> v !== vertex2\n    )\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyObject</span>[vertex2] = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyObject</span>[vertex2].<span class=\"hljs-title function_\">filter</span>(\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =&gt;</span> v !== vertex1\n    )\n  }\n\n  removeVertex (vertex) {\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyObject</span>[vertex].<span class=\"hljs-property\">length</span>) {\n      <span class=\"hljs-keyword\">const</span> adjacentVertex = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyObject</span>[vertex].<span class=\"hljs-title function_\">pop</span>()\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">removeEdge</span>(vertex, adjacentVertex)\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Return DFS (Depth First Search) List Using Recursive Method\n   */</span>\n  <span class=\"hljs-variable constant_\">DFS</span> (start) {\n    <span class=\"hljs-keyword\">if</span> (!start) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n\n    <span class=\"hljs-keyword\">const</span> result = []\n    <span class=\"hljs-keyword\">const</span> visited = {}\n    <span class=\"hljs-keyword\">const</span> adjacencyObject = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyObject</span>\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">dfs</span> (vertex) {\n      <span class=\"hljs-keyword\">if</span> (!vertex) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n      visited[vertex] = <span class=\"hljs-literal\">true</span>\n      result.<span class=\"hljs-title function_\">push</span>(vertex)\n      adjacencyObject[vertex].<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">neighbor</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (!visited[neighbor]) {\n          <span class=\"hljs-title function_\">dfs</span>(neighbor)\n        }\n      })\n    }\n\n    <span class=\"hljs-title function_\">dfs</span>(start)\n    <span class=\"hljs-keyword\">return</span> result\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Return DFS(Depth First Search) List Using Iteration\n   */</span>\n  <span class=\"hljs-title class_\">DFSIterative</span> (start) {\n    <span class=\"hljs-keyword\">if</span> (!start) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n\n    <span class=\"hljs-keyword\">const</span> stack = [start]\n    <span class=\"hljs-keyword\">const</span> visited = {}\n    visited[start] = <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-keyword\">const</span> result = []\n    <span class=\"hljs-keyword\">let</span> currentVertex\n\n    <span class=\"hljs-keyword\">while</span> (stack.<span class=\"hljs-property\">length</span>) {\n      currentVertex = stack.<span class=\"hljs-title function_\">pop</span>()\n      result.<span class=\"hljs-title function_\">push</span>(currentVertex)\n\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyObject</span>[currentVertex].<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">neighbor</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (!visited[neighbor]) {\n          visited[neighbor] = <span class=\"hljs-literal\">true</span>\n          stack.<span class=\"hljs-title function_\">push</span>(neighbor)\n        }\n      })\n    }\n    <span class=\"hljs-keyword\">return</span> result\n  }\n\n  <span class=\"hljs-variable constant_\">BFS</span> (start) {\n    <span class=\"hljs-keyword\">if</span> (!start) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n\n    <span class=\"hljs-keyword\">const</span> queue = [start]\n    <span class=\"hljs-keyword\">const</span> visited = {}\n    visited[start] = <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-keyword\">let</span> currentVertex\n    <span class=\"hljs-keyword\">const</span> result = []\n\n    <span class=\"hljs-keyword\">while</span> (queue.<span class=\"hljs-property\">length</span>) {\n      currentVertex = queue.<span class=\"hljs-title function_\">shift</span>()\n      result.<span class=\"hljs-title function_\">push</span>(currentVertex)\n\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyObject</span>[currentVertex].<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">neighbor</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (!visited[neighbor]) {\n          visited[neighbor] = <span class=\"hljs-literal\">true</span>\n          queue.<span class=\"hljs-title function_\">push</span>(neighbor)\n        }\n      })\n    }\n    <span class=\"hljs-keyword\">return</span> result\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">Graph</span> }\n"
    }
  },
  "contributors": [
    {
      "name": "DongJoon Cha",
      "email": "81581204+dongjji@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}