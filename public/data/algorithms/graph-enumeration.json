{
  "slug": "graph-enumeration",
  "name": "Graph Enumeration",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/graph/graph_enumeration.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/graph/graph_enumeration.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::collections::BTreeMap;\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Graph</span>&lt;Vertex&gt; = BTreeMap&lt;Vertex, <span class=\"hljs-type\">Vec</span>&lt;Vertex&gt;&gt;;\n\n<span class=\"hljs-comment\">/*\nThis function creates a graph with vertices numbered from 1 to n for any input\n`Graph&lt;V&gt;`. The result is in the form of Vec&lt;Vec&lt;usize&gt; to make implementing\nother algorithms on the graph easier and help with performance.\n\nWe expect that all vertices, even the isolated ones, to have an entry in `adj`\n(possibly an empty vector)\n*/</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">enumerate_graph</span>&lt;V: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Clone</span>&gt;(adj: &amp;Graph&lt;V&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[]; adj.<span class=\"hljs-title function_ invoke__\">len</span>() + <span class=\"hljs-number\">1</span>];\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">ordering</span>: <span class=\"hljs-type\">Vec</span>&lt;V&gt; = adj.<span class=\"hljs-title function_ invoke__\">keys</span>().<span class=\"hljs-title function_ invoke__\">cloned</span>().<span class=\"hljs-title function_ invoke__\">collect</span>();\n    <span class=\"hljs-title function_ invoke__\">for</span> (zero_idx, edges) <span class=\"hljs-keyword\">in</span> adj.<span class=\"hljs-title function_ invoke__\">values</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">idx</span> = zero_idx + <span class=\"hljs-number\">1</span>;\n        result[idx] = edges\n            .<span class=\"hljs-title function_ invoke__\">iter</span>()\n            .<span class=\"hljs-title function_ invoke__\">map</span>(|x| ordering.<span class=\"hljs-title function_ invoke__\">binary_search</span>(x).<span class=\"hljs-title function_ invoke__\">unwrap</span>() + <span class=\"hljs-number\">1</span>)\n            .<span class=\"hljs-title function_ invoke__\">collect</span>();\n    }\n    result\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">add_edge</span>&lt;V: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Clone</span>&gt;(graph: &amp;<span class=\"hljs-keyword\">mut</span> Graph&lt;V&gt;, a: V, b: V) {\n        graph\n            .<span class=\"hljs-title function_ invoke__\">entry</span>(a.<span class=\"hljs-title function_ invoke__\">clone</span>())\n            .<span class=\"hljs-title function_ invoke__\">or_insert_with</span>(Vec::new)\n            .<span class=\"hljs-title function_ invoke__\">push</span>(b.<span class=\"hljs-title function_ invoke__\">clone</span>());\n        graph\n            .<span class=\"hljs-title function_ invoke__\">entry</span>(b.<span class=\"hljs-title function_ invoke__\">clone</span>())\n            .<span class=\"hljs-title function_ invoke__\">or_insert_with</span>(Vec::new)\n            .<span class=\"hljs-title function_ invoke__\">push</span>(a.<span class=\"hljs-title function_ invoke__\">clone</span>());\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">string_vertices</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">graph</span> = Graph::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> graph, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>);\n        <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> graph, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>);\n        <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> graph, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>);\n        <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> graph, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span> = <span class=\"hljs-title function_ invoke__\">enumerate_graph</span>(&amp;graph);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">expected</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>]];\n\n        result.<span class=\"hljs-title function_ invoke__\">iter_mut</span>().<span class=\"hljs-title function_ invoke__\">for_each</span>(|v| v.<span class=\"hljs-title function_ invoke__\">sort_unstable</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(result, expected);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">integer_vertices</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">graph</span> = Graph::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> graph, <span class=\"hljs-number\">1001</span>, <span class=\"hljs-number\">1002</span>);\n        <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> graph, <span class=\"hljs-number\">1002</span>, <span class=\"hljs-number\">1003</span>);\n        <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> graph, <span class=\"hljs-number\">1003</span>, <span class=\"hljs-number\">1001</span>);\n        <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> graph, <span class=\"hljs-number\">1004</span>, <span class=\"hljs-number\">1002</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span> = <span class=\"hljs-title function_ invoke__\">enumerate_graph</span>(&amp;graph);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">expected</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>]];\n\n        result.<span class=\"hljs-title function_ invoke__\">iter_mut</span>().<span class=\"hljs-title function_ invoke__\">for_each</span>(|v| v.<span class=\"hljs-title function_ invoke__\">sort_unstable</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(result, expected);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Erfan Khadem",
      "email": "45465346+er888kh@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}