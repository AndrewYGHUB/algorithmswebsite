{
  "slug": "graph",
  "name": "Graph",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Data-Structures/Graph/Graph.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures/Graph/Graph.js",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Graph</span> {\n  <span class=\"hljs-title function_\">constructor</span> () {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyMap</span> = {}\n  }\n\n  addVertex (vertex) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyMap</span>[vertex] = []\n  }\n\n  containsVertex (vertex) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">typeof</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyMap</span>[vertex]) !== <span class=\"hljs-string\">&#x27;undefined&#x27;</span>\n  }\n\n  addEdge (vertex1, vertex2) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">containsVertex</span>(vertex1) &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">containsVertex</span>(vertex2)) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyMap</span>[vertex1].<span class=\"hljs-title function_\">push</span>(vertex2)\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyMap</span>[vertex2].<span class=\"hljs-title function_\">push</span>(vertex1)\n    }\n  }\n\n  printGraph (output = <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value)) {\n    <span class=\"hljs-keyword\">const</span> keys = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyMap</span>)\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> i <span class=\"hljs-keyword\">of</span> keys) {\n      <span class=\"hljs-keyword\">const</span> values = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyMap</span>[i]\n      <span class=\"hljs-keyword\">let</span> vertex = <span class=\"hljs-string\">&#x27;&#x27;</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> j <span class=\"hljs-keyword\">of</span> values) {\n        vertex += j + <span class=\"hljs-string\">&#x27; &#x27;</span>\n      }\n      <span class=\"hljs-title function_\">output</span>(i + <span class=\"hljs-string\">&#x27; -&gt; &#x27;</span> + vertex)\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Prints the Breadth first traversal of the graph from source.\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} source The source vertex to start BFS.\n   */</span>\n  bfs (source, output = <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value)) {\n    <span class=\"hljs-keyword\">const</span> queue = [[source, <span class=\"hljs-number\">0</span>]] <span class=\"hljs-comment\">// level of source is 0</span>\n    <span class=\"hljs-keyword\">const</span> visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>()\n\n    <span class=\"hljs-keyword\">while</span> (queue.<span class=\"hljs-property\">length</span>) {\n      <span class=\"hljs-keyword\">const</span> [node, level] = queue.<span class=\"hljs-title function_\">shift</span>() <span class=\"hljs-comment\">// remove the front of the queue</span>\n      <span class=\"hljs-keyword\">if</span> (visited.<span class=\"hljs-title function_\">has</span>(node)) { <span class=\"hljs-comment\">// visited</span>\n        <span class=\"hljs-keyword\">continue</span>\n      }\n\n      visited.<span class=\"hljs-title function_\">add</span>(node)\n      <span class=\"hljs-title function_\">output</span>(<span class=\"hljs-string\">`Visited node <span class=\"hljs-subst\">${node}</span> at level <span class=\"hljs-subst\">${level}</span>.`</span>)\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> next <span class=\"hljs-keyword\">of</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyMap</span>[node]) {\n        queue.<span class=\"hljs-title function_\">push</span>([next, level + <span class=\"hljs-number\">1</span>]) <span class=\"hljs-comment\">// level 1 more than current</span>\n      }\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Prints the Depth first traversal of the graph from source.\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} source The source vertex to start DFS.\n   */</span>\n  dfs (source, visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>(), output = <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value)) {\n    <span class=\"hljs-keyword\">if</span> (visited.<span class=\"hljs-title function_\">has</span>(source)) { <span class=\"hljs-comment\">// visited</span>\n      <span class=\"hljs-keyword\">return</span>\n    }\n\n    <span class=\"hljs-title function_\">output</span>(<span class=\"hljs-string\">`Visited node <span class=\"hljs-subst\">${source}</span>`</span>)\n    visited.<span class=\"hljs-title function_\">add</span>(source)\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> neighbour <span class=\"hljs-keyword\">of</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyMap</span>[source]) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">dfs</span>(neighbour, visited, output)\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">example</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> g = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Graph</span>()\n  g.<span class=\"hljs-title function_\">addVertex</span>(<span class=\"hljs-number\">1</span>)\n  g.<span class=\"hljs-title function_\">addVertex</span>(<span class=\"hljs-number\">2</span>)\n  g.<span class=\"hljs-title function_\">addVertex</span>(<span class=\"hljs-number\">3</span>)\n  g.<span class=\"hljs-title function_\">addVertex</span>(<span class=\"hljs-number\">4</span>)\n  g.<span class=\"hljs-title function_\">addVertex</span>(<span class=\"hljs-number\">5</span>)\n  g.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n  g.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>)\n  g.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>)\n  g.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>)\n\n  <span class=\"hljs-comment\">// Graph</span>\n  <span class=\"hljs-comment\">// 1 -&gt; 2 3</span>\n  <span class=\"hljs-comment\">// 2 -&gt; 1 4 5</span>\n  <span class=\"hljs-comment\">// 3 -&gt; 1</span>\n  <span class=\"hljs-comment\">// 4 -&gt; 2</span>\n  <span class=\"hljs-comment\">// 5 -&gt; 2</span>\n\n  <span class=\"hljs-comment\">// Printing the adjacency list</span>\n  <span class=\"hljs-comment\">// g.printGraph()</span>\n\n  <span class=\"hljs-comment\">// Breadth first search at node 1</span>\n  g.<span class=\"hljs-title function_\">bfs</span>(<span class=\"hljs-number\">1</span>)\n\n  <span class=\"hljs-comment\">// Depth first search at node 1</span>\n  g.<span class=\"hljs-title function_\">dfs</span>(<span class=\"hljs-number\">1</span>)\n}\n\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">Graph</span>, example }\n"
    },
    "c": {
      "dir": "data_structures/graphs/graph.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/graphs/graph.c",
      "code": "<span class=\"hljs-comment\">// Graph ADT</span>\n<span class=\"hljs-comment\">// Adjacency Matrix Representation</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;Graph.h&quot;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">GraphRep</span>\n{</span>\n    <span class=\"hljs-type\">int</span> **edges;  <span class=\"hljs-comment\">// adjacency matrix</span>\n    <span class=\"hljs-type\">int</span> nV;       <span class=\"hljs-comment\">// #vertices</span>\n    <span class=\"hljs-type\">int</span> nE;       <span class=\"hljs-comment\">// #edges</span>\n} GraphRep;\n\nGraph <span class=\"hljs-title function_\">newGraph</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> V)</span>\n{\n    assert(V &gt;= <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-type\">int</span> i;\n\n    Graph g = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(GraphRep));\n    assert(g != <span class=\"hljs-literal\">NULL</span>);\n    g-&gt;nV = V;\n    g-&gt;nE = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">// allocate memory for each row</span>\n    g-&gt;edges = <span class=\"hljs-built_in\">malloc</span>(V * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span> *));\n    assert(g-&gt;edges != <span class=\"hljs-literal\">NULL</span>);\n    <span class=\"hljs-comment\">// allocate memory for each column and initialise with 0</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; V; i++)\n    {\n        g-&gt;edges[i] = <span class=\"hljs-built_in\">calloc</span>(V, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\n        assert(g-&gt;edges[i] != <span class=\"hljs-literal\">NULL</span>);\n    }\n\n    <span class=\"hljs-keyword\">return</span> g;\n}\n\n<span class=\"hljs-comment\">// check if vertex is valid in a graph</span>\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">validV</span><span class=\"hljs-params\">(Graph g, Vertex v)</span> { <span class=\"hljs-keyword\">return</span> (g != <span class=\"hljs-literal\">NULL</span> &amp;&amp; v &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; v &lt; g-&gt;nV); }\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">insertEdge</span><span class=\"hljs-params\">(Graph g, Edge e)</span>\n{\n    assert(g != <span class=\"hljs-literal\">NULL</span> &amp;&amp; validV(g, e.v) &amp;&amp; validV(g, e.w));\n\n    <span class=\"hljs-keyword\">if</span> (!g-&gt;edges[e.v][e.w])\n    {  <span class=\"hljs-comment\">// edge e not in graph</span>\n        g-&gt;edges[e.v][e.w] = <span class=\"hljs-number\">1</span>;\n        g-&gt;edges[e.w][e.v] = <span class=\"hljs-number\">1</span>;\n        g-&gt;nE++;\n    }\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">removeEdge</span><span class=\"hljs-params\">(Graph g, Edge e)</span>\n{\n    assert(g != <span class=\"hljs-literal\">NULL</span> &amp;&amp; validV(g, e.v) &amp;&amp; validV(g, e.w));\n\n    <span class=\"hljs-keyword\">if</span> (g-&gt;edges[e.v][e.w])\n    {  <span class=\"hljs-comment\">// edge e in graph</span>\n        g-&gt;edges[e.v][e.w] = <span class=\"hljs-number\">0</span>;\n        g-&gt;edges[e.w][e.v] = <span class=\"hljs-number\">0</span>;\n        g-&gt;nE--;\n    }\n}\n\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">adjacent</span><span class=\"hljs-params\">(Graph g, Vertex v, Vertex w)</span>\n{\n    assert(g != <span class=\"hljs-literal\">NULL</span> &amp;&amp; validV(g, v) &amp;&amp; validV(g, w));\n\n    <span class=\"hljs-keyword\">return</span> (g-&gt;edges[v][w] != <span class=\"hljs-number\">0</span>);\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">showGraph</span><span class=\"hljs-params\">(Graph g)</span>\n{\n    assert(g != <span class=\"hljs-literal\">NULL</span>);\n    <span class=\"hljs-type\">int</span> i, j;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Number of vertices: %d\\n&quot;</span>, g-&gt;nV);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Number of edges: %d\\n&quot;</span>, g-&gt;nE);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; g-&gt;nV; i++)\n        <span class=\"hljs-keyword\">for</span> (j = i + <span class=\"hljs-number\">1</span>; j &lt; g-&gt;nV; j++)\n            <span class=\"hljs-keyword\">if</span> (g-&gt;edges[i][j])\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Edge %d - %d\\n&quot;</span>, i, j);\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">freeGraph</span><span class=\"hljs-params\">(Graph g)</span>\n{\n    assert(g != <span class=\"hljs-literal\">NULL</span>);\n\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; g-&gt;nV; i++) <span class=\"hljs-built_in\">free</span>(g-&gt;edges[i]);\n    <span class=\"hljs-built_in\">free</span>(g-&gt;edges);\n    <span class=\"hljs-built_in\">free</span>(g);\n}\n\n<span class=\"hljs-comment\">// By</span>\n<span class=\"hljs-comment\">//  .----------------.  .----------------.  .----------------.</span>\n<span class=\"hljs-comment\">//  .-----------------.  .----------------.  .----------------.</span>\n<span class=\"hljs-comment\">// | .--------------. || .--------------. || .--------------. ||</span>\n<span class=\"hljs-comment\">// .--------------. | | .--------------. || .--------------. | | |  _________ |</span>\n<span class=\"hljs-comment\">// || | _____  _____ | || |      __      | || | ____  _____  | | | |  ____  ____</span>\n<span class=\"hljs-comment\">// | || |     ____     | | | | |  _   _  |  | || ||_   _||_   _|| || |     /  \\\n// | || ||_   \\|_   _| | | | | |_   ||   _| | || |   .&#x27;    `.   | | | | |_/ | |</span>\n<span class=\"hljs-comment\">// \\_|  | || |  | |    | |  | || |    / /\\ \\    | || |  |   \\ | |   | | | |   |</span>\n<span class=\"hljs-comment\">// |__| |   | || |  /  .--.  \\  | | | |     | |      | || |  | &#x27;    &#x27; |  | || |</span>\n<span class=\"hljs-comment\">// / ____ \\   | || |  | |\\ \\| |   | | | |   |  __  |   | || |  | |    | |  | |</span>\n<span class=\"hljs-comment\">// | |    _| |_     | || |   \\ `--&#x27; /   | || | _/ /    \\ \\_ | || | _| |_\\   |_</span>\n<span class=\"hljs-comment\">// | | | |  _| |  | |_  | || |  \\  `--&#x27;  /  | | | |   |_____|    | || | `.__.&#x27;</span>\n<span class=\"hljs-comment\">// | || ||____|  |____|| || ||_____|\\____| | | | | |____||____| | || | `.____.&#x27;</span>\n<span class=\"hljs-comment\">// | | | |              | || |              | || |              | || | | | | |</span>\n<span class=\"hljs-comment\">// | || |              | | | &#x27;--------------&#x27; || &#x27;--------------&#x27; ||</span>\n<span class=\"hljs-comment\">// &#x27;--------------&#x27; || &#x27;--------------&#x27; | | &#x27;--------------&#x27; || &#x27;--------------&#x27;</span>\n<span class=\"hljs-comment\">// |</span>\n<span class=\"hljs-comment\">//  &#x27;----------------&#x27;  &#x27;----------------&#x27;  &#x27;----------------&#x27;</span>\n<span class=\"hljs-comment\">//  &#x27;----------------&#x27;   &#x27;----------------&#x27;  &#x27;----------------&#x27;</span>\n\n<span class=\"hljs-comment\">//  Email :    z5261243@unsw.edu.au</span>\n<span class=\"hljs-comment\">//             hhoanhtuann@gmail.com</span>\n"
    },
    "go": {
      "dir": "graph/coloring/graph.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/graph/coloring/graph.go",
      "code": "<span class=\"hljs-comment\">// This file contains the simple structural implementation of undirected</span>\n<span class=\"hljs-comment\">// graph, used in coloring algorithms.</span>\n<span class=\"hljs-comment\">// Author(s): [Shivam](https://github.com/Shivam010)</span>\n\n<span class=\"hljs-keyword\">package</span> coloring\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;errors&quot;</span>\n\n<span class=\"hljs-comment\">// Color provides a type for vertex color</span>\n<span class=\"hljs-keyword\">type</span> Color <span class=\"hljs-type\">int</span>\n\n<span class=\"hljs-comment\">// Graph provides a structure to store an undirected graph.</span>\n<span class=\"hljs-comment\">// It is safe to use its empty object.</span>\n<span class=\"hljs-keyword\">type</span> Graph <span class=\"hljs-keyword\">struct</span> {\n\tvertices <span class=\"hljs-type\">int</span>\n\tedges    <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-keyword\">struct</span>{}\n}\n\n<span class=\"hljs-comment\">// AddVertex will add a new vertex in the graph, if the vertex already</span>\n<span class=\"hljs-comment\">// exist it will do nothing</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *Graph)</span></span> AddVertex(v <span class=\"hljs-type\">int</span>) {\n\t<span class=\"hljs-keyword\">if</span> g.edges == <span class=\"hljs-literal\">nil</span> {\n\t\tg.edges = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-keyword\">struct</span>{})\n\t}\n\n\t<span class=\"hljs-comment\">// Check if vertex is present or not</span>\n\t<span class=\"hljs-keyword\">if</span> _, ok := g.edges[v]; !ok {\n\t\tg.vertices++\n\t\tg.edges[v] = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-keyword\">struct</span>{})\n\t}\n}\n\n<span class=\"hljs-comment\">// AddEdge will add a new edge between the provided vertices in the graph</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *Graph)</span></span> AddEdge(one, two <span class=\"hljs-type\">int</span>) {\n\t<span class=\"hljs-comment\">// Add vertices: one and two to the graph if they are not present</span>\n\tg.AddVertex(one)\n\tg.AddVertex(two)\n\n\t<span class=\"hljs-comment\">// and finally add the edges: one-&gt;two and two-&gt;one for undirected graph</span>\n\tg.edges[one][two] = <span class=\"hljs-keyword\">struct</span>{}{}\n\tg.edges[two][one] = <span class=\"hljs-keyword\">struct</span>{}{}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *Graph)</span></span> ValidateColorsOfVertex(colors <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]Color) <span class=\"hljs-type\">error</span> {\n\t<span class=\"hljs-keyword\">if</span> g.vertices != <span class=\"hljs-built_in\">len</span>(colors) {\n\t\t<span class=\"hljs-keyword\">return</span> errors.New(<span class=\"hljs-string\">&quot;coloring: not all vertices of graph are colored&quot;</span>)\n\t}\n\t<span class=\"hljs-comment\">// check colors</span>\n\t<span class=\"hljs-keyword\">for</span> vertex, neighbours := <span class=\"hljs-keyword\">range</span> g.edges {\n\t\t<span class=\"hljs-keyword\">for</span> nb := <span class=\"hljs-keyword\">range</span> neighbours {\n\t\t\t<span class=\"hljs-keyword\">if</span> colors[vertex] == colors[nb] {\n\t\t\t\t<span class=\"hljs-keyword\">return</span> errors.New(<span class=\"hljs-string\">&quot;coloring: same colors of neighbouring vertex&quot;</span>)\n\t\t\t}\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n}\n"
    },
    "rust": {
      "dir": "src/data_structures/graph.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/data_structures/graph.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::collections::{HashMap, HashSet};\n<span class=\"hljs-keyword\">use</span> std::fmt;\n\n<span class=\"hljs-meta\">#[derive(Debug, Clone)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">NodeNotInGraph</span>;\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">fmt</span>::Display <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">NodeNotInGraph</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fmt</span>(&amp;<span class=\"hljs-keyword\">self</span>, f: &amp;<span class=\"hljs-keyword\">mut</span> fmt::Formatter) <span class=\"hljs-punctuation\">-&gt;</span> fmt::<span class=\"hljs-type\">Result</span> {\n        <span class=\"hljs-built_in\">write!</span>(f, <span class=\"hljs-string\">&quot;accessing a node that is not in the graph&quot;</span>)\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">DirectedGraph</span> {\n    adjacency_table: HashMap&lt;<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt;&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Graph</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">DirectedGraph</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>() <span class=\"hljs-punctuation\">-&gt;</span> DirectedGraph {\n        DirectedGraph {\n            adjacency_table: HashMap::<span class=\"hljs-title function_ invoke__\">new</span>(),\n        }\n    }\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">adjacency_table_mutable</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> &amp;<span class=\"hljs-keyword\">mut</span> HashMap&lt;<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt;&gt; {\n        &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.adjacency_table\n    }\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">adjacency_table</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> &amp;HashMap&lt;<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt;&gt; {\n        &amp;<span class=\"hljs-keyword\">self</span>.adjacency_table\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">UndirectedGraph</span> {\n    adjacency_table: HashMap&lt;<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt;&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Graph</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">UndirectedGraph</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>() <span class=\"hljs-punctuation\">-&gt;</span> UndirectedGraph {\n        UndirectedGraph {\n            adjacency_table: HashMap::<span class=\"hljs-title function_ invoke__\">new</span>(),\n        }\n    }\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">adjacency_table_mutable</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> &amp;<span class=\"hljs-keyword\">mut</span> HashMap&lt;<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt;&gt; {\n        &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.adjacency_table\n    }\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">adjacency_table</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> &amp;HashMap&lt;<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt;&gt; {\n        &amp;<span class=\"hljs-keyword\">self</span>.adjacency_table\n    }\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, edge: (&amp;<span class=\"hljs-type\">str</span>, &amp;<span class=\"hljs-type\">str</span>, <span class=\"hljs-type\">i32</span>)) {\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">add_node</span>(edge.<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">add_node</span>(edge.<span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-keyword\">self</span>.adjacency_table\n            .<span class=\"hljs-title function_ invoke__\">entry</span>(edge.<span class=\"hljs-number\">0</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>())\n            .<span class=\"hljs-title function_ invoke__\">and_modify</span>(|e| {\n                e.<span class=\"hljs-title function_ invoke__\">push</span>((edge.<span class=\"hljs-number\">1</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>(), edge.<span class=\"hljs-number\">2</span>));\n            });\n        <span class=\"hljs-keyword\">self</span>.adjacency_table\n            .<span class=\"hljs-title function_ invoke__\">entry</span>(edge.<span class=\"hljs-number\">1</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>())\n            .<span class=\"hljs-title function_ invoke__\">and_modify</span>(|e| {\n                e.<span class=\"hljs-title function_ invoke__\">push</span>((edge.<span class=\"hljs-number\">0</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>(), edge.<span class=\"hljs-number\">2</span>));\n            });\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title class_\">Graph</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span>;\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">adjacency_table_mutable</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> &amp;<span class=\"hljs-keyword\">mut</span> HashMap&lt;<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt;&gt;;\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">adjacency_table</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> &amp;HashMap&lt;<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt;&gt;;\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">add_node</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, node: &amp;<span class=\"hljs-type\">str</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">adjacency_table</span>().<span class=\"hljs-title function_ invoke__\">get</span>(node) {\n            <span class=\"hljs-literal\">None</span> =&gt; {\n                <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">adjacency_table_mutable</span>()\n                    .<span class=\"hljs-title function_ invoke__\">insert</span>((*node).<span class=\"hljs-title function_ invoke__\">to_string</span>(), Vec::<span class=\"hljs-title function_ invoke__\">new</span>());\n                <span class=\"hljs-literal\">true</span>\n            }\n            _ =&gt; <span class=\"hljs-literal\">false</span>,\n        }\n    }\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, edge: (&amp;<span class=\"hljs-type\">str</span>, &amp;<span class=\"hljs-type\">str</span>, <span class=\"hljs-type\">i32</span>)) {\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">add_node</span>(edge.<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">add_node</span>(edge.<span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">adjacency_table_mutable</span>()\n            .<span class=\"hljs-title function_ invoke__\">entry</span>(edge.<span class=\"hljs-number\">0</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>())\n            .<span class=\"hljs-title function_ invoke__\">and_modify</span>(|e| {\n                e.<span class=\"hljs-title function_ invoke__\">push</span>((edge.<span class=\"hljs-number\">1</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>(), edge.<span class=\"hljs-number\">2</span>));\n            });\n    }\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">neighbours</span>(&amp;<span class=\"hljs-keyword\">self</span>, node: &amp;<span class=\"hljs-type\">str</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Result</span>&lt;&amp;<span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt;, NodeNotInGraph&gt; {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">adjacency_table</span>().<span class=\"hljs-title function_ invoke__\">get</span>(node) {\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-title function_ invoke__\">Err</span>(NodeNotInGraph),\n            <span class=\"hljs-title function_ invoke__\">Some</span>(i) =&gt; <span class=\"hljs-title function_ invoke__\">Ok</span>(i),\n        }\n    }\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">contains</span>(&amp;<span class=\"hljs-keyword\">self</span>, node: &amp;<span class=\"hljs-type\">str</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">adjacency_table</span>().<span class=\"hljs-title function_ invoke__\">get</span>(node).<span class=\"hljs-title function_ invoke__\">is_some</span>()\n    }\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">nodes</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> HashSet&lt;&amp;<span class=\"hljs-type\">String</span>&gt; {\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">adjacency_table</span>().<span class=\"hljs-title function_ invoke__\">keys</span>().<span class=\"hljs-title function_ invoke__\">collect</span>()\n    }\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">edges</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;(&amp;<span class=\"hljs-type\">String</span>, &amp;<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt; {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">edges</span> = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-title function_ invoke__\">for</span> (from_node, from_node_neighbours) <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">adjacency_table</span>() {\n            <span class=\"hljs-title function_ invoke__\">for</span> (to_node, weight) <span class=\"hljs-keyword\">in</span> from_node_neighbours {\n                edges.<span class=\"hljs-title function_ invoke__\">push</span>((from_node, to_node, *weight));\n            }\n        }\n        edges\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> test_undirected_graph {\n    <span class=\"hljs-keyword\">use</span> super::Graph;\n    <span class=\"hljs-keyword\">use</span> super::UndirectedGraph;\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_add_edge</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">graph</span> = UndirectedGraph::<span class=\"hljs-title function_ invoke__\">new</span>();\n\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-number\">5</span>));\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-number\">10</span>));\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-number\">7</span>));\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">expected_edges</span> = [\n            (&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;a&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), <span class=\"hljs-number\">5</span>),\n            (&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;a&quot;</span>), <span class=\"hljs-number\">5</span>),\n            (&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;c&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;a&quot;</span>), <span class=\"hljs-number\">7</span>),\n            (&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;a&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;c&quot;</span>), <span class=\"hljs-number\">7</span>),\n            (&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;c&quot;</span>), <span class=\"hljs-number\">10</span>),\n            (&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;c&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), <span class=\"hljs-number\">10</span>),\n        ];\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">edge</span> <span class=\"hljs-keyword\">in</span> expected_edges.<span class=\"hljs-title function_ invoke__\">iter</span>() {\n            <span class=\"hljs-built_in\">assert_eq!</span>(graph.<span class=\"hljs-title function_ invoke__\">edges</span>().<span class=\"hljs-title function_ invoke__\">contains</span>(edge), <span class=\"hljs-literal\">true</span>);\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_neighbours</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">graph</span> = UndirectedGraph::<span class=\"hljs-title function_ invoke__\">new</span>();\n\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-number\">5</span>));\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-number\">10</span>));\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-number\">7</span>));\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            graph.<span class=\"hljs-title function_ invoke__\">neighbours</span>(<span class=\"hljs-string\">&quot;a&quot;</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>(),\n            &amp;<span class=\"hljs-built_in\">vec!</span>[(String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), <span class=\"hljs-number\">5</span>), (String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;c&quot;</span>), <span class=\"hljs-number\">7</span>)]\n        );\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> test_directed_graph {\n    <span class=\"hljs-keyword\">use</span> super::DirectedGraph;\n    <span class=\"hljs-keyword\">use</span> super::Graph;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_add_node</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">graph</span> = DirectedGraph::<span class=\"hljs-title function_ invoke__\">new</span>();\n        graph.<span class=\"hljs-title function_ invoke__\">add_node</span>(<span class=\"hljs-string\">&quot;a&quot;</span>);\n        graph.<span class=\"hljs-title function_ invoke__\">add_node</span>(<span class=\"hljs-string\">&quot;b&quot;</span>);\n        graph.<span class=\"hljs-title function_ invoke__\">add_node</span>(<span class=\"hljs-string\">&quot;c&quot;</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            graph.<span class=\"hljs-title function_ invoke__\">nodes</span>(),\n            [&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;a&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;c&quot;</span>)]\n                .<span class=\"hljs-title function_ invoke__\">iter</span>()\n                .<span class=\"hljs-title function_ invoke__\">cloned</span>()\n                .<span class=\"hljs-title function_ invoke__\">collect</span>()\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_add_edge</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">graph</span> = DirectedGraph::<span class=\"hljs-title function_ invoke__\">new</span>();\n\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-number\">5</span>));\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-number\">7</span>));\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-number\">10</span>));\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">expected_edges</span> = [\n            (&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;a&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), <span class=\"hljs-number\">5</span>),\n            (&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;c&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;a&quot;</span>), <span class=\"hljs-number\">7</span>),\n            (&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;c&quot;</span>), <span class=\"hljs-number\">10</span>),\n        ];\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">edge</span> <span class=\"hljs-keyword\">in</span> expected_edges.<span class=\"hljs-title function_ invoke__\">iter</span>() {\n            <span class=\"hljs-built_in\">assert_eq!</span>(graph.<span class=\"hljs-title function_ invoke__\">edges</span>().<span class=\"hljs-title function_ invoke__\">contains</span>(edge), <span class=\"hljs-literal\">true</span>);\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_neighbours</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">graph</span> = DirectedGraph::<span class=\"hljs-title function_ invoke__\">new</span>();\n\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-number\">5</span>));\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-number\">10</span>));\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-number\">7</span>));\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            graph.<span class=\"hljs-title function_ invoke__\">neighbours</span>(<span class=\"hljs-string\">&quot;a&quot;</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>(),\n            &amp;<span class=\"hljs-built_in\">vec!</span>[(String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), <span class=\"hljs-number\">5</span>)]\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_contains</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">graph</span> = DirectedGraph::<span class=\"hljs-title function_ invoke__\">new</span>();\n        graph.<span class=\"hljs-title function_ invoke__\">add_node</span>(<span class=\"hljs-string\">&quot;a&quot;</span>);\n        graph.<span class=\"hljs-title function_ invoke__\">add_node</span>(<span class=\"hljs-string\">&quot;b&quot;</span>);\n        graph.<span class=\"hljs-title function_ invoke__\">add_node</span>(<span class=\"hljs-string\">&quot;c&quot;</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(graph.<span class=\"hljs-title function_ invoke__\">contains</span>(<span class=\"hljs-string\">&quot;a&quot;</span>), <span class=\"hljs-literal\">true</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(graph.<span class=\"hljs-title function_ invoke__\">contains</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), <span class=\"hljs-literal\">true</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(graph.<span class=\"hljs-title function_ invoke__\">contains</span>(<span class=\"hljs-string\">&quot;c&quot;</span>), <span class=\"hljs-literal\">true</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(graph.<span class=\"hljs-title function_ invoke__\">contains</span>(<span class=\"hljs-string\">&quot;d&quot;</span>), <span class=\"hljs-literal\">false</span>);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Haraman Johal",
      "email": "haraman.johal@oxfordni.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Tahmeed Tarek",
      "email": "tahmeedtarek@gmail.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sahil",
      "email": "shlbnsl843@gmail.com",
      "commits": 1
    },
    {
      "name": "Nur69",
      "email": "60115902+Nur69@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "naor",
      "email": "naor2205@gmail.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "ImNandha",
      "email": "49323522+ImNandha@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Omkar Pathak",
      "email": "omkarpathak27@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Shivam Rathore",
      "email": "shivam.rathore010@gmail.com",
      "commits": 2
    },
    {
      "name": "ttuanho",
      "email": "hhoanhtuann@gmail.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "YATIN KATHURIA",
      "email": "47096348+Yatin-kathuria@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}