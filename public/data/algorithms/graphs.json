{
  "slug": "graphs",
  "name": "Graphs",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/graphs/Graphs.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/graphs/Graphs.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.graphs;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AdjacencyListGraph</span>&lt;E <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;E&gt;&gt; {\n\n    ArrayList&lt;Vertex&gt; vertices;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">AdjacencyListGraph</span><span class=\"hljs-params\">()</span> {\n        vertices = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Vertex</span> {\n\n        E data;\n        ArrayList&lt;Vertex&gt; adjacentVertices;\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Vertex</span><span class=\"hljs-params\">(E data)</span> {\n            adjacentVertices = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n            <span class=\"hljs-built_in\">this</span>.data = data;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">addAdjacentVertex</span><span class=\"hljs-params\">(Vertex to)</span> {\n            <span class=\"hljs-keyword\">for</span> (Vertex v : adjacentVertices) {\n                <span class=\"hljs-keyword\">if</span> (v.data.compareTo(to.data) == <span class=\"hljs-number\">0</span>) {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// the edge already exists</span>\n                }\n            }\n            <span class=\"hljs-keyword\">return</span> adjacentVertices.add(to); <span class=\"hljs-comment\">// this will return true;</span>\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">removeAdjacentVertex</span><span class=\"hljs-params\">(E to)</span> {\n            <span class=\"hljs-comment\">// use indexes here so it is possible to</span>\n            <span class=\"hljs-comment\">// remove easily without implementing</span>\n            <span class=\"hljs-comment\">// equals method that ArrayList.remove(Object o) uses</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; adjacentVertices.size(); i++) {\n                <span class=\"hljs-keyword\">if</span> (adjacentVertices.get(i).data.compareTo(to) == <span class=\"hljs-number\">0</span>) {\n                    adjacentVertices.remove(i);\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n                }\n            }\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * this method removes an edge from the graph between two specified\n     * vertices\n     *\n     * <span class=\"hljs-doctag\">@param</span> from the data of the vertex the edge is from\n     * <span class=\"hljs-doctag\">@param</span> to the data of the vertex the edge is going to\n     * <span class=\"hljs-doctag\">@return</span> returns false if the edge doesn&#x27;t exist, returns true if the edge\n     * exists and is removed\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">removeEdge</span><span class=\"hljs-params\">(E from, E to)</span> {\n        <span class=\"hljs-type\">Vertex</span> <span class=\"hljs-variable\">fromV</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\n        <span class=\"hljs-keyword\">for</span> (Vertex v : vertices) {\n            <span class=\"hljs-keyword\">if</span> (from.compareTo(v.data) == <span class=\"hljs-number\">0</span>) {\n                fromV = v;\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">if</span> (fromV == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> fromV.removeAdjacentVertex(to);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * this method adds an edge to the graph between two specified vertices\n     *\n     * <span class=\"hljs-doctag\">@param</span> from the data of the vertex the edge is from\n     * <span class=\"hljs-doctag\">@param</span> to the data of the vertex the edge is going to\n     * <span class=\"hljs-doctag\">@return</span> returns true if the edge did not exist, return false if it\n     * already did\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(E from, E to)</span> {\n        <span class=\"hljs-type\">Vertex</span> <span class=\"hljs-variable\">fromV</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>, toV = <span class=\"hljs-literal\">null</span>;\n        <span class=\"hljs-keyword\">for</span> (Vertex v : vertices) {\n            <span class=\"hljs-keyword\">if</span> (from.compareTo(v.data) == <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">// see if from vertex already exists</span>\n                fromV = v;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (to.compareTo(v.data) == <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">// see if to vertex already exists</span>\n                toV = v;\n            }\n            <span class=\"hljs-keyword\">if</span> (fromV != <span class=\"hljs-literal\">null</span> &amp;&amp; toV != <span class=\"hljs-literal\">null</span>) {\n                <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// both nodes exist so stop searching</span>\n            }\n        }\n        <span class=\"hljs-keyword\">if</span> (fromV == <span class=\"hljs-literal\">null</span>) {\n            fromV = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vertex</span>(from);\n            vertices.add(fromV);\n        }\n        <span class=\"hljs-keyword\">if</span> (toV == <span class=\"hljs-literal\">null</span>) {\n            toV = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vertex</span>(to);\n            vertices.add(toV);\n        }\n        <span class=\"hljs-keyword\">return</span> fromV.addAdjacentVertex(toV);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * this gives a list of vertices in the graph and their adjacencies\n     *\n     * <span class=\"hljs-doctag\">@return</span> returns a string describing this graph\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\n        <span class=\"hljs-keyword\">for</span> (Vertex v : vertices) {\n            sb.append(<span class=\"hljs-string\">&quot;Vertex: &quot;</span>);\n            sb.append(v.data);\n            sb.append(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n            sb.append(<span class=\"hljs-string\">&quot;Adjacent vertices: &quot;</span>);\n            <span class=\"hljs-keyword\">for</span> (Vertex v2 : v.adjacentVertices) {\n                sb.append(v2.data);\n                sb.append(<span class=\"hljs-string\">&quot; &quot;</span>);\n            }\n            sb.append(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n        }\n        <span class=\"hljs-keyword\">return</span> sb.toString();\n    }\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Graphs</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\n        AdjacencyListGraph&lt;Integer&gt; graph = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AdjacencyListGraph</span>&lt;&gt;();\n        <span class=\"hljs-keyword\">assert</span> graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-keyword\">assert</span> graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>);\n        <span class=\"hljs-keyword\">assert</span> graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>);\n        <span class=\"hljs-keyword\">assert</span> !graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-keyword\">assert</span> graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\n        <span class=\"hljs-keyword\">assert</span> graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\n        <span class=\"hljs-keyword\">assert</span> graph.addEdge(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">assert</span> !graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\n        System.out.println(graph);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "H1manshu-$oni",
      "email": "84933847+H1manshu-Soni@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "zacharyjones123",
      "email": "zrjones@ncsu.edu",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "rei2hu",
      "email": "thornas.chang@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}