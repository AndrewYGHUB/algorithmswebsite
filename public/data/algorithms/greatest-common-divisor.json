{
  "slug": "greatest-common-divisor",
  "name": "Greatest Common Divisor",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/greatest_common_divisor.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/greatest_common_divisor.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nGreatest Common Divisor.\n\nWikipedia reference: https://en.wikipedia.org/wiki/Greatest_common_divisor\n\ngcd(a, b) = gcd(a, -b) = gcd(-a, b) = gcd(-a, -b) by definition of divisibility\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">greatest_common_divisor</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">int</span>, b: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculate Greatest Common Divisor (GCD).\n    &gt;&gt;&gt; greatest_common_divisor(24, 40)\n    8\n    &gt;&gt;&gt; greatest_common_divisor(1, 1)\n    1\n    &gt;&gt;&gt; greatest_common_divisor(1, 800)\n    1\n    &gt;&gt;&gt; greatest_common_divisor(11, 37)\n    1\n    &gt;&gt;&gt; greatest_common_divisor(3, 5)\n    1\n    &gt;&gt;&gt; greatest_common_divisor(16, 4)\n    4\n    &gt;&gt;&gt; greatest_common_divisor(-3, 9)\n    3\n    &gt;&gt;&gt; greatest_common_divisor(9, -3)\n    3\n    &gt;&gt;&gt; greatest_common_divisor(3, -9)\n    3\n    &gt;&gt;&gt; greatest_common_divisor(-3, -9)\n    3\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">abs</span>(b) <span class=\"hljs-keyword\">if</span> a == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">else</span> greatest_common_divisor(b % a, a)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gcd_by_iterative</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">int</span>, y: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Below method is more memory efficient because it does not create additional\n    stack frames for recursive functions calls (as done in the above method).\n    &gt;&gt;&gt; gcd_by_iterative(24, 40)\n    8\n    &gt;&gt;&gt; greatest_common_divisor(24, 40) == gcd_by_iterative(24, 40)\n    True\n    &gt;&gt;&gt; gcd_by_iterative(-3, -9)\n    3\n    &gt;&gt;&gt; gcd_by_iterative(3, -9)\n    3\n    &gt;&gt;&gt; gcd_by_iterative(1, -800)\n    1\n    &gt;&gt;&gt; gcd_by_iterative(11, 37)\n    1\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">while</span> y:  <span class=\"hljs-comment\"># --&gt; when y=0 then loop will terminate and return x as final GCD.</span>\n        x, y = y, x % y\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">abs</span>(x)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Call Greatest Common Divisor function.\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">try</span>:\n        nums = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter two integers separated by comma (,): &quot;</span>).split(<span class=\"hljs-string\">&quot;,&quot;</span>)\n        num_1 = <span class=\"hljs-built_in\">int</span>(nums[<span class=\"hljs-number\">0</span>])\n        num_2 = <span class=\"hljs-built_in\">int</span>(nums[<span class=\"hljs-number\">1</span>])\n        <span class=\"hljs-built_in\">print</span>(\n            <span class=\"hljs-string\">f&quot;greatest_common_divisor(<span class=\"hljs-subst\">{num_1}</span>, <span class=\"hljs-subst\">{num_2}</span>) = &quot;</span>\n            <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{greatest_common_divisor(num_1, num_2)}</span>&quot;</span>\n        )\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;By iterative gcd(<span class=\"hljs-subst\">{num_1}</span>, <span class=\"hljs-subst\">{num_2}</span>) = <span class=\"hljs-subst\">{gcd_by_iterative(num_1, num_2)}</span>&quot;</span>)\n    <span class=\"hljs-keyword\">except</span> (IndexError, UnboundLocalError, ValueError):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Wrong input&quot;</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    },
    "rust": {
      "dir": "src/math/greatest_common_divisor.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/math/greatest_common_divisor.rs",
      "code": "<span class=\"hljs-comment\">/// Greatest Common Divisor.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// greatest_common_divisor(num1, num2) returns the greatest number of num1 and num2.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Wikipedia reference: https://en.wikipedia.org/wiki/Greatest_common_divisor</span>\n<span class=\"hljs-comment\">/// gcd(a, b) = gcd(a, -b) = gcd(-a, b) = gcd(-a, -b) by definition of divisibility</span>\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">greatest_common_divisor_recursive</span>(a: <span class=\"hljs-type\">i64</span>, b: <span class=\"hljs-type\">i64</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">i64</span> {\n    <span class=\"hljs-keyword\">if</span> a == <span class=\"hljs-number\">0</span> {\n        b.<span class=\"hljs-title function_ invoke__\">abs</span>()\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-title function_ invoke__\">greatest_common_divisor_recursive</span>(b % a, a)\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">greatest_common_divisor_iterative</span>(<span class=\"hljs-keyword\">mut</span> a: <span class=\"hljs-type\">i64</span>, <span class=\"hljs-keyword\">mut</span> b: <span class=\"hljs-type\">i64</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">i64</span> {\n    <span class=\"hljs-keyword\">while</span> a != <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">remainder</span> = b % a;\n        b = a;\n        a = remainder;\n    }\n    b.<span class=\"hljs-title function_ invoke__\">abs</span>()\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">positive_number_recursive</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_recursive</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">16</span>), <span class=\"hljs-number\">4</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_recursive</span>(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">4</span>), <span class=\"hljs-number\">4</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_recursive</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_recursive</span>(<span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">40</span>), <span class=\"hljs-number\">40</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_recursive</span>(<span class=\"hljs-number\">27</span>, <span class=\"hljs-number\">12</span>), <span class=\"hljs-number\">3</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">positive_number_iterative</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_iterative</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">16</span>), <span class=\"hljs-number\">4</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_iterative</span>(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">4</span>), <span class=\"hljs-number\">4</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_iterative</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_iterative</span>(<span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">40</span>), <span class=\"hljs-number\">40</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_iterative</span>(<span class=\"hljs-number\">27</span>, <span class=\"hljs-number\">12</span>), <span class=\"hljs-number\">3</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">negative_number_recursive</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_recursive</span>(-<span class=\"hljs-number\">32</span>, -<span class=\"hljs-number\">8</span>), <span class=\"hljs-number\">8</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_recursive</span>(-<span class=\"hljs-number\">8</span>, -<span class=\"hljs-number\">32</span>), <span class=\"hljs-number\">8</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_recursive</span>(-<span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_recursive</span>(-<span class=\"hljs-number\">40</span>, -<span class=\"hljs-number\">40</span>), <span class=\"hljs-number\">40</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_recursive</span>(-<span class=\"hljs-number\">12</span>, -<span class=\"hljs-number\">27</span>), <span class=\"hljs-number\">3</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">negative_number_iterative</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_iterative</span>(-<span class=\"hljs-number\">32</span>, -<span class=\"hljs-number\">8</span>), <span class=\"hljs-number\">8</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_iterative</span>(-<span class=\"hljs-number\">8</span>, -<span class=\"hljs-number\">32</span>), <span class=\"hljs-number\">8</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_iterative</span>(-<span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_iterative</span>(-<span class=\"hljs-number\">40</span>, -<span class=\"hljs-number\">40</span>), <span class=\"hljs-number\">40</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_iterative</span>(-<span class=\"hljs-number\">12</span>, -<span class=\"hljs-number\">27</span>), <span class=\"hljs-number\">3</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">mix_recursive</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_recursive</span>(<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">5</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_recursive</span>(-<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">5</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_recursive</span>(-<span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">32</span>), <span class=\"hljs-number\">32</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_recursive</span>(-<span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">64</span>), <span class=\"hljs-number\">32</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_recursive</span>(-<span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">40</span>), <span class=\"hljs-number\">40</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_recursive</span>(<span class=\"hljs-number\">12</span>, -<span class=\"hljs-number\">27</span>), <span class=\"hljs-number\">3</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">mix_iterative</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_iterative</span>(<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">5</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_iterative</span>(-<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">5</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_iterative</span>(-<span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">32</span>), <span class=\"hljs-number\">32</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_iterative</span>(-<span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">64</span>), <span class=\"hljs-number\">32</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_iterative</span>(-<span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">40</span>), <span class=\"hljs-number\">40</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">greatest_common_divisor_iterative</span>(<span class=\"hljs-number\">12</span>, -<span class=\"hljs-number\">27</span>), <span class=\"hljs-number\">3</span>);\n    }\n}\n"
    },
    "lua": {
      "dir": "src/math/greatest_common_divisor.lua",
      "url": "https://github.com/TheAlgorithms/lua/tree/master/src/math/greatest_common_divisor.lua",
      "code": "<span class=\"hljs-comment\">-- Euclidean algorithm</span>\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(\n\ta, <span class=\"hljs-comment\">-- number</span>\n\tb <span class=\"hljs-comment\">-- number</span>\n)</span></span>\n\ta, b = <span class=\"hljs-built_in\">math</span>.<span class=\"hljs-built_in\">abs</span>(a), <span class=\"hljs-built_in\">math</span>.<span class=\"hljs-built_in\">abs</span>(b)\n\t<span class=\"hljs-keyword\">if</span> a == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span>\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">math</span>.<span class=\"hljs-built_in\">max</span>(b, <span class=\"hljs-number\">1</span>)\n\t<span class=\"hljs-keyword\">elseif</span> b == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span>\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">math</span>.<span class=\"hljs-built_in\">max</span>(a, <span class=\"hljs-number\">1</span>)\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-comment\">-- Bezout&#x27;s identity</span>\n\t<span class=\"hljs-keyword\">local</span> x_prev, x = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">local</span> y_prev, y = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-keyword\">while</span> b &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">do</span>\n\t\t<span class=\"hljs-keyword\">local</span> quotient = <span class=\"hljs-built_in\">math</span>.<span class=\"hljs-built_in\">floor</span>(a / b)\n\t\ta, b = b, a % b\n\t\tx_prev, x = x, x_prev - quotient * x\n\t\ty_prev, y = y, y_prev - quotient * y\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-comment\">-- Greatest common divisor &amp; Bezout&#x27;s identity: x, y with a * x + b * y = GCD</span>\n\t<span class=\"hljs-keyword\">return</span> a, x_prev, y_prev\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "imp",
      "email": "imp07@qq.com",
      "commits": 1
    },
    {
      "name": "Tomi Korkalainen",
      "email": "tomi.korkalainen@gmail.com",
      "commits": 1
    },
    {
      "name": "Joyce",
      "email": "jycyeo@yahoo.com.sg",
      "commits": 1
    },
    {
      "name": "Ankur Chattopadhyay",
      "email": "39518771+chttrjeankr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "percy07",
      "email": "56677891+percy07@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ghulam Mohiyuddin",
      "email": "subahani98@gmail.com",
      "commits": 1
    },
    {
      "name": "Brian Janssen",
      "email": "brian-janssen@hotmail.com",
      "commits": 2
    },
    {
      "name": "Jobin John",
      "email": "jobin1094@gmail.com",
      "commits": 2
    },
    {
      "name": "Lars Mueller",
      "email": "appgurulars@gmx.de",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}