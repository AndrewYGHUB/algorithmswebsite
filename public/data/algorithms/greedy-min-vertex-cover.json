{
  "slug": "greedy-min-vertex-cover",
  "name": "Greedy Min Vertex Cover",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs/greedy_min_vertex_cover.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs/greedy_min_vertex_cover.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n* Author: Manuel Di Lullo (https://github.com/manueldilullo)\n* Description: Approximization algorithm for minimum vertex cover problem.\n               Greedy Approach. Uses graphs represented with an adjacency list\nURL: https://mathworld.wolfram.com/MinimumVertexCover.html\nURL: https://cs.stackexchange.com/questions/129017/greedy-algorithm-for-vertex-cover\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">import</span> heapq\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">greedy_min_vertex_cover</span>(<span class=\"hljs-params\">graph: <span class=\"hljs-built_in\">dict</span></span>) -&gt; <span class=\"hljs-built_in\">set</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Greedy APX Algorithm for min Vertex Cover\n    @input: graph (graph stored in an adjacency list where each vertex\n            is represented with an integer)\n    @example:\n    &gt;&gt;&gt; graph = {0: [1, 3], 1: [0, 3], 2: [0, 3, 4], 3: [0, 1, 2], 4: [2, 3]}\n    &gt;&gt;&gt; greedy_min_vertex_cover(graph)\n    {0, 1, 2, 4}\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># queue used to store nodes and their rank</span>\n    queue: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>] = []\n\n    <span class=\"hljs-comment\"># for each node and his adjacency list add them and the rank of the node to queue</span>\n    <span class=\"hljs-comment\"># using heapq module the queue will be filled like a Priority Queue</span>\n    <span class=\"hljs-comment\"># heapq works with a min priority queue, so I used -1*len(v) to build it</span>\n    <span class=\"hljs-keyword\">for</span> key, value <span class=\"hljs-keyword\">in</span> graph.items():\n        <span class=\"hljs-comment\"># O(log(n))</span>\n        heapq.heappush(queue, [-<span class=\"hljs-number\">1</span> * <span class=\"hljs-built_in\">len</span>(value), (key, value)])\n\n    <span class=\"hljs-comment\"># chosen_vertices = set of chosen vertices</span>\n    chosen_vertices = <span class=\"hljs-built_in\">set</span>()\n\n    <span class=\"hljs-comment\"># while queue isn&#x27;t empty and there are still edges</span>\n    <span class=\"hljs-comment\">#   (queue[0][0] is the rank of the node with max rank)</span>\n    <span class=\"hljs-keyword\">while</span> queue <span class=\"hljs-keyword\">and</span> queue[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] != <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-comment\"># extract vertex with max rank from queue and add it to chosen_vertices</span>\n        argmax = heapq.heappop(queue)[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]\n        chosen_vertices.add(argmax)\n\n        <span class=\"hljs-comment\"># Remove all arcs adjacent to argmax</span>\n        <span class=\"hljs-keyword\">for</span> elem <span class=\"hljs-keyword\">in</span> queue:\n            <span class=\"hljs-comment\"># if v haven&#x27;t adjacent node, skip</span>\n            <span class=\"hljs-keyword\">if</span> elem[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">0</span>:\n                <span class=\"hljs-keyword\">continue</span>\n            <span class=\"hljs-comment\"># if argmax is reachable from elem</span>\n            <span class=\"hljs-comment\"># remove argmax from elem&#x27;s adjacent list and update his rank</span>\n            <span class=\"hljs-keyword\">if</span> argmax <span class=\"hljs-keyword\">in</span> elem[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]:\n                index = elem[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>].index(argmax)\n                <span class=\"hljs-keyword\">del</span> elem[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>][index]\n                elem[<span class=\"hljs-number\">0</span>] += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-comment\"># re-order the queue</span>\n        heapq.heapify(queue)\n    <span class=\"hljs-keyword\">return</span> chosen_vertices\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n\n    graph = {<span class=\"hljs-number\">0</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">1</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">2</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], <span class=\"hljs-number\">3</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">4</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]}\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Minimum vertex cover:\\n<span class=\"hljs-subst\">{greedy_min_vertex_cover(graph)}</span>&quot;</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "Rohan R Bharadwaj",
      "email": "rohanrbharadwaj@gmail.com",
      "commits": 1
    },
    {
      "name": "Manuel Di Lullo",
      "email": "39048927+manueldilullo@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}