{
  "slug": "hash-map-cuckoo-hashing",
  "name": "Hash Map Cuckoo Hashing",
  "categories": [
    "datastructures",
    "hashmap",
    "hashing"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/hashmap/hashing/HashMapCuckooHashing.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/hashmap/hashing/HashMapCuckooHashing.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.hashmap.hashing;\n\n\n<span class=\"hljs-keyword\">import</span> java.lang.Math;\n<span class=\"hljs-keyword\">import</span> java.util.Objects;\n\n<span class=\"hljs-comment\">/**\n * This class is an implementation of a hash table using Cuckoo Hashing It uses\n * a dynamic array to lengthen the size of the hash table when load factor &gt; .7\n *\n * &lt;a href=&quot;https://en.wikipedia.org/wiki/Cuckoo_hashing&quot;&gt;...&lt;/a&gt;\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HashMapCuckooHashing</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> tableSize; <span class=\"hljs-comment\">// size of the hash table</span>\n    <span class=\"hljs-keyword\">private</span> Integer[] buckets; <span class=\"hljs-comment\">// array representing the table</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Integer AVAILABLE;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> size; <span class=\"hljs-comment\">// number of elements in the hash table</span>\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> thresh; <span class=\"hljs-comment\">// threshold for infinite loop checking</span>\n\n    <span class=\"hljs-comment\">/**\n     * Constructor initializes buckets array, hsize, and creates dummy object\n     * for AVAILABLE\n     *\n     * <span class=\"hljs-doctag\">@param</span> tableSize the desired size of the hash map\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HashMapCuckooHashing</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> tableSize)</span> {\n        <span class=\"hljs-built_in\">this</span>.buckets = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[tableSize];\n        <span class=\"hljs-built_in\">this</span>.tableSize = tableSize;\n        <span class=\"hljs-built_in\">this</span>.AVAILABLE = Integer.MIN_VALUE;\n        <span class=\"hljs-built_in\">this</span>.size = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-built_in\">this</span>.thresh = (<span class=\"hljs-type\">int</span>) (Math.log(tableSize) / Math.log(<span class=\"hljs-number\">2</span>)) + <span class=\"hljs-number\">2</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * The 2 Hash Functions takes a given key and finds an index based on its data, 2 distinctive ways to minimize collisions\n     *\n     * <span class=\"hljs-doctag\">@param</span> key the desired key to be converted\n     * <span class=\"hljs-doctag\">@return</span> int an index corresponding to the key\n     */</span>\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hashFunction1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> key % tableSize;\n        <span class=\"hljs-keyword\">if</span> (hash &lt; <span class=\"hljs-number\">0</span>) {\n            hash += tableSize;\n        }\n        <span class=\"hljs-keyword\">return</span> hash;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hashFunction2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> key / tableSize;\n        hash %= tableSize;\n        <span class=\"hljs-keyword\">if</span> (hash &lt; <span class=\"hljs-number\">0</span>) {\n            hash += tableSize;\n        }\n        <span class=\"hljs-keyword\">return</span> hash;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * inserts the key into the hash map by wrapping it as an Integer object, then uses while loop to insert new key\n     * if desired place is empty, return.\n     * if already occupied, continue while loop over the new key that has just been pushed out.\n     * if while loop continues more than Thresh, rehash table to new size, then push again.\n     *\n     * <span class=\"hljs-doctag\">@param</span> key the desired key to be inserted in the hash map\n     */</span>\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertKey2HashTable</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">wrappedInt</span> <span class=\"hljs-operator\">=</span> key, temp;\n        <span class=\"hljs-type\">int</span> hash, loopCounter = <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-keyword\">if</span> (isFull()) {\n            System.out.println(<span class=\"hljs-string\">&quot;Hash table is full, lengthening &amp; rehashing table&quot;</span>);\n            reHashTableIncreasesTableSize();\n        }\n\n        <span class=\"hljs-keyword\">if</span> (checkTableContainsKey(key)) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Key already inside, no duplicates allowed&quot;</span>);\n        }\n\n        <span class=\"hljs-keyword\">while</span> (loopCounter &lt;= thresh) {\n            loopCounter++;\n            hash = hashFunction1(key);\n\n            <span class=\"hljs-keyword\">if</span> ((buckets[hash] == <span class=\"hljs-literal\">null</span>) || Objects.equals(buckets[hash], AVAILABLE)) {\n                buckets[hash] = wrappedInt;\n                size++;\n                checkLoadFactor();\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\n            temp = buckets[hash];\n            buckets[hash] = wrappedInt;\n            wrappedInt = temp;\n            hash = hashFunction2(temp);\n            <span class=\"hljs-keyword\">if</span> (Objects.equals(buckets[hash], AVAILABLE)) {\n                buckets[hash] = wrappedInt;\n                size++;\n                checkLoadFactor();\n                <span class=\"hljs-keyword\">return</span>;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (buckets[hash] == <span class=\"hljs-literal\">null</span>) {\n                buckets[hash] = wrappedInt;\n                size++;\n                checkLoadFactor();\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\n            temp = buckets[hash];\n            buckets[hash] = wrappedInt;\n            wrappedInt = temp;\n        }\n        System.out.println(<span class=\"hljs-string\">&quot;Infinite loop occurred, lengthening &amp; rehashing table&quot;</span>);\n        reHashTableIncreasesTableSize();\n        insertKey2HashTable(key);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * creates new HashMapCuckooHashing object, then inserts each of the elements in the previous table to it with its new hash functions.\n     * then refers current array to new table.\n     *\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">reHashTableIncreasesTableSize</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">HashMapCuckooHashing</span> <span class=\"hljs-variable\">newT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMapCuckooHashing</span>(tableSize * <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; tableSize; i++) {\n            <span class=\"hljs-keyword\">if</span> (buckets[i] != <span class=\"hljs-literal\">null</span> &amp;&amp; !Objects.equals(buckets[i], AVAILABLE)) {\n                newT.insertKey2HashTable(<span class=\"hljs-built_in\">this</span>.buckets[i]);\n            }\n        }\n        <span class=\"hljs-built_in\">this</span>.tableSize *= <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-built_in\">this</span>.buckets = newT.buckets;\n        <span class=\"hljs-built_in\">this</span>.thresh = (<span class=\"hljs-type\">int</span>) (Math.log(tableSize) / Math.log(<span class=\"hljs-number\">2</span>)) + <span class=\"hljs-number\">2</span>;\n    }\n\n\n    <span class=\"hljs-comment\">/**\n     * deletes a key from the hash map and adds an available placeholder\n     *\n     * <span class=\"hljs-doctag\">@param</span> key the desired key to be deleted\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteKeyFromHashTable</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">wrappedInt</span> <span class=\"hljs-operator\">=</span> key;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> hashFunction1(key);\n        <span class=\"hljs-keyword\">if</span> (isEmpty()) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Table is empty&quot;</span>);\n        }\n\n        <span class=\"hljs-keyword\">if</span> (Objects.equals(buckets[hash], wrappedInt)) {\n            buckets[hash] = AVAILABLE;\n            size--;\n            <span class=\"hljs-keyword\">return</span>;\n        }\n\n        hash = hashFunction2(key);\n        <span class=\"hljs-keyword\">if</span> (Objects.equals(buckets[hash], wrappedInt)) {\n            buckets[hash] = AVAILABLE;\n            size--;\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Key &quot;</span> + key + <span class=\"hljs-string\">&quot; already inside, no duplicates allowed&quot;</span>);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Displays the hash table line by line\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">displayHashtable</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; tableSize; i++) {\n            <span class=\"hljs-keyword\">if</span> ((buckets[i] == <span class=\"hljs-literal\">null</span>) || Objects.equals(buckets[i], AVAILABLE)) {\n                System.out.println(<span class=\"hljs-string\">&quot;Bucket &quot;</span> + i + <span class=\"hljs-string\">&quot;: Empty&quot;</span>);\n            } <span class=\"hljs-keyword\">else</span> {\n                System.out.println(<span class=\"hljs-string\">&quot;Bucket &quot;</span> + i + <span class=\"hljs-string\">&quot;: &quot;</span> + buckets[i].toString());\n            }\n        }\n        System.out.println();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Finds the index of location based on an inputted key\n     *\n     * <span class=\"hljs-doctag\">@param</span> key the desired key to be found\n     * <span class=\"hljs-doctag\">@return</span> int the index where the key is located\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findKeyInTable</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">wrappedInt</span> <span class=\"hljs-operator\">=</span> key;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> hashFunction1(key);\n\n        <span class=\"hljs-keyword\">if</span> (isEmpty()) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Table is empty&quot;</span>);\n        }\n\n        <span class=\"hljs-keyword\">if</span> (Objects.equals(buckets[hash], wrappedInt)) <span class=\"hljs-keyword\">return</span> hash;\n\n        hash = hashFunction2(key);\n        <span class=\"hljs-keyword\">if</span> (!Objects.equals(buckets[hash], wrappedInt))\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Key &quot;</span> + key + <span class=\"hljs-string\">&quot; not found in table&quot;</span>);\n        <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> hash;\n        }\n    }\n    <span class=\"hljs-comment\">/**\n     * checks if key is inside without any output other than returned boolean.\n     *\n     * <span class=\"hljs-doctag\">@param</span> key the desired key to be found\n     * <span class=\"hljs-doctag\">@return</span> int the index where the key is located\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">checkTableContainsKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span>{\n        <span class=\"hljs-keyword\">return</span>  ((buckets[hashFunction1(key)] != <span class=\"hljs-literal\">null</span> &amp;&amp; buckets[hashFunction1(key)].equals(key)) || (buckets[hashFunction2(key)] != <span class=\"hljs-literal\">null</span> &amp;&amp; buckets[hashFunction2(key)] == key));\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Checks the load factor of the hash table if greater than .7,\n     * automatically lengthens table to prevent further collisions\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">checkLoadFactor</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">factor</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">double</span>) size / tableSize;\n        <span class=\"hljs-keyword\">if</span> (factor &gt; <span class=\"hljs-number\">.7</span>) {\n            System.out.printf(<span class=\"hljs-string\">&quot;Load factor is %.2f , rehashing table\\n&quot;</span>, factor);\n            reHashTableIncreasesTableSize();\n        }\n        <span class=\"hljs-keyword\">return</span> factor;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * isFull returns true if the hash map is full and false if not full\n     *\n     * <span class=\"hljs-doctag\">@return</span> boolean is Empty\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isFull</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">response</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; tableSize; i++) {\n            <span class=\"hljs-keyword\">if</span> (buckets[i] == <span class=\"hljs-literal\">null</span> || Objects.equals(buckets[i], AVAILABLE)) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> response;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * isEmpty returns true if the hash map is empty and false if not empty\n     *\n     * <span class=\"hljs-doctag\">@return</span> boolean is Empty\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">response</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; tableSize; i++) {\n            <span class=\"hljs-keyword\">if</span> (buckets[i] != <span class=\"hljs-literal\">null</span>) {\n                response = <span class=\"hljs-literal\">false</span>;\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> response;\n    }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getNumberOfKeysInTable</span><span class=\"hljs-params\">()</span>{<span class=\"hljs-keyword\">return</span> size;}\n}\n"
    }
  },
  "contributors": [
    {
      "name": "haeshed",
      "email": "63429078+haeshed@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}