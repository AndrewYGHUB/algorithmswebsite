{
  "slug": "hash-map",
  "name": "Hash Map",
  "categories": [
    "datastructures",
    "hashmap",
    "hashing"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/hashmap/hashing/HashMap.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/hashmap/hashing/HashMap.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.hashmap.hashing;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HashMap</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> hsize;\n    <span class=\"hljs-keyword\">private</span> LinkedList[] buckets;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HashMap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> hsize)</span> {\n        buckets = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>[hsize];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; hsize; i++) {\n            buckets[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>();\n            <span class=\"hljs-comment\">// Java requires explicit initialisaton of each object</span>\n        }\n        <span class=\"hljs-built_in\">this</span>.hsize = hsize;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hashing</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> key % hsize;\n        <span class=\"hljs-keyword\">if</span> (hash &lt; <span class=\"hljs-number\">0</span>) {\n            hash += hsize;\n        }\n        <span class=\"hljs-keyword\">return</span> hash;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertHash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> hashing(key);\n        buckets[hash].insert(key);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteHash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> hashing(key);\n\n        buckets[hash].delete(key);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">displayHashtable</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; hsize; i++) {\n            System.out.printf(<span class=\"hljs-string\">&quot;Bucket %d :&quot;</span>, i);\n            System.out.println(buckets[i].display());\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinkedList</span> {\n\n        <span class=\"hljs-keyword\">private</span> Node first;\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">LinkedList</span><span class=\"hljs-params\">()</span> {\n            first = <span class=\"hljs-literal\">null</span>;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n            <span class=\"hljs-keyword\">if</span> (isEmpty()) {\n                first = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(key);\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\n            <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> findEnd(first);\n            temp.setNext(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(key));\n        }\n\n        <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">findEnd</span><span class=\"hljs-params\">(Node n)</span> {\n            <span class=\"hljs-keyword\">if</span> (n.getNext() == <span class=\"hljs-literal\">null</span>) {\n                <span class=\"hljs-keyword\">return</span> n;\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">return</span> findEnd(n.getNext());\n            }\n        }\n\n        <span class=\"hljs-keyword\">public</span> Node <span class=\"hljs-title function_\">findKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n            <span class=\"hljs-keyword\">if</span> (!isEmpty()) {\n                <span class=\"hljs-keyword\">return</span> findKey(first, key);\n            } <span class=\"hljs-keyword\">else</span> {\n                System.out.println(<span class=\"hljs-string\">&quot;List is empty&quot;</span>);\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n            }\n        }\n\n        <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">findKey</span><span class=\"hljs-params\">(Node n, <span class=\"hljs-type\">int</span> key)</span> {\n            <span class=\"hljs-keyword\">if</span> (n.getKey() == key) {\n                <span class=\"hljs-keyword\">return</span> n;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (n.getNext() == <span class=\"hljs-literal\">null</span>) {\n                System.out.println(<span class=\"hljs-string\">&quot;Key not found&quot;</span>);\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">return</span> findKey(n.getNext(), key);\n            }\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n            <span class=\"hljs-keyword\">if</span> (!isEmpty()) {\n                <span class=\"hljs-keyword\">if</span> (first.getKey() == key) {\n                    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">next</span> <span class=\"hljs-operator\">=</span> first.next;\n                    first.next = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// help GC</span>\n                    first = next;\n                } <span class=\"hljs-keyword\">else</span> {\n                    delete(first, key);\n                }\n            } <span class=\"hljs-keyword\">else</span> {\n                System.out.println(<span class=\"hljs-string\">&quot;List is empty&quot;</span>);\n            }\n        }\n\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">(Node n, <span class=\"hljs-type\">int</span> key)</span> {\n            <span class=\"hljs-keyword\">if</span> (n.getNext().getKey() == key) {\n                <span class=\"hljs-keyword\">if</span> (n.getNext().getNext() == <span class=\"hljs-literal\">null</span>) {\n                    n.setNext(<span class=\"hljs-literal\">null</span>);\n                } <span class=\"hljs-keyword\">else</span> {\n                    n.setNext(n.getNext().getNext());\n                }\n            } <span class=\"hljs-keyword\">else</span> {\n                delete(n.getNext(), key);\n            }\n        }\n\n        <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> display(first);\n        }\n\n        <span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(Node n)</span> {\n            <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-literal\">null</span>) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;null&quot;</span>;\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">return</span> n.getKey() + <span class=\"hljs-string\">&quot;-&gt;&quot;</span> + display(n.getNext());\n            }\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">first</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-literal\">null</span>;\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n\n        <span class=\"hljs-keyword\">private</span> Node next;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> key;\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n            next = <span class=\"hljs-literal\">null</span>;\n            <span class=\"hljs-built_in\">this</span>.key = key;\n        }\n\n        <span class=\"hljs-keyword\">public</span> Node <span class=\"hljs-title function_\">getNext</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> next;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getKey</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> key;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setNext</span><span class=\"hljs-params\">(Node next)</span> {\n            <span class=\"hljs-built_in\">this</span>.next = next;\n        }\n    }\n}\n"
    },
    "go": {
      "dir": "structure/hashmap/hashmap.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/structure/hashmap/hashmap.go",
      "code": "<span class=\"hljs-keyword\">package</span> hashmap\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;fmt&quot;</span>\n\t<span class=\"hljs-string\">&quot;hash/fnv&quot;</span>\n)\n\n<span class=\"hljs-keyword\">var</span> defaultCapacity <span class=\"hljs-type\">uint64</span> = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">10</span>\n\n<span class=\"hljs-keyword\">type</span> node <span class=\"hljs-keyword\">struct</span> {\n\tkey   any\n\tvalue any\n\tnext  *node\n}\n\n<span class=\"hljs-comment\">// HashMap is golang implementation of hashmap</span>\n<span class=\"hljs-keyword\">type</span> HashMap <span class=\"hljs-keyword\">struct</span> {\n\tcapacity <span class=\"hljs-type\">uint64</span>\n\tsize     <span class=\"hljs-type\">uint64</span>\n\ttable    []*node\n}\n\n<span class=\"hljs-comment\">// New return new HashMap instance</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">New</span><span class=\"hljs-params\">()</span></span> *HashMap {\n\t<span class=\"hljs-keyword\">return</span> &amp;HashMap{\n\t\tcapacity: defaultCapacity,\n\t\ttable:    <span class=\"hljs-built_in\">make</span>([]*node, defaultCapacity),\n\t}\n}\n\n<span class=\"hljs-comment\">// Make creates a new HashMap instance with input size and capacity</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Make</span><span class=\"hljs-params\">(size, capacity <span class=\"hljs-type\">uint64</span>)</span></span> HashMap {\n\t<span class=\"hljs-keyword\">return</span> HashMap{\n\t\tsize:     size,\n\t\tcapacity: capacity,\n\t\ttable:    <span class=\"hljs-built_in\">make</span>([]*node, capacity),\n\t}\n}\n\n<span class=\"hljs-comment\">// Get returns value associated with given key</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(hm *HashMap)</span></span> Get(key any) any {\n\tnode := hm.getNodeByHash(hm.hash(key))\n\n\t<span class=\"hljs-keyword\">if</span> node != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> node.value\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">// Put puts new key value in hashmap</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(hm *HashMap)</span></span> Put(key any, value any) any {\n\t<span class=\"hljs-keyword\">return</span> hm.putValue(hm.hash(key), key, value)\n}\n\n<span class=\"hljs-comment\">// Contains checks if given key is stored in hashmap</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(hm *HashMap)</span></span> Contains(key any) <span class=\"hljs-type\">bool</span> {\n\tnode := hm.getNodeByHash(hm.hash(key))\n\t<span class=\"hljs-keyword\">return</span> node != <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(hm *HashMap)</span></span> putValue(hash <span class=\"hljs-type\">uint64</span>, key any, value any) any {\n\t<span class=\"hljs-keyword\">if</span> hm.capacity == <span class=\"hljs-number\">0</span> {\n\t\thm.capacity = defaultCapacity\n\t\thm.table = <span class=\"hljs-built_in\">make</span>([]*node, defaultCapacity)\n\t}\n\n\tnode := hm.getNodeByHash(hash)\n\n\t<span class=\"hljs-keyword\">if</span> node == <span class=\"hljs-literal\">nil</span> {\n\t\thm.table[hash] = newNode(key, value)\n\n\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> node.key == key {\n\t\thm.table[hash] = newNodeWithNext(key, value, node)\n\t\t<span class=\"hljs-keyword\">return</span> value\n\n\t} <span class=\"hljs-keyword\">else</span> {\n\t\thm.resize()\n\t\t<span class=\"hljs-keyword\">return</span> hm.putValue(hash, key, value)\n\t}\n\n\thm.size++\n\n\t<span class=\"hljs-keyword\">return</span> value\n\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(hm *HashMap)</span></span> getNodeByHash(hash <span class=\"hljs-type\">uint64</span>) *node {\n\t<span class=\"hljs-keyword\">return</span> hm.table[hash]\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(hm *HashMap)</span></span> resize() {\n\thm.capacity &lt;&lt;= <span class=\"hljs-number\">1</span>\n\n\ttempTable := hm.table\n\n\thm.table = <span class=\"hljs-built_in\">make</span>([]*node, hm.capacity)\n\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(tempTable); i++ {\n\t\tnode := tempTable[i]\n\t\t<span class=\"hljs-keyword\">if</span> node == <span class=\"hljs-literal\">nil</span> {\n\t\t\t<span class=\"hljs-keyword\">continue</span>\n\t\t}\n\n\t\thm.table[hm.hash(node.key)] = node\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">newNode</span><span class=\"hljs-params\">(key any, value any)</span></span> *node {\n\t<span class=\"hljs-keyword\">return</span> &amp;node{\n\t\tkey:   key,\n\t\tvalue: value,\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">newNodeWithNext</span><span class=\"hljs-params\">(key any, value any, next *node)</span></span> *node {\n\t<span class=\"hljs-keyword\">return</span> &amp;node{\n\t\tkey:   key,\n\t\tvalue: value,\n\t\tnext:  next,\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(hm *HashMap)</span></span> hash(key any) <span class=\"hljs-type\">uint64</span> {\n\th := fnv.New64a()\n\t_, _ = h.Write([]<span class=\"hljs-type\">byte</span>(fmt.Sprintf(<span class=\"hljs-string\">&quot;%v&quot;</span>, key)))\n\n\thashValue := h.Sum64()\n\n\t<span class=\"hljs-keyword\">return</span> (hm.capacity - <span class=\"hljs-number\">1</span>) &amp; (hashValue ^ (hashValue &gt;&gt; <span class=\"hljs-number\">16</span>))\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Ritik Bhandari",
      "email": "ritikbhandari68@gmail.com",
      "commits": 1
    },
    {
      "name": "Michele Caci",
      "email": "michele.caci@gmail.com",
      "commits": 1
    },
    {
      "name": "Wesllhey Holanda",
      "email": "wesllhey.holanda@gmail.com",
      "commits": 1
    },
    {
      "name": "Sahil Parekh",
      "email": "sahilparekh94@gmail.com",
      "commits": 1
    },
    {
      "name": "Samir M'Sallem",
      "email": "49750910+samirmsallem@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ray",
      "email": "rbshealy@live.unc.edu",
      "commits": 1
    },
    {
      "name": "Ray S",
      "email": "68674276+rbshealy@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shivg7706",
      "email": "shivamgupta7706@gmail.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "Kenneth Nero",
      "email": "kbn1798@rit.edu",
      "commits": 1
    },
    {
      "name": "bakurits",
      "email": "bakuricucxashvili@gmail.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "ParitoshAggarwal",
      "email": "paritoshmait@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}