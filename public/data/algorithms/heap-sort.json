{
  "slug": "heap-sort",
  "name": "Heap Sort",
  "categories": [
    "sorts"
  ],
  "body": {
    "en": "<h4>Problem Statement</h4>\n<p>Given an unsorted array of n elements, write a function to sort the array</p>\n<h4>Approach</h4>\n<ul>\n<li>Build a max heap from the input data.</li>\n<li>At this point, the largest item is stored at the root of the heap. Replace it with the last item of the heap followed by reducing the size of heap by 1. Finally, heapify the root of tree.</li>\n<li>Repeat above steps while size of heap is greater than 1.</li>\n</ul>\n<h4>Time Complexity</h4>\n<p><code>O(n log n)</code> Worst case performance</p>\n<p><code>O(n log n)</code> (distinct keys)\nor O(n) (equal keys) Best-case performance</p>\n<p><code>O(n log n)</code> Average performance</p>\n<h4>Space Complexity</h4>\n<p><code>O(1)</code> Worst case auxiliary</p>\n<h4>Example</h4>\n<pre><code class=\"hljs language-delphi\">Input data: <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-number\">4</span>(<span class=\"hljs-number\">0</span>)\n       /   \\\n    <span class=\"hljs-number\">10</span>(<span class=\"hljs-number\">1</span>)   <span class=\"hljs-number\">3</span>(<span class=\"hljs-number\">2</span>)\n   /   \\\n<span class=\"hljs-number\">5</span>(<span class=\"hljs-number\">3</span>)    <span class=\"hljs-number\">1</span>(<span class=\"hljs-number\">4</span>)\n\nThe numbers <span class=\"hljs-keyword\">in</span> bracket represent the indices <span class=\"hljs-keyword\">in</span> the <span class=\"hljs-keyword\">array</span>\nrepresentation <span class=\"hljs-keyword\">of</span> data.\n\nApplying heapify <span class=\"hljs-function\"><span class=\"hljs-keyword\">procedure</span> <span class=\"hljs-title\">to</span> <span class=\"hljs-title\">index</span> 1:</span>\n        <span class=\"hljs-number\">4</span>(<span class=\"hljs-number\">0</span>)\n       /   \\\n   <span class=\"hljs-number\">10</span>(<span class=\"hljs-number\">1</span>)    <span class=\"hljs-number\">3</span>(<span class=\"hljs-number\">2</span>)\n   /   \\\n<span class=\"hljs-number\">5</span>(<span class=\"hljs-number\">3</span>)    <span class=\"hljs-number\">1</span>(<span class=\"hljs-number\">4</span>)\n\nApplying heapify <span class=\"hljs-function\"><span class=\"hljs-keyword\">procedure</span> <span class=\"hljs-title\">to</span> <span class=\"hljs-title\">index</span> 0:</span>\n       <span class=\"hljs-number\">10</span>(<span class=\"hljs-number\">0</span>)\n       /  \\\n    <span class=\"hljs-number\">5</span>(<span class=\"hljs-number\">1</span>)  <span class=\"hljs-number\">3</span>(<span class=\"hljs-number\">2</span>)\n   /   \\\n<span class=\"hljs-number\">4</span>(<span class=\"hljs-number\">3</span>)    <span class=\"hljs-number\">1</span>(<span class=\"hljs-number\">4</span>)\nThe heapify <span class=\"hljs-function\"><span class=\"hljs-keyword\">procedure</span> <span class=\"hljs-title\">calls</span> <span class=\"hljs-title\">itself</span> <span class=\"hljs-title\">recursively</span> <span class=\"hljs-title\">to</span> <span class=\"hljs-title\">build</span> <span class=\"hljs-title\">heap</span>\n<span class=\"hljs-title\">in</span> <span class=\"hljs-title\">top</span> <span class=\"hljs-title\">down</span> <span class=\"hljs-title\">manner</span>.\n</span></code></pre>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/1/1b/Sorting_heapsort_anim.gif\" alt=\"heap-image\" title=\"Heap Sort\"></p>\n<h4>Code Implementation Links</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/Sorts/HeapSort.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/sorting/heap_sort.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/sorts/heap_sort.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Go/blob/master/sorts/heapsort.go\">Go</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/sorting/heap_sort.rb\">Ruby</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Sorters/Comparison/HeapSorter.cs\">C-sharp</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C/blob/master/sorting/heap_sort.c\">C</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Javascript/blob/master/Sorts/HeapSort.js\">Javascript</a></li>\n</ul>\n<h4>Video Explanation</h4>\n<p><a href=\"https://www.youtube.com/watch?v=MtQL_ll5KhQ\">A video explaining the Heap Sort Algorithm</a></p>"
  },
  "implementations": {
    "python": {
      "dir": "sorts/heap_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/heap_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nThis is a pure Python implementation of the heap sort algorithm.\n\nFor doctests run following command:\npython -m doctest -v heap_sort.py\nor\npython3 -m doctest -v heap_sort.py\n\nFor manual testing run:\npython heap_sort.py\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">heapify</span>(<span class=\"hljs-params\">unsorted, index, heap_size</span>):\n    largest = index\n    left_index = <span class=\"hljs-number\">2</span> * index + <span class=\"hljs-number\">1</span>\n    right_index = <span class=\"hljs-number\">2</span> * index + <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">if</span> left_index &lt; heap_size <span class=\"hljs-keyword\">and</span> unsorted[left_index] &gt; unsorted[largest]:\n        largest = left_index\n\n    <span class=\"hljs-keyword\">if</span> right_index &lt; heap_size <span class=\"hljs-keyword\">and</span> unsorted[right_index] &gt; unsorted[largest]:\n        largest = right_index\n\n    <span class=\"hljs-keyword\">if</span> largest != index:\n        unsorted[largest], unsorted[index] = unsorted[index], unsorted[largest]\n        heapify(unsorted, largest, heap_size)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">heap_sort</span>(<span class=\"hljs-params\">unsorted</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Pure implementation of the heap sort algorithm in Python\n    :param collection: some mutable ordered collection with heterogeneous\n    comparable items inside\n    :return: the same collection ordered by ascending\n\n    Examples:\n    &gt;&gt;&gt; heap_sort([0, 5, 3, 2, 2])\n    [0, 2, 2, 3, 5]\n\n    &gt;&gt;&gt; heap_sort([])\n    []\n\n    &gt;&gt;&gt; heap_sort([-2, -5, -45])\n    [-45, -5, -2]\n    &quot;&quot;&quot;</span>\n    n = <span class=\"hljs-built_in\">len</span>(unsorted)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n // <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>):\n        heapify(unsorted, i, n)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>):\n        unsorted[<span class=\"hljs-number\">0</span>], unsorted[i] = unsorted[i], unsorted[<span class=\"hljs-number\">0</span>]\n        heapify(unsorted, <span class=\"hljs-number\">0</span>, i)\n    <span class=\"hljs-keyword\">return</span> unsorted\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\n    unsorted = [<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\n    <span class=\"hljs-built_in\">print</span>(heap_sort(unsorted))\n"
    },
    "javascript": {
      "dir": "Sorts/HeapSort.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts/HeapSort.js",
      "code": "<span class=\"hljs-comment\">/*\n * Build a max heap out of the array. A heap is a specialized tree like\n * data structure that satisfies the heap property. The heap property\n * for max heap is the following: &quot;if P is a parent node of C, then the\n * key (the value) of node P is greater than the key of node C&quot;\n * Source: https://en.wikipedia.org/wiki/Heap_(data_structure)\n */</span>\n<span class=\"hljs-comment\">/* eslint no-extend-native: [&quot;off&quot;, { &quot;exceptions&quot;: [&quot;Object&quot;] }] */</span>\n<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">heapify</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index, heapSize</span>) {\n  <span class=\"hljs-keyword\">let</span> largest = index\n  <span class=\"hljs-keyword\">const</span> leftIndex = <span class=\"hljs-number\">2</span> * index + <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">const</span> rightIndex = <span class=\"hljs-number\">2</span> * index + <span class=\"hljs-number\">2</span>\n\n  <span class=\"hljs-keyword\">if</span> (leftIndex &lt; heapSize &amp;&amp; <span class=\"hljs-variable language_\">this</span>[leftIndex] &gt; <span class=\"hljs-variable language_\">this</span>[largest]) {\n    largest = leftIndex\n  }\n\n  <span class=\"hljs-keyword\">if</span> (rightIndex &lt; heapSize &amp;&amp; <span class=\"hljs-variable language_\">this</span>[rightIndex] &gt; <span class=\"hljs-variable language_\">this</span>[largest]) {\n    largest = rightIndex\n  }\n\n  <span class=\"hljs-keyword\">if</span> (largest !== index) {\n    <span class=\"hljs-keyword\">const</span> temp = <span class=\"hljs-variable language_\">this</span>[largest]\n    <span class=\"hljs-variable language_\">this</span>[largest] = <span class=\"hljs-variable language_\">this</span>[index]\n    <span class=\"hljs-variable language_\">this</span>[index] = temp\n\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">heapify</span>(largest, heapSize)\n  }\n}\n\n<span class=\"hljs-comment\">/*\n * Heap sort sorts an array by building a heap from the array and\n * utilizing the heap property.\n * For more information see: https://en.wikipedia.org/wiki/Heapsort\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">heapSort</span> (items) {\n  <span class=\"hljs-keyword\">const</span> length = items.<span class=\"hljs-property\">length</span>\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(length / <span class=\"hljs-number\">2</span>) - <span class=\"hljs-number\">1</span>; i &gt; -<span class=\"hljs-number\">1</span>; i--) {\n    items.<span class=\"hljs-title function_\">heapify</span>(i, length)\n  }\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = length - <span class=\"hljs-number\">1</span>; j &gt; <span class=\"hljs-number\">0</span>; j--) {\n    <span class=\"hljs-keyword\">const</span> tmp = items[<span class=\"hljs-number\">0</span>]\n    items[<span class=\"hljs-number\">0</span>] = items[j]\n    items[j] = tmp\n    items.<span class=\"hljs-title function_\">heapify</span>(<span class=\"hljs-number\">0</span>, j)\n  }\n  <span class=\"hljs-keyword\">return</span> items\n}\n\n<span class=\"hljs-comment\">// Implementation of heapSort</span>\n\n<span class=\"hljs-comment\">// const ar = [5, 6, 7, 8, 1, 2, 12, 14]</span>\n<span class=\"hljs-comment\">// heapSort(ar)</span>\n"
    },
    "c-plus-plus": {
      "dir": "sorting/heap_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/heap_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * \\file\n * \\brief [Heap Sort Algorithm\n * (heap sort)](https://en.wikipedia.org/wiki/Heapsort) implementation\n *\n * \\author [Ayaan Khan](http://github.com/ayaankhan98)\n *\n * \\details\n *  Heap-sort is a comparison-based sorting algorithm.\n *  Heap-sort can be thought of as an improved selection sort:\n *  like selection sort, heap sort divides its input into a sorted\n *  and an unsorted region, and it iteratively shrinks the unsorted\n *  region by extracting the largest element from it and inserting\n *  it into the sorted region. Unlike selection sort,\n *  heap sort does not waste time with a linear-time scan of the\n *  unsorted region; rather, heap sort maintains the unsorted region\n *  in a heap data structure to more quickly find the largest element\n *  in each step.\n *\n *  Time Complexity - \\f$O(n \\log(n))\\f$\n *\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n *\n * Utility function to print the array after\n * sorting.\n *\n * @param arr array to be printed\n * @param sz size of array\n *\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printArray</span><span class=\"hljs-params\">(T *arr, <span class=\"hljs-type\">int</span> sz)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; sz; i++) std::cout &lt;&lt; arr[i] &lt;&lt; <span class=\"hljs-string\">&quot;  &quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/**\n *\n * \\addtogroup sorting Sorting Algorithm\n * @{\n *\n * The heapify procedure can be thought of as building a heap from\n * the bottom up by successively sifting downward to establish the\n * heap property.\n *\n * @param arr array to be sorted\n * @param n size of array\n * @param i node position in Binary Tress or element position in\n *          Array to be compared with it&#x27;s childern\n *\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">heapify</span><span class=\"hljs-params\">(T *arr, <span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">int</span> i)</span> </span>{\n    <span class=\"hljs-type\">int</span> largest = i;\n    <span class=\"hljs-type\">int</span> l = <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-type\">int</span> r = <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">2</span>;\n\n    <span class=\"hljs-keyword\">if</span> (l &lt; n &amp;&amp; arr[l] &gt; arr[largest])\n        largest = l;\n\n    <span class=\"hljs-keyword\">if</span> (r &lt; n &amp;&amp; arr[r] &gt; arr[largest])\n        largest = r;\n\n    <span class=\"hljs-keyword\">if</span> (largest != i) {\n        std::<span class=\"hljs-built_in\">swap</span>(arr[i], arr[largest]);\n        <span class=\"hljs-built_in\">heapify</span>(arr, n, largest);\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * Utilizes heapify procedure to sort\n * the array\n *\n * @param arr array to be sorted\n * @param n size of array\n *\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">heapSort</span><span class=\"hljs-params\">(T *arr, <span class=\"hljs-type\">int</span> n)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = n - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) <span class=\"hljs-built_in\">heapify</span>(arr, n, i);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = n - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n        std::<span class=\"hljs-built_in\">swap</span>(arr[<span class=\"hljs-number\">0</span>], arr[i]);\n        <span class=\"hljs-built_in\">heapify</span>(arr, i, <span class=\"hljs-number\">0</span>);\n    }\n}\n\n<span class=\"hljs-comment\">/**\n *\n * @}\n * Test cases to test the program\n *\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1\\n&quot;</span>;\n    <span class=\"hljs-type\">int</span> arr[] = {<span class=\"hljs-number\">-10</span>, <span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">94</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">99</span>, <span class=\"hljs-number\">0</span>};\n    <span class=\"hljs-type\">int</span> sz = <span class=\"hljs-built_in\">sizeof</span>(arr) / <span class=\"hljs-built_in\">sizeof</span>(arr[<span class=\"hljs-number\">0</span>]);  <span class=\"hljs-comment\">// sz - size of array</span>\n    <span class=\"hljs-built_in\">printArray</span>(arr, sz);  <span class=\"hljs-comment\">// displaying the array before sorting</span>\n    <span class=\"hljs-built_in\">heapSort</span>(arr, sz);    <span class=\"hljs-comment\">// calling heapsort to sort the array</span>\n    <span class=\"hljs-built_in\">printArray</span>(arr, sz);  <span class=\"hljs-comment\">// display array after sorting</span>\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(arr, arr + sz));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1 Passed\\n========================\\n&quot;</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2\\n&quot;</span>;\n    <span class=\"hljs-type\">double</span> arr2[] = {<span class=\"hljs-number\">4.5</span>, <span class=\"hljs-number\">-3.6</span>, <span class=\"hljs-number\">7.6</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">12.9</span>};\n    sz = <span class=\"hljs-built_in\">sizeof</span>(arr2) / <span class=\"hljs-built_in\">sizeof</span>(arr2[<span class=\"hljs-number\">0</span>]);\n    <span class=\"hljs-built_in\">printArray</span>(arr2, sz);\n    <span class=\"hljs-built_in\">heapSort</span>(arr2, sz);\n    <span class=\"hljs-built_in\">printArray</span>(arr2, sz);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(arr2, arr2 + sz));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2 passed\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/sorts/HeapSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/sorts/HeapSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> com.thealgorithms.sorts.SortUtils.*;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n\n<span class=\"hljs-comment\">/**\n * Heap Sort Algorithm Implements MinHeap\n *\n * <span class=\"hljs-doctag\">@author</span> Podshivalov Nikita (https://github.com/nikitap492)\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HeapSort</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SortAlgorithm</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Heap</span>&lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; {\n\n        <span class=\"hljs-comment\">/**\n         * Array to store heap\n         */</span>\n        <span class=\"hljs-keyword\">private</span> T[] heap;\n\n        <span class=\"hljs-comment\">/**\n         * Constructor\n         *\n         * <span class=\"hljs-doctag\">@param</span> heap array of unordered integers\n         */</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Heap</span><span class=\"hljs-params\">(T[] heap)</span> {\n            <span class=\"hljs-built_in\">this</span>.heap = heap;\n        }\n\n        <span class=\"hljs-comment\">/**\n         * Heapifies subtree from top as root to last as last child\n         *\n         * <span class=\"hljs-doctag\">@param</span> rootIndex index of root\n         * <span class=\"hljs-doctag\">@param</span> lastChild index of last child\n         */</span>\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">heapSubtree</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> rootIndex, <span class=\"hljs-type\">int</span> lastChild)</span> {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">leftIndex</span> <span class=\"hljs-operator\">=</span> rootIndex * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rightIndex</span> <span class=\"hljs-operator\">=</span> rootIndex * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>;\n            <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">root</span> <span class=\"hljs-operator\">=</span> heap[rootIndex];\n            <span class=\"hljs-keyword\">if</span> (rightIndex &lt;= lastChild) { <span class=\"hljs-comment\">// if has right and left children</span>\n                <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-operator\">=</span> heap[leftIndex];\n                <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">right</span> <span class=\"hljs-operator\">=</span> heap[rightIndex];\n                <span class=\"hljs-keyword\">if</span> (less(left, right) &amp;&amp; less(left, root)) {\n                    swap(heap, leftIndex, rootIndex);\n                    heapSubtree(leftIndex, lastChild);\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (less(right, root)) {\n                    swap(heap, rightIndex, rootIndex);\n                    heapSubtree(rightIndex, lastChild);\n                }\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (leftIndex &lt;= lastChild) { <span class=\"hljs-comment\">// if no right child, but has left child</span>\n                <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-operator\">=</span> heap[leftIndex];\n                <span class=\"hljs-keyword\">if</span> (less(left, root)) {\n                    swap(heap, leftIndex, rootIndex);\n                    heapSubtree(leftIndex, lastChild);\n                }\n            }\n        }\n\n        <span class=\"hljs-comment\">/**\n         * Makes heap with root as root\n         *\n         * <span class=\"hljs-doctag\">@param</span> root index of root of heap\n         */</span>\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">makeMinHeap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> root)</span> {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">leftIndex</span> <span class=\"hljs-operator\">=</span> root * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rightIndex</span> <span class=\"hljs-operator\">=</span> root * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>;\n            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">hasLeftChild</span> <span class=\"hljs-operator\">=</span> leftIndex &lt; heap.length;\n            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">hasRightChild</span> <span class=\"hljs-operator\">=</span> rightIndex &lt; heap.length;\n            <span class=\"hljs-keyword\">if</span> (hasRightChild) { <span class=\"hljs-comment\">// if has left and right</span>\n                makeMinHeap(leftIndex);\n                makeMinHeap(rightIndex);\n                heapSubtree(root, heap.length - <span class=\"hljs-number\">1</span>);\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (hasLeftChild) {\n                heapSubtree(root, heap.length - <span class=\"hljs-number\">1</span>);\n            }\n        }\n\n        <span class=\"hljs-comment\">/**\n         * Gets the root of heap\n         *\n         * <span class=\"hljs-doctag\">@return</span> root of heap\n         */</span>\n        <span class=\"hljs-keyword\">private</span> T <span class=\"hljs-title function_\">getRoot</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> size)</span> {\n            swap(heap, <span class=\"hljs-number\">0</span>, size);\n            heapSubtree(<span class=\"hljs-number\">0</span>, size - <span class=\"hljs-number\">1</span>);\n            <span class=\"hljs-keyword\">return</span> heap[size]; <span class=\"hljs-comment\">// return old root</span>\n        }\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; T[] sort(T[] unsorted) {\n        <span class=\"hljs-keyword\">return</span> sort(Arrays.asList(unsorted)).toArray(unsorted);\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; List&lt;T&gt; <span class=\"hljs-title function_\">sort</span><span class=\"hljs-params\">(List&lt;T&gt; unsorted)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> unsorted.size();\n\n        <span class=\"hljs-meta\">@SuppressWarnings(&quot;unchecked&quot;)</span>\n        Heap&lt;T&gt; heap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Heap</span>&lt;&gt;(unsorted.toArray((T[]) <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparable</span>[unsorted.size()]));\n\n        heap.makeMinHeap(<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// make min heap using index 0 as root.</span>\n        List&lt;T&gt; sorted = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(size);\n        <span class=\"hljs-keyword\">while</span> (size &gt; <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> heap.getRoot(--size);\n            sorted.add(min);\n        }\n\n        <span class=\"hljs-keyword\">return</span> sorted;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Main method\n     *\n     * <span class=\"hljs-doctag\">@param</span> args the command line arguments\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        Integer[] heap = {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">231</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">12</span>};\n        <span class=\"hljs-type\">HeapSort</span> <span class=\"hljs-variable\">heapSort</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HeapSort</span>();\n        print(heapSort.sort(heap));\n    }\n}\n"
    },
    "c": {
      "dir": "sorting/heap_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/heap_sort.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">max_heapify</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> n)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">heapsort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> n)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">build_maxheap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> n)</span>;\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">max_heapify</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> n)</span>\n{\n    <span class=\"hljs-type\">int</span> j, temp;\n    temp = a[i];\n    j = <span class=\"hljs-number\">2</span> * i;\n    <span class=\"hljs-keyword\">while</span> (j &lt;= n)\n    {\n        <span class=\"hljs-keyword\">if</span> (j &lt; n &amp;&amp; a[j + <span class=\"hljs-number\">1</span>] &gt; a[j])\n            j = j + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">if</span> (temp &gt; a[j])\n        {\n            <span class=\"hljs-keyword\">break</span>;\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (temp &lt;= a[j])\n        {\n            a[j / <span class=\"hljs-number\">2</span>] = a[j];\n            j = <span class=\"hljs-number\">2</span> * j;\n        }\n    }\n    a[j / <span class=\"hljs-number\">2</span>] = temp;\n    <span class=\"hljs-keyword\">return</span>;\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">heapsort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> n)</span>\n{\n    <span class=\"hljs-type\">int</span> i, temp;\n    <span class=\"hljs-keyword\">for</span> (i = n; i &gt;= <span class=\"hljs-number\">2</span>; i--)\n    {\n        temp = a[i];\n        a[i] = a[<span class=\"hljs-number\">1</span>];\n        a[<span class=\"hljs-number\">1</span>] = temp;\n        max_heapify(a, <span class=\"hljs-number\">1</span>, i - <span class=\"hljs-number\">1</span>);\n    }\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">build_maxheap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> n)</span>\n{\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = n / <span class=\"hljs-number\">2</span>; i &gt;= <span class=\"hljs-number\">1</span>; i--)\n    {\n        max_heapify(a, i, n);\n    }\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> n, i;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter number of elements of array\\n&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);\n    <span class=\"hljs-type\">int</span> a[<span class=\"hljs-number\">20</span>];\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt;= n; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter Element %d\\n&quot;</span>, i);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, a + i);\n    }\n\n    build_maxheap(a, n);\n    heapsort(a, n);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Sorted Output\\n&quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt;= n; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, a[i]);\n    }\n\n    getchar();\n}\n"
    },
    "haskell": {
      "dir": "src/Sorts/HeapSort.hs",
      "url": "https://github.com/TheAlgorithms/haskell/tree/master/src/Sorts/HeapSort.hs",
      "code": "<span class=\"hljs-keyword\">module</span> Sorts.HeapSort <span class=\"hljs-keyword\">where</span>\n\n<span class=\"hljs-title\">listToSort</span> :: [<span class=\"hljs-type\">Integer</span>]\n<span class=\"hljs-title\">listToSort</span> = [<span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">20</span>]\n\n<span class=\"hljs-comment\">-- Sort the input list with the heap sort algorithm</span>\n<span class=\"hljs-title\">heapSort</span> :: (<span class=\"hljs-type\">Ord</span> a) =&gt; [a] -&gt; [a]\n<span class=\"hljs-title\">heapSort</span> [] = []\n<span class=\"hljs-title\">heapSort</span> [x] = [x]\n<span class=\"hljs-title\">heapSort</span> xs = heapSort&#x27; (maxHeap xs) []\n\n<span class=\"hljs-comment\">-- Recursive helper function for heapSort</span>\n<span class=\"hljs-title\">heapSort&#x27;</span> :: <span class=\"hljs-type\">Ord</span> a =&gt; [a] -&gt; [a] -&gt; [a]\n<span class=\"hljs-title\">heapSort&#x27;</span> [] out = out\n<span class=\"hljs-title\">heapSort&#x27;</span> h out = heapSort&#x27; (extract h) out ++ [head h] \n\n<span class=\"hljs-comment\">-- Construct a max heap (represented as a list) from a given input list</span>\n<span class=\"hljs-title\">maxHeap</span> :: <span class=\"hljs-type\">Ord</span> a =&gt; [a] -&gt; [a]\n<span class=\"hljs-title\">maxHeap</span> [] = []\n<span class=\"hljs-title\">maxHeap</span> [x] = [x]\n<span class=\"hljs-title\">maxHeap</span> xs = maxHeap&#x27; xs (div (length xs) <span class=\"hljs-number\">2</span>)\n\n<span class=\"hljs-comment\">-- Recursive helper function for maxHeap</span>\n<span class=\"hljs-title\">maxHeap&#x27;</span> :: <span class=\"hljs-type\">Ord</span> a =&gt; [a] -&gt; <span class=\"hljs-type\">Int</span> -&gt; [a]\n<span class=\"hljs-title\">maxHeap&#x27;</span> xs <span class=\"hljs-number\">0</span> = maxHeapify xs <span class=\"hljs-number\">0</span>\n<span class=\"hljs-title\">maxHeap&#x27;</span> xs i = maxHeap&#x27; (maxHeapify xs i) (i-<span class=\"hljs-number\">1</span>)\n\n<span class=\"hljs-comment\">-- Given a heap and an index (i), move the element at i down the heap until it is in the right position</span>\n<span class=\"hljs-title\">maxHeapify</span> :: (<span class=\"hljs-type\">Ord</span> a) =&gt; [a] -&gt; <span class=\"hljs-type\">Int</span> -&gt; [a]\n<span class=\"hljs-title\">maxHeapify</span> xs i | not (hasAnyChild xs i) = xs\n                | hasLeftChild xs i &amp;&amp; hasRightChild xs i = \n                    <span class=\"hljs-keyword\">let</span> largestChild = <span class=\"hljs-keyword\">if</span> xs !! (leftChild i) &gt; xs !! (rightChild i) <span class=\"hljs-keyword\">then</span> leftChild i <span class=\"hljs-keyword\">else</span> rightChild i\n                    <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">if</span> xs !! largestChild &gt; xs !! i <span class=\"hljs-keyword\">then</span> maxHeapify (swap xs largestChild i) largestChild <span class=\"hljs-keyword\">else</span> xs\n                | hasLeftChild xs i =\n                    <span class=\"hljs-keyword\">if</span> xs !! (leftChild i) &gt; xs !! i <span class=\"hljs-keyword\">then</span> maxHeapify (swap xs (leftChild i) i) (leftChild i) <span class=\"hljs-keyword\">else</span> xs\n                | otherwise =\n                    <span class=\"hljs-keyword\">if</span> xs !! (rightChild i) &gt; xs !! i <span class=\"hljs-keyword\">then</span> maxHeapify (swap xs (rightChild i) i) (rightChild i) <span class=\"hljs-keyword\">else</span> xs\n\n\n<span class=\"hljs-comment\">-- Remove the largest element from the heap, and then fix the heap</span>\n<span class=\"hljs-title\">extract</span> :: <span class=\"hljs-type\">Ord</span> a =&gt; [a] -&gt; [a]\n<span class=\"hljs-title\">extract</span> [] = []\n<span class=\"hljs-title\">extract</span> [_] = []\n<span class=\"hljs-title\">extract</span> xs = maxHeapify ((last xs):take (length xs - <span class=\"hljs-number\">2</span>) (tail xs)) <span class=\"hljs-number\">0</span>\n\n\n<span class=\"hljs-comment\">-- Swap the values stored in two positions in a list</span>\n<span class=\"hljs-title\">swap</span> :: [a] -&gt; <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">Int</span> -&gt; [a]\n<span class=\"hljs-title\">swap</span> xs i1 i2 = map snd . foldr (\\x a -&gt; \n        <span class=\"hljs-keyword\">if</span> fst x == i1 <span class=\"hljs-keyword\">then</span> ys !! i2 : a\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> fst x == i2 <span class=\"hljs-keyword\">then</span> ys !! i1 : a\n        <span class=\"hljs-keyword\">else</span> x : a) [] $ ys\n    <span class=\"hljs-keyword\">where</span> ys = zip [<span class=\"hljs-number\">0</span>..] xs\n\n<span class=\"hljs-comment\">-- Index where the left child of the node at the given index should be located</span>\n<span class=\"hljs-title\">leftChild</span> :: <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">Int</span>\n<span class=\"hljs-title\">leftChild</span> i = <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-comment\">-- Index where the right child of the node at the given index should be located</span>\n<span class=\"hljs-title\">rightChild</span> :: <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">Int</span>\n<span class=\"hljs-title\">rightChild</span> i = <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-comment\">-- Helper functions to determine which, if any, child nodes are present in the heap for the node at a given index</span>\n<span class=\"hljs-title\">hasLeftChild</span>, hasRightChild, hasAnyChild :: [a] -&gt; <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">Bool</span>\n<span class=\"hljs-title\">hasLeftChild</span> xs i = leftChild i &lt; length xs\n\n<span class=\"hljs-title\">hasRightChild</span> xs i = rightChild i &lt; length xs\n\n<span class=\"hljs-title\">hasAnyChild</span> xs i = hasLeftChild xs i || hasRightChild xs i\n\n\n<span class=\"hljs-title\">main</span> :: <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\n    putStrLn $ <span class=\"hljs-string\">&quot;Unsorted: &quot;</span> ++ show listToSort\n    putStrLn $ <span class=\"hljs-string\">&quot;Sorted: &quot;</span> ++ show (heapSort listToSort)"
    },
    "f-sharp": {
      "dir": "Algorithms/Sort/Heap_Sort.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms/Sort/Heap_Sort.fs",
      "code": "<span class=\"hljs-keyword\">namespace</span> Algorithms.Sort\n\n<span class=\"hljs-keyword\">module</span> HeapSort <span class=\"hljs-operator\">=</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">inline</span> swap (a<span class=\"hljs-operator\">:</span> <span class=\"hljs-symbol\">&#x27;T</span> []) i j <span class=\"hljs-operator\">=</span>\n        <span class=\"hljs-keyword\">let</span> temp <span class=\"hljs-operator\">=</span> a.[i]\n        a.[i] <span class=\"hljs-operator\">&lt;-</span> a.[j]\n        a.[j] <span class=\"hljs-operator\">&lt;-</span> temp\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">inline</span> sift cmp (a<span class=\"hljs-operator\">:</span> <span class=\"hljs-symbol\">&#x27;T</span> []) start count <span class=\"hljs-operator\">=</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">rec</span> loop root child <span class=\"hljs-operator\">=</span>\n            <span class=\"hljs-keyword\">if</span> root <span class=\"hljs-operator\">*</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">&lt;</span> count <span class=\"hljs-keyword\">then</span>\n                <span class=\"hljs-keyword\">let</span> p <span class=\"hljs-operator\">=</span>\n                    child <span class=\"hljs-operator\">&lt;</span> count\n                    <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>\n                    <span class=\"hljs-operator\">&amp;&amp;</span> cmp a.[child] a.[child <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>] <span class=\"hljs-operator\">&lt;</span> <span class=\"hljs-number\">0</span>\n\n                <span class=\"hljs-keyword\">let</span> child <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">if</span> p <span class=\"hljs-keyword\">then</span> child <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">else</span> child\n                <span class=\"hljs-keyword\">if</span> cmp a.[root] a.[child] <span class=\"hljs-operator\">&lt;</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span>\n                    swap a root child\n                    loop child (child <span class=\"hljs-operator\">*</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>)\n\n        loop start (start <span class=\"hljs-operator\">*</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">inline</span> heapsort cmp (a<span class=\"hljs-operator\">:</span> <span class=\"hljs-symbol\">&#x27;T</span> []) <span class=\"hljs-operator\">=</span>\n        <span class=\"hljs-keyword\">let</span> n <span class=\"hljs-operator\">=</span> a.Length\n        <span class=\"hljs-keyword\">for</span> start <span class=\"hljs-operator\">=</span> n <span class=\"hljs-operator\">/</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">downto</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">do</span>\n            sift cmp a start n\n        <span class=\"hljs-keyword\">for</span> term <span class=\"hljs-operator\">=</span> n <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">downto</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\n            swap a term <span class=\"hljs-number\">0</span>\n            sift cmp a <span class=\"hljs-number\">0</span> term\n"
    },
    "go": {
      "dir": "sort/heapsort.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/sort/heapsort.go",
      "code": "<span class=\"hljs-keyword\">package</span> sort\n\n<span class=\"hljs-keyword\">type</span> MaxHeap <span class=\"hljs-keyword\">struct</span> {\n\tslice    []Comparable\n\theapSize <span class=\"hljs-type\">int</span>\n\tindices  <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">buildMaxHeap</span><span class=\"hljs-params\">(slice0 []<span class=\"hljs-type\">int</span>)</span></span> MaxHeap {\n\t<span class=\"hljs-keyword\">var</span> slice []Comparable\n\t<span class=\"hljs-keyword\">for</span> _, i := <span class=\"hljs-keyword\">range</span> slice0 {\n\t\tslice = <span class=\"hljs-built_in\">append</span>(slice, Int(i))\n\t}\n\th := MaxHeap{}\n\th.Init(slice)\n\t<span class=\"hljs-keyword\">return</span> h\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h *MaxHeap)</span></span> Init(slice []Comparable) {\n\t<span class=\"hljs-keyword\">if</span> slice == <span class=\"hljs-literal\">nil</span> {\n\t\tslice = <span class=\"hljs-built_in\">make</span>([]Comparable, <span class=\"hljs-number\">0</span>)\n\t}\n\n\th.slice = slice\n\th.heapSize = <span class=\"hljs-built_in\">len</span>(slice)\n\th.indices = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>)\n\th.Heapify()\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h MaxHeap)</span></span> Heapify() {\n\t<span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> h.slice {\n\t\th.indices[v.Idx()] = i\n\t}\n\t<span class=\"hljs-keyword\">for</span> i := h.heapSize / <span class=\"hljs-number\">2</span>; i &gt;= <span class=\"hljs-number\">0</span>; i-- {\n\t\th.heapifyDown(i)\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h *MaxHeap)</span></span> Pop() Comparable {\n\t<span class=\"hljs-keyword\">if</span> h.heapSize == <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n\t}\n\n\ti := h.slice[<span class=\"hljs-number\">0</span>]\n\th.heapSize--\n\n\th.slice[<span class=\"hljs-number\">0</span>] = h.slice[h.heapSize]\n\th.updateidx(<span class=\"hljs-number\">0</span>)\n\th.heapifyDown(<span class=\"hljs-number\">0</span>)\n\n\th.slice = h.slice[<span class=\"hljs-number\">0</span>:h.heapSize]\n\t<span class=\"hljs-keyword\">return</span> i\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h *MaxHeap)</span></span> Push(i Comparable) {\n\th.slice = <span class=\"hljs-built_in\">append</span>(h.slice, i)\n\th.updateidx(h.heapSize)\n\th.heapifyUp(h.heapSize)\n\th.heapSize++\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h MaxHeap)</span></span> Size() <span class=\"hljs-type\">int</span> {\n\t<span class=\"hljs-keyword\">return</span> h.heapSize\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h MaxHeap)</span></span> Update(i Comparable) {\n\th.slice[h.indices[i.Idx()]] = i\n\th.heapifyUp(h.indices[i.Idx()])\n\th.heapifyDown(h.indices[i.Idx()])\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h MaxHeap)</span></span> updateidx(i <span class=\"hljs-type\">int</span>) {\n\th.indices[h.slice[i].Idx()] = i\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h MaxHeap)</span></span> heapifyUp(i <span class=\"hljs-type\">int</span>) {\n\t<span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span>\n\t}\n\tp := i / <span class=\"hljs-number\">2</span>\n\n\t<span class=\"hljs-keyword\">if</span> h.slice[i].More(h.slice[p]) {\n\t\th.slice[i], h.slice[p] = h.slice[p], h.slice[i]\n\t\th.updateidx(i)\n\t\th.updateidx(p)\n\t\th.heapifyUp(p)\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h MaxHeap)</span></span> heapifyDown(i <span class=\"hljs-type\">int</span>) {\n\tl, r := <span class=\"hljs-number\">2</span>*i+<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>*i+<span class=\"hljs-number\">2</span>\n\tmax := i\n\n\t<span class=\"hljs-keyword\">if</span> l &lt; h.heapSize &amp;&amp; h.slice[l].More(h.slice[max]) {\n\t\tmax = l\n\t}\n\t<span class=\"hljs-keyword\">if</span> r &lt; h.heapSize &amp;&amp; h.slice[r].More(h.slice[max]) {\n\t\tmax = r\n\t}\n\t<span class=\"hljs-keyword\">if</span> max != i {\n\t\th.slice[i], h.slice[max] = h.slice[max], h.slice[i]\n\t\th.updateidx(i)\n\t\th.updateidx(max)\n\t\th.heapifyDown(max)\n\t}\n}\n\n<span class=\"hljs-keyword\">type</span> Comparable <span class=\"hljs-keyword\">interface</span> {\n\tIdx() <span class=\"hljs-type\">int</span>\n\tMore(any) <span class=\"hljs-type\">bool</span>\n}\n<span class=\"hljs-keyword\">type</span> Int <span class=\"hljs-type\">int</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(a Int)</span></span> More(b any) <span class=\"hljs-type\">bool</span> {\n\t<span class=\"hljs-keyword\">return</span> a &gt; b.(Int)\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(a Int)</span></span> Idx() <span class=\"hljs-type\">int</span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">int</span>(a)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">HeapSort</span><span class=\"hljs-params\">(slice []<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> {\n\th := buildMaxHeap(slice)\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-built_in\">len</span>(h.slice) - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">1</span>; i-- {\n\t\th.slice[<span class=\"hljs-number\">0</span>], h.slice[i] = h.slice[i], h.slice[<span class=\"hljs-number\">0</span>]\n\t\th.heapSize--\n\t\th.heapifyDown(<span class=\"hljs-number\">0</span>)\n\t}\n\n\tres := []<span class=\"hljs-type\">int</span>{}\n\t<span class=\"hljs-keyword\">for</span> _, i := <span class=\"hljs-keyword\">range</span> h.slice {\n\t\tres = <span class=\"hljs-built_in\">append</span>(res, <span class=\"hljs-type\">int</span>(i.(Int)))\n\t}\n\t<span class=\"hljs-keyword\">return</span> res\n}\n"
    },
    "rust": {
      "dir": "src/sorting/heap_sort.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/sorting/heap_sort.rs",
      "code": "<span class=\"hljs-comment\">/// Sort a mutable slice using heap sort.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Heap sort is an in-place O(n log n) sorting algorithm. It is based on a</span>\n<span class=\"hljs-comment\">/// max heap, a binary tree data structure whose main feature is that</span>\n<span class=\"hljs-comment\">/// parent nodes are always greater or equal to their child nodes.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// # Max Heap Implementation</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// A max heap can be efficiently implemented with an array.</span>\n<span class=\"hljs-comment\">/// For example, the binary tree:</span>\n<span class=\"hljs-comment\">/// ```text</span>\n<span class=\"hljs-comment\">///     1</span>\n<span class=\"hljs-comment\">///  2     3</span>\n<span class=\"hljs-comment\">/// 4 5   6 7</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// ... is represented by the following array:</span>\n<span class=\"hljs-comment\">/// ```text</span>\n<span class=\"hljs-comment\">/// 1 23 4567</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Given the index `i` of a node, parent and child indices can be calculated</span>\n<span class=\"hljs-comment\">/// as follows:</span>\n<span class=\"hljs-comment\">/// ```text</span>\n<span class=\"hljs-comment\">/// parent(i)      = (i-1) / 2</span>\n<span class=\"hljs-comment\">/// left_child(i)  = 2*i + 1</span>\n<span class=\"hljs-comment\">/// right_child(i) = 2*i + 2</span>\n<span class=\"hljs-comment\">/// ```</span>\n\n<span class=\"hljs-comment\">/// # Algorithm</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Heap sort has two steps:</span>\n<span class=\"hljs-comment\">///   1. Convert the input array to a max heap.</span>\n<span class=\"hljs-comment\">///   2. Partition the array into heap part and sorted part. Initially the</span>\n<span class=\"hljs-comment\">///      heap consists of the whole array and the sorted part is empty:</span>\n<span class=\"hljs-comment\">///      ```text</span>\n<span class=\"hljs-comment\">///      arr: [ heap                    |]</span>\n<span class=\"hljs-comment\">///      ```</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">///      Repeatedly swap the root (i.e. the largest) element of the heap with</span>\n<span class=\"hljs-comment\">///      the last element of the heap and increase the sorted part by one:</span>\n<span class=\"hljs-comment\">///      ```text</span>\n<span class=\"hljs-comment\">///      arr: [ root ...   last | sorted ]</span>\n<span class=\"hljs-comment\">///       --&gt; [ last ... | root   sorted ]</span>\n<span class=\"hljs-comment\">///      ```</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">///      After each swap, fix the heap to make it a valid max heap again.</span>\n<span class=\"hljs-comment\">///      Once the heap is empty, `arr` is completely sorted.</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">heap_sort</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(arr: &amp;<span class=\"hljs-keyword\">mut</span> [T]) {\n    <span class=\"hljs-keyword\">if</span> arr.<span class=\"hljs-title function_ invoke__\">len</span>() &lt;= <span class=\"hljs-number\">1</span> {\n        <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// already sorted</span>\n    }\n\n    <span class=\"hljs-title function_ invoke__\">heapify</span>(arr);\n\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">end</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">1</span>..arr.<span class=\"hljs-title function_ invoke__\">len</span>()).<span class=\"hljs-title function_ invoke__\">rev</span>() {\n        arr.<span class=\"hljs-title function_ invoke__\">swap</span>(<span class=\"hljs-number\">0</span>, end);\n        <span class=\"hljs-title function_ invoke__\">move_down</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr[..end], <span class=\"hljs-number\">0</span>);\n    }\n}\n\n<span class=\"hljs-comment\">/// Convert `arr` into a max heap.</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">heapify</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(arr: &amp;<span class=\"hljs-keyword\">mut</span> [T]) {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">last_parent</span> = (arr.<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">2</span>) / <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">0</span>..=last_parent).<span class=\"hljs-title function_ invoke__\">rev</span>() {\n        <span class=\"hljs-title function_ invoke__\">move_down</span>(arr, i);\n    }\n}\n\n<span class=\"hljs-comment\">/// Move the element at `root` down until `arr` is a max heap again.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// This assumes that the subtrees under `root` are valid max heaps already.</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">move_down</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(arr: &amp;<span class=\"hljs-keyword\">mut</span> [T], <span class=\"hljs-keyword\">mut</span> root: <span class=\"hljs-type\">usize</span>) {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">last</span> = arr.<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">left</span> = <span class=\"hljs-number\">2</span> * root + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">if</span> left &gt; last {\n            <span class=\"hljs-keyword\">break</span>;\n        }\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">right</span> = left + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">max</span> = <span class=\"hljs-keyword\">if</span> right &lt;= last &amp;&amp; arr[right] &gt; arr[left] {\n            right\n        } <span class=\"hljs-keyword\">else</span> {\n            left\n        };\n\n        <span class=\"hljs-keyword\">if</span> arr[max] &gt; arr[root] {\n            arr.<span class=\"hljs-title function_ invoke__\">swap</span>(root, max);\n        }\n        root = max;\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-title function_ invoke__\">heap_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr);\n        <span class=\"hljs-built_in\">assert_eq!</span>(&amp;arr, &amp;[]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">single_element</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-title function_ invoke__\">heap_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr);\n        <span class=\"hljs-built_in\">assert_eq!</span>(&amp;arr, &amp;[<span class=\"hljs-number\">1</span>]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">sorted_array</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n        <span class=\"hljs-title function_ invoke__\">heap_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr);\n        <span class=\"hljs-built_in\">assert_eq!</span>(&amp;arr, &amp;[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">unsorted_array</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-title function_ invoke__\">heap_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr);\n        <span class=\"hljs-built_in\">assert_eq!</span>(&amp;arr, &amp;[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">odd_number_of_elements</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>];\n        <span class=\"hljs-title function_ invoke__\">heap_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr);\n        <span class=\"hljs-built_in\">assert_eq!</span>(&amp;arr, &amp;[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">repeated_elements</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">542</span>, <span class=\"hljs-number\">542</span>, <span class=\"hljs-number\">542</span>, <span class=\"hljs-number\">542</span>];\n        <span class=\"hljs-title function_ invoke__\">heap_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr);\n        <span class=\"hljs-built_in\">assert_eq!</span>(&amp;arr, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">542</span>, <span class=\"hljs-number\">542</span>, <span class=\"hljs-number\">542</span>, <span class=\"hljs-number\">542</span>]);\n    }\n}\n"
    },
    "aarch64_assembly": {
      "dir": "sorters/heap_sort.s",
      "url": "https://github.com/TheAlgorithms/aarch64_assembly/tree/master/sorters/heap_sort.s",
      "code": "<span class=\"hljs-comment\">/* ARM assembly AARCH64 Raspberry PI 3B */</span>\n<span class=\"hljs-comment\">/*  program heapSort64.s   */</span>\n<span class=\"hljs-comment\">/* look Pseudocode begin this task  */</span>\n \n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* Constantes file                         */</span>\n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeConstantesARM64.inc&quot;</span>\n \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* Initialized data              */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.data</span>\n<span class=\"hljs-symbol\">szMessSortOk:</span>       <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table sorted.\\n&quot;</span>\n<span class=\"hljs-symbol\">szMessSortNok:</span>      <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table not sorted !!!!!.\\n&quot;</span>\n<span class=\"hljs-symbol\">sMessResult:</span>        <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Value  : @ \\n&quot;</span>\n<span class=\"hljs-symbol\">szCarriageReturn:</span>  <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;\\n&quot;</span>\n \n<span class=\"hljs-symbol\">.align</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-comment\">//TableNumber:         .quad   1,3,6,2,5,9,10,8,4,7</span>\n<span class=\"hljs-symbol\">TableNumber:</span>         .quad   <span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">6</span>,-<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>\n                 <span class=\"hljs-meta\">.equ</span> NBELEMENTS, (. - TableNumber) / <span class=\"hljs-number\">8</span> \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* UnInitialized data            */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.bss</span>\n<span class=\"hljs-symbol\">sZoneConv:</span>       <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">24</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/*  code section                 */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.text</span>\n<span class=\"hljs-symbol\">.global</span> main \n<span class=\"hljs-symbol\">main:</span>                                           <span class=\"hljs-comment\">// entry of program </span>\n \n<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                      <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-symbol\">#NBELEMENTS</span>                          <span class=\"hljs-comment\">// number of élements </span>\n    <span class=\"hljs-keyword\">bl</span> heapSort\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                      <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">bl</span> displayTable\n \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                      <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-symbol\">#NBELEMENTS</span>                          <span class=\"hljs-comment\">// number of élements </span>\n    <span class=\"hljs-keyword\">bl</span> isSorted                                 <span class=\"hljs-comment\">// control sort</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">#1</span>                                   <span class=\"hljs-comment\">// sorted ?</span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">2</span>f                                    \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortNok                    <span class=\"hljs-comment\">// no !! error sort</span>\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\n<span class=\"hljs-number\">2</span>:                                              <span class=\"hljs-comment\">// yes</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortOk\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n<span class=\"hljs-number\">100</span>:                                            <span class=\"hljs-comment\">// standard end of the program </span>\n    <span class=\"hljs-keyword\">mov</span> x0, <span class=\"hljs-number\">#0</span>                                  <span class=\"hljs-comment\">// return code</span>\n    <span class=\"hljs-keyword\">mov</span> x8, <span class=\"hljs-symbol\">#EXIT</span>                               <span class=\"hljs-comment\">// request to exit program</span>\n    <span class=\"hljs-keyword\">svc</span> <span class=\"hljs-number\">#0</span>                                      <span class=\"hljs-comment\">// perform the system call</span>\n \n<span class=\"hljs-symbol\">qAdrszCarriageReturn:</span>     .quad szCarriageReturn\n<span class=\"hljs-symbol\">qAdrsMessResult:</span>          .quad sMessResult\n<span class=\"hljs-symbol\">qAdrTableNumber:</span>          .quad TableNumber\n<span class=\"hljs-symbol\">qAdrszMessSortOk:</span>         .quad szMessSortOk\n<span class=\"hljs-symbol\">qAdrszMessSortNok:</span>        .quad szMessSortNok\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*     control sorted table                                   */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains the number of elements  &gt; 0  */</span>\n<span class=\"hljs-comment\">/* x0 return 0  if not sorted   1  if sorted */</span>\n<span class=\"hljs-symbol\">isSorted:</span>\n    stp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">#0</span>\n    <span class=\"hljs-keyword\">ldr</span> x4,[x0,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">cmp</span> x2,x1\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">99</span>f\n    <span class=\"hljs-keyword\">ldr</span> x3,[x0,x2, <span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">cmp</span> x3,x4\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">98</span>f\n    <span class=\"hljs-keyword\">mov</span> x4,x3\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b\n<span class=\"hljs-number\">98</span>:\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                      <span class=\"hljs-comment\">// not sorted</span>\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\n<span class=\"hljs-number\">99</span>:\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">1</span>                      <span class=\"hljs-comment\">// sorted</span>\n<span class=\"hljs-number\">100</span>:\n    ldp x3,x4,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*         heap sort                                              */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains the number of element */</span>\n<span class=\"hljs-symbol\">heapSort:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">bl</span> heapify                     <span class=\"hljs-comment\">// first place table in max-heap order</span>\n    <span class=\"hljs-keyword\">sub</span> x3,x1,<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">cmp</span> x3,<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">100</span>f\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-number\">0</span>                       <span class=\"hljs-comment\">// swap the root(maximum value) of the heap with the last element of the heap)</span>\n    <span class=\"hljs-keyword\">mov</span> x2,x3\n    <span class=\"hljs-keyword\">bl</span> swapElement\n    <span class=\"hljs-keyword\">sub</span> x3,x3,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">mov</span> x2,x3                      <span class=\"hljs-comment\">// put the heap back in max-heap order</span>\n    <span class=\"hljs-keyword\">bl</span> siftDown\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b\n \n<span class=\"hljs-number\">100</span>:\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*      place table in max-heap order                             */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains the number of element */</span>\n<span class=\"hljs-symbol\">heapify:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">str</span> x4,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!               <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x4,x1\n    <span class=\"hljs-keyword\">sub</span> x3,x1,<span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">lsr</span> x3,x3,<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">cmp</span> x3,<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">100</span>f\n    <span class=\"hljs-keyword\">mov</span> x1,x3\n    <span class=\"hljs-keyword\">sub</span> x2,x4,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">bl</span> siftDown\n    <span class=\"hljs-keyword\">sub</span> x3,x3,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b\n<span class=\"hljs-number\">100</span>:\n    <span class=\"hljs-keyword\">ldr</span> x4,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>                 <span class=\"hljs-comment\">// restaur  1 registers</span>\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*     swap two elements of table                                  */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains the first index */</span>\n<span class=\"hljs-comment\">/* x2 contains the second index */</span>\n<span class=\"hljs-symbol\">swapElement:</span>\n    stp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">ldr</span> x3,[x0,x1,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]          <span class=\"hljs-comment\">// swap number on the table</span>\n    <span class=\"hljs-keyword\">ldr</span> x4,[x0,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]\n    <span class=\"hljs-keyword\">str</span> x4,[x0,x1,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]\n    <span class=\"hljs-keyword\">str</span> x3,[x0,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]\n<span class=\"hljs-number\">100</span>:\n    ldp x3,x4,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\n \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*     put the heap back in max-heap order                        */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains the first index */</span>\n<span class=\"hljs-comment\">/* x2 contains the last index */</span>\n<span class=\"hljs-symbol\">siftDown:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\n    stp x4,x5,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\n    stp x6,x7,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\n                                   <span class=\"hljs-comment\">// x1 = root = start</span>\n    <span class=\"hljs-keyword\">mov</span> x3,x2                      <span class=\"hljs-comment\">// save last index</span>\n<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">lsl</span> x4,x1,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">add</span> x4,x4,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">cmp</span> x4,x3\n    <span class=\"hljs-keyword\">bgt</span> <span class=\"hljs-number\">100</span>f\n    <span class=\"hljs-keyword\">add</span> x5,x4,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">cmp</span> x5,x3\n    <span class=\"hljs-keyword\">bgt</span> <span class=\"hljs-number\">2</span>f\n    <span class=\"hljs-keyword\">ldr</span> x6,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]           <span class=\"hljs-comment\">// compare elements on the table</span>\n    <span class=\"hljs-keyword\">ldr</span> x7,[x0,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">cmp</span> x6,x7\n    csel x4,x5,x4,lt\n    <span class=\"hljs-comment\">//movlt x4,x5</span>\n<span class=\"hljs-number\">2</span>:\n    <span class=\"hljs-keyword\">ldr</span> x7,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]           <span class=\"hljs-comment\">// compare elements on the table</span>\n    <span class=\"hljs-keyword\">ldr</span> x6,[x0,x1,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]           <span class=\"hljs-comment\">// root</span>\n    <span class=\"hljs-keyword\">cmp</span> x6,x7\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">100</span>f\n    <span class=\"hljs-keyword\">mov</span> x2,x4                      <span class=\"hljs-comment\">// and x1 is root</span>\n    <span class=\"hljs-keyword\">bl</span> swapElement\n    <span class=\"hljs-keyword\">mov</span> x1,x4                      <span class=\"hljs-comment\">// root = child</span>\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b\n \n<span class=\"hljs-number\">100</span>: \n    ldp x6,x7,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x4,x5,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\n \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*      Display table elements                                */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-symbol\">displayTable:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x2,x0                        <span class=\"hljs-comment\">// table address</span>\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">1</span>:                                   <span class=\"hljs-comment\">// loop display table</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,[x2,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\n    <span class=\"hljs-keyword\">bl</span> conversion10S                  <span class=\"hljs-comment\">// décimal conversion</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrsMessResult\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\n    <span class=\"hljs-keyword\">bl</span> strInsertAtCharInc            <span class=\"hljs-comment\">// insert result at @ character</span>\n    <span class=\"hljs-keyword\">bl</span> affichageMess                 <span class=\"hljs-comment\">// display message</span>\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">cmp</span> x3,NBELEMENTS - <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">1</span>b\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszCarriageReturn\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n    <span class=\"hljs-keyword\">mov</span> x0,x2\n<span class=\"hljs-number\">100</span>:\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                             <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-symbol\">qAdrsZoneConv:</span>            .quad sZoneConv\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/*        File Include fonctions                        */</span>\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeARM64.inc&quot;</span>\n"
    },
    "dart": {
      "dir": "sort/heap_Sort.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/sort/heap_Sort.dart",
      "code": "<span class=\"hljs-keyword\">void</span> sort(<span class=\"hljs-built_in\">List</span> arr) {\n  <span class=\"hljs-comment\">//The length of the list</span>\n  <span class=\"hljs-built_in\">int</span> n = arr.length;\n\n  <span class=\"hljs-comment\">//Build heap (rearrange array)</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = (n / <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>).round(); i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n    heapify(arr, n, i);\n  }\n\n  <span class=\"hljs-comment\">// One by one extract an element from heap</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = n - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n    <span class=\"hljs-comment\">//Move current root to end</span>\n    <span class=\"hljs-keyword\">var</span> temp = arr[<span class=\"hljs-number\">0</span>];\n    arr[<span class=\"hljs-number\">0</span>] = arr[i];\n    arr[i] = temp;\n\n    <span class=\"hljs-comment\">//call max heapify on the reduce heap</span>\n    heapify(arr, i, <span class=\"hljs-number\">0</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">void</span> heapify(<span class=\"hljs-built_in\">List</span> arr, <span class=\"hljs-keyword\">var</span> n, <span class=\"hljs-keyword\">var</span> i) {\n  <span class=\"hljs-comment\">//Init largest as root</span>\n  <span class=\"hljs-keyword\">var</span> largest = i;\n  <span class=\"hljs-comment\">//left = 2*i + 1</span>\n  <span class=\"hljs-keyword\">var</span> l = <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-comment\">//right = 2*i + 2</span>\n  <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">2</span>;\n\n  <span class=\"hljs-comment\">// If left child is lager than root</span>\n  <span class=\"hljs-keyword\">if</span> (l &lt; n &amp;&amp; arr[l] &gt; arr[largest]) largest = l;\n\n  <span class=\"hljs-comment\">// If right child is larger than largest so far</span>\n  <span class=\"hljs-keyword\">if</span> (r &lt; n &amp;&amp; arr[r] &gt; arr[largest]) largest = r;\n\n  <span class=\"hljs-comment\">// If largest is not root</span>\n  <span class=\"hljs-keyword\">if</span> (largest != i) {\n    <span class=\"hljs-keyword\">var</span> swap = arr[i];\n    arr[i] = arr[largest];\n    arr[largest] = swap;\n\n    <span class=\"hljs-comment\">//Recursively heapify the affected sub-tree</span>\n    heapify(arr, n, largest);\n  }\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  <span class=\"hljs-built_in\">List</span> list = [<span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">48</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">99</span>, <span class=\"hljs-number\">10</span>];\n  sort(list);\n  <span class=\"hljs-built_in\">print</span>(list);\n}\n"
    },
    "r": {
      "dir": "Sorting-Algorithms/heap_sort.R",
      "url": "https://github.com/TheAlgorithms/r/tree/master/Sorting-Algorithms/heap_sort.R",
      "code": "<span class=\"hljs-comment\"># Heap sort in R:</span>\n\nbuild.heap <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n  l <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span>\n  heap <span class=\"hljs-operator\">=</span> elements.vec\n  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-punctuation\">(</span>i <span class=\"hljs-keyword\">in</span> l<span class=\"hljs-operator\">:</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n    heap <span class=\"hljs-operator\">=</span> modify.heap<span class=\"hljs-punctuation\">(</span>heap<span class=\"hljs-punctuation\">,</span> i<span class=\"hljs-punctuation\">)</span>\n  <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span>heap<span class=\"hljs-punctuation\">)</span>\n<span class=\"hljs-punctuation\">}</span>\n\nis.heap <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>heap<span class=\"hljs-punctuation\">,</span> rootIndex<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n  i <span class=\"hljs-operator\">=</span> rootIndex\n  res <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">T</span>\n  <span class=\"hljs-keyword\">while</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">*</span> i <span class=\"hljs-operator\">&lt;=</span> <span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>heap<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">&amp;</span> res<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n    child <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">c</span><span class=\"hljs-punctuation\">(</span>heap<span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">*</span> i<span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span> heap<span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">*</span> i <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">)</span>\n    child <span class=\"hljs-operator\">=</span> child<span class=\"hljs-punctuation\">[</span><span class=\"hljs-operator\">!</span><span class=\"hljs-built_in\">is.na</span><span class=\"hljs-punctuation\">(</span>child<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span>\n    result.bool <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">all</span><span class=\"hljs-punctuation\">(</span>heap<span class=\"hljs-punctuation\">[</span>i<span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">&lt;=</span> child<span class=\"hljs-punctuation\">)</span>\n    i <span class=\"hljs-operator\">=</span> i <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span>result.bool<span class=\"hljs-punctuation\">)</span>\n<span class=\"hljs-punctuation\">}</span>\n\nmodify.heap <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>heap<span class=\"hljs-punctuation\">,</span> rootIndex<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n  l <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>heap<span class=\"hljs-punctuation\">)</span>\n  flag <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>  \n  <span class=\"hljs-keyword\">while</span> <span class=\"hljs-punctuation\">(</span>rootIndex <span class=\"hljs-operator\">*</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">&lt;=</span> l <span class=\"hljs-operator\">&amp;&amp;</span> flag <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n    leftIndex <span class=\"hljs-operator\">=</span> rootIndex <span class=\"hljs-operator\">*</span> <span class=\"hljs-number\">2</span>\n    rightIndex <span class=\"hljs-operator\">=</span> rootIndex <span class=\"hljs-operator\">*</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\n    flag <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\n    child <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">c</span><span class=\"hljs-punctuation\">(</span>heap<span class=\"hljs-punctuation\">[</span>leftIndex<span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span> heap<span class=\"hljs-punctuation\">[</span>rightIndex<span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">)</span>\n    child <span class=\"hljs-operator\">=</span> child<span class=\"hljs-punctuation\">[</span><span class=\"hljs-operator\">!</span><span class=\"hljs-built_in\">is.na</span><span class=\"hljs-punctuation\">(</span>child<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span>\n    minIndex <span class=\"hljs-operator\">=</span> which.min<span class=\"hljs-punctuation\">(</span>child<span class=\"hljs-punctuation\">)</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-punctuation\">(</span>heap<span class=\"hljs-punctuation\">[</span>rootIndex<span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">&gt;</span> child<span class=\"hljs-punctuation\">[</span>minIndex<span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n      flag <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>\n      heapIndex <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">c</span><span class=\"hljs-punctuation\">(</span>leftIndex<span class=\"hljs-punctuation\">,</span> rightIndex<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">[</span>minIndex<span class=\"hljs-punctuation\">]</span>\n      temp <span class=\"hljs-operator\">=</span> heap<span class=\"hljs-punctuation\">[</span>heapIndex<span class=\"hljs-punctuation\">]</span>\n      heap<span class=\"hljs-punctuation\">[</span>heapIndex<span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">=</span> heap<span class=\"hljs-punctuation\">[</span>rootIndex<span class=\"hljs-punctuation\">]</span>\n      heap<span class=\"hljs-punctuation\">[</span>rootIndex<span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">=</span> temp\n      rootIndex <span class=\"hljs-operator\">=</span> heapIndex\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span>heap<span class=\"hljs-punctuation\">)</span>\n<span class=\"hljs-punctuation\">}</span>\n\nheap.sort <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>heap<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n  sorted.elements <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">NULL</span>\n  l <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>heap<span class=\"hljs-punctuation\">)</span>\n  <span class=\"hljs-keyword\">while</span><span class=\"hljs-punctuation\">(</span>l <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">)</span>\n  <span class=\"hljs-punctuation\">{</span>\n    sorted.elements <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">c</span><span class=\"hljs-punctuation\">(</span>sorted.elements<span class=\"hljs-punctuation\">,</span> heap<span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">)</span>\n    l <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>heap<span class=\"hljs-punctuation\">)</span>\n    heap<span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">=</span> heap<span class=\"hljs-punctuation\">[</span>l<span class=\"hljs-punctuation\">]</span>\n    heap <span class=\"hljs-operator\">=</span> heap<span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">1</span><span class=\"hljs-operator\">:</span><span class=\"hljs-punctuation\">(</span>l <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span>\n    heap <span class=\"hljs-operator\">=</span> modify.heap<span class=\"hljs-punctuation\">(</span>heap<span class=\"hljs-punctuation\">,</span> rootIndex <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span>\n    l <span class=\"hljs-operator\">=</span> l <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span>sorted.elements<span class=\"hljs-punctuation\">)</span>\n<span class=\"hljs-punctuation\">}</span>\n\n<span class=\"hljs-comment\"># Example:</span>\n<span class=\"hljs-comment\"># heap.sort(build.heap(c(5, 2, 3, 1, 4))) </span>\n<span class=\"hljs-comment\"># [1] 1 2 3 4 5</span>\n"
    },
    "ruby": {
      "dir": "sorting/heap_sort.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/sorting/heap_sort.rb",
      "code": "<span class=\"hljs-comment\"># Algorithm: Heap-Sort</span>\n<span class=\"hljs-comment\"># Time-Complexity: O(nlogn)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">heap_sort</span>(<span class=\"hljs-params\">array</span>)\n  array_size = array.size\n  adjusted_array = [<span class=\"hljs-literal\">nil</span>] + array\n  (array_size / <span class=\"hljs-number\">2</span>).downto(<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">i</span>|\n    adjusted_down(adjusted_array, i, array_size)\n  <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">while</span> array_size &gt; <span class=\"hljs-number\">1</span>\n    adjusted_array[<span class=\"hljs-number\">1</span>], adjusted_array[array_size] = adjusted_array[array_size], adjusted_array[<span class=\"hljs-number\">1</span>]\n    array_size -= <span class=\"hljs-number\">1</span>\n    adjusted_down(adjusted_array, <span class=\"hljs-number\">1</span>, array_size)\n  <span class=\"hljs-keyword\">end</span>\n  adjusted_array.drop(<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Method to adjust heap in downward manner</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">adjusted_down</span>(<span class=\"hljs-params\">adjusted_array, parent, limit</span>)\n  top = adjusted_array[parent]\n  <span class=\"hljs-keyword\">while</span> (child = <span class=\"hljs-number\">2</span> * parent) &lt;= limit\n    child += <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> (child &lt; limit) &amp;&amp; (adjusted_array[child] &lt; adjusted_array[child + <span class=\"hljs-number\">1</span>])\n    <span class=\"hljs-keyword\">break</span> <span class=\"hljs-keyword\">if</span> top &gt;= adjusted_array[child]\n\n    adjusted_array[parent] = adjusted_array[child]\n    parent = child\n  <span class=\"hljs-keyword\">end</span>\n  adjusted_array[parent] = top\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">$0</span> == <span class=\"hljs-variable constant_\">__FILE__</span>\n  puts <span class=\"hljs-string\">&#x27;Enter a list of numbers separated by space&#x27;</span>\n\n  list = gets.split.map(&amp;<span class=\"hljs-symbol\">:to_i</span>)\n  p heap_sort(list)\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "kotlin": {
      "dir": "src/main/kotlin/sort/HeapSort.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src/main/kotlin/sort/HeapSort.kt",
      "code": "<span class=\"hljs-keyword\">package</span> sort\n\n<span class=\"hljs-comment\">/**\n * This function implements the Heap Sort.\n *\n * <span class=\"hljs-doctag\">@param</span> array The array to be sorted\n * Sorts the array in increasing order\n *\n * Worst-case performance       O(n*log(n))\n * Best-case performance        O(n*log(n))\n * Average-case performance     O(n*log(n))\n * Worst-case space complexity  O(1) (auxiliary)\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-type\">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class=\"hljs-title\">heapSort</span><span class=\"hljs-params\">(array: <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">T</span>&gt;)</span></span> {\n    buildMaxHeap(array)\n    transformMaxHeapToSortedArray(array)\n}\n\n<span class=\"hljs-comment\">/**\n * This function changes the element order of the array to represent a max\n * binary tree.\n *\n * <span class=\"hljs-doctag\">@param</span> array The array containing the elements\n * <span class=\"hljs-doctag\">@param</span> index Index of the currently largest element\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-type\">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class=\"hljs-title\">maxheapify</span><span class=\"hljs-params\">(array: <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">T</span>&gt;, heapSize: <span class=\"hljs-type\">Int</span>, index: <span class=\"hljs-type\">Int</span>)</span></span> {\n    <span class=\"hljs-keyword\">val</span> left = <span class=\"hljs-number\">2</span> * index + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">val</span> right = <span class=\"hljs-number\">2</span> * index + <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">var</span> largest = index\n\n    <span class=\"hljs-keyword\">if</span> (left &lt; heapSize &amp;&amp; array[left] &gt; array[largest])\n        largest = left\n    <span class=\"hljs-keyword\">if</span> (right &lt; heapSize &amp;&amp; array[right] &gt; array[largest])\n        largest = right\n    <span class=\"hljs-keyword\">if</span> (largest != index) {\n        swapElements(array, index, largest)\n        maxheapify(array, heapSize, largest)\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * Arrange the elements of the array to represent a max heap.\n *\n * <span class=\"hljs-doctag\">@param</span> array The array containing the elements\n */</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-type\">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class=\"hljs-title\">buildMaxHeap</span><span class=\"hljs-params\">(array: <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">T</span>&gt;)</span></span> {\n    <span class=\"hljs-keyword\">val</span> n = array.size\n    <span class=\"hljs-keyword\">for</span> (i <span class=\"hljs-keyword\">in</span> (n / <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>) downTo <span class=\"hljs-number\">0</span>)\n        maxheapify(array, n, i)\n}\n\n<span class=\"hljs-comment\">/**\n * Arrange the elements of the array, which should be in order to represent a\n * max heap, into ascending order.\n *\n * <span class=\"hljs-doctag\">@param</span> array The array containing the elements (max heap representation)\n */</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-type\">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class=\"hljs-title\">transformMaxHeapToSortedArray</span><span class=\"hljs-params\">(array: <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">T</span>&gt;)</span></span> {\n    <span class=\"hljs-keyword\">for</span> (i <span class=\"hljs-keyword\">in</span> (array.size - <span class=\"hljs-number\">1</span>) downTo <span class=\"hljs-number\">0</span>) {\n        swapElements(array, i, <span class=\"hljs-number\">0</span>)\n        maxheapify(array, i, <span class=\"hljs-number\">0</span>)\n    }\n}\n\n"
    },
    "scala": {
      "dir": "src/main/scala/Sort/HeapSort.scala",
      "url": "https://github.com/TheAlgorithms/scala/tree/master/src/main/scala/Sort/HeapSort.scala",
      "code": "<span class=\"hljs-keyword\">package</span> <span class=\"hljs-type\">Sort</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">HeapSort</span> </span>{\n\n  <span class=\"hljs-comment\">/** @param arr\n    *   - a sequence of unsorted integers\n    * @return\n    *   - sequence of sorted integers @array\n    */</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">heapSort</span></span>(arr: <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>]): <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>] = {\n    <span class=\"hljs-keyword\">val</span> sortedArray = arr.clone\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sift</span></span>(start: <span class=\"hljs-type\">Int</span>, count: <span class=\"hljs-type\">Int</span>): <span class=\"hljs-type\">Unit</span> = {\n      <span class=\"hljs-keyword\">var</span> root = start\n\n      <span class=\"hljs-keyword\">while</span> (root * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span> &lt; count) {\n        <span class=\"hljs-keyword\">var</span> child = root * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">if</span> (child &lt; count - <span class=\"hljs-number\">1</span> &amp;&amp; sortedArray(child) &lt; sortedArray(child + <span class=\"hljs-number\">1</span>)) {\n          child += <span class=\"hljs-number\">1</span>\n        }\n        <span class=\"hljs-keyword\">if</span> (sortedArray(root) &lt; sortedArray(child)) {\n          <span class=\"hljs-keyword\">val</span> t = sortedArray(root)\n          sortedArray(root) = sortedArray(child)\n          sortedArray(child) = t\n          root = child\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span>\n      }\n    }\n\n    <span class=\"hljs-keyword\">val</span> count = sortedArray.length\n    <span class=\"hljs-keyword\">var</span> start = count / <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">var</span> end   = count - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">while</span> (start &gt;= <span class=\"hljs-number\">0</span>) {\n      sift(start, count)\n      start -= <span class=\"hljs-number\">1</span>\n    }\n\n    <span class=\"hljs-keyword\">while</span> (end &gt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">val</span> t = sortedArray(end)\n      sortedArray(end) = sortedArray(<span class=\"hljs-number\">0</span>)\n      sortedArray(<span class=\"hljs-number\">0</span>) = t\n      sift(<span class=\"hljs-number\">0</span>, end)\n      <span class=\"hljs-keyword\">end</span> -= <span class=\"hljs-number\">1</span>\n    }\n    sortedArray\n  }\n\n}\n"
    },
    "matlab-octave": {
      "dir": "algorithms/sorting/heap_sort.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms/sorting/heap_sort.m",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">list</span> = <span class=\"hljs-title\">heapSort</span><span class=\"hljs-params\">(list)</span></span>\n \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">list</span> = <span class=\"hljs-title\">siftDown</span><span class=\"hljs-params\">(list,root,theEnd)</span> </span>\n        <span class=\"hljs-keyword\">while</span> (root * <span class=\"hljs-number\">2</span>) &lt;= theEnd\n \n            child = root * <span class=\"hljs-number\">2</span>;\n            <span class=\"hljs-keyword\">if</span> (child + <span class=\"hljs-number\">1</span> &lt;= theEnd) &amp;&amp; (list(child) &lt; list(child+<span class=\"hljs-number\">1</span>))\n                child = child + <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">end</span>\n \n            <span class=\"hljs-keyword\">if</span> list(root) &lt; list(child)\n                list([root child]) = list([child root]); <span class=\"hljs-comment\">%Swap</span>\n                root = child;\n            <span class=\"hljs-keyword\">else</span>\n                <span class=\"hljs-keyword\">return</span>\n            <span class=\"hljs-keyword\">end</span>\n \n        <span class=\"hljs-keyword\">end</span> <span class=\"hljs-comment\">%while</span>\n    <span class=\"hljs-keyword\">end</span> <span class=\"hljs-comment\">%siftDown</span>\n \n    count = <span class=\"hljs-built_in\">numel</span>(list);\n \n    <span class=\"hljs-comment\">%Because heapify is called once in pseudo-code, it is inline here</span>\n    start = <span class=\"hljs-built_in\">floor</span>(count/<span class=\"hljs-number\">2</span>);\n \n    <span class=\"hljs-keyword\">while</span> start &gt;= <span class=\"hljs-number\">1</span>\n        list = siftDown(list, start, count);\n        start = start - <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-comment\">%End Heapify</span>\n \n    <span class=\"hljs-keyword\">while</span> count &gt; <span class=\"hljs-number\">1</span>\n \n        list([count <span class=\"hljs-number\">1</span>]) = list([<span class=\"hljs-number\">1</span> count]); <span class=\"hljs-comment\">%Swap        </span>\n        count = count - <span class=\"hljs-number\">1</span>;\n        list = siftDown(list,<span class=\"hljs-number\">1</span>,count);\n \n    <span class=\"hljs-keyword\">end</span>\n \n<span class=\"hljs-keyword\">end</span>\n"
    },
    "julia": {
      "dir": "src/sorts/heap_sort.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/sorts/heap_sort.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n    idx_for(i::Int)  \n\nSimple helper function for converting 0-based indices to Julia&#x27;s 1-based indices.\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> idx_for(i::<span class=\"hljs-built_in\">Int</span>)\n    <span class=\"hljs-keyword\">return</span> i + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    heap_sort!(arr::Vector{T}, gt = &gt;, N::Int = length(arr)) where {T}\n\nSort the given vector (in-place) using the Heapsort algorithm.\n\nHeapsort consists of two stages:\n  1. Building a (max) heap of the array\n  2. Repeatedly extracting the largest element and inserting it at the front of the sorted part of the array\n\nAfter the largest element has been extracted, the tree is updated to maintain the heap property via a &quot;sifting&quot; operation.\n\n  Storing a heap in an array is pretty straightforward - for every node with index n, its children are stored at indices\n  2n + 1 and 2n + 2 (for 0-based indices). Index 0 contains the root node.\n  Since Julia&#x27;s indices are 1-based, we need to change this a little bit. We&#x27;re using a trivial helper function \n  idx_for to convert from 0-based to 1-based.\n\n  See https://en.wikipedia.org/wiki/Heapsort for a complete explanation of Heapsort.\n\n  Contributed By:- [Frank Schmitt](https://github.com/frankschmitt)\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> heap_sort!(arr::<span class=\"hljs-built_in\">Vector</span>{T}, gt = &gt;, N::<span class=\"hljs-built_in\">Int</span> = length(arr)) <span class=\"hljs-keyword\">where</span> {T}\n    n = N\n    i = div(n, <span class=\"hljs-number\">2</span>)\n    t = -<span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">0</span>    <span class=\"hljs-comment\"># First stage - Sorting the heap</span>\n            i -= <span class=\"hljs-number\">1</span>    <span class=\"hljs-comment\"># Save its index to i </span>\n            t = arr[idx_for(i)]    <span class=\"hljs-comment\"># Save parent value to t </span>\n        <span class=\"hljs-keyword\">else</span>          <span class=\"hljs-comment\"># Second stage - Extracting elements in-place </span>\n            n -= <span class=\"hljs-number\">1</span>    <span class=\"hljs-comment\"># Make the new heap smaller </span>\n            <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>)\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-comment\"># When the heap is empty, we are done </span>\n            <span class=\"hljs-keyword\">end</span>\n            t = arr[idx_for(n)]               <span class=\"hljs-comment\"># Save last value (it will be overwritten)</span>\n            arr[idx_for(n)] = arr[idx_for(<span class=\"hljs-number\">0</span>)] <span class=\"hljs-comment\"># Save largest value at the end of arr </span>\n        <span class=\"hljs-keyword\">end</span>\n\n        parent = i <span class=\"hljs-comment\"># We will start pushing down t from parent </span>\n        child = i * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\"># parent&#x27;s left child </span>\n\n        <span class=\"hljs-comment\"># Sift operation - pushing the value of t down the heap </span>\n        <span class=\"hljs-keyword\">while</span> child &lt; n\n            <span class=\"hljs-keyword\">if</span> (\n                child + <span class=\"hljs-number\">1</span> &lt; n &amp;&amp;\n                gt(arr[idx_for(child + <span class=\"hljs-number\">1</span>)], arr[idx_for(child)])\n            )\n                child += <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\"># Choose the largest child</span>\n            <span class=\"hljs-keyword\">end</span>\n            <span class=\"hljs-keyword\">if</span> (gt(arr[idx_for(child)], t))                   <span class=\"hljs-comment\"># If any child is bigger than the parent </span>\n                arr[idx_for(parent)] = arr[idx_for(child)]    <span class=\"hljs-comment\"># Move the largest child up </span>\n                parent = child                                <span class=\"hljs-comment\"># Move parent pointer to this child </span>\n                child = parent * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>                            <span class=\"hljs-comment\">#  find the next child</span>\n            <span class=\"hljs-keyword\">else</span>\n                <span class=\"hljs-keyword\">break</span> <span class=\"hljs-comment\"># t&#x27;s place is found </span>\n            <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">end</span>\n        arr[idx_for(parent)] = t\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "lua": {
      "dir": "src/sorting/heapsort.lua",
      "url": "https://github.com/TheAlgorithms/lua/tree/master/src/sorting/heapsort.lua",
      "code": "<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(\n\t<span class=\"hljs-comment\">-- list to be sorted in-place</span>\n\tlist,\n\t<span class=\"hljs-comment\">-- function(a, b) -&gt; truthy value if a &lt; b</span>\n\tless_than\n)</span></span>\n\tless_than = less_than <span class=\"hljs-keyword\">or</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(a, b)</span></span>\n\t\t<span class=\"hljs-keyword\">return</span> a &lt; b\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">local</span> heap_size = #list\n\t<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">max_heapify_down</span><span class=\"hljs-params\">(index)</span></span>\n\t\t<span class=\"hljs-keyword\">local</span> left_child = index * <span class=\"hljs-number\">2</span>\n\t\t<span class=\"hljs-keyword\">if</span> left_child &gt; heap_size <span class=\"hljs-keyword\">then</span>\n\t\t\t<span class=\"hljs-keyword\">return</span>\n\t\t<span class=\"hljs-keyword\">end</span>\n\t\t<span class=\"hljs-keyword\">local</span> largest_child = left_child + <span class=\"hljs-number\">1</span>\n\t\t<span class=\"hljs-keyword\">if</span> largest_child &gt; heap_size <span class=\"hljs-keyword\">or</span> less_than(list[largest_child], list[left_child]) <span class=\"hljs-keyword\">then</span>\n\t\t\tlargest_child = left_child\n\t\t<span class=\"hljs-keyword\">end</span>\n\t\t<span class=\"hljs-keyword\">if</span> less_than(list[index], list[largest_child]) <span class=\"hljs-keyword\">then</span>\n\t\t\tlist[index], list[largest_child] = list[largest_child], list[index]\n\t\t\tmax_heapify_down(largest_child)\n\t\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-comment\">-- Build heap</span>\n\t<span class=\"hljs-keyword\">for</span> index = <span class=\"hljs-built_in\">math</span>.<span class=\"hljs-built_in\">floor</span>(#list / <span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">do</span>\n\t\tmax_heapify_down(index)\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">while</span> heap_size &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">do</span>\n\t\t<span class=\"hljs-comment\">-- Extract maximum and place it in front of the already sorted part</span>\n\t\tlist[<span class=\"hljs-number\">1</span>], list[heap_size] = list[heap_size], list[<span class=\"hljs-number\">1</span>]\n\t\theap_size = heap_size - <span class=\"hljs-number\">1</span>\n\t\tmax_heapify_down(<span class=\"hljs-number\">1</span>)\n\t<span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Sorters/Comparison/HeapSorter.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/Algorithms/Sorters/Comparison/HeapSorter.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.Comparison</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Heap sort is a comparison based sorting technique</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     based on Binary Heap data structure.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Input array type.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HeapSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt; : <span class=\"hljs-title\">IComparisonSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt;\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sorts input array using heap sort algorithm.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Input array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;comparer&quot;&gt;</span>Comparer type for elements.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\">T[] array, IComparer&lt;T&gt; comparer</span>)</span> =&gt; HeapSort(array, comparer);\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">HeapSort</span>(<span class=\"hljs-params\">IList&lt;T&gt; data, IComparer&lt;T&gt; comparer</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> heapSize = data.Count;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> p = (heapSize - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>; p &gt;= <span class=\"hljs-number\">0</span>; p--)\n            {\n                MakeHeap(data, heapSize, p, comparer);\n            }\n\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = data.Count - <span class=\"hljs-number\">1</span>; i &gt; <span class=\"hljs-number\">0</span>; i--)\n            {\n                <span class=\"hljs-keyword\">var</span> temp = data[i];\n                data[i] = data[<span class=\"hljs-number\">0</span>];\n                data[<span class=\"hljs-number\">0</span>] = temp;\n\n                heapSize--;\n                MakeHeap(data, heapSize, <span class=\"hljs-number\">0</span>, comparer);\n            }\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MakeHeap</span>(<span class=\"hljs-params\">IList&lt;T&gt; input, <span class=\"hljs-built_in\">int</span> heapSize, <span class=\"hljs-built_in\">int</span> index, IComparer&lt;T&gt; comparer</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> rIndex = index;\n\n            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)\n            {\n                <span class=\"hljs-keyword\">var</span> left = (rIndex + <span class=\"hljs-number\">1</span>) * <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>;\n                <span class=\"hljs-keyword\">var</span> right = (rIndex + <span class=\"hljs-number\">1</span>) * <span class=\"hljs-number\">2</span>;\n                <span class=\"hljs-keyword\">var</span> largest = left &lt; heapSize &amp;&amp; comparer.Compare(input[left], input[rIndex]) == <span class=\"hljs-number\">1</span> ? left : rIndex;\n\n                <span class=\"hljs-comment\">// finds the index of the largest</span>\n                <span class=\"hljs-keyword\">if</span> (right &lt; heapSize &amp;&amp; comparer.Compare(input[right], input[largest]) == <span class=\"hljs-number\">1</span>)\n                {\n                    largest = right;\n                }\n\n                <span class=\"hljs-keyword\">if</span> (largest == rIndex)\n                {\n                    <span class=\"hljs-keyword\">return</span>;\n                }\n\n                <span class=\"hljs-comment\">// process of reheaping / swapping</span>\n                <span class=\"hljs-keyword\">var</span> temp = input[rIndex];\n                input[rIndex] = input[largest];\n                input[largest] = temp;\n\n                rIndex = largest;\n            }\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Emil Suleymanov",
      "email": "emil.suleymanov@tum.de",
      "commits": 1
    },
    {
      "name": "goodnic",
      "email": "43970044+goodnic@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Jan Teske",
      "email": "jteske@posteo.net",
      "commits": 1
    },
    {
      "name": "Abhishek Mehra",
      "email": "52788025+Triaro@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Anirban166",
      "email": "bloodraven166@gmail.com",
      "commits": 1
    },
    {
      "name": "Alfredo Torre",
      "email": "alfredotorre@gmail.com",
      "commits": 1
    },
    {
      "name": "Olexandr Yermilov",
      "email": "olexandr.yermilov@gmail.com",
      "commits": 1
    },
    {
      "name": "Ihjass Thasbekha",
      "email": "44056715+Ihjass@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Frank Schmitt",
      "email": "frank@qwhon.de",
      "commits": 1
    },
    {
      "name": "Doppon",
      "email": "zaxpkuraudo7777@gmail.com",
      "commits": 1
    },
    {
      "name": "unknown",
      "email": "--global",
      "commits": 1
    },
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 1
    },
    {
      "name": "Brayo",
      "email": "vukubrian@gmail.com",
      "commits": 1
    },
    {
      "name": "mattan",
      "email": "mattany@gmali.com",
      "commits": 1
    },
    {
      "name": "Connor Bottum",
      "email": "cbb692@gmail.com",
      "commits": 1
    },
    {
      "name": "Daniel Garcia",
      "email": "Dgarcia1@umassd.edu",
      "commits": 1
    },
    {
      "name": "Tran Hau",
      "email": "hauvipapro@gmail.com",
      "commits": 1
    },
    {
      "name": "Ankush263",
      "email": "86042508+Ankush263@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "zoomdong",
      "email": "1344492820@qq.com",
      "commits": 1
    },
    {
      "name": "Nour B",
      "email": "56294154+nourrrrrrrr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Panzki",
      "email": "Panzki@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Akshay Sharma",
      "email": "akshay.sharma09695@gmail.com",
      "commits": 1
    },
    {
      "name": "yyeltsyn",
      "email": "crawler2.0@gmail.com",
      "commits": 1
    },
    {
      "name": "Anup Kumar Panwar",
      "email": "1anuppanwar@gmail.com",
      "commits": 2
    },
    {
      "name": "Mertcan Davulcu",
      "email": "54983926+mertcandav@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Lars Mueller",
      "email": "appgurulars@gmx.de",
      "commits": 2
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Sam Jones",
      "email": "sam.jones240699@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Arnav Borborah",
      "email": "arnavborborah11@gmail.com",
      "commits": 2
    },
    {
      "name": "Erez Shomron",
      "email": "48328872+eshom@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "vzvu3k6k",
      "email": "vzvu3k6k@gmail.com",
      "commits": 2
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 2
    },
    {
      "name": "koseokkyu",
      "email": "dighrh@naver.com",
      "commits": 2
    },
    {
      "name": "arijit pande",
      "email": "pande.arijit@gmail.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 3
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 4
    },
    {
      "name": "Eric Curtin",
      "email": "ericcurtin17@gmail.com",
      "commits": 4
    },
    {
      "name": "JakeBonek",
      "email": "jake.bonek@gmail.com",
      "commits": 4
    },
    {
      "name": "ayaankhan98",
      "email": "ayaankhan98@gmail.com",
      "commits": 9
    }
  ],
  "explanationUrl": {
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en/Sorting Algorithms/Heap Sort.md"
  }
}