{
  "slug": "highest-response-ratio-next",
  "name": "Highest Response Ratio Next",
  "categories": [
    "scheduling"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "scheduling/highest_response_ratio_next.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/scheduling/highest_response_ratio_next.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nHighest response ratio next (HRRN) scheduling is a non-preemptive discipline.\nIt was developed as modification of shortest job next or shortest job first (SJN or SJF)\nto mitigate the problem of process starvation.\nhttps://en.wikipedia.org/wiki/Highest_response_ratio_next\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> statistics <span class=\"hljs-keyword\">import</span> mean\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calculate_turn_around_time</span>(<span class=\"hljs-params\">\n    process_name: <span class=\"hljs-built_in\">list</span>, arrival_time: <span class=\"hljs-built_in\">list</span>, burst_time: <span class=\"hljs-built_in\">list</span>, no_of_process: <span class=\"hljs-built_in\">int</span>\n</span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculate the turn around time of each processes\n\n    Return: The turn around time time for each process.\n    &gt;&gt;&gt; calculate_turn_around_time([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;], [3, 5, 8], [2, 4, 6], 3)\n    [2, 4, 7]\n    &gt;&gt;&gt; calculate_turn_around_time([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;], [0, 2, 4], [3, 5, 7], 3)\n    [3, 6, 11]\n    &quot;&quot;&quot;</span>\n\n    current_time = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-comment\"># Number of processes finished</span>\n    finished_process_count = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-comment\"># Displays the finished process.</span>\n    <span class=\"hljs-comment\"># If it is 0, the performance is completed if it is 1, before the performance.</span>\n    finished_process = [<span class=\"hljs-number\">0</span>] * no_of_process\n    <span class=\"hljs-comment\"># List to include calculation results</span>\n    turn_around_time = [<span class=\"hljs-number\">0</span>] * no_of_process\n\n    <span class=\"hljs-comment\"># Sort by arrival time.</span>\n    burst_time = [burst_time[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> np.argsort(arrival_time)]\n    process_name = [process_name[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> np.argsort(arrival_time)]\n    arrival_time.sort()\n\n    <span class=\"hljs-keyword\">while</span> no_of_process &gt; finished_process_count:\n\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        If the current time is less than the arrival time of\n        the process that arrives first among the processes that have not been performed,\n        change the current time.\n        &quot;&quot;&quot;</span>\n        i = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">while</span> finished_process[i] == <span class=\"hljs-number\">1</span>:\n            i += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">if</span> current_time &lt; arrival_time[i]:\n            current_time = arrival_time[i]\n\n        response_ratio = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-comment\"># Index showing the location of the process being performed</span>\n        loc = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-comment\"># Saves the current response ratio.</span>\n        temp = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, no_of_process):\n            <span class=\"hljs-keyword\">if</span> finished_process[i] == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> arrival_time[i] &lt;= current_time:\n                temp = (burst_time[i] + (current_time - arrival_time[i])) / burst_time[\n                    i\n                ]\n            <span class=\"hljs-keyword\">if</span> response_ratio &lt; temp:\n                response_ratio = temp\n                loc = i\n\n        <span class=\"hljs-comment\"># Calculate the turn around time</span>\n        turn_around_time[loc] = current_time + burst_time[loc] - arrival_time[loc]\n        current_time += burst_time[loc]\n        <span class=\"hljs-comment\"># Indicates that the process has been performed.</span>\n        finished_process[loc] = <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-comment\"># Increase finished_process_count by 1</span>\n        finished_process_count += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> turn_around_time\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calculate_waiting_time</span>(<span class=\"hljs-params\">\n    process_name: <span class=\"hljs-built_in\">list</span>, turn_around_time: <span class=\"hljs-built_in\">list</span>, burst_time: <span class=\"hljs-built_in\">list</span>, no_of_process: <span class=\"hljs-built_in\">int</span>\n</span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculate the waiting time of each processes.\n\n    Return: The waiting time for each process.\n    &gt;&gt;&gt; calculate_waiting_time([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;], [2, 4, 7], [2, 4, 6], 3)\n    [0, 0, 1]\n    &gt;&gt;&gt; calculate_waiting_time([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;], [3, 6, 11], [3, 5, 7], 3)\n    [0, 1, 4]\n    &quot;&quot;&quot;</span>\n\n    waiting_time = [<span class=\"hljs-number\">0</span>] * no_of_process\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, no_of_process):\n        waiting_time[i] = turn_around_time[i] - burst_time[i]\n    <span class=\"hljs-keyword\">return</span> waiting_time\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n\n    no_of_process = <span class=\"hljs-number\">5</span>\n    process_name = [<span class=\"hljs-string\">&quot;A&quot;</span>, <span class=\"hljs-string\">&quot;B&quot;</span>, <span class=\"hljs-string\">&quot;C&quot;</span>, <span class=\"hljs-string\">&quot;D&quot;</span>, <span class=\"hljs-string\">&quot;E&quot;</span>]\n    arrival_time = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n    burst_time = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n\n    turn_around_time = calculate_turn_around_time(\n        process_name, arrival_time, burst_time, no_of_process\n    )\n    waiting_time = calculate_waiting_time(\n        process_name, turn_around_time, burst_time, no_of_process\n    )\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Process name \\tArrival time \\tBurst time \\tTurn around time \\tWaiting time&quot;</span>)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, no_of_process):\n        <span class=\"hljs-built_in\">print</span>(\n            <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{process_name[i]}</span>\\t\\t<span class=\"hljs-subst\">{arrival_time[i]}</span>\\t\\t<span class=\"hljs-subst\">{burst_time[i]}</span>\\t\\t&quot;</span>\n            <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{turn_around_time[i]}</span>\\t\\t\\t<span class=\"hljs-subst\">{waiting_time[i]}</span>&quot;</span>\n        )\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;average waiting time : <span class=\"hljs-subst\">{mean(waiting_time):<span class=\"hljs-number\">.5</span>f}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;average turn around time : <span class=\"hljs-subst\">{mean(turn_around_time):<span class=\"hljs-number\">.5</span>f}</span>&quot;</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "yulmam",
      "email": "70622601+yulmam@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}