{
  "slug": "horizontal-projectile-motion",
  "name": "Horizontal Projectile Motion",
  "categories": [
    "physics"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "physics/horizontal_projectile_motion.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/physics/horizontal_projectile_motion.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nHorizontal Projectile Motion problem in physics.\nThis algorithm solves a specific problem in which\nthe motion starts from the ground as can be seen below:\n      (v = 0)\n        **\n       *  *\n      *    *\n     *      *\n    *        *\n   *          *\nGROUND      GROUND\nFor more info: https://en.wikipedia.org/wiki/Projectile_motion\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-comment\"># Importing packages</span>\n<span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> radians <span class=\"hljs-keyword\">as</span> angle_to_radians\n<span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> sin\n\n<span class=\"hljs-comment\"># Acceleration Constant on hearth (unit m/s^2)</span>\ng = <span class=\"hljs-number\">9.80665</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_args</span>(<span class=\"hljs-params\">init_velocity: <span class=\"hljs-built_in\">float</span>, angle: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Check that the arguments are valid\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># Ensure valid instance</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(init_velocity, (<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">float</span>)):\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;Invalid velocity. Should be a positive number.&quot;</span>)\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(angle, (<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">float</span>)):\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;Invalid angle. Range is 1-90 degrees.&quot;</span>)\n\n    <span class=\"hljs-comment\"># Ensure valid angle</span>\n    <span class=\"hljs-keyword\">if</span> angle &gt; <span class=\"hljs-number\">90</span> <span class=\"hljs-keyword\">or</span> angle &lt; <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Invalid angle. Range is 1-90 degrees.&quot;</span>)\n\n    <span class=\"hljs-comment\"># Ensure valid velocity</span>\n    <span class=\"hljs-keyword\">if</span> init_velocity &lt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Invalid velocity. Should be a positive number.&quot;</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">horizontal_distance</span>(<span class=\"hljs-params\">init_velocity: <span class=\"hljs-built_in\">float</span>, angle: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns the horizontal distance that the object cover\n    Formula:\n            v_0^2 * sin(2 * alpha)\n            ---------------------\n                   g\n    v_0 - initial velocity\n    alpha - angle\n    &gt;&gt;&gt; horizontal_distance(30, 45)\n    91.77\n    &gt;&gt;&gt; horizontal_distance(100, 78)\n    414.76\n    &gt;&gt;&gt; horizontal_distance(-1, 20)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid velocity. Should be a positive number.\n    &gt;&gt;&gt; horizontal_distance(30, -20)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid angle. Range is 1-90 degrees.\n    &quot;&quot;&quot;</span>\n    check_args(init_velocity, angle)\n    radians = angle_to_radians(<span class=\"hljs-number\">2</span> * angle)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">round</span>(init_velocity**<span class=\"hljs-number\">2</span> * sin(radians) / g, <span class=\"hljs-number\">2</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">max_height</span>(<span class=\"hljs-params\">init_velocity: <span class=\"hljs-built_in\">float</span>, angle: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns the maximum height that the object reach\n    Formula:\n            v_0^2 * sin^2(alpha)\n            --------------------\n                   2g\n    v_0 - initial velocity\n    alpha - angle\n    &gt;&gt;&gt; max_height(30, 45)\n    22.94\n    &gt;&gt;&gt; max_height(100, 78)\n    487.82\n    &gt;&gt;&gt; max_height(&quot;a&quot;, 20)\n    Traceback (most recent call last):\n        ...\n    TypeError: Invalid velocity. Should be a positive number.\n    &gt;&gt;&gt; horizontal_distance(30, &quot;b&quot;)\n    Traceback (most recent call last):\n        ...\n    TypeError: Invalid angle. Range is 1-90 degrees.\n    &quot;&quot;&quot;</span>\n    check_args(init_velocity, angle)\n    radians = angle_to_radians(angle)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">round</span>(init_velocity**<span class=\"hljs-number\">2</span> * sin(radians) ** <span class=\"hljs-number\">2</span> / (<span class=\"hljs-number\">2</span> * g), <span class=\"hljs-number\">2</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">total_time</span>(<span class=\"hljs-params\">init_velocity: <span class=\"hljs-built_in\">float</span>, angle: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns total time of the motion\n    Formula:\n            2 * v_0 * sin(alpha)\n            --------------------\n                   g\n    v_0 - initial velocity\n    alpha - angle\n    &gt;&gt;&gt; total_time(30, 45)\n    4.33\n    &gt;&gt;&gt; total_time(100, 78)\n    19.95\n    &gt;&gt;&gt; total_time(-10, 40)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid velocity. Should be a positive number.\n    &gt;&gt;&gt; total_time(30, &quot;b&quot;)\n    Traceback (most recent call last):\n        ...\n    TypeError: Invalid angle. Range is 1-90 degrees.\n    &quot;&quot;&quot;</span>\n    check_args(init_velocity, angle)\n    radians = angle_to_radians(angle)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">2</span> * init_velocity * sin(radians) / g, <span class=\"hljs-number\">2</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_motion</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; test_motion()\n    &quot;&quot;&quot;</span>\n    v0, angle = <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">20</span>\n    <span class=\"hljs-keyword\">assert</span> horizontal_distance(v0, angle) == <span class=\"hljs-number\">40.97</span>\n    <span class=\"hljs-keyword\">assert</span> max_height(v0, angle) == <span class=\"hljs-number\">3.73</span>\n    <span class=\"hljs-keyword\">assert</span> total_time(v0, angle) == <span class=\"hljs-number\">1.74</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\n\n    testmod()\n\n    <span class=\"hljs-comment\"># Get input from user</span>\n    init_vel = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Initial Velocity: &quot;</span>).strip())\n\n    <span class=\"hljs-comment\"># Get input from user</span>\n    angle = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;angle: &quot;</span>).strip())\n\n    <span class=\"hljs-comment\"># Print results</span>\n    <span class=\"hljs-built_in\">print</span>()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Results: &quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Horizontal Distance: <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">str</span>(horizontal_distance(init_vel, angle))}</span> [m]&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Maximum Height: <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">str</span>(max_height(init_vel, angle))}</span> [m]&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Total Time: <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">str</span>(total_time(init_vel, angle))}</span> [s]&quot;</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "Aviv Faraj",
      "email": "73610201+avivfaraj@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}