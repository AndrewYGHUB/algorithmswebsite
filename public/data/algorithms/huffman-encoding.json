{
  "slug": "huffman-encoding",
  "name": "Huffman Encoding",
  "categories": [
    "general"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/general/huffman_encoding.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/general/huffman_encoding.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::{\n    cmp::Ordering,\n    collections::{BTreeMap, BinaryHeap},\n};\n\n<span class=\"hljs-meta\">#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Default)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">HuffmanValue</span> {\n    <span class=\"hljs-comment\">// For the `value` to overflow, the sum of frequencies should be bigger</span>\n    <span class=\"hljs-comment\">// than u64. So we should be safe here</span>\n    <span class=\"hljs-comment\">/// The encoded value</span>\n    <span class=\"hljs-keyword\">pub</span> value: <span class=\"hljs-type\">u64</span>,\n    <span class=\"hljs-comment\">/// number of bits used (up to 64)</span>\n    <span class=\"hljs-keyword\">pub</span> bits: <span class=\"hljs-type\">u32</span>,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">HuffmanNode</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> left: <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;HuffmanNode&lt;T&gt;&gt;&gt;,\n    <span class=\"hljs-keyword\">pub</span> right: <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;HuffmanNode&lt;T&gt;&gt;&gt;,\n    <span class=\"hljs-keyword\">pub</span> symbol: <span class=\"hljs-type\">Option</span>&lt;T&gt;,\n    <span class=\"hljs-keyword\">pub</span> frequency: <span class=\"hljs-type\">u64</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">PartialEq</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">HuffmanNode</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">eq</span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;<span class=\"hljs-keyword\">Self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">self</span>.frequency == other.frequency\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">PartialOrd</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">HuffmanNode</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">partial_cmp</span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;<span class=\"hljs-keyword\">Self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;Ordering&gt; {\n        <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-keyword\">self</span>.frequency.<span class=\"hljs-title function_ invoke__\">cmp</span>(&amp;other.frequency).<span class=\"hljs-title function_ invoke__\">reverse</span>())\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Eq</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">HuffmanNode</span>&lt;T&gt; {}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Ord</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">HuffmanNode</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">cmp</span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;<span class=\"hljs-keyword\">Self</span>) <span class=\"hljs-punctuation\">-&gt;</span> Ordering {\n        <span class=\"hljs-keyword\">self</span>.frequency.<span class=\"hljs-title function_ invoke__\">cmp</span>(&amp;other.frequency).<span class=\"hljs-title function_ invoke__\">reverse</span>()\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Clone</span> + <span class=\"hljs-built_in\">Copy</span> + <span class=\"hljs-built_in\">Ord</span>&gt; HuffmanNode&lt;T&gt; {\n    <span class=\"hljs-comment\">/// Turn the tree into the map that can be used in encoding</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_alphabet</span>(\n        &amp;<span class=\"hljs-keyword\">self</span>,\n        height: <span class=\"hljs-type\">u32</span>,\n        path: <span class=\"hljs-type\">u64</span>,\n        node: &amp;HuffmanNode&lt;T&gt;,\n        map: &amp;<span class=\"hljs-keyword\">mut</span> BTreeMap&lt;T, HuffmanValue&gt;,\n    ) {\n        <span class=\"hljs-keyword\">match</span> node.symbol {\n            <span class=\"hljs-title function_ invoke__\">Some</span>(s) =&gt; {\n                map.<span class=\"hljs-title function_ invoke__\">insert</span>(\n                    s,\n                    HuffmanValue {\n                        value: path,\n                        bits: height,\n                    },\n                );\n            }\n            <span class=\"hljs-literal\">None</span> =&gt; {\n                <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">get_alphabet</span>(height + <span class=\"hljs-number\">1</span>, path, node.left.<span class=\"hljs-title function_ invoke__\">as_ref</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(), map);\n                <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">get_alphabet</span>(\n                    height + <span class=\"hljs-number\">1</span>,\n                    path | (<span class=\"hljs-number\">1</span> &lt;&lt; height),\n                    node.right.<span class=\"hljs-title function_ invoke__\">as_ref</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(),\n                    map,\n                );\n            }\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">HuffmanDictionary</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> alphabet: BTreeMap&lt;T, HuffmanValue&gt;,\n    <span class=\"hljs-keyword\">pub</span> root: HuffmanNode&lt;T&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Clone</span> + <span class=\"hljs-built_in\">Copy</span> + <span class=\"hljs-built_in\">Ord</span>&gt; HuffmanDictionary&lt;T&gt; {\n    <span class=\"hljs-comment\">/// The list of alphabet symbols and their respective frequency should</span>\n    <span class=\"hljs-comment\">/// be given as input</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>(alphabet: &amp;[(T, <span class=\"hljs-type\">u64</span>)]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">alph</span>: BTreeMap&lt;T, HuffmanValue&gt; = BTreeMap::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">queue</span>: BinaryHeap&lt;HuffmanNode&lt;T&gt;&gt; = BinaryHeap::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-title function_ invoke__\">for</span> (symbol, freq) <span class=\"hljs-keyword\">in</span> alphabet.<span class=\"hljs-title function_ invoke__\">iter</span>() {\n            queue.<span class=\"hljs-title function_ invoke__\">push</span>(HuffmanNode {\n                left: <span class=\"hljs-literal\">None</span>,\n                right: <span class=\"hljs-literal\">None</span>,\n                symbol: <span class=\"hljs-title function_ invoke__\">Some</span>(*symbol),\n                frequency: *freq,\n            });\n        }\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">_</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..alphabet.<span class=\"hljs-title function_ invoke__\">len</span>() {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">left</span> = queue.<span class=\"hljs-title function_ invoke__\">pop</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">right</span> = queue.<span class=\"hljs-title function_ invoke__\">pop</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">sm_freq</span> = left.frequency + right.frequency;\n            queue.<span class=\"hljs-title function_ invoke__\">push</span>(HuffmanNode {\n                left: <span class=\"hljs-title function_ invoke__\">Some</span>(Box::<span class=\"hljs-title function_ invoke__\">new</span>(left)),\n                right: <span class=\"hljs-title function_ invoke__\">Some</span>(Box::<span class=\"hljs-title function_ invoke__\">new</span>(right)),\n                symbol: <span class=\"hljs-literal\">None</span>,\n                frequency: sm_freq,\n            });\n        }\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">root</span> = queue.<span class=\"hljs-title function_ invoke__\">pop</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n        root.<span class=\"hljs-title function_ invoke__\">get_alphabet</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, &amp;root, &amp;<span class=\"hljs-keyword\">mut</span> alph);\n        HuffmanDictionary {\n            alphabet: alph,\n            root,\n        }\n    }\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">encode</span>(&amp;<span class=\"hljs-keyword\">self</span>, data: &amp;[T]) <span class=\"hljs-punctuation\">-&gt;</span> HuffmanEncoding {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span> = HuffmanEncoding::<span class=\"hljs-title function_ invoke__\">new</span>();\n        data.<span class=\"hljs-title function_ invoke__\">iter</span>()\n            .<span class=\"hljs-title function_ invoke__\">for_each</span>(|value| result.<span class=\"hljs-title function_ invoke__\">add_data</span>(*<span class=\"hljs-keyword\">self</span>.alphabet.<span class=\"hljs-title function_ invoke__\">get</span>(value).<span class=\"hljs-title function_ invoke__\">unwrap</span>()));\n        result\n    }\n}\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">HuffmanEncoding</span> {\n    <span class=\"hljs-keyword\">pub</span> num_bits: <span class=\"hljs-type\">u64</span>,\n    <span class=\"hljs-keyword\">pub</span> data: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u64</span>&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Default</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">HuffmanEncoding</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">default</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">Self</span>::<span class=\"hljs-title function_ invoke__\">new</span>()\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">HuffmanEncoding</span> {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        HuffmanEncoding {\n            num_bits: <span class=\"hljs-number\">0</span>,\n            data: <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>],\n        }\n    }\n    <span class=\"hljs-meta\">#[inline]</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">add_data</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, data: HuffmanValue) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">shift</span> = (<span class=\"hljs-keyword\">self</span>.num_bits &amp; <span class=\"hljs-number\">63</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">val</span> = data.value;\n        *<span class=\"hljs-keyword\">self</span>.data.<span class=\"hljs-title function_ invoke__\">last_mut</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>() |= val.<span class=\"hljs-title function_ invoke__\">wrapping_shl</span>(shift);\n        <span class=\"hljs-title function_ invoke__\">if</span> (shift + data.bits) &gt;= <span class=\"hljs-number\">64</span> {\n            <span class=\"hljs-keyword\">self</span>.data.<span class=\"hljs-title function_ invoke__\">push</span>(val.<span class=\"hljs-title function_ invoke__\">wrapping_shr</span>(<span class=\"hljs-number\">64</span> - shift));\n        }\n        <span class=\"hljs-keyword\">self</span>.num_bits += data.bits <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span>;\n    }\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_bit</span>(&amp;<span class=\"hljs-keyword\">self</span>, pos: <span class=\"hljs-type\">u64</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        (<span class=\"hljs-keyword\">self</span>.data[(pos &gt;&gt; <span class=\"hljs-number\">6</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>] &amp; (<span class=\"hljs-number\">1</span> &lt;&lt; (pos &amp; <span class=\"hljs-number\">63</span>))) != <span class=\"hljs-number\">0</span>\n    }\n    <span class=\"hljs-comment\">/// In case the encoding is invalid, `None` is returned</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">decode</span>&lt;T: <span class=\"hljs-built_in\">Clone</span> + <span class=\"hljs-built_in\">Copy</span> + <span class=\"hljs-built_in\">Ord</span>&gt;(&amp;<span class=\"hljs-keyword\">self</span>, dict: &amp;HuffmanDictionary&lt;T&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;T&gt;&gt; {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">state</span> = &amp;dict.root;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span>: <span class=\"hljs-type\">Vec</span>&lt;T&gt; = <span class=\"hljs-built_in\">vec!</span>[];\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-keyword\">self</span>.num_bits {\n            <span class=\"hljs-keyword\">if</span> state.symbol.<span class=\"hljs-title function_ invoke__\">is_some</span>() {\n                result.<span class=\"hljs-title function_ invoke__\">push</span>(state.symbol.<span class=\"hljs-title function_ invoke__\">unwrap</span>());\n                state = &amp;dict.root;\n            }\n            <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">get_bit</span>(i) {\n                <span class=\"hljs-literal\">false</span> =&gt; state = state.left.<span class=\"hljs-title function_ invoke__\">as_ref</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(),\n                <span class=\"hljs-literal\">true</span> =&gt; state = state.right.<span class=\"hljs-title function_ invoke__\">as_ref</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(),\n            }\n        }\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.num_bits &gt; <span class=\"hljs-number\">0</span> {\n            result.<span class=\"hljs-title function_ invoke__\">push</span>(state.symbol?);\n        }\n        <span class=\"hljs-title function_ invoke__\">Some</span>(result)\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_frequency</span>(bytes: &amp;[<span class=\"hljs-type\">u8</span>]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">u8</span>, <span class=\"hljs-type\">u64</span>)&gt; {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">cnts</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u64</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; <span class=\"hljs-number\">256</span>];\n        bytes.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">for_each</span>(|&amp;b| cnts[b <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>] += <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span> = <span class=\"hljs-built_in\">vec!</span>[];\n        cnts.<span class=\"hljs-title function_ invoke__\">iter</span>()\n            .<span class=\"hljs-title function_ invoke__\">enumerate</span>()\n            .<span class=\"hljs-title function_ invoke__\">filter</span>(|(_, &amp;v)| v &gt; <span class=\"hljs-number\">0</span>)\n            .<span class=\"hljs-title function_ invoke__\">for_each</span>(|(b, &amp;cnt)| result.<span class=\"hljs-title function_ invoke__\">push</span>((b <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>, cnt)));\n        result\n    }\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">small_text</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">text</span> = <span class=\"hljs-string\">&quot;Hello world&quot;</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">bytes</span> = text.<span class=\"hljs-title function_ invoke__\">as_bytes</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">freq</span> = <span class=\"hljs-title function_ invoke__\">get_frequency</span>(bytes);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">dict</span> = HuffmanDictionary::<span class=\"hljs-title function_ invoke__\">new</span>(&amp;freq);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">encoded</span> = dict.<span class=\"hljs-title function_ invoke__\">encode</span>(bytes);\n        <span class=\"hljs-built_in\">assert_eq!</span>(encoded.num_bits, <span class=\"hljs-number\">32</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">decoded</span> = encoded.<span class=\"hljs-title function_ invoke__\">decode</span>(&amp;dict).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(decoded, bytes);\n    }\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">lorem_ipsum</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">text</span> = <span class=\"hljs-built_in\">concat!</span>(\n            <span class=\"hljs-string\">&quot;The quick brown fox jumped over the lazy dog.&quot;</span>,\n            <span class=\"hljs-string\">&quot;Lorem ipsum dolor sit amet, consectetur &quot;</span>,\n            <span class=\"hljs-string\">&quot;adipiscing elit, sed do eiusmod tempor incididunt ut labore et &quot;</span>,\n            <span class=\"hljs-string\">&quot;dolore magna aliqua. Facilisis magna etiam tempor orci. Nullam &quot;</span>,\n            <span class=\"hljs-string\">&quot;non nisi est sit amet facilisis magna. Commodo nulla facilisi &quot;</span>,\n            <span class=\"hljs-string\">&quot;nullam vehicula. Interdum posuere lorem ipsum dolor. Elit eget &quot;</span>,\n            <span class=\"hljs-string\">&quot;gravida cum sociis natoque penatibus. Dictum sit amet justo donec &quot;</span>,\n            <span class=\"hljs-string\">&quot;enim. Tempor commodo ullamcorper a lacus vestibulum sed. Nisl &quot;</span>,\n            <span class=\"hljs-string\">&quot;suscipit adipiscing bibendum est ultricies. Sit amet aliquam id &quot;</span>,\n            <span class=\"hljs-string\">&quot;diam maecenas ultricies.&quot;</span>\n        );\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">bytes</span> = text.<span class=\"hljs-title function_ invoke__\">as_bytes</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">freq</span> = <span class=\"hljs-title function_ invoke__\">get_frequency</span>(bytes);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">dict</span> = HuffmanDictionary::<span class=\"hljs-title function_ invoke__\">new</span>(&amp;freq);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">encoded</span> = dict.<span class=\"hljs-title function_ invoke__\">encode</span>(bytes);\n        <span class=\"hljs-built_in\">assert_eq!</span>(encoded.num_bits, <span class=\"hljs-number\">2372</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">decoded</span> = encoded.<span class=\"hljs-title function_ invoke__\">decode</span>(&amp;dict).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(decoded, bytes);\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">text</span> = <span class=\"hljs-string\">&quot;The dictionary should work on other texts too&quot;</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">bytes</span> = text.<span class=\"hljs-title function_ invoke__\">as_bytes</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">encoded</span> = dict.<span class=\"hljs-title function_ invoke__\">encode</span>(bytes);\n        <span class=\"hljs-built_in\">assert_eq!</span>(encoded.num_bits, <span class=\"hljs-number\">215</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">decoded</span> = encoded.<span class=\"hljs-title function_ invoke__\">decode</span>(&amp;dict).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(decoded, bytes);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Erfan Khadem",
      "email": "45465346+er888kh@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}