{
  "slug": "huffman",
  "name": "Huffman",
  "categories": [
    "compression"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "compression/huffman.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/compression/huffman.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">import</span> sys\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Letter</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, letter: <span class=\"hljs-built_in\">str</span>, freq: <span class=\"hljs-built_in\">int</span></span>):\n        self.letter: <span class=\"hljs-built_in\">str</span> = letter\n        self.freq: <span class=\"hljs-built_in\">int</span> = freq\n        self.bitstring: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>] = {}\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{self.letter}</span>:<span class=\"hljs-subst\">{self.freq}</span>&quot;</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TreeNode</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, freq: <span class=\"hljs-built_in\">int</span>, left: Letter | TreeNode, right: Letter | TreeNode</span>):\n        self.freq: <span class=\"hljs-built_in\">int</span> = freq\n        self.left: Letter | TreeNode = left\n        self.right: Letter | TreeNode = right\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">parse_file</span>(<span class=\"hljs-params\">file_path: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[Letter]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Read the file and build a dict of all letters and their\n    frequencies, then convert the dict into a list of Letters.\n    &quot;&quot;&quot;</span>\n    chars: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">int</span>] = {}\n    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file_path) <span class=\"hljs-keyword\">as</span> f:\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n            c = f.read(<span class=\"hljs-number\">1</span>)\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> c:\n                <span class=\"hljs-keyword\">break</span>\n            chars[c] = chars[c] + <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> c <span class=\"hljs-keyword\">in</span> chars.keys() <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sorted</span>((Letter(c, f) <span class=\"hljs-keyword\">for</span> c, f <span class=\"hljs-keyword\">in</span> chars.items()), key=<span class=\"hljs-keyword\">lambda</span> l: l.freq)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">build_tree</span>(<span class=\"hljs-params\">letters: <span class=\"hljs-built_in\">list</span>[Letter]</span>) -&gt; Letter | TreeNode:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Run through the list of Letters and build the min heap\n    for the Huffman Tree.\n    &quot;&quot;&quot;</span>\n    response: <span class=\"hljs-built_in\">list</span>[Letter | TreeNode] = letters  <span class=\"hljs-comment\"># type: ignore</span>\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">len</span>(response) &gt; <span class=\"hljs-number\">1</span>:\n        left = response.pop(<span class=\"hljs-number\">0</span>)\n        right = response.pop(<span class=\"hljs-number\">0</span>)\n        total_freq = left.freq + right.freq\n        node = TreeNode(total_freq, left, right)\n        response.append(node)\n        response.sort(key=<span class=\"hljs-keyword\">lambda</span> l: l.freq)\n    <span class=\"hljs-keyword\">return</span> response[<span class=\"hljs-number\">0</span>]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">traverse_tree</span>(<span class=\"hljs-params\">root: Letter | TreeNode, bitstring: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[Letter]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Recursively traverse the Huffman Tree to set each\n    Letter&#x27;s bitstring dictionary, and return the list of Letters\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">type</span>(root) <span class=\"hljs-keyword\">is</span> Letter:\n        root.bitstring[root.letter] = bitstring\n        <span class=\"hljs-keyword\">return</span> [root]\n    treenode: TreeNode = root  <span class=\"hljs-comment\"># type: ignore</span>\n    letters = []\n    letters += traverse_tree(treenode.left, bitstring + <span class=\"hljs-string\">&quot;0&quot;</span>)\n    letters += traverse_tree(treenode.right, bitstring + <span class=\"hljs-string\">&quot;1&quot;</span>)\n    <span class=\"hljs-keyword\">return</span> letters\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">huffman</span>(<span class=\"hljs-params\">file_path: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Parse the file, build the tree, then run through the file\n    again, using the letters dictionary to find and print out the\n    bitstring for each letter.\n    &quot;&quot;&quot;</span>\n    letters_list = parse_file(file_path)\n    root = build_tree(letters_list)\n    letters = {\n        k: v <span class=\"hljs-keyword\">for</span> letter <span class=\"hljs-keyword\">in</span> traverse_tree(root, <span class=\"hljs-string\">&quot;&quot;</span>) <span class=\"hljs-keyword\">for</span> k, v <span class=\"hljs-keyword\">in</span> letter.bitstring.items()\n    }\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Huffman Coding  of <span class=\"hljs-subst\">{file_path}</span>: &quot;</span>)\n    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file_path) <span class=\"hljs-keyword\">as</span> f:\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n            c = f.read(<span class=\"hljs-number\">1</span>)\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> c:\n                <span class=\"hljs-keyword\">break</span>\n            <span class=\"hljs-built_in\">print</span>(letters[c], end=<span class=\"hljs-string\">&quot; &quot;</span>)\n    <span class=\"hljs-built_in\">print</span>()\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-comment\"># pass the file path to the huffman function</span>\n    huffman(sys.argv[<span class=\"hljs-number\">1</span>])\n"
    },
    "c-plus-plus": {
      "dir": "greedy_algorithms/huffman.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/greedy_algorithms/huffman.cpp",
      "code": "<span class=\"hljs-comment\">// C++ program for Huffman Coding</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-comment\">// A Huffman tree node</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">MinHeapNode</span> {\n    <span class=\"hljs-comment\">// One of the input characters</span>\n    <span class=\"hljs-type\">char</span> data;\n\n    <span class=\"hljs-comment\">// Frequency of the character</span>\n    <span class=\"hljs-type\">unsigned</span> freq;\n\n    <span class=\"hljs-comment\">// Left and right child</span>\n    MinHeapNode *left, *right;\n\n    <span class=\"hljs-built_in\">MinHeapNode</span>(<span class=\"hljs-type\">char</span> data, <span class=\"hljs-type\">unsigned</span> freq)\n\n    {\n        left = right = <span class=\"hljs-literal\">NULL</span>;\n        <span class=\"hljs-keyword\">this</span>-&gt;data = data;\n        <span class=\"hljs-keyword\">this</span>-&gt;freq = freq;\n    }\n};\n\n<span class=\"hljs-comment\">// For comparison of</span>\n<span class=\"hljs-comment\">// two heap nodes (needed in min heap)</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">compare</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">operator</span><span class=\"hljs-params\">()</span><span class=\"hljs-params\">(MinHeapNode* l, MinHeapNode* r)</span>\n\n    </span>{\n        <span class=\"hljs-keyword\">return</span> (l-&gt;freq &gt; r-&gt;freq);\n    }\n};\n\n<span class=\"hljs-comment\">// Prints huffman codes from</span>\n<span class=\"hljs-comment\">// the root of Huffman Tree.</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printCodes</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> MinHeapNode* root, string str)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (!root)\n        <span class=\"hljs-keyword\">return</span>;\n\n    <span class=\"hljs-keyword\">if</span> (root-&gt;data != <span class=\"hljs-string\">&#x27;$&#x27;</span>)\n        cout &lt;&lt; root-&gt;data &lt;&lt; <span class=\"hljs-string\">&quot;: &quot;</span> &lt;&lt; str &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n\n    <span class=\"hljs-built_in\">printCodes</span>(root-&gt;left, str + <span class=\"hljs-string\">&quot;0&quot;</span>);\n    <span class=\"hljs-built_in\">printCodes</span>(root-&gt;right, str + <span class=\"hljs-string\">&quot;1&quot;</span>);\n}\n\n<span class=\"hljs-comment\">// The main function that builds a Huffman Tree and</span>\n<span class=\"hljs-comment\">// print codes by traversing the built Huffman Tree</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">HuffmanCodes</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> data[], <span class=\"hljs-type\">int</span> freq[], <span class=\"hljs-type\">int</span> size)</span> </span>{\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">MinHeapNode</span> *left, *right, *top;\n\n    <span class=\"hljs-comment\">// Create a min heap &amp; inserts all characters of data[]</span>\n    priority_queue&lt;MinHeapNode*, vector&lt;MinHeapNode*&gt;, compare&gt; minHeap;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; ++i)\n        minHeap.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">MinHeapNode</span>(data[i], freq[i]));\n\n    <span class=\"hljs-comment\">// Iterate while size of heap doesn&#x27;t become 1</span>\n    <span class=\"hljs-keyword\">while</span> (minHeap.<span class=\"hljs-built_in\">size</span>() != <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-comment\">// Extract the two minimum</span>\n        <span class=\"hljs-comment\">// freq items from min heap</span>\n        left = minHeap.<span class=\"hljs-built_in\">top</span>();\n        minHeap.<span class=\"hljs-built_in\">pop</span>();\n\n        right = minHeap.<span class=\"hljs-built_in\">top</span>();\n        minHeap.<span class=\"hljs-built_in\">pop</span>();\n\n        <span class=\"hljs-comment\">// Create a new internal node with</span>\n        <span class=\"hljs-comment\">// frequency equal to the sum of the</span>\n        <span class=\"hljs-comment\">// two nodes frequencies. Make the</span>\n        <span class=\"hljs-comment\">// two extracted node as left and right children</span>\n        <span class=\"hljs-comment\">// of this new node. Add this node</span>\n        <span class=\"hljs-comment\">// to the min heap &#x27;$&#x27; is a special value</span>\n        <span class=\"hljs-comment\">// for internal nodes, not used</span>\n        top = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">MinHeapNode</span>(<span class=\"hljs-string\">&#x27;$&#x27;</span>, left-&gt;freq + right-&gt;freq);\n\n        top-&gt;left = left;\n        top-&gt;right = right;\n\n        minHeap.<span class=\"hljs-built_in\">push</span>(top);\n    }\n\n    <span class=\"hljs-comment\">// Print Huffman codes using</span>\n    <span class=\"hljs-comment\">// the Huffman tree built above</span>\n    <span class=\"hljs-built_in\">printCodes</span>(minHeap.<span class=\"hljs-built_in\">top</span>(), <span class=\"hljs-string\">&quot;&quot;</span>);\n}\n\n<span class=\"hljs-comment\">// Driver program to test above functions</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">char</span> arr[] = {<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>, <span class=\"hljs-string\">&#x27;f&#x27;</span>};\n    <span class=\"hljs-type\">int</span> freq[] = {<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">45</span>};\n\n    <span class=\"hljs-type\">int</span> size = <span class=\"hljs-built_in\">sizeof</span>(arr) / <span class=\"hljs-built_in\">sizeof</span>(arr[<span class=\"hljs-number\">0</span>]);\n\n    <span class=\"hljs-built_in\">HuffmanCodes</span>(arr, freq, size);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/others/Huffman.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/others/Huffman.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.others;\n\n<span class=\"hljs-keyword\">import</span> java.util.PriorityQueue;\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n<span class=\"hljs-keyword\">import</span> java.util.Comparator;\n\n<span class=\"hljs-comment\">// node class is the basic structure </span>\n<span class=\"hljs-comment\">// of each node present in the Huffman - tree. </span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HuffmanNode</span> {\n\n    <span class=\"hljs-type\">int</span> data;\n    <span class=\"hljs-type\">char</span> c;\n\n    HuffmanNode left;\n    HuffmanNode right;\n}\n\n<span class=\"hljs-comment\">// comparator class helps to compare the node </span>\n<span class=\"hljs-comment\">// on the basis of one of its attribute. </span>\n<span class=\"hljs-comment\">// Here we will be compared </span>\n<span class=\"hljs-comment\">// on the basis of data values of the nodes. </span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyComparator</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Comparator</span>&lt;HuffmanNode&gt; {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(HuffmanNode x, HuffmanNode y)</span> {\n\n        <span class=\"hljs-keyword\">return</span> x.data - y.data;\n    }\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Huffman</span> {\n\n    <span class=\"hljs-comment\">// recursive function to print the </span>\n    <span class=\"hljs-comment\">// huffman-code through the tree traversal. </span>\n    <span class=\"hljs-comment\">// Here s is the huffman - code generated. </span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printCode</span><span class=\"hljs-params\">(HuffmanNode root, String s)</span> {\n\n        <span class=\"hljs-comment\">// base case; if the left and right are null </span>\n        <span class=\"hljs-comment\">// then its a leaf node and we print </span>\n        <span class=\"hljs-comment\">// the code s generated by traversing the tree. </span>\n        <span class=\"hljs-keyword\">if</span> (root.left\n                == <span class=\"hljs-literal\">null</span>\n                &amp;&amp; root.right\n                == <span class=\"hljs-literal\">null</span>\n                &amp;&amp; Character.isLetter(root.c)) {\n\n            <span class=\"hljs-comment\">// c is the character in the node </span>\n            System.out.println(root.c + <span class=\"hljs-string\">&quot;:&quot;</span> + s);\n\n            <span class=\"hljs-keyword\">return</span>;\n        }\n\n        <span class=\"hljs-comment\">// if we go to left then add &quot;0&quot; to the code. </span>\n        <span class=\"hljs-comment\">// if we go to the right add&quot;1&quot; to the code. </span>\n        <span class=\"hljs-comment\">// recursive calls for left and </span>\n        <span class=\"hljs-comment\">// right sub-tree of the generated tree. </span>\n        printCode(root.left, s + <span class=\"hljs-string\">&quot;0&quot;</span>);\n        printCode(root.right, s + <span class=\"hljs-string\">&quot;1&quot;</span>);\n    }\n\n    <span class=\"hljs-comment\">// main function </span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n\n        <span class=\"hljs-comment\">// number of characters. </span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">6</span>;\n        <span class=\"hljs-type\">char</span>[] charArray = {<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>, <span class=\"hljs-string\">&#x27;f&#x27;</span>};\n        <span class=\"hljs-type\">int</span>[] charfreq = {<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">45</span>};\n\n        <span class=\"hljs-comment\">// creating a priority queue q. </span>\n        <span class=\"hljs-comment\">// makes a min-priority queue(min-heap). </span>\n        PriorityQueue&lt;HuffmanNode&gt; q\n                = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PriorityQueue</span>&lt;HuffmanNode&gt;(n, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyComparator</span>());\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n\n            <span class=\"hljs-comment\">// creating a Huffman node object </span>\n            <span class=\"hljs-comment\">// and add it to the priority queue. </span>\n            <span class=\"hljs-type\">HuffmanNode</span> <span class=\"hljs-variable\">hn</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HuffmanNode</span>();\n\n            hn.c = charArray[i];\n            hn.data = charfreq[i];\n\n            hn.left = <span class=\"hljs-literal\">null</span>;\n            hn.right = <span class=\"hljs-literal\">null</span>;\n\n            <span class=\"hljs-comment\">// add functions adds </span>\n            <span class=\"hljs-comment\">// the huffman node to the queue. </span>\n            q.add(hn);\n        }\n\n        <span class=\"hljs-comment\">// create a root node </span>\n        <span class=\"hljs-type\">HuffmanNode</span> <span class=\"hljs-variable\">root</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\n\n        <span class=\"hljs-comment\">// Here we will extract the two minimum value </span>\n        <span class=\"hljs-comment\">// from the heap each time until </span>\n        <span class=\"hljs-comment\">// its size reduces to 1, extract until </span>\n        <span class=\"hljs-comment\">// all the nodes are extracted. </span>\n        <span class=\"hljs-keyword\">while</span> (q.size() &gt; <span class=\"hljs-number\">1</span>) {\n\n            <span class=\"hljs-comment\">// first min extract. </span>\n            <span class=\"hljs-type\">HuffmanNode</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> q.peek();\n            q.poll();\n\n            <span class=\"hljs-comment\">// second min extarct. </span>\n            <span class=\"hljs-type\">HuffmanNode</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> q.peek();\n            q.poll();\n\n            <span class=\"hljs-comment\">// new node f which is equal </span>\n            <span class=\"hljs-type\">HuffmanNode</span> <span class=\"hljs-variable\">f</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HuffmanNode</span>();\n\n            <span class=\"hljs-comment\">// to the sum of the frequency of the two nodes </span>\n            <span class=\"hljs-comment\">// assigning values to the f node. </span>\n            f.data = x.data + y.data;\n            f.c = <span class=\"hljs-string\">&#x27;-&#x27;</span>;\n\n            <span class=\"hljs-comment\">// first extracted node as left child. </span>\n            f.left = x;\n\n            <span class=\"hljs-comment\">// second extracted node as the right child. </span>\n            f.right = y;\n\n            <span class=\"hljs-comment\">// marking the f node as the root node. </span>\n            root = f;\n\n            <span class=\"hljs-comment\">// add this node to the priority-queue. </span>\n            q.add(f);\n        }\n\n        <span class=\"hljs-comment\">// print the codes by traversing the tree </span>\n        printCode(root, <span class=\"hljs-string\">&quot;&quot;</span>);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "1fisedi",
      "email": "51143882+1fisedi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ashwek Swamy",
      "email": "39827514+ashwek@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ravi Patel",
      "email": "ravi.patel1245@gmail.com",
      "commits": 1
    },
    {
      "name": "yashmunoth",
      "email": "yash.munoth@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Shikhar Chandra",
      "email": "47221817+SHIKHAR-CHANDRA@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "rmakynen",
      "email": "rmakynen@W10-116.student.yo.oulu.fi",
      "commits": 1
    },
    {
      "name": "Erwin Junge",
      "email": "erwin@junge.nl",
      "commits": 1
    },
    {
      "name": "dpittaluga76",
      "email": "dpittaluga@gmail.com",
      "commits": 1
    },
    {
      "name": "Níkolas Vargas",
      "email": "vargasnikolass@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 3
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}