{
  "slug": "hyperloglog",
  "name": "HyperLogLog",
  "categories": [
    "datastructures",
    "probabilistic"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./DataStructures/Probabilistic/HyperLogLog.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/DataStructures/Probabilistic/HyperLogLog.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n<span class=\"hljs-keyword\">using</span> System.Linq;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">DataStructures.Probabilistic</span>\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HyperLogLog</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-title\">T</span> : <span class=\"hljs-title\">notnull</span>\n    {\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">int</span> P = <span class=\"hljs-number\">16</span>;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">double</span> Alpha = <span class=\"hljs-number\">.673</span>;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-built_in\">int</span>[] registers;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> HashSet&lt;<span class=\"hljs-built_in\">int</span>&gt; setRegisters;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;HyperLogLog{T}&quot;/&gt;</span> class.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">HyperLogLog</span>()</span>\n        {\n            <span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-number\">1</span> &lt;&lt; P;\n            registers = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[m];\n            setRegisters = <span class=\"hljs-keyword\">new</span> HashSet&lt;<span class=\"hljs-built_in\">int</span>&gt;();\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Merge&#x27;s two HyperLogLog&#x27;s together to form a union HLL.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;first&quot;&gt;</span>the first HLL.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;second&quot;&gt;</span>The second HLL.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>A HyperLogLog with the combined values of the two sets of registers.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> HyperLogLog&lt;T&gt; <span class=\"hljs-title\">Merge</span>(<span class=\"hljs-params\">HyperLogLog&lt;T&gt; first, HyperLogLog&lt;T&gt; second</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> output = <span class=\"hljs-keyword\">new</span> HyperLogLog&lt;T&gt;();\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; second.registers.Length; i++)\n            {\n                output.registers[i] = Math.Max(first.registers[i], second.registers[i]);\n            }\n\n            output.setRegisters.UnionWith(first.setRegisters);\n            output.setRegisters.UnionWith(second.setRegisters);\n            <span class=\"hljs-keyword\">return</span> output;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Adds an item to the HyperLogLog.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;item&quot;&gt;</span>The Item to be added.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Add</span>(<span class=\"hljs-params\">T item</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> x = item.GetHashCode();\n            <span class=\"hljs-keyword\">var</span> binString = Convert.ToString(x, <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// converts hash to binary</span>\n            <span class=\"hljs-keyword\">var</span> j = Convert.ToInt32(binString.Substring(<span class=\"hljs-number\">0</span>, Math.Min(P, binString.Length)), <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// convert first b bits to register index</span>\n            <span class=\"hljs-keyword\">var</span> w = (<span class=\"hljs-built_in\">int</span>)Math.Log2(x ^ (x &amp; (x - <span class=\"hljs-number\">1</span>))); <span class=\"hljs-comment\">// find position of the right most 1.</span>\n            registers[j] = Math.Max(registers[j], w); <span class=\"hljs-comment\">// set the appropriate register to the appropriate value.</span>\n            setRegisters.Add(j);\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Determines the approximate cardinality of the HyperLogLog.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>the approximate cardinality.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">Cardinality</span>()</span>\n        {\n            <span class=\"hljs-comment\">// calculate the bottom part of the harmonic mean of the registers</span>\n            <span class=\"hljs-built_in\">double</span> z = setRegisters.Sum(index =&gt; Math.Pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">-1</span> * registers[index]));\n\n            <span class=\"hljs-comment\">// calculate the harmonic mean of the set registers</span>\n            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">int</span>)Math.Ceiling(Alpha * setRegisters.Count * (setRegisters.Count / z));\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Stephen Lorello",
      "email": "42971704+slorello89@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}