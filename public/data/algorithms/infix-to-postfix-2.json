{
  "slug": "infix-to-postfix-2",
  "name": "Infix to Postfix 2",
  "categories": [
    "conversions"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "conversions/infix_to_postfix2.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/conversions/infix_to_postfix2.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief [Infix to Postfix converter](https://www.includehelp.com/c/infix-to-postfix-conversion-using-stack-with-c-program.aspx) implementation\n * @details\n * The input infix expression is of type string upto 24 characters.\n * Supported operations- &#x27;+&#x27;, &#x27;-&#x27;, &#x27;/&#x27;, &#x27;*&#x27;, &#x27;%&#x27;\n * @author [Kumar Yash](https://github.com/kumaryash18)\n * @see infix_to_postfix.c\n */</span>\n \n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span>\t<span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span>\t<span class=\"hljs-comment\">/// for strlen(), strcmp()</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctype.h&gt;</span>\t<span class=\"hljs-comment\">/// for isalnum()</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span>\t<span class=\"hljs-comment\">/// for exit()</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdint.h&gt;</span>\t<span class=\"hljs-comment\">/// for uint16_t, int16_t</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span>\t<span class=\"hljs-comment\">/// for assert</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief array implementation of stack using structure\n */</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Stack</span> {</span>\n\t<span class=\"hljs-type\">char</span> <span class=\"hljs-built_in\">stack</span>[<span class=\"hljs-number\">10</span>];\t\t<span class=\"hljs-comment\">///&lt; array stack</span>\n\t<span class=\"hljs-type\">int</span> top;\t\t<span class=\"hljs-comment\">///&lt; stores index of the top element</span>\n};\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Stack</span> <span class=\"hljs-title\">st</span>;</span>\t\t<span class=\"hljs-comment\">///&lt; global declaration of stack st</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Function to push on the stack\n * @param opd character to be pushed in the stack\n * @returns void\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> opd)</span> {\n\t<span class=\"hljs-keyword\">if</span>(st.top == <span class=\"hljs-number\">9</span>)\t{\t\t<span class=\"hljs-comment\">// overflow condition</span>\n\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Stack overflow...&quot;</span>);\n\t\t<span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);\n\t}\n\tst.top++;\n\tst.<span class=\"hljs-built_in\">stack</span>[st.top] = opd;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Function to pop from the stack\n * @returns popped character\n */</span>\n<span class=\"hljs-type\">char</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">()</span> {\n\t<span class=\"hljs-type\">char</span> item;\t\t\t\t<span class=\"hljs-comment\">///&lt; to store the popped value to be returned</span>\n\t<span class=\"hljs-keyword\">if</span>(st.top == <span class=\"hljs-number\">-1</span>) {\t\t<span class=\"hljs-comment\">// underflow condition</span>\n\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Stack underflow...&quot;</span>);\n\t\t<span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);\n\t}\n\titem = st.<span class=\"hljs-built_in\">stack</span>[st.top];\n\tst.top--;\n\t<span class=\"hljs-keyword\">return</span> item;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Function to check whether the stack is empty or not\n * @returns 1 if the stack IS empty\n * @returns 0 if the stack is NOT empty\n */</span>\n<span class=\"hljs-type\">uint16_t</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\n\t<span class=\"hljs-keyword\">if</span>(st.top == <span class=\"hljs-number\">-1</span>) {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Function to get top of the stack\n * @returns top of stack\n */</span>\n<span class=\"hljs-type\">char</span> <span class=\"hljs-title function_\">Top</span><span class=\"hljs-params\">()</span> {\n\t<span class=\"hljs-keyword\">return</span> st.<span class=\"hljs-built_in\">stack</span>[st.top];\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Function to check priority of operators\n * @param opr operator whose priority is to be checked\n * @returns 0 if operator is &#x27;+&#x27; or &#x27;-&#x27;\n * @returns 1 if operator is &#x27;/&#x27; or &#x27;*&#x27; or &#x27;%&#x27;\n * @returns -1 otherwise\n */</span>\n<span class=\"hljs-type\">int16_t</span> <span class=\"hljs-title function_\">priority</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> opr)</span> {\n\t<span class=\"hljs-keyword\">if</span>(opr == <span class=\"hljs-string\">&#x27;+&#x27;</span> || opr == <span class=\"hljs-string\">&#x27;-&#x27;</span>) {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n\t}\n\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(opr == <span class=\"hljs-string\">&#x27;/&#x27;</span> || opr == <span class=\"hljs-string\">&#x27;*&#x27;</span> || opr == <span class=\"hljs-string\">&#x27;%&#x27;</span>) {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n\t}\n\t<span class=\"hljs-keyword\">else</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n\t}\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Function to convert infix expression to postfix expression\n * @param inf the input infix expression\n * @returns output postfix expression\n */</span>\n<span class=\"hljs-type\">char</span> *<span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> inf[])</span> {\n\t<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">char</span> post[<span class=\"hljs-number\">25</span>];\t\t\t\t<span class=\"hljs-comment\">///&lt; to store the postfix expression</span>\n\t<span class=\"hljs-type\">int</span> i;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">///&lt; loop iterator</span>\n\t<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;\t\t\t\t\t\t\t<span class=\"hljs-comment\">///&lt; keeps track of end of postfix string</span>\n\t<span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">strlen</span>(inf); i++) {\n\t\t<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">isalnum</span>(inf[i]))\t{\t\t\t<span class=\"hljs-comment\">// if scanned element is an alphabet or number</span>\n\t\t\tpost[j] = inf[i];\t\t\t<span class=\"hljs-comment\">// append in postfix expression</span>\n\t\t\tj++;\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(inf[i] == <span class=\"hljs-string\">&#x27;(&#x27;</span>) {\t\t<span class=\"hljs-comment\">// if scanned element is opening parentheses</span>\n\t\t\tpush(inf[i]);\t\t\t\t<span class=\"hljs-comment\">// push on stack.</span>\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(inf[i] == <span class=\"hljs-string\">&#x27;)&#x27;</span>) {\t\t<span class=\"hljs-comment\">// if scanned element is closing parentheses,</span>\n\t\t\t<span class=\"hljs-keyword\">while</span>(Top() != <span class=\"hljs-string\">&#x27;(&#x27;</span>) {\t\t<span class=\"hljs-comment\">// pop elements from stack and append in postfix expression</span>\n\t\t\t\tpost[j] = pop();\t\t<span class=\"hljs-comment\">// until opening parentheses becomes top.</span>\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tpop();\t\t\t\t\t\t<span class=\"hljs-comment\">// pop opening parentheses</span>\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> {\t\t\t\t\t\t\t<span class=\"hljs-comment\">// if scanned element is an operator</span>\n\t\t\t<span class=\"hljs-keyword\">while</span>( (!isEmpty()) &amp;&amp; (priority(inf[i]) &lt;= priority(Top())) ) {\t<span class=\"hljs-comment\">// pop and append until stack becomes</span>\n\t\t\t\tpost[j] = pop();\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">// empty or priority of top operator</span>\n\t\t\t\tj++;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">// becomes smaller than scanned operator</span>\n\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">// &#x27;(&#x27; has priority -1</span>\n\t\t\tpush(inf[i]);\t\t\t\t<span class=\"hljs-comment\">// push the scanned operator</span>\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">while</span>(!isEmpty()) {\t\t\t\t\t<span class=\"hljs-comment\">// pop and append residual operators from stack</span>\n\t\tpost[j] = pop();\n\t\tj++;\n\t}\n\tpost[j] = <span class=\"hljs-string\">&#x27;\\0&#x27;</span>;\t\t\t\t\t\t<span class=\"hljs-comment\">// end postfix string with null character</span>\n\t<span class=\"hljs-keyword\">return</span> post;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-comment\">/* check sample test case\n\t   input- &quot;(A/(B-C)*D+E)&quot;\n\t   expected output- &quot;ABC-/D*E+&quot;\n\t */</span>\n\tassert(<span class=\"hljs-built_in\">strcmp</span>(convert(<span class=\"hljs-string\">&quot;(A/(B-C)*D+E)&quot;</span>), <span class=\"hljs-string\">&quot;ABC-/D*E+&quot;</span>) == <span class=\"hljs-number\">0</span>); \t\t\t<span class=\"hljs-comment\">/// this ensures that the algorithm works as expected</span>\n\t<span class=\"hljs-comment\">/* input- &quot;7-(2*3+5)*(8-4/2)&quot;\n\t   expected output- &quot;723*5+842/-*-&quot;\n\t */</span>\n\tassert(<span class=\"hljs-built_in\">strcmp</span>(convert(<span class=\"hljs-string\">&quot;7-(2*3+5)*(8-4/2)&quot;</span>), <span class=\"hljs-string\">&quot;723*5+842/-*-&quot;</span>) == <span class=\"hljs-number\">0</span>); \t\t\t<span class=\"hljs-comment\">/// this ensures that the algorithm works as expected</span>\n\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;All tests have successfully passed!\\n&quot;</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {\n\tst.top = <span class=\"hljs-number\">-1</span>;\t\t\t<span class=\"hljs-comment\">/// initialize</span>\n\ttest();\t\t\t\t<span class=\"hljs-comment\">/// run self-test implementations</span>\n\t<span class=\"hljs-type\">char</span> inf[<span class=\"hljs-number\">25</span>];\t\t\t<span class=\"hljs-comment\">///&lt; to store input infix expression</span>\n\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter infix: &quot;</span>);\n\t<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>, inf);\n\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Postfix: %s&quot;</span>, convert(inf));\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Kumar Yash",
      "email": "kumaryash1808@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}