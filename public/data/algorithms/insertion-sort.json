{
  "slug": "insertion-sort",
  "name": "Insertion Sort",
  "categories": [
    "sorts"
  ],
  "body": {
    "en": "<h4>Problem Statement</h4>\n<p>Given an array of n elements, write a function to sort the array in increasing order.</p>\n<h4>Approach</h4>\n<ul>\n<li>Define a \"key\" index, the subarray to the left of which is sorted.</li>\n<li>Initiate \"key\" as 1, ie. the second element of array(as there is only one element to left of the second element, which can be considered as sorted array with one element).</li>\n<li>If value of element at (key - 1) position is less than value of element at (key) position; increment \"key\".</li>\n<li>Else move elements of sorted subarray that are greater than value of element at \"key\" to one position ahead of their current position. Put the value of element at \"key\" in the newly created void.</li>\n</ul>\n<h4>Time Complexity</h4>\n<ul>\n<li>\n<p><code>О(n^2)</code> comparisons, <code>О(n^2)</code> swaps -- Worst Case</p>\n</li>\n<li>\n<p><code>O(n)</code> comparisons, <code>O(1)</code> swaps -- Best Case</p>\n</li>\n</ul>\n<h4>Space Complexity</h4>\n<p><code>O(1)</code> -- (No extra space needed, sorting done in place)</p>\n<h4>Example</h4>\n<pre><code class=\"hljs language-basic\">\n<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>\n\n<span class=\"hljs-keyword\">Let</span> us loop <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span> (second element of the array) <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">4</span> (Size of <span class=\"hljs-keyword\">input</span> array)\n\ni = <span class=\"hljs-number\">1</span>.\nSince <span class=\"hljs-number\">11</span> is smaller than <span class=\"hljs-number\">12</span>, move <span class=\"hljs-number\">12</span> <span class=\"hljs-keyword\">and</span> insert <span class=\"hljs-number\">11</span> before <span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>\n\ni = <span class=\"hljs-number\">2</span>.\n<span class=\"hljs-symbol\">13 </span>will <span class=\"hljs-comment\">remain at its position as all elements in sorted subarray are smaller than 13</span>\n<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>\n\ni = <span class=\"hljs-number\">3</span>.\n<span class=\"hljs-symbol\">5 </span>will move <span class=\"hljs-keyword\">to</span> the beginning,\n<span class=\"hljs-keyword\">and</span> all other elements from <span class=\"hljs-number\">11</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">13</span> will move one position ahead of their current position.\n<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">6</span>\n\ni = <span class=\"hljs-number\">4</span>.\n<span class=\"hljs-symbol\">6 </span>will move <span class=\"hljs-keyword\">to</span> position after <span class=\"hljs-number\">5</span>,\n<span class=\"hljs-keyword\">and</span> elements from <span class=\"hljs-number\">11</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">13</span> will move one position ahead of their current position.\n<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>  -- sorted array\n</code></pre>\n<h4>Code Implementation Links</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/Sorts/InsertionSort.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C/blob/master/sorting/insertion_sort.c\">C</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/sorting/insertion_sort.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Sorters/Comparison/InsertionSorter.cs\">C#</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Scala/blob/master/src/main/scala/Sort/InsertionSort.scala\">Scala</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/sorts/insertion_sort.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/sorting/insertion_sort.rb\">Ruby</a></li>\n</ul>\n<h4>Video Explanation</h4>\n<p><a href=\"https://www.youtube.com/watch?v=DFG-XuyPYUQ\">A CS50 video explaining the Insertion Search Algorithm</a></p>",
    "es": "<h4>Declaración de problema</h4>\n<p>Dada una matriz de <code>N</code> elementos, escriba una función para ordenar la matriz en orden creciente.</p>\n<h4>Enfoque</h4>\n<ul>\n<li>Definir un índice \"clave\", el subarray a la izquierda de los cuales se ordena.</li>\n<li>Iniciar \"clave\" como 1, es decir. el segundo elemento de array(ya que solo queda un elemento del segundo elemento, que se puede considerar como matriz ordenada con un elemento).</li>\n<li>Si el valor del elemento en la posición (clave - 1) es menor que el valor del elemento en la posición (clave); incremento \"clave\".</li>\n<li>De lo contrario, mueva elementos de subarray ordenados que sean mayores que el valor del elemento en \"clave\" a una posición por delante de su posición actual. Coloque el valor del elemento en \"clave\" en el vacío recién creado.</li>\n</ul>\n<h4>Complejidad temporal</h4>\n<ul>\n<li>Comparaciones <code>О(n^2)</code>, intercambia <code>О(n^2)</code> -- Peor caso</li>\n<li>Comparaciones <code>O(n)</code>, intercambia <code>O(1)</code> -- Mejor caso</li>\n</ul>\n<h4>Complejidad espacial</h4>\n<p><code>O(1)</code> -- (No se necesita espacio adicional, clasificación hecha en su lugar)</p>\n<h4>Ejemplo</h4>\n<pre><code class=\"hljs language-markdown\">\n12, 11, 13, 5, 6\n\nVamos a bucle para i = 1 (segundo elemento de la matriz) a 4 (Tamaño de la matriz de entrada)\n\ni = 1.\nDado que 11 es menor que 12, mueva 12 e inserte 11 antes de 12\n11, 12, 13, 5, 6\n\ni = 2.\n13 permanecerán en su posición, ya que todos los elementos en subarray ordenado son menores de 13\n11, 12, 13, 5, 6\n\ni = 3.\n5 se moverá al principio,\ny todos los demás elementos de 11 a 13 se moverán una posición por delante de su posición actual.\n5, 11, 12, 13, 6\n\ni = 4.\n6 se moverá a la posición después de 5,\ny los elementos del 11 al 13 se moverán una posición por delante de su posición actual.\n5, 6, 11, 12, 13 -- matriz ordenada\n</code></pre>\n<h4>Enlaces de implementación del código</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/Sorts/InsertionSort.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C/blob/master/sorting/insertion_sort.c\">C</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/sorting/insertion_sort.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Sorters/Comparison/InsertionSorter.cs\">C#</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Scala/blob/master/src/main/scala/Sort/InsertionSort.scala\">Scala</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/sorts/insertion_sort.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/sorting/insertion_sort.rb\">Ruby</a></li>\n</ul>\n<h4>Explicación de vídeo</h4>\n<p><a href=\"https://www.youtube.com/watch?v=DFG-XuyPYUQ\">Un vídeo CS50 que explica el algoritmo de Ordenamiento de inserción</a></p>"
  },
  "implementations": {
    "python": {
      "dir": "sorts/insertion_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/insertion_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nA pure Python implementation of the insertion sort algorithm\n\nThis algorithm sorts a collection by comparing adjacent elements.\nWhen it finds that order is not respected, it moves the element compared\nbackward until the order is correct.  It then goes back directly to the\nelement&#x27;s initial position resuming forward comparison.\n\nFor doctests run following command:\npython3 -m doctest -v insertion_sort.py\n\nFor manual testing run:\npython3 insertion_sort.py\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insertion_sort</span>(<span class=\"hljs-params\">collection: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;A pure Python implementation of the insertion sort algorithm\n\n    :param collection: some mutable ordered collection with heterogeneous\n    comparable items inside\n    :return: the same collection ordered by ascending\n\n    Examples:\n    &gt;&gt;&gt; insertion_sort([0, 5, 3, 2, 2])\n    [0, 2, 2, 3, 5]\n    &gt;&gt;&gt; insertion_sort([]) == sorted([])\n    True\n    &gt;&gt;&gt; insertion_sort([-2, -5, -45]) == sorted([-2, -5, -45])\n    True\n    &gt;&gt;&gt; insertion_sort([&#x27;d&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;e&#x27;, &#x27;c&#x27;]) == sorted([&#x27;d&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;e&#x27;, &#x27;c&#x27;])\n    True\n    &gt;&gt;&gt; import random\n    &gt;&gt;&gt; collection = random.sample(range(-50, 50), 100)\n    &gt;&gt;&gt; insertion_sort(collection) == sorted(collection)\n    True\n    &gt;&gt;&gt; import string\n    &gt;&gt;&gt; collection = random.choices(string.ascii_letters + string.digits, k=100)\n    &gt;&gt;&gt; insertion_sort(collection) == sorted(collection)\n    True\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">for</span> insert_index, insert_value <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(collection[<span class=\"hljs-number\">1</span>:]):\n        temp_index = insert_index\n        <span class=\"hljs-keyword\">while</span> insert_index &gt;= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> insert_value &lt; collection[insert_index]:\n            collection[insert_index + <span class=\"hljs-number\">1</span>] = collection[insert_index]\n            insert_index -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">if</span> insert_index != temp_index:\n            collection[insert_index + <span class=\"hljs-number\">1</span>] = insert_value\n    <span class=\"hljs-keyword\">return</span> collection\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\n\n    testmod()\n\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\n    unsorted = [<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{insertion_sort(unsorted) = }</span>&quot;</span>)\n"
    },
    "javascript": {
      "dir": "Sorts/InsertionSort.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts/InsertionSort.js",
      "code": "<span class=\"hljs-comment\">/* In insertion sort, we divide the initial unsorted array into two parts;\n * sorted part and unsorted part. Initially the sorted part just has one\n * element (Array of only 1 element is a sorted array). We then pick up\n * element one by one from unsorted part; insert into the sorted part at\n * the correct position and expand sorted part one element at a time.\n */</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">insertionSort</span> (unsortedList) {\n  <span class=\"hljs-keyword\">const</span> len = unsortedList.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; len; i++) {\n    <span class=\"hljs-keyword\">let</span> j\n    <span class=\"hljs-keyword\">const</span> tmp = unsortedList[i] <span class=\"hljs-comment\">// Copy of the current element.</span>\n    <span class=\"hljs-comment\">/* Check through the sorted part and compare with the number in tmp. If large, shift the number */</span>\n    <span class=\"hljs-keyword\">for</span> (j = i - <span class=\"hljs-number\">1</span>; j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; (unsortedList[j] &gt; tmp); j--) {\n      <span class=\"hljs-comment\">// Shift the number</span>\n      unsortedList[j + <span class=\"hljs-number\">1</span>] = unsortedList[j]\n    }\n    <span class=\"hljs-comment\">// Insert the copied number at the correct position</span>\n    <span class=\"hljs-comment\">// in sorted part.</span>\n    unsortedList[j + <span class=\"hljs-number\">1</span>] = tmp\n  }\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> <span class=\"hljs-variable\">insertionSortAlternativeImplementation</span>\n * <span class=\"hljs-doctag\">@description</span> InsertionSort is a stable sorting algorithm\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer[]</span>} <span class=\"hljs-variable\">array</span> - Array of integers\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">Integer[]</span>} - Sorted array\n * <span class=\"hljs-doctag\">@see</span> [InsertionSort](https://en.wikipedia.org/wiki/Quicksort)\n */</span>\n\n<span class=\"hljs-comment\">/*\n  * Big-O Analysis\n      * Time Complexity\n        - O(N^2) on average and worst case scenario\n        - O(N) on best case scenario (when input array is already almost sorted)\n      * Space Complexity\n        - O(1)\n*/</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">insertionSortAlternativeImplementation</span> (array) {\n  <span class=\"hljs-keyword\">const</span> length = array.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">if</span> (length &lt; <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> array\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; length; i++) {\n    <span class=\"hljs-comment\">// Take current element in array</span>\n    <span class=\"hljs-keyword\">const</span> currentItem = array[i]\n    <span class=\"hljs-comment\">// Take index of previous element in array</span>\n    <span class=\"hljs-keyword\">let</span> j = i - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\">// While j &gt;= 0 and previous element is greater than current element</span>\n    <span class=\"hljs-keyword\">while</span> (j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; array[j] &gt; currentItem) {\n      <span class=\"hljs-comment\">// Move previous, greater element towards the unsorted part</span>\n      array[j + <span class=\"hljs-number\">1</span>] = array[j]\n      j--\n    }\n    <span class=\"hljs-comment\">// Insert currentItem number at the correct position in sorted part.</span>\n    array[j + <span class=\"hljs-number\">1</span>] = currentItem\n  }\n  <span class=\"hljs-comment\">// Return array sorted in ascending order</span>\n  <span class=\"hljs-keyword\">return</span> array\n}\n"
    },
    "c-plus-plus": {
      "dir": "sorting/insertion_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/insertion_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\n *\n * \\file\n * \\brief [Insertion Sort Algorithm\n * (Insertion Sort)](https://en.wikipedia.org/wiki/Insertion_sort)\n *\n * \\details\n * Insertion sort is a simple sorting algorithm that builds the final\n * sorted array one at a time. It is much less efficient compared to\n * other sorting algorithms like heap sort, merge sort or quick sort.\n * However it has several advantages such as\n * 1. Easy to implement\n * 2. For small set of data it is quite efficient\n * 3. More efficient that other Quadratic complexity algorithms like\n *    Selection sort or bubble sort.\n * 4. It&#x27;s stable that is it does not change the relative order of\n *    elements with equal keys\n * 5. Works on hand means it can sort the array or list as it receives.\n *\n * It is based on the same idea that people use to sort the playing cards in\n * their hands.\n * the algorithms goes in the manner that we start iterating over the array\n * of elements as soon as we find a unsorted element that is a misplaced\n * element we place it at a sorted position.\n *\n * Example execution steps:\n * 1. Suppose initially we have\n * \\f{bmatrix}{4 &amp;3 &amp;2 &amp;5 &amp;1\\f}\n * 2. We start traversing from 4 till we reach 1\n * when we reach at 3 we find that it is misplaced so we take 3 and place\n * it at a correct position thus the array will become\n * \\f{bmatrix}{3 &amp;4 &amp;2 &amp;5 &amp;1\\f}\n * 3. In the next iteration we are at 2 we find that this is also misplaced so\n * we place it at the correct sorted position thus the array in this iteration\n * becomes\n * \\f{bmatrix}{2 &amp;3 &amp;4 &amp;5 &amp;1\\f}\n * 4. We do not do anything with 5 and move on to the next iteration and\n * select 1 which is misplaced and place it at correct position. Thus, we have\n * \\f{bmatrix}{1 &amp;2 &amp;3 &amp;4 &amp;5\\f}\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-comment\">/** \\namespace sorting\n * \\brief Sorting algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> sorting {\n<span class=\"hljs-comment\">/** \\brief\n * Insertion Sort Function\n *\n * @tparam T type of array\n * @param [in,out] arr Array to be sorted\n * @param n Size of Array\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insertionSort</span><span class=\"hljs-params\">(T *arr, <span class=\"hljs-type\">int</span> n)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; i++) {\n        T temp = arr[i];\n        <span class=\"hljs-type\">int</span> j = i - <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">while</span> (j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; temp &lt; arr[j]) {\n            arr[j + <span class=\"hljs-number\">1</span>] = arr[j];\n            j--;\n        }\n        arr[j + <span class=\"hljs-number\">1</span>] = temp;\n    }\n}\n\n<span class=\"hljs-comment\">/** Insertion Sort Function\n *\n * @tparam T type of array\n * @param [in,out] arr pointer to array to be sorted\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insertionSort</span><span class=\"hljs-params\">(std::vector&lt;T&gt; *arr)</span> </span>{\n    <span class=\"hljs-type\">size_t</span> n = arr-&gt;<span class=\"hljs-built_in\">size</span>();\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; i++) {\n        T temp = arr[<span class=\"hljs-number\">0</span>][i];\n        <span class=\"hljs-type\">int32_t</span> j = i - <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">while</span> (j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; temp &lt; arr[<span class=\"hljs-number\">0</span>][j]) {\n            arr[<span class=\"hljs-number\">0</span>][j + <span class=\"hljs-number\">1</span>] = arr[<span class=\"hljs-number\">0</span>][j];\n            j--;\n        }\n        arr[<span class=\"hljs-number\">0</span>][j + <span class=\"hljs-number\">1</span>] = temp;\n    }\n}\n\n}  <span class=\"hljs-comment\">// namespace sorting</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Create a random array objecthelper function to create a random array\n *\n * @tparam T type of array\n * @param arr array to fill (must be pre-allocated)\n * @param N number of array elements\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">create_random_array</span><span class=\"hljs-params\">(T *arr, <span class=\"hljs-type\">int</span> N)</span> </span>{\n    <span class=\"hljs-keyword\">while</span> (N--) {\n        <span class=\"hljs-type\">double</span> r = (std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">10000</span> - <span class=\"hljs-number\">5000</span>) / <span class=\"hljs-number\">100.f</span>;\n        arr[N] = <span class=\"hljs-built_in\">static_cast</span>&lt;T&gt;(r);\n    }\n}\n\n<span class=\"hljs-comment\">/** Test Cases to test algorithm */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">tests</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> arr1[<span class=\"hljs-number\">10</span>] = {<span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1... &quot;</span>;\n    sorting::<span class=\"hljs-built_in\">insertionSort</span>(arr1, <span class=\"hljs-number\">10</span>);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(arr1, arr1 + <span class=\"hljs-number\">10</span>));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">int</span> arr2[<span class=\"hljs-number\">5</span>] = {<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">-3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">1</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2... &quot;</span>;\n    sorting::<span class=\"hljs-built_in\">insertionSort</span>(arr2, <span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(arr2, arr2 + <span class=\"hljs-number\">5</span>));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">float</span> arr3[<span class=\"hljs-number\">5</span>] = {<span class=\"hljs-number\">5.6</span>, <span class=\"hljs-number\">-3.1</span>, <span class=\"hljs-number\">-3.0</span>, <span class=\"hljs-number\">-2.1</span>, <span class=\"hljs-number\">1.8</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 3... &quot;</span>;\n    sorting::<span class=\"hljs-built_in\">insertionSort</span>(arr3, <span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(arr3, arr3 + <span class=\"hljs-number\">5</span>));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-title\">arr4</span><span class=\"hljs-params\">({<span class=\"hljs-number\">5.6</span>, <span class=\"hljs-number\">-3.1</span>, <span class=\"hljs-number\">-3.0</span>, <span class=\"hljs-number\">-2.1</span>, <span class=\"hljs-number\">1.8</span>})</span></span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 4... &quot;</span>;\n    sorting::<span class=\"hljs-built_in\">insertionSort</span>(&amp;arr4);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(arr4), std::<span class=\"hljs-built_in\">end</span>(arr4)));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">int</span> arr5[<span class=\"hljs-number\">50</span>];\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 5... &quot;</span>;\n    <span class=\"hljs-built_in\">create_random_array</span>(arr5, <span class=\"hljs-number\">50</span>);\n    sorting::<span class=\"hljs-built_in\">insertionSort</span>(arr5, <span class=\"hljs-number\">50</span>);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(arr5, arr5 + <span class=\"hljs-number\">50</span>));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">float</span> arr6[<span class=\"hljs-number\">50</span>];\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 6... &quot;</span>;\n    <span class=\"hljs-built_in\">create_random_array</span>(arr6, <span class=\"hljs-number\">50</span>);\n    sorting::<span class=\"hljs-built_in\">insertionSort</span>(arr6, <span class=\"hljs-number\">50</span>);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(arr6, arr6 + <span class=\"hljs-number\">50</span>));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/** Main Function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">/// Running predefined tests to test algorithm</span>\n    <span class=\"hljs-built_in\">tests</span>();\n\n    <span class=\"hljs-comment\">/// For user insteraction</span>\n    <span class=\"hljs-type\">size_t</span> n;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the length of your array (0 to exit): &quot;</span>;\n    std::cin &gt;&gt; n;\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-type\">int</span> *arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[n];\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter any &quot;</span> &lt;&lt; n &lt;&lt; <span class=\"hljs-string\">&quot; Numbers for Unsorted Array : &quot;</span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        std::cin &gt;&gt; arr[i];\n    }\n\n    sorting::<span class=\"hljs-built_in\">insertionSort</span>(arr, n);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nSorted Array : &quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        std::cout &lt;&lt; arr[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    }\n\n    std::cout &lt;&lt; std::endl;\n    <span class=\"hljs-keyword\">delete</span>[] arr;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/sorts/InsertionSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/sorts/InsertionSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> com.thealgorithms.sorts.SortUtils.less;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> com.thealgorithms.sorts.SortUtils.print;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">InsertionSort</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SortAlgorithm</span> {\n\n    <span class=\"hljs-comment\">/**\n     * Generic insertion sort algorithm in increasing order.\n     *\n     * <span class=\"hljs-doctag\">@param</span> array the array to be sorted.\n     * <span class=\"hljs-doctag\">@param</span> &lt;T&gt; the class of array.\n     * <span class=\"hljs-doctag\">@return</span> sorted array.\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; T[] sort(T[] array) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; array.length; i++) {\n            <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">insertValue</span> <span class=\"hljs-operator\">=</span> array[i];\n            <span class=\"hljs-type\">int</span> j;\n            <span class=\"hljs-keyword\">for</span> (j = i - <span class=\"hljs-number\">1</span>; j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; less(insertValue, array[j]); j--) {\n                array[j + <span class=\"hljs-number\">1</span>] = array[j];\n            }\n            <span class=\"hljs-keyword\">if</span> (j != i - <span class=\"hljs-number\">1</span>) {\n                array[j + <span class=\"hljs-number\">1</span>] = insertValue;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> array;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Driver Code\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        Integer[] integers = {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">231</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">12</span>};\n        <span class=\"hljs-type\">InsertionSort</span> <span class=\"hljs-variable\">sort</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InsertionSort</span>();\n        sort.sort(integers);\n        print(integers);\n        <span class=\"hljs-comment\">/* [1, 4, 6, 9, 12, 23, 54, 78, 231] */</span>\n\n        String[] strings = {<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>};\n        sort.sort(strings);\n        print(strings);\n        <span class=\"hljs-comment\">/* [a, b, c, d, e] */</span>\n    }\n}\n"
    },
    "c": {
      "dir": "sorting/insertion_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/insertion_sort.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief [Insertion sort](https://en.wikipedia.org/wiki/Insertion_sort)\n * algorithm implementation.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * Insertion sort algorithm implements\n * @param arr array to be sorted\n * @param size size of array\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">insertionSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> size)</span>\n{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; size; i++)\n    {\n        <span class=\"hljs-type\">int</span> j = i - <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-type\">int</span> key = arr[i];\n        <span class=\"hljs-comment\">/* Move all elements greater than key to one position */</span>\n        <span class=\"hljs-keyword\">while</span> (j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; key &lt; arr[j])\n        {\n            arr[j + <span class=\"hljs-number\">1</span>] = arr[j];\n            j = j - <span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-comment\">/* Find a correct position for key */</span>\n        arr[j + <span class=\"hljs-number\">1</span>] = key;\n    }\n}\n\n<span class=\"hljs-comment\">/** Test function\n  * @returns None\n  */</span>\n<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> size = rand() % <span class=\"hljs-number\">500</span>; <span class=\"hljs-comment\">/* random array size */</span>\n    <span class=\"hljs-type\">int</span> *arr = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">calloc</span>(size, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\n\n    <span class=\"hljs-comment\">/* generate size random numbers from -50 to 49 */</span>  \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++)\n    {\n        arr[i] = (rand() % <span class=\"hljs-number\">100</span>) - <span class=\"hljs-number\">50</span>; <span class=\"hljs-comment\">/* signed random numbers */</span>\n    }\n    insertionSort(arr, size);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size - <span class=\"hljs-number\">1</span>; ++i)\n    {\n        assert(arr[i] &lt;= arr[i + <span class=\"hljs-number\">1</span>]);\n    }\n    <span class=\"hljs-built_in\">free</span>(arr);\n}\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *argv[])</span>\n{\n    <span class=\"hljs-comment\">/* Intializes random number generator */</span>\n    srand(time(<span class=\"hljs-literal\">NULL</span>));\n    test();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "haskell": {
      "dir": "src/Sorts/InsertionSort.hs",
      "url": "https://github.com/TheAlgorithms/haskell/tree/master/src/Sorts/InsertionSort.hs",
      "code": "<span class=\"hljs-keyword\">module</span> Sorts.InsertionSort <span class=\"hljs-keyword\">where</span>\n\n<span class=\"hljs-title\">listToSort</span> = [<span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">20</span>]\n\n<span class=\"hljs-title\">insertionSort</span>:: (<span class=\"hljs-type\">Ord</span> a) =&gt; [a] -&gt; [a]\n<span class=\"hljs-title\">insertionSort</span> [] = [] <span class=\"hljs-comment\">-- Empty list is empty</span>\n<span class=\"hljs-title\">insertionSort</span> [x] = [x] <span class=\"hljs-comment\">-- Singleton lists are trivially sorted.</span>\n<span class=\"hljs-title\">insertionSort</span> (x:xs) = insert x (insertionSort xs)\n\n<span class=\"hljs-comment\">-- Assumes that the second argument is an alread-sorted list,</span>\n<span class=\"hljs-comment\">-- and inserts the first argument in the appropriate position</span>\n<span class=\"hljs-title\">insert</span> :: (<span class=\"hljs-type\">Ord</span> a) =&gt; a -&gt; [a] -&gt; [a]\n<span class=\"hljs-title\">insert</span> x [] = [x]\n<span class=\"hljs-title\">insert</span> x lst@(y:ys) = <span class=\"hljs-keyword\">if</span> x &lt;= y <span class=\"hljs-keyword\">then</span> x:lst <span class=\"hljs-keyword\">else</span> y:(insert x ys)\n\n\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\n    putStrLn $ <span class=\"hljs-string\">&quot;Unsorted: &quot;</span> ++ show listToSort\n    putStrLn $ <span class=\"hljs-string\">&quot;Sorted: &quot;</span> ++ show (insertionSort listToSort)\n"
    },
    "f-sharp": {
      "dir": "Algorithms/Sort/Insertion_Sort.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms/Sort/Insertion_Sort.fs",
      "code": "﻿<span class=\"hljs-keyword\">namespace</span> Algorithms.Sort\n\n<span class=\"hljs-keyword\">module</span> InsertionSort <span class=\"hljs-operator\">=</span>\n    <span class=\"hljs-keyword\">let</span> Sort list<span class=\"hljs-operator\">:</span> <span class=\"hljs-symbol\">&#x27;T</span> [] <span class=\"hljs-operator\">=</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> list <span class=\"hljs-operator\">=</span> list <span class=\"hljs-operator\">|&gt;</span> Array.copy\n        <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">..</span> list.Length <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\n            <span class=\"hljs-keyword\">let</span> item <span class=\"hljs-operator\">=</span> list.[index]\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> j <span class=\"hljs-operator\">=</span> index\n            <span class=\"hljs-keyword\">while</span> j <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">&amp;&amp;</span> list.[j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>] <span class=\"hljs-operator\">&gt;</span> item <span class=\"hljs-keyword\">do</span>\n                list.[j] <span class=\"hljs-operator\">&lt;-</span> list.[j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>]\n                j <span class=\"hljs-operator\">&lt;-</span> j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>\n            list.[j] <span class=\"hljs-operator\">&lt;-</span> item\n        list\n"
    },
    "go": {
      "dir": "sort/insertionsort.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/sort/insertionsort.go",
      "code": "<span class=\"hljs-keyword\">package</span> sort\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;github.com/TheAlgorithms/Go/constraints&quot;</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Insertion</span>[<span class=\"hljs-title\">T</span> <span class=\"hljs-title\">constraints</span>.<span class=\"hljs-title\">Ordered</span>]<span class=\"hljs-params\">(arr []T)</span></span> []T {\n\t<span class=\"hljs-keyword\">for</span> currentIndex := <span class=\"hljs-number\">1</span>; currentIndex &lt; <span class=\"hljs-built_in\">len</span>(arr); currentIndex++ {\n\t\ttemporary := arr[currentIndex]\n\t\titerator := currentIndex\n\t\t<span class=\"hljs-keyword\">for</span> ; iterator &gt; <span class=\"hljs-number\">0</span> &amp;&amp; arr[iterator<span class=\"hljs-number\">-1</span>] &gt; temporary; iterator-- {\n\t\t\tarr[iterator] = arr[iterator<span class=\"hljs-number\">-1</span>]\n\t\t}\n\t\tarr[iterator] = temporary\n\t}\n\t<span class=\"hljs-keyword\">return</span> arr\n}\n"
    },
    "rust": {
      "dir": "src/sorting/insertion_sort.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/sorting/insertion_sort.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::cmp;\n\n<span class=\"hljs-comment\">/// Sorts a mutable slice using in-place insertion sort algorithm.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Time complexity is `O(n^2)`, where `n` is the number of elements.</span>\n<span class=\"hljs-comment\">/// Space complexity is `O(1)` as it sorts elements in-place.</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insertion_sort</span>&lt;T&gt;(arr: &amp;<span class=\"hljs-keyword\">mut</span> [T])\n<span class=\"hljs-keyword\">where</span>\n    T: cmp::<span class=\"hljs-built_in\">PartialOrd</span> + <span class=\"hljs-built_in\">Copy</span>,\n{\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..arr.<span class=\"hljs-title function_ invoke__\">len</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">cur</span> = arr[i];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">j</span> = i - <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">while</span> arr[j] &gt; cur {\n            arr.<span class=\"hljs-title function_ invoke__\">swap</span>(j + <span class=\"hljs-number\">1</span>, j);\n            <span class=\"hljs-keyword\">if</span> j == <span class=\"hljs-number\">0</span> {\n                <span class=\"hljs-keyword\">break</span>;\n            }\n            j -= <span class=\"hljs-number\">1</span>;\n        }\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::super::is_sorted;\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr</span>: [<span class=\"hljs-type\">u8</span>; <span class=\"hljs-number\">0</span>] = [];\n        <span class=\"hljs-title function_ invoke__\">insertion_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr);\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;arr));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">one_element</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr</span>: [<span class=\"hljs-type\">char</span>; <span class=\"hljs-number\">1</span>] = [<span class=\"hljs-string\">&#x27;a&#x27;</span>];\n        <span class=\"hljs-title function_ invoke__\">insertion_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr);\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;arr));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">already_sorted</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr</span>: [&amp;<span class=\"hljs-type\">str</span>; <span class=\"hljs-number\">3</span>] = [<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>];\n        <span class=\"hljs-title function_ invoke__\">insertion_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr);\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;arr));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">basic</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr</span>: [&amp;<span class=\"hljs-type\">str</span>; <span class=\"hljs-number\">4</span>] = [<span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>];\n        <span class=\"hljs-title function_ invoke__\">insertion_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr);\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;arr));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">odd_number_of_elements</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr</span>: <span class=\"hljs-type\">Vec</span>&lt;&amp;<span class=\"hljs-type\">str</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>];\n        <span class=\"hljs-title function_ invoke__\">insertion_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr);\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;arr));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">repeated_elements</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">542</span>, <span class=\"hljs-number\">542</span>, <span class=\"hljs-number\">542</span>, <span class=\"hljs-number\">542</span>];\n        <span class=\"hljs-title function_ invoke__\">insertion_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr);\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;arr));\n    }\n}\n"
    },
    "aarch64_assembly": {
      "dir": "sorters/insertion_sort.s",
      "url": "https://github.com/TheAlgorithms/aarch64_assembly/tree/master/sorters/insertion_sort.s",
      "code": "<span class=\"hljs-comment\">/* ARM assembly AARCH64 Raspberry PI 3B */</span>\n<span class=\"hljs-comment\">/*  program insertionSort64.s  */</span>\n \n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* Constantes file                         */</span>\n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeConstantesARM64.inc&quot;</span>\n \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* Initialized data              */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.data</span>\n<span class=\"hljs-symbol\">szMessSortOk:</span>       <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table sorted.\\n&quot;</span>\n<span class=\"hljs-symbol\">szMessSortNok:</span>      <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table not sorted !!!!!.\\n&quot;</span>\n<span class=\"hljs-symbol\">sMessResult:</span>        <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Value  : @ \\n&quot;</span>\n<span class=\"hljs-symbol\">szCarriageReturn:</span>   <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;\\n&quot;</span>\n \n<span class=\"hljs-symbol\">.align</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-comment\">#TableNumber:      .quad   1,3,6,2,5,9,10,8,4,7</span>\n<span class=\"hljs-symbol\">TableNumber:</span>     .quad   <span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">6</span>,-<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>\n                 <span class=\"hljs-meta\">.equ</span> NBELEMENTS, (. - TableNumber) / <span class=\"hljs-number\">8</span> \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* UnInitialized data            */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.bss</span>\n<span class=\"hljs-symbol\">sZoneConv:</span>       <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">24</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/*  code section                 */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.text</span>\n<span class=\"hljs-symbol\">.global</span> main \n<span class=\"hljs-symbol\">main:</span>                                              <span class=\"hljs-comment\">// entry of program </span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-number\">0</span>                                       <span class=\"hljs-comment\">// first element</span>\n    <span class=\"hljs-keyword\">mov</span> x2,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\n    <span class=\"hljs-keyword\">bl</span> insertionSort\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">bl</span> displayTable\n \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">mov</span> x1,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\n    <span class=\"hljs-keyword\">bl</span> isSorted                                    <span class=\"hljs-comment\">// control sort</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">1</span>                                       <span class=\"hljs-comment\">// sorted ?</span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">1</span>f                                    \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortNok                       <span class=\"hljs-comment\">// no !! error sort</span>\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\n<span class=\"hljs-number\">1</span>:                                                 <span class=\"hljs-comment\">// yes</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortOk\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n<span class=\"hljs-number\">100</span>:                                               <span class=\"hljs-comment\">// standard end of the program </span>\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                                       <span class=\"hljs-comment\">// return code</span>\n    <span class=\"hljs-keyword\">mov</span> x8,EXIT                                    <span class=\"hljs-comment\">// request to exit program</span>\n    <span class=\"hljs-keyword\">svc</span> <span class=\"hljs-number\">0</span>                                          <span class=\"hljs-comment\">// perform the system call</span>\n \n<span class=\"hljs-symbol\">qAdrsZoneConv:</span>            .quad sZoneConv\n<span class=\"hljs-symbol\">qAdrszCarriageReturn:</span>     .quad szCarriageReturn\n<span class=\"hljs-symbol\">qAdrsMessResult:</span>          .quad sMessResult\n<span class=\"hljs-symbol\">qAdrTableNumber:</span>          .quad TableNumber\n<span class=\"hljs-symbol\">qAdrszMessSortOk:</span>         .quad szMessSortOk\n<span class=\"hljs-symbol\">qAdrszMessSortNok:</span>        .quad szMessSortNok\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*     control sorted table                                   */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains the number of elements  &gt; 0  */</span>\n<span class=\"hljs-comment\">/* x0 return 0  if not sorted   1  if sorted */</span>\n<span class=\"hljs-symbol\">isSorted:</span>\n    stp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!             <span class=\"hljs-comment\">// save  registers</span>\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!             <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">ldr</span> x4,[x0,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">cmp</span> x2,x1\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">99</span>f\n    <span class=\"hljs-keyword\">ldr</span> x3,[x0,x2, <span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">cmp</span> x3,x4\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">98</span>f\n    <span class=\"hljs-keyword\">mov</span> x4,x3\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b\n<span class=\"hljs-number\">98</span>:\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                       <span class=\"hljs-comment\">// not sorted</span>\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\n<span class=\"hljs-number\">99</span>:\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">1</span>                       <span class=\"hljs-comment\">// sorted</span>\n<span class=\"hljs-number\">100</span>:\n    ldp x3,x4,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*         insertion sort                                              */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains the first element    */</span>\n<span class=\"hljs-comment\">/* x2 contains the number of element */</span>\n<span class=\"hljs-symbol\">insertionSort:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\n    stp x4,x5,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\n    stp x6,x7,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">add</span> x3,x1,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// index i</span>\n<span class=\"hljs-number\">1</span>:                             <span class=\"hljs-comment\">// start loop 1</span>\n    <span class=\"hljs-keyword\">ldr</span> x4,[x0,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// load value A[i]</span>\n    <span class=\"hljs-keyword\">sub</span> x5,x3,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// index j</span>\n<span class=\"hljs-number\">2</span>:                             <span class=\"hljs-comment\">// start loop 2</span>\n    <span class=\"hljs-keyword\">ldr</span> x6,[x0,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// load value A[j]</span>\n    <span class=\"hljs-keyword\">cmp</span> x6,x4                  <span class=\"hljs-comment\">// compare value</span>\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">3</span>f \n    <span class=\"hljs-keyword\">add</span> x5,x5,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// increment index j</span>\n    <span class=\"hljs-keyword\">str</span> x6,[x0,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// store value A[j+1}</span>\n    <span class=\"hljs-keyword\">sub</span> x5,x5,<span class=\"hljs-number\">2</span>                <span class=\"hljs-comment\">// j = j - 1</span>\n    <span class=\"hljs-keyword\">cmp</span> x5,x1                  <span class=\"hljs-comment\">// compare first element</span>\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">2</span>b                     <span class=\"hljs-comment\">// loop 2</span>\n<span class=\"hljs-number\">3</span>:\n    <span class=\"hljs-keyword\">add</span> x5,x5,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// increment index j</span>\n    <span class=\"hljs-keyword\">str</span> x4,[x0,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// store value A[i}</span>\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// increment index i</span>\n    <span class=\"hljs-keyword\">cmp</span> x3,x2                  <span class=\"hljs-comment\">// end ?</span>\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">1</span>b                     <span class=\"hljs-comment\">// loop 1</span>\n \n<span class=\"hljs-number\">100</span>:\n    ldp x6,x7,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x4,x5,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                        <span class=\"hljs-comment\">// return to address lr x30</span>\n \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*      Display table elements                                */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-symbol\">displayTable:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x2,x0                        <span class=\"hljs-comment\">// table address</span>\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">1</span>:                                   <span class=\"hljs-comment\">// loop display table</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,[x2,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\n    <span class=\"hljs-keyword\">bl</span> conversion10S                  <span class=\"hljs-comment\">// décimal conversion</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrsMessResult\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\n    <span class=\"hljs-keyword\">bl</span> strInsertAtCharInc            <span class=\"hljs-comment\">// insert result at @ character</span>\n    <span class=\"hljs-keyword\">bl</span> affichageMess                 <span class=\"hljs-comment\">// display message</span>\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">cmp</span> x3,NBELEMENTS - <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">1</span>b\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszCarriageReturn\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n    <span class=\"hljs-keyword\">mov</span> x0,x2\n<span class=\"hljs-number\">100</span>:\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                             <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/*        File Include fonctions                        */</span>\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeARM64.inc&quot;</span>\n"
    },
    "r": {
      "dir": "Sorting-Algorithms/insertion_sort.R",
      "url": "https://github.com/TheAlgorithms/r/tree/master/Sorting-Algorithms/insertion_sort.R",
      "code": "<span class=\"hljs-comment\"># Insertion sort in R:</span>\n\ninsertion.sort <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span> \n  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-punctuation\">(</span>j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">2</span><span class=\"hljs-operator\">:</span><span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n    key <span class=\"hljs-operator\">=</span> elements.vec<span class=\"hljs-punctuation\">[</span>j<span class=\"hljs-punctuation\">]</span> \n    i <span class=\"hljs-operator\">=</span> j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-punctuation\">(</span>i <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">&amp;&amp;</span> elements.vec<span class=\"hljs-punctuation\">[</span>i<span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">&gt;</span> key<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n      elements.vec<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">(</span>i <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">=</span> elements.vec<span class=\"hljs-punctuation\">[</span>i<span class=\"hljs-punctuation\">]</span>\n      i <span class=\"hljs-operator\">=</span> i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-punctuation\">}</span>\n    elements.vec<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">(</span>i <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">=</span> key\n  <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span>\n<span class=\"hljs-punctuation\">}</span>\n\n<span class=\"hljs-comment\"># Example:</span>\n<span class=\"hljs-comment\"># insertion.sort(c(5, 2, 3, 1, 4))</span>\n<span class=\"hljs-comment\"># [1] 1 2 3 4 5</span>\n"
    },
    "ruby": {
      "dir": "sorting/insertion_sort.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/sorting/insertion_sort.rb",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insertion_sort</span>(<span class=\"hljs-params\">array</span>)\n  <span class=\"hljs-number\">0</span>.upto(array.length - <span class=\"hljs-number\">1</span>).each <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">index</span>|\n    element = array[index]\n    position = index\n    <span class=\"hljs-keyword\">while</span> element &lt; array[position - <span class=\"hljs-number\">1</span>] &amp;&amp; position &gt; <span class=\"hljs-number\">0</span>\n      array[position] = array[position - <span class=\"hljs-number\">1</span>]\n      array[position - <span class=\"hljs-number\">1</span>] = element\n      position -= <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n  array\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">$0</span> == <span class=\"hljs-variable constant_\">__FILE__</span>\n  puts <span class=\"hljs-string\">&#x27;Enter a list of numbers separated by space&#x27;</span>\n\n  list = gets.split.map(&amp;<span class=\"hljs-symbol\">:to_i</span>)\n  p insertion_sort(list)\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "php": {
      "dir": "sorting/insertionSort.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/sorting/insertionSort.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-comment\">//works perfectly if your array nearly sorted</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">insertionSort</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$array</span></span>)</span>{\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span>=<span class=\"hljs-number\">1</span>;<span class=\"hljs-variable\">$i</span>&lt;<span class=\"hljs-title function_ invoke__\">count</span>(<span class=\"hljs-variable\">$array</span>);<span class=\"hljs-variable\">$i</span>++){\n        <span class=\"hljs-variable\">$currentVal</span>=<span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$i</span>];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$j</span>=<span class=\"hljs-variable\">$i</span>-<span class=\"hljs-number\">1</span>;<span class=\"hljs-variable\">$j</span>&gt;=<span class=\"hljs-number\">0</span>&amp;&amp;<span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$j</span>]&gt;<span class=\"hljs-variable\">$currentVal</span>;<span class=\"hljs-variable\">$j</span>--){\n          <span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$j</span>+<span class=\"hljs-number\">1</span>]=<span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$j</span>];\n        }\n        <span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$j</span>+<span class=\"hljs-number\">1</span>]=<span class=\"hljs-variable\">$currentVal</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$array</span>;\n}\n\n\n"
    },
    "elixir": {
      "dir": "lib/sorting/insertion_sort.ex",
      "url": "https://github.com/TheAlgorithms/elixir/tree/master/lib/sorting/insertion_sort.ex",
      "code": "<span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">Algorithms.Sorting.InsertionSort</span></span> <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-variable\">@moduledoc</span> <span class=\"hljs-string\">&quot;&quot;&quot;\n  Implementation of InsertionSort algorithm (https://en.wikipedia.org/wiki/Insertion_sort)\n\n  You will be given an array of numbers, you have to sort numbers in ascending order\n  using insertion sort algorithm.\n\n  Insertion sort iterates, consuming one input element each repetition,\n  and grows a sorted output list. At each iteration, insertion sort removes one\n  element from the input data, finds the location it belongs within the sorted list,\n  and inserts it there. It repeats until no input elements remain.\n\n  Example:\n    Input: [7, 4, 5, 2]\n\n    1. [&quot;7&quot;, 4, 5]                  ------ Start\n    2. [&quot;7&quot;, &quot;4&quot;, 5] -&gt; [4, &quot;7&quot;, 5] ------ 7 &gt; 4 : Insert 7 in forward of 4\n    3. [4, &quot;7&quot;, &quot;5&quot;] -&gt; [4, 5, &quot;7&quot;] ------ 7 &gt; 5 : Insert 7 in forward of 5\n    4. [4, 5, 7]                    ------\n\n   Complexity: O(n^2)\n  &quot;&quot;&quot;</span>\n  <span class=\"hljs-keyword\">require</span> <span class=\"hljs-title class_\">Integer</span>\n\n  <span class=\"hljs-variable\">@doc</span> <span class=\"hljs-string\">&quot;&quot;&quot;\n    take a List and return the List with the numbers ordered\n  &quot;&quot;&quot;</span>\n  <span class=\"hljs-variable\">@spec</span> insertion_sort(list(<span class=\"hljs-title class_\">Integer</span>)) :: list(<span class=\"hljs-title class_\">Integer</span>)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">insertion_sort</span></span>(list) <span class=\"hljs-keyword\">do</span>\n    do_sort([], list)\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">do_sort</span></span>([], [head | tail]) <span class=\"hljs-keyword\">do</span>\n    do_sort([head], tail)\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">do_sort</span></span>(sorted_list, [head | tail]) <span class=\"hljs-keyword\">do</span>\n    insert(head, sorted_list) |&gt; do_sort(tail)\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">do_sort</span></span>(sorted_list, []) <span class=\"hljs-keyword\">do</span>\n    sorted_list\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">insert</span></span>(elem, []) <span class=\"hljs-keyword\">do</span>\n    [elem]\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">insert</span></span>(elem, sorted_list) <span class=\"hljs-keyword\">do</span>\n    [min | rest] = sorted_list\n\n    <span class=\"hljs-keyword\">if</span> min &gt;= elem <span class=\"hljs-keyword\">do</span>\n      [elem | [min | rest]]\n    <span class=\"hljs-keyword\">else</span>\n      [min | insert(elem, rest)]\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "kotlin": {
      "dir": "src/main/kotlin/sort/InsertionSort.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src/main/kotlin/sort/InsertionSort.kt",
      "code": "<span class=\"hljs-keyword\">package</span> sort\n\n<span class=\"hljs-comment\">/**\n * This method implements the Generic Insertion Sort\n *\n * <span class=\"hljs-doctag\">@param</span> array The array to be sorted\n * Sorts the array in increasing order\n *\n * Worst-case performance\tO(n^2)\n * Best-case performance\tO(n)\n * Average performance\tO(n^2)\n * Worst-case space complexity\tO(1)\n **/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-type\">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class=\"hljs-title\">insertionSort</span><span class=\"hljs-params\">(array: <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">T</span>&gt;)</span></span> {\n    <span class=\"hljs-keyword\">val</span> size = array.size - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">for</span> (i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1.</span>.size) {\n        <span class=\"hljs-keyword\">val</span> key = array[i]\n        <span class=\"hljs-keyword\">var</span> idx = i\n\n        <span class=\"hljs-keyword\">for</span> (j <span class=\"hljs-keyword\">in</span> i - <span class=\"hljs-number\">1</span> downTo <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">if</span> (array[j].compareTo(key) &gt; <span class=\"hljs-number\">0</span>) {\n                array[j + <span class=\"hljs-number\">1</span>] = array[j]\n                idx = j\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">break</span>\n            }\n        }\n\n        array[idx] = key\n    }\n}"
    },
    "scala": {
      "dir": "src/main/scala/Sort/InsertionSort.scala",
      "url": "https://github.com/TheAlgorithms/scala/tree/master/src/main/scala/Sort/InsertionSort.scala",
      "code": "<span class=\"hljs-keyword\">package</span> <span class=\"hljs-type\">Sort</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">InsertionSort</span> </span>{\n\n  <span class=\"hljs-comment\">/** @param array\n    *   - a sequence of unsorted integers\n    * @return\n    *   - sequence of sorted integers @array\n    */</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">insertionSort</span></span>(array: <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>]): <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>] = {\n\n    <span class=\"hljs-keyword\">for</span> (i &lt;- <span class=\"hljs-number\">0</span> to array.length - <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">val</span> temp: <span class=\"hljs-type\">Int</span> = array(i)\n      <span class=\"hljs-keyword\">var</span> j         = i - <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">while</span> (j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; temp &lt; array(j)) {\n        array(j + <span class=\"hljs-number\">1</span>) = array(j)\n        j -= <span class=\"hljs-number\">1</span>\n      }\n\n      array(j + <span class=\"hljs-number\">1</span>) = temp\n    }\n\n    array\n  }\n\n}\n"
    },
    "swift": {
      "dir": "sorts/InsertionSort.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/sorts/InsertionSort.swift",
      "code": "<span class=\"hljs-keyword\">import</span> Foundation\n\n<span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">insertionSort</span>&lt;<span class=\"hljs-type\">T</span>&gt;(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">array</span>: [<span class=\"hljs-type\">T</span>], <span class=\"hljs-params\">by</span> <span class=\"hljs-params\">comparison</span>: (<span class=\"hljs-type\">T</span>, <span class=\"hljs-type\">T</span>) -&gt; <span class=\"hljs-type\">Bool</span>) -&gt; [<span class=\"hljs-type\">T</span>] {\n    <span class=\"hljs-keyword\">guard</span> array.count <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-keyword\">return</span> array }\n    \n    <span class=\"hljs-keyword\">var</span> sortedArray <span class=\"hljs-operator\">=</span> array\n    \n    <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">..&lt;</span>sortedArray.count {\n        <span class=\"hljs-keyword\">var</span> currentIndex <span class=\"hljs-operator\">=</span> index\n        <span class=\"hljs-keyword\">let</span> temp <span class=\"hljs-operator\">=</span> sortedArray[currentIndex]\n        \n        <span class=\"hljs-keyword\">while</span> currentIndex <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">0</span>, comparison(temp, sortedArray[currentIndex <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>]) {\n            sortedArray[currentIndex] <span class=\"hljs-operator\">=</span> sortedArray[currentIndex <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>]\n            currentIndex <span class=\"hljs-operator\">-=</span> <span class=\"hljs-number\">1</span>\n        }\n        sortedArray[currentIndex] <span class=\"hljs-operator\">=</span> temp\n    }\n    \n    <span class=\"hljs-keyword\">return</span> sortedArray\n}\n\n<span class=\"hljs-comment\">// The code below can be used for testing</span>\n\n<span class=\"hljs-comment\">/*\nlet numbers = [10, 1, 3, 8, 4, 2]\n\nprint(insertionSort(numbers, by: &gt;))\nprint(insertionSort(numbers, by: &lt;))\n\nlet names = [&quot;Jack&quot;, &quot;Paul&quot;, &quot;Olivia&quot;, &quot;Emma&quot;, &quot;Michael&quot;]\n\nprint(insertionSort(names, by: &gt;))\nprint(insertionSort(names, by: &lt;))\n*/</span>\n"
    },
    "elm": {
      "dir": "src/Sorting/InsertionSort.elm",
      "url": "https://github.com/TheAlgorithms/elm/tree/master/src/Sorting/InsertionSort.elm",
      "code": "<span class=\"hljs-keyword\">module</span> InsertionSort <span class=\"hljs-keyword\">exposing</span> (output)\n\n<span class=\"hljs-keyword\">import</span> List <span class=\"hljs-keyword\">exposing</span> (head, singleton, tail)\n<span class=\"hljs-keyword\">import</span> Util\n\n\n<span class=\"hljs-title\">insertionSort</span> : <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span>\n<span class=\"hljs-title\">insertionSort</span> inputList =\n    <span class=\"hljs-keyword\">let</span>\n        insert : <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span>\n        insert newEle sorted =\n            <span class=\"hljs-keyword\">case</span> sorted <span class=\"hljs-keyword\">of</span>\n                [] -&gt;\n                    singleton newEle\n\n                sortedHead :: sortedTail -&gt;\n                    <span class=\"hljs-keyword\">if</span> sortedHead &lt; newEle <span class=\"hljs-keyword\">then</span>\n                        sortedHead :: insert newEle sortedTail\n\n                    <span class=\"hljs-keyword\">else</span>\n                        newEle :: sorted\n    <span class=\"hljs-keyword\">in</span>\n    <span class=\"hljs-keyword\">case</span> inputList <span class=\"hljs-keyword\">of</span>\n        [] -&gt;\n            []\n\n        head :: tail -&gt;\n            insert head &lt;| insertionSort tail\n\n\n<span class=\"hljs-title\">output</span> : <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">String</span> -&gt; <span class=\"hljs-type\">String</span>\n<span class=\"hljs-title\">output</span> args =\n    <span class=\"hljs-type\">Util</span>.sortingOutputDef args insertionSort\n"
    },
    "matlab-octave": {
      "dir": "algorithms/sorting/insertion_sort.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms/sorting/insertion_sort.m",
      "code": "<span class=\"hljs-comment\">%A MATLAB/Octave implementation of the insertion sort algorithm.</span>\n<span class=\"hljs-comment\">%The basic premise is that the program checks whether two neighbouring elements</span>\n<span class=\"hljs-comment\">%in an array are in order and sorts them. It does length(array) number of</span>\n<span class=\"hljs-comment\">% passes. For further details and pseudocode, refer to</span>\n<span class=\"hljs-comment\">%https://en.wikipedia.org/wiki/Insertion_sort</span>\n<span class=\"hljs-comment\">%Note that this function differs slightly from the pseudocode because of</span>\n<span class=\"hljs-comment\">%how MATLAB/Octave arrays start at index 1.</span>\n<span class=\"hljs-comment\">%Note: this function is for educational purposes only.</span>\n<span class=\"hljs-comment\">%You will want to use the built-in sort function for actual coding,</span>\n<span class=\"hljs-comment\">%as it is much more efficent.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">y</span> = <span class=\"hljs-title\">insertion_sort</span><span class=\"hljs-params\">(array)</span></span>\n  <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-comment\">%Assigning the length to a variable should make the program slightly faster.</span>\n  len = <span class=\"hljs-built_in\">length</span>(array);\n  <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">i</span> &lt; len + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-built_in\">j</span> = <span class=\"hljs-built_in\">i</span>;\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">j</span> &gt; <span class=\"hljs-number\">1</span> &amp;&amp; array(<span class=\"hljs-built_in\">j</span> - <span class=\"hljs-number\">1</span>) &gt; array(<span class=\"hljs-built_in\">j</span>)\n      <span class=\"hljs-comment\">%Swapping array(j - 1) and array(j)</span>\n      temp = array(<span class=\"hljs-built_in\">j</span> - <span class=\"hljs-number\">1</span>);\n      array(<span class=\"hljs-built_in\">j</span> - <span class=\"hljs-number\">1</span>) = array(<span class=\"hljs-built_in\">j</span>);\n      array(<span class=\"hljs-built_in\">j</span>) = temp;\n      <span class=\"hljs-built_in\">j</span> = <span class=\"hljs-built_in\">j</span> - <span class=\"hljs-number\">1</span>;\n    endwhile\n    <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-built_in\">i</span> + <span class=\"hljs-number\">1</span>;\n  endwhile\n  y = array;\nendfunction\n"
    },
    "julia": {
      "dir": "src/sorts/insertion_sort.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/sorts/insertion_sort.jl",
      "code": "<span class=\"hljs-keyword\">function</span> insertion_sort!(arr::<span class=\"hljs-built_in\">Vector</span>{T}) <span class=\"hljs-keyword\">where</span> {T}\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:length(arr)-<span class=\"hljs-number\">1</span>\n        temp = arr[i+<span class=\"hljs-number\">1</span>]\n        j = i\n        <span class=\"hljs-keyword\">while</span> j &gt; <span class=\"hljs-number\">0</span> &amp;&amp; arr[j] &gt; temp\n            arr[j+<span class=\"hljs-number\">1</span>] = arr[j]\n            j -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">end</span>\n        arr[j+<span class=\"hljs-number\">1</span>] = temp\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "lua": {
      "dir": "src/sorting/insertionsort.lua",
      "url": "https://github.com/TheAlgorithms/lua/tree/master/src/sorting/insertionsort.lua",
      "code": "<span class=\"hljs-comment\">--! Insertionsort has quadratic time complexity and should not be used in practice</span>\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(\n\t<span class=\"hljs-comment\">-- list to be sorted in-place</span>\n\tlist,\n\t<span class=\"hljs-comment\">-- function(a, b) -&gt; truthy value if a &lt; b</span>\n\tless_than\n)</span></span>\n\tless_than = less_than <span class=\"hljs-keyword\">or</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(a, b)</span></span>\n\t\t<span class=\"hljs-keyword\">return</span> a &lt; b\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">for</span> index = <span class=\"hljs-number\">2</span>, #list <span class=\"hljs-keyword\">do</span>\n\t\t<span class=\"hljs-keyword\">local</span> value = list[index]\n\t\t<span class=\"hljs-comment\">-- Even if a binary search was used to determine the insertion index,</span>\n\t\t<span class=\"hljs-comment\">-- time complexity would remain quadratic due to the series of swaps required for insertion</span>\n\t\t<span class=\"hljs-keyword\">local</span> insertion_index = <span class=\"hljs-number\">1</span>\n\t\t<span class=\"hljs-keyword\">while</span> less_than(list[insertion_index], value) <span class=\"hljs-keyword\">and</span> insertion_index &lt; #list <span class=\"hljs-keyword\">do</span>\n\t\t\tinsertion_index = insertion_index + <span class=\"hljs-number\">1</span>\n\t\t<span class=\"hljs-keyword\">end</span>\n\t\t<span class=\"hljs-comment\">-- Shift all elements - starting at the insertion index - up by one</span>\n\t\t<span class=\"hljs-keyword\">for</span> shift_index = index - <span class=\"hljs-number\">1</span>, insertion_index, <span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">do</span>\n\t\t\tlist[shift_index + <span class=\"hljs-number\">1</span>] = list[shift_index]\n\t\t<span class=\"hljs-keyword\">end</span>\n\t\tlist[insertion_index] = value\n\t<span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Sorters/Comparison/InsertionSorter.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/Algorithms/Sorters/Comparison/InsertionSorter.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.Comparison</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Class that implements insertion sort algorithm.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Type of array element.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">InsertionSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt; : <span class=\"hljs-title\">IComparisonSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt;\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sorts array using specified comparer,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     internal, in-place, stable,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity: O(n^2),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(1),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - array length.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Array to sort.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;comparer&quot;&gt;</span>Compares elements.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\">T[] array, IComparer&lt;T&gt; comparer</span>)</span>\n        {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.Length - <span class=\"hljs-number\">1</span>; i++)\n            {\n                <span class=\"hljs-keyword\">var</span> imin = i;\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = i + <span class=\"hljs-number\">1</span>; j &lt; array.Length; j++)\n                {\n                    <span class=\"hljs-keyword\">if</span> (comparer.Compare(array[j], array[imin]) &lt; <span class=\"hljs-number\">0</span>)\n                    {\n                        imin = j;\n                    }\n                }\n\n                <span class=\"hljs-keyword\">var</span> t = array[imin];\n                array[imin] = array[i];\n                array[i] = t;\n            }\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Lalit Umbarkar",
      "email": "MrL1605@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Matheus Muriel",
      "email": "matheus.muriel@outlook.com",
      "commits": 1
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Gustavo Tiecker",
      "email": "gustavotiecker@gmail.com",
      "commits": 1
    },
    {
      "name": "Emil Suleymanov",
      "email": "emil.suleymanov@tum.de",
      "commits": 1
    },
    {
      "name": "Christian James Welly",
      "email": "chrisjwelly@gmail.com",
      "commits": 1
    },
    {
      "name": "abdelrhman",
      "email": "mohamed95zoytak@gmail.com",
      "commits": 1
    },
    {
      "name": "Arthur Kurbidaev",
      "email": "artkurbidaev@gmail.com",
      "commits": 1
    },
    {
      "name": "Alfredo Torre",
      "email": "alfredotorre@gmail.com",
      "commits": 1
    },
    {
      "name": "khanhhuynguyenvu",
      "email": "khanhhuynguyenvu@gmail.com",
      "commits": 1
    },
    {
      "name": "Ihjass Thasbekha",
      "email": "44056715+Ihjass@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "PoolOfDeath20",
      "email": "53143214+GervinFung@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rratic",
      "email": "73381027+Rratic@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Doppon",
      "email": "zaxpkuraudo7777@gmail.com",
      "commits": 1
    },
    {
      "name": "rao4",
      "email": "rohara@raymourflanigan.com",
      "commits": 1
    },
    {
      "name": "nomisrevol",
      "email": "vdn1999bxvp@gmail.com",
      "commits": 1
    },
    {
      "name": "Jobin John",
      "email": "jobin1094@gmail.com",
      "commits": 1
    },
    {
      "name": "mattan",
      "email": "mattany@gmali.com",
      "commits": 1
    },
    {
      "name": "Connor Bottum",
      "email": "cbb692@gmail.com",
      "commits": 1
    },
    {
      "name": "zyt312074545",
      "email": "zyt312074545@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 1
    },
    {
      "name": "Mehdi ALAOUI",
      "email": "alaoui.mehdi.1995@gmail.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Mohit Sharma",
      "email": "mohit1532.cse16@chitkara.edu.in",
      "commits": 1
    },
    {
      "name": "Vaibhav Gupta",
      "email": "vaibhavgupta40@gmail.com",
      "commits": 1
    },
    {
      "name": "Emre Doğan",
      "email": "dogan.emre@metu.edu.tr",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 1
    },
    {
      "name": "KyleScharnhorst",
      "email": "scharkr1@uw.edu",
      "commits": 1
    },
    {
      "name": "Guillaume Rochedix",
      "email": "33205665+BriseBalloches@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "Coregame",
      "email": "coregameHD@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Akshay Sharma",
      "email": "akshay.sharma09695@gmail.com",
      "commits": 1
    },
    {
      "name": "yyeltsyn",
      "email": "crawler2.0@gmail.com",
      "commits": 1
    },
    {
      "name": "JakeBonek",
      "email": "jake.bonek@gmail.com",
      "commits": 1
    },
    {
      "name": "Mertcan Davulcu",
      "email": "54983926+mertcandav@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Lars Mueller",
      "email": "appgurulars@gmx.de",
      "commits": 2
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 2
    },
    {
      "name": "Erez Shomron",
      "email": "48328872+eshom@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "vzvu3k6k",
      "email": "vzvu3k6k@gmail.com",
      "commits": 2
    },
    {
      "name": "sungbin",
      "email": "21700613@handong.edu",
      "commits": 2
    },
    {
      "name": "Sudeepam",
      "email": "31586878+Sudeepam97@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Andrea Tota",
      "email": "59341503+HereBeAndre@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 3
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "ayaankhan98",
      "email": "ayaankhan98@gmail.com",
      "commits": 3
    },
    {
      "name": "varunu28",
      "email": "varun.u28@gmail.com",
      "commits": 5
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 8
    }
  ],
  "explanationUrl": {
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en/Sorting Algorithms/Insertion Sort.md",
    "es": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/es/Algoritmos de Ordenamiento/Ordenamiento de inserción.md"
  }
}