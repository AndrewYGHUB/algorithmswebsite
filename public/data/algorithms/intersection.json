{
  "slug": "intersection",
  "name": "Intersection",
  "categories": [
    "numericalanalysis"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "arithmetic_analysis/intersection.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/arithmetic_analysis/intersection.py",
      "code": "<span class=\"hljs-keyword\">import</span> math\n<span class=\"hljs-keyword\">from</span> collections.abc <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Callable</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">intersection</span>(<span class=\"hljs-params\">function: <span class=\"hljs-type\">Callable</span>[[<span class=\"hljs-built_in\">float</span>], <span class=\"hljs-built_in\">float</span>], x0: <span class=\"hljs-built_in\">float</span>, x1: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    function is the f we want to find its root\n    x0 and x1 are two random starting points\n    &gt;&gt;&gt; intersection(lambda x: x ** 3 - 1, -5, 5)\n    0.9999999999954654\n    &gt;&gt;&gt; intersection(lambda x: x ** 3 - 1, 5, 5)\n    Traceback (most recent call last):\n    ...\n    ZeroDivisionError: float division by zero, could not find root\n    &gt;&gt;&gt; intersection(lambda x: x ** 3 - 1, 100, 200)\n    1.0000000000003888\n    &gt;&gt;&gt; intersection(lambda x: x ** 2 - 4 * x + 3, 0, 2)\n    0.9999999998088019\n    &gt;&gt;&gt; intersection(lambda x: x ** 2 - 4 * x + 3, 2, 4)\n    2.9999999998088023\n    &gt;&gt;&gt; intersection(lambda x: x ** 2 - 4 * x + 3, 4, 1000)\n    3.0000000001786042\n    &gt;&gt;&gt; intersection(math.sin, -math.pi, math.pi)\n    0.0\n    &gt;&gt;&gt; intersection(math.cos, -math.pi, math.pi)\n    Traceback (most recent call last):\n    ...\n    ZeroDivisionError: float division by zero, could not find root\n    &quot;&quot;&quot;</span>\n    x_n: <span class=\"hljs-built_in\">float</span> = x0\n    x_n1: <span class=\"hljs-built_in\">float</span> = x1\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n        <span class=\"hljs-keyword\">if</span> x_n == x_n1 <span class=\"hljs-keyword\">or</span> function(x_n1) == function(x_n):\n            <span class=\"hljs-keyword\">raise</span> ZeroDivisionError(<span class=\"hljs-string\">&quot;float division by zero, could not find root&quot;</span>)\n        x_n2: <span class=\"hljs-built_in\">float</span> = x_n1 - (\n            function(x_n1) / ((function(x_n1) - function(x_n)) / (x_n1 - x_n))\n        )\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">abs</span>(x_n2 - x_n1) &lt; <span class=\"hljs-number\">10</span>**-<span class=\"hljs-number\">5</span>:\n            <span class=\"hljs-keyword\">return</span> x_n2\n        x_n = x_n1\n        x_n1 = x_n2\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-keyword\">return</span> math.<span class=\"hljs-built_in\">pow</span>(x, <span class=\"hljs-number\">3</span>) - (<span class=\"hljs-number\">2</span> * x) - <span class=\"hljs-number\">5</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-built_in\">print</span>(intersection(f, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3.5</span>))\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/hashmap/hashing/Intersection.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/hashmap/hashing/Intersection.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.hashmap.hashing;\n\n<span class=\"hljs-comment\">/*\n * this is algo which implies common mathematical set theory concept\n * called intersection in which result is common values of both the sets\n * here metaphor of sets is HashMap\n */</span>\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.Collections;\n<span class=\"hljs-keyword\">import</span> java.util.HashMap;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Intersection</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> List&lt;Integer&gt; <span class=\"hljs-title function_\">intersection</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr1, <span class=\"hljs-type\">int</span>[] arr2)</span> {\n        <span class=\"hljs-keyword\">if</span> (arr1 == <span class=\"hljs-literal\">null</span> || arr2 == <span class=\"hljs-literal\">null</span> || arr1.length == <span class=\"hljs-number\">0</span> || arr2.length == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> Collections.emptyList();\n        }\n        Map&lt;Integer, Integer&gt; cnt = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;(<span class=\"hljs-number\">16</span>);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> v : arr1) {\n            cnt.put(v, cnt.getOrDefault(v, <span class=\"hljs-number\">0</span>) + <span class=\"hljs-number\">1</span>);\n        }\n        List&lt;Integer&gt; res = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> v : arr2) {\n            <span class=\"hljs-keyword\">if</span> (cnt.containsKey(v) &amp;&amp; cnt.get(v) &gt; <span class=\"hljs-number\">0</span>) {\n                res.add(v);\n                cnt.put(v, cnt.get(v) - <span class=\"hljs-number\">1</span>);\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> res;\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Intersection</span><span class=\"hljs-params\">()</span> {\n\n    }\n}\n"
    },
    "ruby": {
      "dir": "data_structures/arrays/intersection.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/arrays/intersection.rb",
      "code": "<span class=\"hljs-comment\"># Challenge name: Intersection of two arrays ii</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Given two arrays, write a function to compute their intersection.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {Integer[]} nums1</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {Integer[]} nums2</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@return</span> {Integer[]}</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach 1: Brute Force</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time Complexity: O(n^2)</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">intersect</span>(<span class=\"hljs-params\">arr1, arr2</span>)\n  result = []\n\n  <span class=\"hljs-keyword\">if</span> arr1.length &lt; arr2.length\n    shorter = arr1\n    longer = arr2\n  <span class=\"hljs-keyword\">else</span>\n    shorter = arr2\n    longer = arr1\n  <span class=\"hljs-keyword\">end</span>\n\n  shorter.each <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">matcher</span>|\n    longer.each <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">number</span>|\n      <span class=\"hljs-keyword\">next</span> <span class=\"hljs-keyword\">if</span> number != matcher\n\n      result.push(number)\n      <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  result\n<span class=\"hljs-keyword\">end</span>\n\nnums1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]\nnums2 = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>]\nputs intersect(nums1, nums2)\n<span class=\"hljs-comment\"># =&gt; [2,2]</span>\n\nnums1 = [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">5</span>]\nnums2 = [<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">4</span>]\nputs intersect(nums1, nums2)\n<span class=\"hljs-comment\"># =&gt; [4,9]</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach 2: Hash</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Complexity Analysis</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time Complexity: O(n+m), where n and m are the lengths of the arrays.</span>\n<span class=\"hljs-comment\"># We iterate through the first, and then through the second array; insert</span>\n<span class=\"hljs-comment\"># and lookup operations in the hash map take a constant time.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Space Complexity: O(min(n,m)). We use hash map to store numbers (and their</span>\n<span class=\"hljs-comment\"># counts) from the smaller array.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">intersect</span>(<span class=\"hljs-params\">arr1, arr2</span>)\n  result = []\n\n  hash = <span class=\"hljs-title class_\">Hash</span>.new(<span class=\"hljs-number\">0</span>)\n\n  arr2.each { |<span class=\"hljs-params\">num</span>| hash[num] += <span class=\"hljs-number\">1</span> }\n\n  arr1.each <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">num</span>|\n    <span class=\"hljs-keyword\">if</span> hash.has_key?(num)\n      result &lt;&lt; num <span class=\"hljs-keyword\">if</span> hash[num] &gt;= <span class=\"hljs-number\">1</span>\n      hash[num] -= <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  result\n<span class=\"hljs-keyword\">end</span>\n\nnums1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]\nnums2 = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>]\nputs intersect(nums1, nums2)\n<span class=\"hljs-comment\"># =&gt; [2,2]</span>\n\nnums1 = [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">5</span>]\nnums2 = [<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">4</span>]\nputs intersect(nums1, nums2)\n<span class=\"hljs-comment\"># =&gt; [4,9]</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach 3: Two Pointers</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Complexity analysis:</span>\n\n<span class=\"hljs-comment\"># Time Complexity: O(nlogn + mlogm), where n and m are the lengths of the arrays. We sort two arrays independently and then do a linear scan.</span>\n<span class=\"hljs-comment\"># Space Complexity: from O(logn+logm) to O(n+m), depending on the implementation of the sorting algorithm.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">intersect</span>(<span class=\"hljs-params\">nums1, nums2</span>)\n  result = []\n  p1 = <span class=\"hljs-number\">0</span>\n  p2 = <span class=\"hljs-number\">0</span>\n  nums1 = nums1.sort\n  nums2 = nums2.sort\n  <span class=\"hljs-keyword\">while</span> p1 &lt; nums1.length &amp;&amp; p2 &lt; nums2.length\n    <span class=\"hljs-keyword\">if</span> nums1[p1] &lt; nums2[p2]\n      p1 += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">elsif</span> nums1[p1] &gt; nums2[p2]\n      p2 += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">elsif</span> nums1[p1] == nums2[p2]\n      result &lt;&lt; nums1[p1]\n      p1 += <span class=\"hljs-number\">1</span>\n      p2 += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  result\n<span class=\"hljs-keyword\">end</span>\nnums1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]\nnums2 = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>]\nintersect(nums1, nums2)\n\nnums1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]\nnums2 = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>]\nputs intersect(nums1, nums2)\n<span class=\"hljs-comment\"># =&gt; [2,2]</span>\n\nnums1 = [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">5</span>]\nnums2 = [<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">4</span>]\nputs intersect(nums1, nums2)\n<span class=\"hljs-comment\"># =&gt; [4,9]</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Susobhan Das",
      "email": "88635857+djassie@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "spamegg",
      "email": "4255997+spamegg1@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rafael García Cuéllar",
      "email": "r.gc@hotmail.es",
      "commits": 1
    },
    {
      "name": "Jessica Kwok",
      "email": "60627484+jsca-kwok@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Ritik2604",
      "email": "49342895+Ritik2604@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    },
    {
      "name": "Jessica Kwok",
      "email": "jessicatckwok@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}