{
  "slug": "inv-sqrt",
  "name": "Inv Sqrt",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/inv_sqrt.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/inv_sqrt.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of [the inverse square root\n * Root](https://medium.com/hard-mode/the-legendary-fast-inverse-square-root-e51fee3b49d9).\n * @details\n * Two implementation to calculate inverse inverse root,\n * from Quake III Arena (C++ version) and with a standard library (`cmath`).\n * This algorithm is used to calculate shadows in Quake III Arena.\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span>     <span class=\"hljs-comment\">/// for `std::sqrt`</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;limits&gt;</span>    <span class=\"hljs-comment\">/// for numeric_limits</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief This is the function that calculates the fast inverse square root.\n * The following code is the fast inverse square root implementation from\n * Quake III Arena (Adapted for C++). More information can be found at\n * [Wikipedia](https://en.wikipedia.org/wiki/Fast_inverse_square_root)\n * @tparam T floating type\n * @tparam iterations inverse square root, the greater the number of\n * iterations, the more exact the result will be (1 or 2).\n * @param x value to calculate\n * @return the inverse square root\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T = <span class=\"hljs-type\">double</span>, <span class=\"hljs-type\">char</span> iterations = <span class=\"hljs-number\">2</span>&gt;\n<span class=\"hljs-keyword\">inline</span> T <span class=\"hljs-built_in\">Fast_InvSqrt</span>(T x) {\n    <span class=\"hljs-keyword\">using</span> Tint = <span class=\"hljs-keyword\">typename</span> std::conditional&lt;<span class=\"hljs-built_in\">sizeof</span>(T) == <span class=\"hljs-number\">8</span>, std::<span class=\"hljs-type\">int64_t</span>,\n                                           std::<span class=\"hljs-type\">int32_t</span>&gt;::type;\n    T y = x;\n    T x2 = y * <span class=\"hljs-number\">0.5</span>;\n\n    Tint i =\n        *<span class=\"hljs-built_in\">reinterpret_cast</span>&lt;Tint *&gt;(&amp;y);  <span class=\"hljs-comment\">// Store floating-point bits in integer</span>\n\n    i = (<span class=\"hljs-built_in\">sizeof</span>(T) == <span class=\"hljs-number\">8</span> ? <span class=\"hljs-number\">0x5fe6eb50c7b537a9</span> : <span class=\"hljs-number\">0x5f3759df</span>) -\n        (i &gt;&gt; <span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// Initial guess for Newton&#x27;s method</span>\n\n    y = *<span class=\"hljs-built_in\">reinterpret_cast</span>&lt;T *&gt;(&amp;i);  <span class=\"hljs-comment\">// Convert new bits into float</span>\n\n    y = y * (<span class=\"hljs-number\">1.5</span> - (x2 * y * y));  <span class=\"hljs-comment\">// 1st iteration Newton&#x27;s method</span>\n    <span class=\"hljs-keyword\">if</span> (iterations == <span class=\"hljs-number\">2</span>) {\n        y = y * (<span class=\"hljs-number\">1.5</span> - (x2 * y * y));  <span class=\"hljs-comment\">// 2nd iteration, the more exact result</span>\n    }\n    <span class=\"hljs-keyword\">return</span> y;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief This is the function that calculates the fast inverse square root.\n * The following code is the fast inverse square root with standard lib (cmath)\n * More information can be found at\n * [LinkedIn](https://www.linkedin.com/pulse/fast-inverse-square-root-still-armin-kassemi-langroodi)\n * @tparam T floating type\n * @param number value to calculate\n * @return the inverse square root\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T = <span class=\"hljs-type\">double</span>&gt;\nT <span class=\"hljs-built_in\">Standard_InvSqrt</span>(T number) {\n    T squareRoot = <span class=\"hljs-built_in\">sqrt</span>(number);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1.0f</span> / squareRoot;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">float</span> epsilon = <span class=\"hljs-number\">1e-3</span>f;\n\n    <span class=\"hljs-comment\">/* Tests with multiple values */</span>\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">fabs</span>(<span class=\"hljs-built_in\">Standard_InvSqrt</span>&lt;<span class=\"hljs-type\">float</span>&gt;(<span class=\"hljs-number\">100.0f</span>) - <span class=\"hljs-number\">0.0998449f</span>) &lt; epsilon);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">fabs</span>(<span class=\"hljs-built_in\">Standard_InvSqrt</span>&lt;<span class=\"hljs-type\">double</span>&gt;(<span class=\"hljs-number\">36.0f</span>) - <span class=\"hljs-number\">0.166667f</span>) &lt; epsilon);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">fabs</span>(<span class=\"hljs-built_in\">Standard_InvSqrt</span>(<span class=\"hljs-number\">12.0f</span>) - <span class=\"hljs-number\">0.288423f</span>) &lt; epsilon);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">fabs</span>(<span class=\"hljs-built_in\">Standard_InvSqrt</span>&lt;<span class=\"hljs-type\">double</span>&gt;(<span class=\"hljs-number\">5.0f</span>) - <span class=\"hljs-number\">0.447141f</span>) &lt; epsilon);\n\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">fabs</span>(<span class=\"hljs-built_in\">Fast_InvSqrt</span>&lt;<span class=\"hljs-type\">float</span>, <span class=\"hljs-number\">1</span>&gt;(<span class=\"hljs-number\">100.0f</span>) - <span class=\"hljs-number\">0.0998449f</span>) &lt; epsilon);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">fabs</span>(<span class=\"hljs-built_in\">Fast_InvSqrt</span>&lt;<span class=\"hljs-type\">double</span>, <span class=\"hljs-number\">1</span>&gt;(<span class=\"hljs-number\">36.0f</span>) - <span class=\"hljs-number\">0.166667f</span>) &lt; epsilon);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">fabs</span>(<span class=\"hljs-built_in\">Fast_InvSqrt</span>(<span class=\"hljs-number\">12.0f</span>) - <span class=\"hljs-number\">0.288423</span>) &lt; epsilon);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">fabs</span>(<span class=\"hljs-built_in\">Fast_InvSqrt</span>&lt;<span class=\"hljs-type\">double</span>&gt;(<span class=\"hljs-number\">5.0f</span>) - <span class=\"hljs-number\">0.447141</span>) &lt; epsilon);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;The Fast inverse square root of 36 is: &quot;</span>\n              &lt;&lt; <span class=\"hljs-built_in\">Fast_InvSqrt</span>&lt;<span class=\"hljs-type\">float</span>, <span class=\"hljs-number\">1</span>&gt;(<span class=\"hljs-number\">36.0f</span>) &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;The Fast inverse square root of 36 is: &quot;</span>\n              &lt;&lt; <span class=\"hljs-built_in\">Fast_InvSqrt</span>&lt;<span class=\"hljs-type\">double</span>, <span class=\"hljs-number\">2</span>&gt;(<span class=\"hljs-number\">36.0f</span>) &lt;&lt; <span class=\"hljs-string\">&quot; (2 iterations)&quot;</span>\n              &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;The Fast inverse square root of 100 is: &quot;</span>\n              &lt;&lt; <span class=\"hljs-built_in\">Fast_InvSqrt</span>(<span class=\"hljs-number\">100.0f</span>)\n              &lt;&lt; <span class=\"hljs-string\">&quot; (With default template type and iterations: double, 2)&quot;</span>\n              &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;The Standard inverse square root of 36 is: &quot;</span>\n              &lt;&lt; <span class=\"hljs-built_in\">Standard_InvSqrt</span>&lt;<span class=\"hljs-type\">float</span>&gt;(<span class=\"hljs-number\">36.0f</span>) &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;The Standard inverse square root of 100 is: &quot;</span>\n              &lt;&lt; <span class=\"hljs-built_in\">Standard_InvSqrt</span>(<span class=\"hljs-number\">100.0f</span>)\n              &lt;&lt; <span class=\"hljs-string\">&quot; (With default template type: double)&quot;</span> &lt;&lt; std::endl;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}