{
  "slug": "inverse-of-matrix",
  "name": "Inverse of Matrix",
  "categories": [
    "matrix"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "matrix/inverse_of_matrix.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/matrix/inverse_of_matrix.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">from</span> decimal <span class=\"hljs-keyword\">import</span> Decimal\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">inverse_of_matrix</span>(<span class=\"hljs-params\">matrix: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]]</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    A matrix multiplied with its inverse gives the identity matrix.\r\n    This function finds the inverse of a 2x2 matrix.\r\n    If the determinant of a matrix is 0, its inverse does not exist.\r\n\r\n    Sources for fixing inaccurate float arithmetic:\r\n    https://stackoverflow.com/questions/6563058/how-do-i-use-accurate-float-arithmetic-in-python\r\n    https://docs.python.org/3/library/decimal.html\r\n\r\n    &gt;&gt;&gt; inverse_of_matrix([[2, 5], [2, 0]])\r\n    [[0.0, 0.5], [0.2, -0.2]]\r\n    &gt;&gt;&gt; inverse_of_matrix([[2.5, 5], [1, 2]])\r\n    Traceback (most recent call last):\r\n    ...\r\n    ValueError: This matrix has no inverse.\r\n    &gt;&gt;&gt; inverse_of_matrix([[12, -16], [-9, 0]])\r\n    [[0.0, -0.1111111111111111], [-0.0625, -0.08333333333333333]]\r\n    &gt;&gt;&gt; inverse_of_matrix([[12, 3], [16, 8]])\r\n    [[0.16666666666666666, -0.0625], [-0.3333333333333333, 0.25]]\r\n    &gt;&gt;&gt; inverse_of_matrix([[10, 5], [3, 2.5]])\r\n    [[0.25, -0.5], [-0.3, 1.0]]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    D = Decimal  <span class=\"hljs-comment\"># An abbreviation to be conciseness</span>\r\n    <span class=\"hljs-comment\"># Calculate the determinant of the matrix</span>\r\n    determinant = D(matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]) * D(matrix[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]) - D(matrix[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]) * D(matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>])\r\n    <span class=\"hljs-keyword\">if</span> determinant == <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;This matrix has no inverse.&quot;</span>)\r\n    <span class=\"hljs-comment\"># Creates a copy of the matrix with swapped positions of the elements</span>\r\n    swapped_matrix = [[<span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">0.0</span>], [<span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">0.0</span>]]\r\n    swapped_matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>], swapped_matrix[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] = matrix[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>], matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\r\n    swapped_matrix[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>], swapped_matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] = -matrix[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>], -matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]\r\n    <span class=\"hljs-comment\"># Calculate the inverse of the matrix</span>\r\n    <span class=\"hljs-keyword\">return</span> [[<span class=\"hljs-built_in\">float</span>(D(n) / determinant) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-number\">0.0</span> <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> row] <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> swapped_matrix]\r\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/misc/InverseOfMatrix.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/misc/InverseOfMatrix.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.misc;\n\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-comment\">/*\n* Wikipedia link : https://en.wikipedia.org/wiki/Invertible_matrix\n*\n* Here we use gauss elimination method to find the inverse of a given matrix.\n* To understand gauss elimination method to find inverse of a matrix: https://www.sangakoo.com/en/unit/inverse-matrix-method-of-gaussian-elimination\n*\n* We can also find the inverse of a matrix \n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">InverseOfMatrix</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String argv[])</span> {\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">input</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n        System.out.println(<span class=\"hljs-string\">&quot;Enter the matrix size (Square matrix only): &quot;</span>);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> input.nextInt();\n        <span class=\"hljs-type\">double</span> a[][] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[n][n];\n        System.out.println(<span class=\"hljs-string\">&quot;Enter the elements of matrix: &quot;</span>);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; n; j++) {\n                a[i][j] = input.nextDouble();\n            }\n        }\n\n        <span class=\"hljs-type\">double</span> d[][] = invert(a);\n        System.out.println();\n        System.out.println(<span class=\"hljs-string\">&quot;The inverse is: &quot;</span>);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; n; ++j) {\n                System.out.print(d[i][j] + <span class=\"hljs-string\">&quot;  &quot;</span>);\n            }\n            System.out.println();\n        }\n        input.close();\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span>[][] invert(<span class=\"hljs-type\">double</span> a[][]) {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> a.length;\n        <span class=\"hljs-type\">double</span> x[][] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[n][n];\n        <span class=\"hljs-type\">double</span> b[][] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[n][n];\n        <span class=\"hljs-type\">int</span> index[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n            b[i][i] = <span class=\"hljs-number\">1</span>;\n        }\n\n        <span class=\"hljs-comment\">// Transform the matrix into an upper triangle</span>\n        gaussian(a, index);\n\n        <span class=\"hljs-comment\">// Update the matrix b[i][j] with the ratios stored</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n - <span class=\"hljs-number\">1</span>; ++i) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> i + <span class=\"hljs-number\">1</span>; j &lt; n; ++j) {\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; k &lt; n; ++k) {\n                    b[index[j]][k]\n                            -= a[index[j]][i] * b[index[i]][k];\n                }\n            }\n        }\n\n        <span class=\"hljs-comment\">// Perform backward substitutions</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n            x[n - <span class=\"hljs-number\">1</span>][i] = b[index[n - <span class=\"hljs-number\">1</span>]][i] / a[index[n - <span class=\"hljs-number\">1</span>]][n - <span class=\"hljs-number\">1</span>];\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> n - <span class=\"hljs-number\">2</span>; j &gt;= <span class=\"hljs-number\">0</span>; --j) {\n                x[j][i] = b[index[j]][i];\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> j + <span class=\"hljs-number\">1</span>; k &lt; n; ++k) {\n                    x[j][i] -= a[index[j]][k] * x[k][i];\n                }\n                x[j][i] /= a[index[j]][j];\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> x;\n    }\n\n<span class=\"hljs-comment\">// Method to carry out the partial-pivoting Gaussian</span>\n<span class=\"hljs-comment\">// elimination.  Here index[] stores pivoting order.</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">gaussian</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> a[][], <span class=\"hljs-type\">int</span> index[])</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> index.length;\n        <span class=\"hljs-type\">double</span> c[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[n];\n\n        <span class=\"hljs-comment\">// Initialize the index</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n            index[i] = i;\n        }\n\n        <span class=\"hljs-comment\">// Find the rescaling factors, one from each row</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">c1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; n; ++j) {\n                <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">c0</span> <span class=\"hljs-operator\">=</span> Math.abs(a[i][j]);\n                <span class=\"hljs-keyword\">if</span> (c0 &gt; c1) {\n                    c1 = c0;\n                }\n            }\n            c[i] = c1;\n        }\n\n        <span class=\"hljs-comment\">// Search the pivoting element from each column</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; n - <span class=\"hljs-number\">1</span>; ++j) {\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">pi1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> j; i &lt; n; ++i) {\n                <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">pi0</span> <span class=\"hljs-operator\">=</span> Math.abs(a[index[i]][j]);\n                pi0 /= c[index[i]];\n                <span class=\"hljs-keyword\">if</span> (pi0 &gt; pi1) {\n                    pi1 = pi0;\n                    k = i;\n                }\n            }\n            <span class=\"hljs-comment\">// Interchange rows according to the pivoting order</span>\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">itmp</span> <span class=\"hljs-operator\">=</span> index[j];\n            index[j] = index[k];\n            index[k] = itmp;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> j + <span class=\"hljs-number\">1</span>; i &lt; n; ++i) {\n                <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">pj</span> <span class=\"hljs-operator\">=</span> a[index[i]][j] / a[index[j]][j];\n\n                <span class=\"hljs-comment\">// Record pivoting ratios below the diagonal</span>\n                a[index[i]][j] = pj;\n\n                <span class=\"hljs-comment\">// Modify other elements accordingly</span>\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">l</span> <span class=\"hljs-operator\">=</span> j + <span class=\"hljs-number\">1</span>; l &lt; n; ++l) {\n                    a[index[i]][l] -= pj * a[index[j]][l];\n                }\n            }\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "RobotGuy999",
      "email": "68413067+RobotGuy999@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}