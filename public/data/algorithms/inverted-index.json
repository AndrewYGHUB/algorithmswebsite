{
  "slug": "inverted-index",
  "name": "Inverted index",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./DataStructures/InvertedIndex.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/DataStructures/InvertedIndex.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n<span class=\"hljs-keyword\">using</span> System.Linq;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">DataStructures</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Inverted index is the simplest form of document indexing,</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> allowing performing boolean queries on text data.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> This realization is just simplified for better understanding the process of indexing</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> and working on straightforward string inputs.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">InvertedIndex</span>\n    {\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> Dictionary&lt;<span class=\"hljs-built_in\">string</span>, List&lt;<span class=\"hljs-built_in\">string</span>&gt;&gt; invertedIndex = <span class=\"hljs-keyword\">new</span>();\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Build inverted index with source name and source content.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;sourceName&quot;&gt;</span>Name of the source.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;sourceContent&quot;&gt;</span>Content of the source.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddToIndex</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> sourceName, <span class=\"hljs-built_in\">string</span> sourceContent</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> context = sourceContent.Split(<span class=\"hljs-string\">&#x27; &#x27;</span>).Distinct();\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> word <span class=\"hljs-keyword\">in</span> context)\n            {\n                <span class=\"hljs-keyword\">if</span> (!invertedIndex.ContainsKey(word))\n                {\n                    invertedIndex.Add(word, <span class=\"hljs-keyword\">new</span> List&lt;<span class=\"hljs-built_in\">string</span>&gt; { sourceName });\n                }\n                <span class=\"hljs-keyword\">else</span>\n                {\n                    invertedIndex[word].Add(sourceName);\n                }\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Returns the source names contains ALL terms inside at same time.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;terms&quot;&gt;</span>List of terms.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Source names.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> IEnumerable&lt;<span class=\"hljs-built_in\">string</span>&gt; <span class=\"hljs-title\">And</span>(<span class=\"hljs-params\">IEnumerable&lt;<span class=\"hljs-built_in\">string</span>&gt; terms</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> entries = terms\n                .Select(term =&gt; invertedIndex\n                    .Where(x =&gt; x.Key.Equals(term))\n                    .SelectMany(x =&gt; x.Value))\n                .ToList();\n\n            <span class=\"hljs-keyword\">var</span> intersection = entries\n                .Skip(<span class=\"hljs-number\">1</span>)\n                .Aggregate(<span class=\"hljs-keyword\">new</span> HashSet&lt;<span class=\"hljs-built_in\">string</span>&gt;(entries.First()), (hashSet, enumerable) =&gt;\n                {\n                    hashSet.IntersectWith(enumerable);\n                    <span class=\"hljs-keyword\">return</span> hashSet;\n                });\n\n            <span class=\"hljs-keyword\">return</span> intersection;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Returns the source names contains AT LEAST ONE from terms inside.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;terms&quot;&gt;</span>List of terms.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Source names.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> IEnumerable&lt;<span class=\"hljs-built_in\">string</span>&gt; <span class=\"hljs-title\">Or</span>(<span class=\"hljs-params\">IEnumerable&lt;<span class=\"hljs-built_in\">string</span>&gt; terms</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> sources = <span class=\"hljs-keyword\">new</span> List&lt;<span class=\"hljs-built_in\">string</span>&gt;();\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> term <span class=\"hljs-keyword\">in</span> terms)\n            {\n                <span class=\"hljs-keyword\">var</span> source = invertedIndex\n                    .Where(x =&gt; x.Key.Equals(term))\n                    .SelectMany(x =&gt; x.Value);\n\n                sources.AddRange(source);\n            }\n\n            <span class=\"hljs-keyword\">return</span> sources.Distinct();\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Sergii Lischuk",
      "email": "evertodante@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}