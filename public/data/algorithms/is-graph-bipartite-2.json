{
  "slug": "is-graph-bipartite-2",
  "name": "Is Graph Bipartite 2",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "graph/is_graph_bipartite2.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/graph/is_graph_bipartite2.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @brief Check whether a given graph is bipartite or not\n * @details\n * A bipartite graph is the one whose nodes can be divided into two\n * disjoint sets in such a way that the nodes in a set are not\n * connected to each other at all, i.e. no intra-set connections.\n * The only connections that exist are that of inter-set,\n * i.e. the nodes from one set are connected to a subset of nodes\n * in the other set.\n * In this implementation, using a graph in the form of adjacency\n * list, check whether the given graph is a bipartite or not.\n *\n * References used:\n * [GeeksForGeeks](https://www.geeksforgeeks.org/bipartite-graph/)\n * @author [tushar2407](https://github.com/tushar2407)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span>     <span class=\"hljs-comment\">/// for queue data structure</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for vector data structure</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace graph\n * @brief Graphical algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> graph {\n<span class=\"hljs-comment\">/**\n * @brief function to check whether the passed graph is bipartite or not\n * @param graph is a 2D matrix whose rows or the first index signify the node\n * and values in that row signify the nodes it is connected to\n * @param index is the valus of the node currently under observation\n * @param visited is the vector which stores whether a given node has been\n * traversed or not yet\n * @returns boolean\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">checkBipartite</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt;&gt; &amp;graph,\n                    <span class=\"hljs-type\">int64_t</span> index, std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; *visited)</span> </span>{\n    std::queue&lt;<span class=\"hljs-type\">int64_t</span>&gt; q;  <span class=\"hljs-comment\">///&lt; stores the neighbouring node indexes in squence</span>\n                            <span class=\"hljs-comment\">/// of being reached</span>\n    q.<span class=\"hljs-built_in\">push</span>(index);          <span class=\"hljs-comment\">/// insert the current node into the queue</span>\n    (*visited)[index] = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">/// mark the current node as travelled</span>\n    <span class=\"hljs-keyword\">while</span> (q.<span class=\"hljs-built_in\">size</span>()) {\n        <span class=\"hljs-type\">int64_t</span> u = q.<span class=\"hljs-built_in\">front</span>();\n        q.<span class=\"hljs-built_in\">pop</span>();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; graph[u].<span class=\"hljs-built_in\">size</span>(); i++) {\n            <span class=\"hljs-type\">int64_t</span> v =\n                graph[u][i];     <span class=\"hljs-comment\">///&lt; stores the neighbour of the current node</span>\n            <span class=\"hljs-keyword\">if</span> (!(*visited)[v])  <span class=\"hljs-comment\">/// check whether the neighbour node is</span>\n                                 <span class=\"hljs-comment\">/// travelled already or not</span>\n            {\n                (*visited)[v] =\n                    ((*visited)[u] == <span class=\"hljs-number\">1</span>)\n                        ? <span class=\"hljs-number\">-1</span>\n                        : <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">/// colour the neighbouring node with</span>\n                              <span class=\"hljs-comment\">/// different colour than the current node</span>\n                q.<span class=\"hljs-built_in\">push</span>(v);    <span class=\"hljs-comment\">/// insert the neighbouring node into the queue</span>\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((*visited)[v] ==\n                       (*visited)[u])  <span class=\"hljs-comment\">/// if both the current node and its</span>\n                                       <span class=\"hljs-comment\">/// neighbour has the same state then it</span>\n                                       <span class=\"hljs-comment\">/// is not a bipartite graph</span>\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;  <span class=\"hljs-comment\">/// return true when all the connected nodes of the current</span>\n                  <span class=\"hljs-comment\">/// nodes are travelled and satisify all the above conditions</span>\n}\n<span class=\"hljs-comment\">/**\n * @brief returns true if the given graph is bipartite else returns false\n * @param graph is a 2D matrix whose rows or the first index signify the node\n * and values in that row signify the nodes it is connected to\n * @returns booleans\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">isBipartite</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt;&gt; &amp;graph)</span> </span>{\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; <span class=\"hljs-title\">visited</span><span class=\"hljs-params\">(\n        graph.size())</span></span>;  <span class=\"hljs-comment\">///&lt; stores boolean values</span>\n                        <span class=\"hljs-comment\">/// which signify whether that node had been visited or</span>\n                        <span class=\"hljs-comment\">/// not</span>\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; graph.<span class=\"hljs-built_in\">size</span>(); i++) {\n        <span class=\"hljs-keyword\">if</span> (!visited[i])  <span class=\"hljs-comment\">/// if the current node is not visited then check</span>\n                          <span class=\"hljs-comment\">/// whether the sub-graph of that node is a bipartite</span>\n                          <span class=\"hljs-comment\">/// or not</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">checkBipartite</span>(graph, i, &amp;visited)) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n}  <span class=\"hljs-comment\">// namespace graph</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt;&gt; graph = {{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>}, {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>}, {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>}, {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>}};\n\n    <span class=\"hljs-built_in\">assert</span>(graph::<span class=\"hljs-built_in\">isBipartite</span>(graph) ==\n           <span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">/// check whether the above</span>\n                   <span class=\"hljs-comment\">/// defined graph is indeed bipartite</span>\n\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt;&gt; graph_not_bipartite = {\n        {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>}, {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>}, {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>}, {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>}};\n\n    <span class=\"hljs-built_in\">assert</span>(graph::<span class=\"hljs-built_in\">isBipartite</span>(graph_not_bipartite) ==\n           <span class=\"hljs-literal\">false</span>);  <span class=\"hljs-comment\">/// check whether</span>\n                    <span class=\"hljs-comment\">/// the above defined graph is indeed bipartite</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;All tests have successfully passed!\\n&quot;</span>;\n}\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * Instantitates a dummy graph of a small size with\n * a few edges between random nodes.\n * On applying the algorithm, it checks if the instantiated\n * graph is bipartite or not.\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "ggkogkou",
      "email": "76820848+ggkogkou@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Tushar Mohan",
      "email": "tushar.mohan2001@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}