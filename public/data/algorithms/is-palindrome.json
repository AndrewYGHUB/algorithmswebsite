{
  "slug": "is-palindrome",
  "name": "Is Palindrome",
  "categories": [
    "datastructures",
    "linkedlist"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings/is_palindrome.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings/is_palindrome.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_palindrome</span>(<span class=\"hljs-params\">s: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Determine whether the string is palindrome\n    :param s:\n    :return: Boolean\n    &gt;&gt;&gt; is_palindrome(&quot;a man a plan a canal panama&quot;.replace(&quot; &quot;, &quot;&quot;))\n    True\n    &gt;&gt;&gt; is_palindrome(&quot;Hello&quot;)\n    False\n    &gt;&gt;&gt; is_palindrome(&quot;Able was I ere I saw Elba&quot;)\n    True\n    &gt;&gt;&gt; is_palindrome(&quot;racecar&quot;)\n    True\n    &gt;&gt;&gt; is_palindrome(&quot;Mr. Owl ate my metal worm?&quot;)\n    True\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># Since Punctuation, capitalization, and spaces are usually ignored while checking</span>\n    <span class=\"hljs-comment\"># Palindrome,  we first remove them from our string.</span>\n    s = <span class=\"hljs-string\">&quot;&quot;</span>.join([character <span class=\"hljs-keyword\">for</span> character <span class=\"hljs-keyword\">in</span> s.lower() <span class=\"hljs-keyword\">if</span> character.isalnum()])\n    <span class=\"hljs-keyword\">return</span> s == s[::-<span class=\"hljs-number\">1</span>]\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    s = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter string to determine whether its palindrome or not: &quot;</span>).strip()\n    <span class=\"hljs-keyword\">if</span> is_palindrome(s):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Given string is palindrome&quot;</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Given string is not palindrome&quot;</span>)\n"
    },
    "javascript": {
      "dir": "String/IsPalindrome.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/String/IsPalindrome.js",
      "code": "<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> <span class=\"hljs-variable\">isPalindromeIterative</span>\n * <span class=\"hljs-doctag\">@description</span> isPalindromeIterative function checks whether the provided input is palindrome or not\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">String | Number</span>} <span class=\"hljs-variable\">x</span> - The input to check\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">boolean</span>} - Input is palindrome or not\n * <span class=\"hljs-doctag\">@see</span> [Palindrome](https://en.wikipedia.org/wiki/Palindrome)\n */</span>\n\n<span class=\"hljs-comment\">/*\n  * Big-O Analysis\n      * Time Complexity\n        - O(N) on average and worst case scenario as input is traversed in linear fashion\n        - O(1) on best case scenario if the input already is a string (otherwise toString() method takes O(N))\n               and the first &amp; last characters don&#x27;t match, triggering an early return\n      * Space Complexity\n        - O(1)\n*/</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isPalindromeIterative</span> (x) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> x !== <span class=\"hljs-string\">&#x27;string&#x27;</span> &amp;&amp; <span class=\"hljs-keyword\">typeof</span> x !== <span class=\"hljs-string\">&#x27;number&#x27;</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;Input must be a string or a number&#x27;</span>)\n  }\n\n  <span class=\"hljs-comment\">// Convert x to string whether it&#x27;s number or string</span>\n  <span class=\"hljs-keyword\">const</span> string = x.<span class=\"hljs-title function_\">toString</span>()\n  <span class=\"hljs-keyword\">const</span> length = string.<span class=\"hljs-property\">length</span>\n\n  <span class=\"hljs-keyword\">if</span> (length === <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\">// Apply two pointers technique to compare first and last elements on each iteration</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> start = <span class=\"hljs-number\">0</span>, end = length - <span class=\"hljs-number\">1</span>; start &lt; end; start++, end--) {\n    <span class=\"hljs-comment\">// Early return if compared items are different, input is not a palindrome</span>\n    <span class=\"hljs-keyword\">if</span> (string[start] !== string[end]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n  <span class=\"hljs-comment\">// If early return in condition inside for loop is not reached, then input is palindrome</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n}\n"
    },
    "f-sharp": {
      "dir": "Algorithms/Strings/IsPalindrome.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms/Strings/IsPalindrome.fs",
      "code": "ï»¿<span class=\"hljs-keyword\">namespace</span> Algorithms.Strings\n\n<span class=\"hljs-keyword\">module</span> IsPalindrome <span class=\"hljs-operator\">=</span>\n    <span class=\"hljs-comment\">/// &lt;summary&gt;</span>\n    <span class=\"hljs-comment\">/// Determine whether the string is palindrome</span>\n    <span class=\"hljs-comment\">/// &lt;/summary&gt;</span>\n    <span class=\"hljs-comment\">/// &lt;param name=&quot;str&quot;&gt;&lt;/param&gt;</span>\n    <span class=\"hljs-comment\">/// &lt;returns&gt;Boolean&lt;/returns&gt;</span>\n    <span class=\"hljs-keyword\">let</span> isPalindrome (str<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>)<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-operator\">=</span>\n        <span class=\"hljs-keyword\">let</span> str <span class=\"hljs-operator\">=</span>\n            str.ToLower()\n            <span class=\"hljs-operator\">|&gt;</span> Seq.filter (System.Char.IsLetterOrDigit)\n            <span class=\"hljs-operator\">|&gt;</span> Seq.toList\n\n        str <span class=\"hljs-operator\">=</span> (str <span class=\"hljs-operator\">|&gt;</span> List.rev)\n"
    },
    "go": {
      "dir": "strings/palindrome/ispalindrome.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/strings/palindrome/ispalindrome.go",
      "code": "<span class=\"hljs-comment\">// ispalindrome.go</span>\n<span class=\"hljs-comment\">// description: Checks if a given string is palindrome or not</span>\n<span class=\"hljs-comment\">// details:</span>\n<span class=\"hljs-comment\">// Palindromes are expressions that read the same way forwards and backwards.</span>\n<span class=\"hljs-comment\">// They can be words/phrases (like &quot;racecar&quot; and &quot;Do geese see God?&quot;), or even</span>\n<span class=\"hljs-comment\">// numbers (like &quot;02/02/2020&quot;). Usually punctuation signs, capitalization</span>\n<span class=\"hljs-comment\">// and spaces are ignored. A regular expression was used to achieve that.</span>\n<span class=\"hljs-comment\">// See more information on: https://en.wikipedia.org/wiki/Palindrome</span>\n<span class=\"hljs-comment\">// author(s) [Fernanda Kawasaki](https://github.com/fernandakawasaki)</span>\n<span class=\"hljs-comment\">// see ispalindrome_test.go</span>\n\n<span class=\"hljs-keyword\">package</span> palindrome\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;regexp&quot;</span>\n\t<span class=\"hljs-string\">&quot;strings&quot;</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">cleanString</span><span class=\"hljs-params\">(text <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> {\n\tclean_text := strings.ToLower(text)\n\tclean_text = strings.Join(strings.Fields(clean_text), <span class=\"hljs-string\">&quot;&quot;</span>) <span class=\"hljs-comment\">// Remove spaces</span>\n\tregex, _ := regexp.Compile(<span class=\"hljs-string\">`[^\\p{L}\\p{N} ]+`</span>)             <span class=\"hljs-comment\">// Regular expression for alphanumeric only characters</span>\n\t<span class=\"hljs-keyword\">return</span> regex.ReplaceAllString(clean_text, <span class=\"hljs-string\">&quot;&quot;</span>)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">IsPalindrome</span><span class=\"hljs-params\">(text <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> {\n\tclean_text := cleanString(text)\n\t<span class=\"hljs-keyword\">var</span> i, j <span class=\"hljs-type\">int</span>\n\t<span class=\"hljs-type\">rune</span> := []<span class=\"hljs-type\">rune</span>(clean_text)\n\t<span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(<span class=\"hljs-type\">rune</span>)/<span class=\"hljs-number\">2</span>; i++ {\n\t\tj = <span class=\"hljs-built_in\">len</span>(<span class=\"hljs-type\">rune</span>) - <span class=\"hljs-number\">1</span> - i\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-type\">string</span>(<span class=\"hljs-type\">rune</span>[i]) != <span class=\"hljs-type\">string</span>(<span class=\"hljs-type\">rune</span>[j]) {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">IsPalindromeRecursive</span><span class=\"hljs-params\">(text <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> {\n\tclean_text := cleanString(text)\n\trunes := []<span class=\"hljs-type\">rune</span>(clean_text)\n\t<span class=\"hljs-keyword\">return</span> isPalindromeRecursiveHelper(runes, <span class=\"hljs-number\">0</span>, <span class=\"hljs-type\">int64</span>(<span class=\"hljs-built_in\">len</span>(runes)))\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isPalindromeRecursiveHelper</span><span class=\"hljs-params\">(runes []<span class=\"hljs-type\">rune</span>, start <span class=\"hljs-type\">int64</span>, end <span class=\"hljs-type\">int64</span>)</span></span> <span class=\"hljs-type\">bool</span> {\n\t<span class=\"hljs-keyword\">if</span> start &gt;= end {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n\t}\n\t<span class=\"hljs-keyword\">if</span> runes[start] != runes[end<span class=\"hljs-number\">-1</span>] {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n\t}\n\tstart = start + <span class=\"hljs-number\">1</span>\n\tend = end - <span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-keyword\">return</span> isPalindromeRecursiveHelper(runes, start, end)\n}\n"
    },
    "matlab-octave": {
      "dir": "algorithms/Strings/isPalindrome.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms/Strings/isPalindrome.m",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">y</span> = <span class=\"hljs-title\">isPalindrome</span><span class=\"hljs-params\">(inputWord)</span></span>\n    <span class=\"hljs-comment\">% Return 1 if input string is a palindrome; 0 otherwise. </span>\n    \n    <span class=\"hljs-comment\">% Gets the length of the input word.</span>\n    inputLength = <span class=\"hljs-built_in\">length</span>(inputWord);\n\n    <span class=\"hljs-comment\">% Number of pairs to compare.</span>\n    lastIndex = <span class=\"hljs-built_in\">floor</span>( inputLength / <span class=\"hljs-number\">2</span>);\n    y=<span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-comment\">% for every pair of letters in the word check if they match</span>\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span> : lastIndex\n        <span class=\"hljs-keyword\">if</span> inputWord(<span class=\"hljs-built_in\">i</span>) ~= inputWord(<span class=\"hljs-keyword\">end</span> + (<span class=\"hljs-number\">1</span> - <span class=\"hljs-built_in\">i</span>))\n            y = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n    \n<span class=\"hljs-keyword\">end</span>\n"
    },
    "julia": {
      "dir": "src/strings/is_palindrome.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/strings/is_palindrome.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n    is_palindrome(s)\nA set of functions to check if a given string\nis a palindrome.\n\nArguments:\n - s - a string =#\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">function</span> is_palindrome(s) <span class=\"hljs-comment\"># Named function</span>\n    s = lowercase(s)\n    <span class=\"hljs-keyword\">return</span> s == reverse(s)\n<span class=\"hljs-keyword\">end</span>\n\ns -&gt; s == reverse(s) <span class=\"hljs-comment\"># Anonymous</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Lars MÃ¼ller",
      "email": "34514239+appgurueu@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "kNOzone",
      "email": "72206118+kNOzone@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Kaushik Amar Das",
      "email": "cozek@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "1fisedi",
      "email": "51143882+1fisedi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ihjass Thasbekha",
      "email": "44056715+Ihjass@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Fernanda Kawasaki",
      "email": "50497814+fernandakawasaki@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Azzaare",
      "email": "jf@baffier.fr",
      "commits": 1
    },
    {
      "name": "Soc Virnyl S. Estela",
      "email": "66054069+ReneganRonin@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Madison Estabrook",
      "email": "madison.estabrook@gmail.com",
      "commits": 1
    },
    {
      "name": "Nischal Patel",
      "email": "nischalpatel20@gmail.com",
      "commits": 1
    },
    {
      "name": "Ashwin Das",
      "email": "ashwindasr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Muhammad Umer Farooq",
      "email": "mumerfarooqlablnet01@gmail.com",
      "commits": 1
    },
    {
      "name": "Ishani",
      "email": "ishanigarkoti08@gmail.com",
      "commits": 1
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Andrea Tota",
      "email": "59341503+HereBeAndre@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}