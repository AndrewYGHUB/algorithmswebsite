{
  "slug": "julia-sets",
  "name": "Julia Sets",
  "categories": [
    "fractals"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "fractals/julia_sets.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/fractals/julia_sets.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;Author Alexandre De Zotti\n\nDraws Julia sets of quadratic polynomials and exponential maps.\n More specifically, this iterates the function a fixed number of times\n then plots whether the absolute value of the last iterate is greater than\n a fixed threshold (named &quot;escape radius&quot;). For the exponential map this is not\n really an escape radius but rather a convenient way to approximate the Julia\n set with bounded orbits.\n\nThe examples presented here are:\n- The Cauliflower Julia set, see e.g.\nhttps://en.wikipedia.org/wiki/File:Julia_z2%2B0,25.png\n- Other examples from https://en.wikipedia.org/wiki/Julia_set\n- An exponential map Julia set, ambiantly homeomorphic to the examples in\nhttp://www.math.univ-toulouse.fr/~cheritat/GalII/galery.html\n and\nhttps://ddd.uab.cat/pub/pubmat/02141493v43n1/02141493v43n1p27.pdf\n\nRemark: Some overflow runtime warnings are suppressed. This is because of the\n way the iteration loop is implemented, using numpy&#x27;s efficient computations.\n Overflows and infinites are replaced after each step by a large number.\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">import</span> warnings\n<span class=\"hljs-keyword\">from</span> collections.abc <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Callable</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Any</span>\n\n<span class=\"hljs-keyword\">import</span> numpy\n<span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot\n\nc_cauliflower = <span class=\"hljs-number\">0.25</span> + <span class=\"hljs-number\">0.0j</span>\nc_polynomial_1 = -<span class=\"hljs-number\">0.4</span> + <span class=\"hljs-number\">0.6j</span>\nc_polynomial_2 = -<span class=\"hljs-number\">0.1</span> + <span class=\"hljs-number\">0.651j</span>\nc_exponential = -<span class=\"hljs-number\">2.0</span>\nnb_iterations = <span class=\"hljs-number\">56</span>\nwindow_size = <span class=\"hljs-number\">2.0</span>\nnb_pixels = <span class=\"hljs-number\">666</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">eval_exponential</span>(<span class=\"hljs-params\">c_parameter: <span class=\"hljs-built_in\">complex</span>, z_values: numpy.ndarray</span>) -&gt; numpy.ndarray:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Evaluate $e^z + c$.\n    &gt;&gt;&gt; eval_exponential(0, 0)\n    1.0\n    &gt;&gt;&gt; abs(eval_exponential(1, numpy.pi*1.j)) &lt; 1e-15\n    True\n    &gt;&gt;&gt; abs(eval_exponential(1.j, 0)-1-1.j) &lt; 1e-15\n    True\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> numpy.exp(z_values) + c_parameter\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">eval_quadratic_polynomial</span>(<span class=\"hljs-params\">\n    c_parameter: <span class=\"hljs-built_in\">complex</span>, z_values: numpy.ndarray\n</span>) -&gt; numpy.ndarray:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; eval_quadratic_polynomial(0, 2)\n    4\n    &gt;&gt;&gt; eval_quadratic_polynomial(-1, 1)\n    0\n    &gt;&gt;&gt; round(eval_quadratic_polynomial(1.j, 0).imag)\n    1\n    &gt;&gt;&gt; round(eval_quadratic_polynomial(1.j, 0).real)\n    0\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> z_values * z_values + c_parameter\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">prepare_grid</span>(<span class=\"hljs-params\">window_size: <span class=\"hljs-built_in\">float</span>, nb_pixels: <span class=\"hljs-built_in\">int</span></span>) -&gt; numpy.ndarray:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Create a grid of complex values of size nb_pixels*nb_pixels with real and\n     imaginary parts ranging from -window_size to window_size (inclusive).\n    Returns a numpy array.\n\n    &gt;&gt;&gt; prepare_grid(1,3)\n    array([[-1.-1.j, -1.+0.j, -1.+1.j],\n           [ 0.-1.j,  0.+0.j,  0.+1.j],\n           [ 1.-1.j,  1.+0.j,  1.+1.j]])\n    &quot;&quot;&quot;</span>\n    x = numpy.linspace(-window_size, window_size, nb_pixels)\n    x = x.reshape((nb_pixels, <span class=\"hljs-number\">1</span>))\n    y = numpy.linspace(-window_size, window_size, nb_pixels)\n    y = y.reshape((<span class=\"hljs-number\">1</span>, nb_pixels))\n    <span class=\"hljs-keyword\">return</span> x + <span class=\"hljs-number\">1.0j</span> * y\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">iterate_function</span>(<span class=\"hljs-params\">\n    eval_function: <span class=\"hljs-type\">Callable</span>[[<span class=\"hljs-type\">Any</span>, numpy.ndarray], numpy.ndarray],\n    function_params: <span class=\"hljs-type\">Any</span>,\n    nb_iterations: <span class=\"hljs-built_in\">int</span>,\n    z_0: numpy.ndarray,\n    infinity: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-literal\">None</span>,\n</span>) -&gt; numpy.ndarray:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Iterate the function &quot;eval_function&quot; exactly nb_iterations times.\n    The first argument of the function is a parameter which is contained in\n    function_params. The variable z_0 is an array that contains the initial\n    values to iterate from.\n    This function returns the final iterates.\n\n    &gt;&gt;&gt; iterate_function(eval_quadratic_polynomial, 0, 3, numpy.array([0,1,2])).shape\n    (3,)\n    &gt;&gt;&gt; numpy.round(iterate_function(eval_quadratic_polynomial,\n    ... 0,\n    ... 3,\n    ... numpy.array([0,1,2]))[0])\n    0j\n    &gt;&gt;&gt; numpy.round(iterate_function(eval_quadratic_polynomial,\n    ... 0,\n    ... 3,\n    ... numpy.array([0,1,2]))[1])\n    (1+0j)\n    &gt;&gt;&gt; numpy.round(iterate_function(eval_quadratic_polynomial,\n    ... 0,\n    ... 3,\n    ... numpy.array([0,1,2]))[2])\n    (256+0j)\n    &quot;&quot;&quot;</span>\n\n    z_n = z_0.astype(<span class=\"hljs-string\">&quot;complex64&quot;</span>)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(nb_iterations):\n        z_n = eval_function(function_params, z_n)\n        <span class=\"hljs-keyword\">if</span> infinity <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            numpy.nan_to_num(z_n, copy=<span class=\"hljs-literal\">False</span>, nan=infinity)\n            z_n[<span class=\"hljs-built_in\">abs</span>(z_n) == numpy.inf] = infinity\n    <span class=\"hljs-keyword\">return</span> z_n\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show_results</span>(<span class=\"hljs-params\">\n    function_label: <span class=\"hljs-built_in\">str</span>,\n    function_params: <span class=\"hljs-type\">Any</span>,\n    escape_radius: <span class=\"hljs-built_in\">float</span>,\n    z_final: numpy.ndarray,\n</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Plots of whether the absolute value of z_final is greater than\n    the value of escape_radius. Adds the function_label and function_params to\n    the title.\n\n    &gt;&gt;&gt; show_results(&#x27;80&#x27;, 0, 1, numpy.array([[0,1,.5],[.4,2,1.1],[.2,1,1.3]]))\n    &quot;&quot;&quot;</span>\n\n    abs_z_final = (<span class=\"hljs-built_in\">abs</span>(z_final)).transpose()\n    abs_z_final[:, :] = abs_z_final[::-<span class=\"hljs-number\">1</span>, :]\n    pyplot.matshow(abs_z_final &lt; escape_radius)\n    pyplot.title(<span class=\"hljs-string\">f&quot;Julia set of $<span class=\"hljs-subst\">{function_label}</span>$, $c=<span class=\"hljs-subst\">{function_params}</span>$&quot;</span>)\n    pyplot.show()\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">ignore_overflow_warnings</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Ignore some overflow and invalid value warnings.\n\n    &gt;&gt;&gt; ignore_overflow_warnings()\n    &quot;&quot;&quot;</span>\n    warnings.filterwarnings(\n        <span class=\"hljs-string\">&quot;ignore&quot;</span>, category=RuntimeWarning, message=<span class=\"hljs-string\">&quot;overflow encountered in multiply&quot;</span>\n    )\n    warnings.filterwarnings(\n        <span class=\"hljs-string\">&quot;ignore&quot;</span>,\n        category=RuntimeWarning,\n        message=<span class=\"hljs-string\">&quot;invalid value encountered in multiply&quot;</span>,\n    )\n    warnings.filterwarnings(\n        <span class=\"hljs-string\">&quot;ignore&quot;</span>, category=RuntimeWarning, message=<span class=\"hljs-string\">&quot;overflow encountered in absolute&quot;</span>\n    )\n    warnings.filterwarnings(\n        <span class=\"hljs-string\">&quot;ignore&quot;</span>, category=RuntimeWarning, message=<span class=\"hljs-string\">&quot;overflow encountered in exp&quot;</span>\n    )\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n\n    z_0 = prepare_grid(window_size, nb_pixels)\n\n    ignore_overflow_warnings()  <span class=\"hljs-comment\"># See file header for explanations</span>\n\n    nb_iterations = <span class=\"hljs-number\">24</span>\n    escape_radius = <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">abs</span>(c_cauliflower) + <span class=\"hljs-number\">1</span>\n    z_final = iterate_function(\n        eval_quadratic_polynomial,\n        c_cauliflower,\n        nb_iterations,\n        z_0,\n        infinity=<span class=\"hljs-number\">1.1</span> * escape_radius,\n    )\n    show_results(<span class=\"hljs-string\">&quot;z^2+c&quot;</span>, c_cauliflower, escape_radius, z_final)\n\n    nb_iterations = <span class=\"hljs-number\">64</span>\n    escape_radius = <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">abs</span>(c_polynomial_1) + <span class=\"hljs-number\">1</span>\n    z_final = iterate_function(\n        eval_quadratic_polynomial,\n        c_polynomial_1,\n        nb_iterations,\n        z_0,\n        infinity=<span class=\"hljs-number\">1.1</span> * escape_radius,\n    )\n    show_results(<span class=\"hljs-string\">&quot;z^2+c&quot;</span>, c_polynomial_1, escape_radius, z_final)\n\n    nb_iterations = <span class=\"hljs-number\">161</span>\n    escape_radius = <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">abs</span>(c_polynomial_2) + <span class=\"hljs-number\">1</span>\n    z_final = iterate_function(\n        eval_quadratic_polynomial,\n        c_polynomial_2,\n        nb_iterations,\n        z_0,\n        infinity=<span class=\"hljs-number\">1.1</span> * escape_radius,\n    )\n    show_results(<span class=\"hljs-string\">&quot;z^2+c&quot;</span>, c_polynomial_2, escape_radius, z_final)\n\n    nb_iterations = <span class=\"hljs-number\">12</span>\n    escape_radius = <span class=\"hljs-number\">10000.0</span>\n    z_final = iterate_function(\n        eval_exponential,\n        c_exponential,\n        nb_iterations,\n        z_0 + <span class=\"hljs-number\">2</span>,\n        infinity=<span class=\"hljs-number\">1.0e10</span>,\n    )\n    show_results(<span class=\"hljs-string\">&quot;e^z+c&quot;</span>, c_exponential, escape_radius, z_final)\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Alexandre De Zotti",
      "email": "alexn11@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}