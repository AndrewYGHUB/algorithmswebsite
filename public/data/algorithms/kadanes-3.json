{
  "slug": "kadanes-3",
  "name": "Kadanes 3",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "others/kadanes3.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/others/kadanes3.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Efficient implementation for maximum contiguous subarray sum by\n * [Kadane&#x27;s\n * algorithm](https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/).\n * @details\n * Our task is to take length of array and then the whole array as input from\n * the user and then calculate the maximum contiguos subarray sum for the\n * input array, using the kadane&#x27;s algorithm.\n *\n * There can be a case that all the elements in the input array are negative.\n * In that case, the least value among all elements is the maximum sum with\n * subarray length = 1.\n * @author [Abhijeet Tiwari](https://github.com/thisabhijeet)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span>     <span class=\"hljs-comment\">/// for std::array</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;climits&gt;</span>   <span class=\"hljs-comment\">/// for INT_MIN value</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief Utility function to check the current maximum number\n * \\param arr input array\n * \\param length length of the input array\n * \\returns maximum contiguous subarray sum\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;std::<span class=\"hljs-type\">size_t</span> SIZE&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">max_subarray_sum</span><span class=\"hljs-params\">(std::array&lt;<span class=\"hljs-type\">int64_t</span>, SIZE&gt; arr, <span class=\"hljs-type\">uint64_t</span> length)</span> </span>{\n    <span class=\"hljs-type\">int64_t</span> current_max = INT_MIN, current_sum = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; length; i++) {\n        current_sum = current_sum + arr[i];\n        <span class=\"hljs-keyword\">if</span> (current_max &lt; current_sum) {\n            current_max = current_sum;\n        }\n\n        <span class=\"hljs-keyword\">if</span> (current_sum &lt; <span class=\"hljs-number\">0</span>) {\n            current_sum = <span class=\"hljs-number\">0</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> current_max;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    std::array&lt;<span class=\"hljs-type\">int64_t</span>, 4&gt; arr = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>};\n    std::array&lt;<span class=\"hljs-type\">int64_t</span>, 5&gt; arr1 = {<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">-4</span>, <span class=\"hljs-number\">-6</span>, <span class=\"hljs-number\">7</span>};\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">max_subarray_sum</span>(arr, <span class=\"hljs-number\">4</span>) == <span class=\"hljs-number\">10</span>);\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">max_subarray_sum</span>(arr1, <span class=\"hljs-number\">5</span>) == <span class=\"hljs-number\">7</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;All test cases have passed!\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Below is the code for accepting array from the user and then</span>\n    <span class=\"hljs-comment\">// calling the function for the required output.</span>\n    <span class=\"hljs-comment\">// It has been commented for now so that the test() function can run</span>\n    <span class=\"hljs-comment\">// and the test cases can be verified.</span>\n    <span class=\"hljs-comment\">// code for accepting array from user starts</span>\n\n    <span class=\"hljs-comment\">// std::size_t n;  // variable for length of input array</span>\n    <span class=\"hljs-comment\">// std::cout &lt;&lt; &quot;Enter length of the array: &quot;;</span>\n    <span class=\"hljs-comment\">// std::cin &gt;&gt; n;</span>\n    <span class=\"hljs-comment\">// std::array&lt;int64_t, 100&gt; arr = {0};</span>\n    <span class=\"hljs-comment\">// // we need to give a constant in size. Hence we have allocated 100</span>\n    <span class=\"hljs-comment\">// for now.</span>\n    <span class=\"hljs-comment\">// for (int i = 0; i &lt; n; i++)</span>\n    <span class=\"hljs-comment\">// taking input of each element of the array</span>\n    <span class=\"hljs-comment\">// {</span>\n    <span class=\"hljs-comment\">//     std::cin &gt;&gt; arr[i];</span>\n    <span class=\"hljs-comment\">// }</span>\n    <span class=\"hljs-comment\">// code for accepting array from user ends</span>\n\n    <span class=\"hljs-comment\">// int max_sum = max_subarray_sum(arr, n);</span>\n    <span class=\"hljs-comment\">// std::cout &lt;&lt; &quot;Maximum contiguous sum for this array is : &quot; &lt;&lt; max_sum</span>\n    <span class=\"hljs-comment\">//           &lt;&lt; std::endl;</span>\n\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Abhijeet Tiwari",
      "email": "85331806+thisabhijeet@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}