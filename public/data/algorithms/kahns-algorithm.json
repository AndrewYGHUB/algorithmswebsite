{
  "slug": "kahns-algorithm",
  "name": "Kahns Algorithm",
  "categories": [
    "datastructures",
    "graphs"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/graphs/KahnsAlgorithm.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/graphs/KahnsAlgorithm.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.graphs;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n<span class=\"hljs-keyword\">import</span> java.util.LinkedHashMap;\n<span class=\"hljs-keyword\">import</span> java.util.HashMap;\n<span class=\"hljs-keyword\">import</span> java.util.Set;\n<span class=\"hljs-keyword\">import</span> java.util.Queue;\n<span class=\"hljs-keyword\">import</span> java.util.LinkedList;\n\n<span class=\"hljs-comment\">/**\n * An algorithm that sorts a graph in toplogical order.\n */</span>\n<span class=\"hljs-comment\">/**\n * A class that represents the adjaceny list of a graph\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AdjacencyList</span>&lt;E <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;E&gt;&gt; {\n\n    Map&lt;E, ArrayList&lt;E&gt;&gt; adj;\n\n    AdjacencyList() {\n        adj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedHashMap</span>&lt;E, ArrayList&lt;E&gt;&gt;();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * This function adds an Edge to the adjaceny list\n     *\n     * <span class=\"hljs-doctag\">@param</span> from , the vertex the edge is from\n     * <span class=\"hljs-doctag\">@param</span> to, the vertex the edge is going to\n     */</span>\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(E from, E to)</span> {\n        <span class=\"hljs-keyword\">try</span> {\n            adj.get(from).add(to);\n        } <span class=\"hljs-keyword\">catch</span> (Exception E) {\n            adj.put(from, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;E&gt;());\n            adj.get(from).add(to);\n        }\n        <span class=\"hljs-keyword\">if</span> (!adj.containsKey(to)) {\n            adj.put(to, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;E&gt;());\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@param</span> v, A vertex in a graph\n     * <span class=\"hljs-doctag\">@return</span> returns an ArrayList of all the adjacents of vertex v\n     */</span>\n    ArrayList&lt;E&gt; <span class=\"hljs-title function_\">getAdjacents</span><span class=\"hljs-params\">(E v)</span> {\n        <span class=\"hljs-keyword\">return</span> adj.get(v);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@return</span> returns a set of all vertices in the graph\n     */</span>\n    Set&lt;E&gt; <span class=\"hljs-title function_\">getVertices</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> adj.keySet();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Prints the adjacency list\n     */</span>\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printGraph</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">for</span> (E vertex : adj.keySet()) {\n            System.out.print(vertex + <span class=\"hljs-string\">&quot; : &quot;</span>);\n            <span class=\"hljs-keyword\">for</span> (E adjacent : adj.get(vertex)) {\n                System.out.print(adjacent + <span class=\"hljs-string\">&quot; &quot;</span>);\n            }\n            System.out.println();\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TopologicalSort</span>&lt;E <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;E&gt;&gt; {\n\n    AdjacencyList&lt;E&gt; graph;\n    Map&lt;E, Integer&gt; inDegree;\n\n    TopologicalSort(AdjacencyList&lt;E&gt; graph) {\n        <span class=\"hljs-built_in\">this</span>.graph = graph;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculates the in degree of all vertices\n     */</span>\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">calculateInDegree</span><span class=\"hljs-params\">()</span> {\n        inDegree = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n        <span class=\"hljs-keyword\">for</span> (E vertex : graph.getVertices()) {\n            <span class=\"hljs-keyword\">if</span> (!inDegree.containsKey(vertex)) {\n                inDegree.put(vertex, <span class=\"hljs-number\">0</span>);\n            }\n            <span class=\"hljs-keyword\">for</span> (E adjacent : graph.getAdjacents(vertex)) {\n                <span class=\"hljs-keyword\">try</span> {\n                    inDegree.put(adjacent, inDegree.get(adjacent) + <span class=\"hljs-number\">1</span>);\n                } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n                    inDegree.put(adjacent, <span class=\"hljs-number\">1</span>);\n                }\n            }\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Returns an ArrayList with vertices arranged in topological order\n     */</span>\n    ArrayList&lt;E&gt; <span class=\"hljs-title function_\">topSortOrder</span><span class=\"hljs-params\">()</span> {\n        calculateInDegree();\n        Queue&lt;E&gt; q = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;E&gt;();\n\n        <span class=\"hljs-keyword\">for</span> (E vertex : inDegree.keySet()) {\n            <span class=\"hljs-keyword\">if</span> (inDegree.get(vertex) == <span class=\"hljs-number\">0</span>) {\n                q.add(vertex);\n            }\n        }\n\n        ArrayList&lt;E&gt; answer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n\n        <span class=\"hljs-keyword\">while</span> (!q.isEmpty()) {\n            <span class=\"hljs-type\">E</span> <span class=\"hljs-variable\">current</span> <span class=\"hljs-operator\">=</span> q.poll();\n            answer.add(current);\n            <span class=\"hljs-keyword\">for</span> (E adjacent : graph.getAdjacents(current)) {\n                inDegree.put(adjacent, inDegree.get(adjacent) - <span class=\"hljs-number\">1</span>);\n                <span class=\"hljs-keyword\">if</span> (inDegree.get(adjacent) == <span class=\"hljs-number\">0</span>) {\n                    q.add(adjacent);\n                }\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> answer;\n\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * A driver class that sorts a given graph in topological order.\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">KahnsAlgorithm</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n        <span class=\"hljs-comment\">//Graph definition and initialization</span>\n        AdjacencyList&lt;String&gt; graph = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AdjacencyList</span>&lt;&gt;();\n        graph.addEdge(<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>);\n        graph.addEdge(<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>);\n        graph.addEdge(<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>);\n        graph.addEdge(<span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>);\n        graph.addEdge(<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;u&quot;</span>);\n        graph.addEdge(<span class=\"hljs-string\">&quot;u&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>);\n\n        TopologicalSort&lt;String&gt; topSort = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TopologicalSort</span>&lt;&gt;(graph);\n\n        <span class=\"hljs-comment\">//Printing the order</span>\n        <span class=\"hljs-keyword\">for</span> (String s : topSort.topSortOrder()) {\n            System.out.print(s + <span class=\"hljs-string\">&quot; &quot;</span>);\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Dhruv Panwar",
      "email": "60705641+dhruvinfo28@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}