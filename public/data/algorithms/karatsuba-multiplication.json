{
  "slug": "karatsuba-multiplication",
  "name": "Karatsuba Multiplication",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/math/karatsuba_multiplication.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/math/karatsuba_multiplication.rs",
      "code": "<span class=\"hljs-comment\">/*\nFinds the product of two numbers using Karatsuba Algorithm\n */</span>\n<span class=\"hljs-keyword\">use</span> std::cmp::max;\n<span class=\"hljs-keyword\">const</span> TEN: <span class=\"hljs-type\">i128</span> = <span class=\"hljs-number\">10</span>;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">multiply</span>(num1: <span class=\"hljs-type\">i128</span>, num2: <span class=\"hljs-type\">i128</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">i128</span> {\n    _multiply(num1, num2)\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">_multiply</span>(num1: <span class=\"hljs-type\">i128</span>, num2: <span class=\"hljs-type\">i128</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">i128</span> {\n    <span class=\"hljs-keyword\">if</span> num1 &lt; <span class=\"hljs-number\">10</span> || num2 &lt; <span class=\"hljs-number\">10</span> {\n        <span class=\"hljs-keyword\">return</span> num1 * num2;\n    }\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">num1_str</span> = num1.<span class=\"hljs-title function_ invoke__\">to_string</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">num2_str</span> = num2.<span class=\"hljs-title function_ invoke__\">to_string</span>();\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">n</span> = <span class=\"hljs-title function_ invoke__\">max</span>(num1_str.<span class=\"hljs-title function_ invoke__\">len</span>(), num2_str.<span class=\"hljs-title function_ invoke__\">len</span>());\n    num1_str = <span class=\"hljs-title function_ invoke__\">normalize</span>(num1_str, n);\n    num2_str = <span class=\"hljs-title function_ invoke__\">normalize</span>(num2_str, n);\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">a</span> = &amp;num1_str[<span class=\"hljs-number\">0</span>..n / <span class=\"hljs-number\">2</span>];\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">b</span> = &amp;num1_str[n / <span class=\"hljs-number\">2</span>..];\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">c</span> = &amp;num2_str[<span class=\"hljs-number\">0</span>..n / <span class=\"hljs-number\">2</span>];\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">d</span> = &amp;num2_str[n / <span class=\"hljs-number\">2</span>..];\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">ac</span> = _multiply(a.<span class=\"hljs-title function_ invoke__\">parse</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(), c.<span class=\"hljs-title function_ invoke__\">parse</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>());\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">bd</span> = _multiply(b.<span class=\"hljs-title function_ invoke__\">parse</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(), d.<span class=\"hljs-title function_ invoke__\">parse</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>());\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">a_b</span>: <span class=\"hljs-type\">i128</span> = a.parse::&lt;<span class=\"hljs-type\">i128</span>&gt;().<span class=\"hljs-title function_ invoke__\">unwrap</span>() + b.parse::&lt;<span class=\"hljs-type\">i128</span>&gt;().<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">c_d</span>: <span class=\"hljs-type\">i128</span> = c.parse::&lt;<span class=\"hljs-type\">i128</span>&gt;().<span class=\"hljs-title function_ invoke__\">unwrap</span>() + d.parse::&lt;<span class=\"hljs-type\">i128</span>&gt;().<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">ad_bc</span> = _multiply(a_b, c_d) - (ac + bd);\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">m</span> = n / <span class=\"hljs-number\">2</span> + n % <span class=\"hljs-number\">2</span>;\n    (TEN.<span class=\"hljs-title function_ invoke__\">pow</span>(<span class=\"hljs-number\">2</span> * m <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>) * ac) + (TEN.<span class=\"hljs-title function_ invoke__\">pow</span>(m <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>) * ad_bc) + (bd)\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">normalize</span>(<span class=\"hljs-keyword\">mut</span> a: <span class=\"hljs-type\">String</span>, n: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">String</span> {\n    <span class=\"hljs-title function_ invoke__\">for</span> (counter, _) <span class=\"hljs-title function_ invoke__\">in</span> (a.<span class=\"hljs-title function_ invoke__\">len</span>()..n).<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\n        a.<span class=\"hljs-title function_ invoke__\">insert</span>(counter, <span class=\"hljs-string\">&#x27;0&#x27;</span>);\n    }\n    a\n}\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> test {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_1</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">n1</span>: <span class=\"hljs-type\">i128</span> = <span class=\"hljs-number\">314159265</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">n2</span>: <span class=\"hljs-type\">i128</span> = <span class=\"hljs-number\">314159265</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">ans</span> = <span class=\"hljs-title function_ invoke__\">multiply</span>(n1, n2);\n        <span class=\"hljs-built_in\">assert_eq!</span>(ans, n1 * n2);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_2</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">n1</span>: <span class=\"hljs-type\">i128</span> = <span class=\"hljs-number\">3141592653589793232</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">n2</span>: <span class=\"hljs-type\">i128</span> = <span class=\"hljs-number\">2718281828459045233</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">ans</span> = <span class=\"hljs-title function_ invoke__\">multiply</span>(n1, n2);\n        <span class=\"hljs-built_in\">assert_eq!</span>(ans, n1 * n2);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_3</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">n1</span>: <span class=\"hljs-type\">i128</span> = <span class=\"hljs-number\">123456789</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">n2</span>: <span class=\"hljs-type\">i128</span> = <span class=\"hljs-number\">101112131415</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">ans</span> = <span class=\"hljs-title function_ invoke__\">multiply</span>(n1, n2);\n        <span class=\"hljs-built_in\">assert_eq!</span>(ans, n1 * n2);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "zain2323",
      "email": "57249519+zain2323@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}