{
  "slug": "keith-number-checker",
  "name": "Keith Number Checker",
  "categories": [
    "numeric"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./Algorithms/Numeric/KeithNumberChecker.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/Algorithms/Numeric/KeithNumberChecker.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Numeric</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>  In number theory, a Keith number or repfigit number is a natural number n in a given number base b with k digits such that</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>  when a sequence is created such that the first k terms are the k digits of n and each subsequent term is the sum of the</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>  previous k terms, n is part of the sequence.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">KeithNumberChecker</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Checks if a number is a Keith number or not.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;number&quot;&gt;</span>Number to check.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>True if it is a Keith number; False otherwise.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">IsKeithNumber</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> number</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (number &lt; <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(number)}</span> cannot be negative&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">var</span> tempNumber = number;\n\n            <span class=\"hljs-keyword\">var</span> stringNumber = number.ToString();\n\n            <span class=\"hljs-keyword\">var</span> digitsInNumber = stringNumber.Length;\n\n            <span class=\"hljs-comment\">/* storing the terms of the series */</span>\n            <span class=\"hljs-keyword\">var</span> termsArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[number];\n\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = digitsInNumber - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--)\n            {\n                termsArray[i] = tempNumber % <span class=\"hljs-number\">10</span>;\n                tempNumber /= <span class=\"hljs-number\">10</span>;\n            }\n\n            <span class=\"hljs-keyword\">var</span> sum = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">var</span> k = digitsInNumber;\n            <span class=\"hljs-keyword\">while</span> (sum &lt; number)\n            {\n                sum = <span class=\"hljs-number\">0</span>;\n\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">1</span>; j &lt;= digitsInNumber; j++)\n                {\n                    sum += termsArray[k - j];\n                }\n\n                termsArray[k] = sum;\n                k++;\n            }\n\n            <span class=\"hljs-keyword\">return</span> sum == number;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Keith Stanley",
      "email": "46853837+iamstan13y@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}