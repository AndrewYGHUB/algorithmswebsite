{
  "slug": "knapsack-memoization",
  "name": "Knapsack Memoization",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/dynamicprogramming/KnapsackMemoization.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/dynamicprogramming/KnapsackMemoization.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\n\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n\n<span class=\"hljs-comment\">/**\n * Recursive Solution for 0-1 knapsack with memoization\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">KnapsackMemoization</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[][] t;\n\n    <span class=\"hljs-comment\">// Returns the maximum value that can</span>\n    <span class=\"hljs-comment\">// be put in a knapsack of capacity W</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">knapsack</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] wt, <span class=\"hljs-type\">int</span>[] value, <span class=\"hljs-type\">int</span> W, <span class=\"hljs-type\">int</span> n)</span> {\n        <span class=\"hljs-keyword\">if</span> (t[n][W] != -<span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-keyword\">return</span> t[n][W];\n        }\n        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span> || W == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (wt[n - <span class=\"hljs-number\">1</span>] &lt;= W) {\n            t[n - <span class=\"hljs-number\">1</span>][W - wt[n - <span class=\"hljs-number\">1</span>]] = knapsack(wt, value, W - wt[n - <span class=\"hljs-number\">1</span>], n - <span class=\"hljs-number\">1</span>);\n            <span class=\"hljs-comment\">// Include item in the bag. In that case add the value of the item and call for the remaining items</span>\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">tmp1</span> <span class=\"hljs-operator\">=</span> value[n - <span class=\"hljs-number\">1</span>] + t[n - <span class=\"hljs-number\">1</span>][W - wt[n - <span class=\"hljs-number\">1</span>]];\n            <span class=\"hljs-comment\">// Don&#x27;t include the nth item in the bag anl call for remaining item without reducing the weight</span>\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">tmp2</span> <span class=\"hljs-operator\">=</span> knapsack(wt, value, W, n - <span class=\"hljs-number\">1</span>);\n            t[n - <span class=\"hljs-number\">1</span>][W] = tmp2;\n            <span class=\"hljs-comment\">// include the larger one</span>\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">tmp</span> <span class=\"hljs-operator\">=</span> tmp1 &gt; tmp2 ? tmp1 : tmp2;\n            t[n][W] = tmp;\n            <span class=\"hljs-keyword\">return</span> tmp;\n            <span class=\"hljs-comment\">// If Weight for the item is more than the desired weight then don&#x27;t include it</span>\n            <span class=\"hljs-comment\">// Call for rest of the n-1 items</span>\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (wt[n - <span class=\"hljs-number\">1</span>] &gt; W) {\n            t[n][W] = knapsack(wt, value, W, n - <span class=\"hljs-number\">1</span>);\n            <span class=\"hljs-keyword\">return</span> t[n][W];\n        }\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-comment\">// Driver code</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\n        <span class=\"hljs-type\">int</span>[] wt = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>};\n        <span class=\"hljs-type\">int</span>[] value = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>};\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">W</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;\n        t = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[wt.length + <span class=\"hljs-number\">1</span>][W + <span class=\"hljs-number\">1</span>];\n        Arrays.stream(t).forEach(a -&gt; Arrays.fill(a, -<span class=\"hljs-number\">1</span>));\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">res</span> <span class=\"hljs-operator\">=</span> knapsack(wt, value, W, wt.length);\n        System.out.println(<span class=\"hljs-string\">&quot;Maximum knapsack value &quot;</span> + res);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "921vikram",
      "email": "f2004921@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}