{
  "slug": "kth-smallest-heap",
  "name": "Kth Smallest Heap",
  "categories": [
    "searches"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/searching/kth_smallest_heap.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/searching/kth_smallest_heap.rs",
      "code": "<span class=\"hljs-keyword\">use</span> crate::data_structures::MaxHeap;\n<span class=\"hljs-keyword\">use</span> std::cmp::{<span class=\"hljs-built_in\">Ord</span>, Ordering};\n\n<span class=\"hljs-comment\">/// Returns k-th smallest element of an array.</span>\n<span class=\"hljs-comment\">/// Time complexity is stably O(nlog(k)) in all cases</span>\n<span class=\"hljs-comment\">/// Extra space is required to maintain the heap, and it doesn&#x27;t</span>\n<span class=\"hljs-comment\">/// mutate the input list.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// It is preferrable to the partition-based algorithm in cases when</span>\n<span class=\"hljs-comment\">/// we want to maintain the kth smallest element dynamically against</span>\n<span class=\"hljs-comment\">/// a stream of elements. In that case, once the heap is built, further</span>\n<span class=\"hljs-comment\">/// operation&#x27;s complexity is O(log(k)).</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">kth_smallest_heap</span>&lt;T&gt;(input: &amp;[T], k: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;T&gt;\n<span class=\"hljs-keyword\">where</span>\n    T: <span class=\"hljs-built_in\">Default</span> + <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Copy</span>,\n{\n    <span class=\"hljs-keyword\">if</span> input.<span class=\"hljs-title function_ invoke__\">len</span>() &lt; k {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>;\n    }\n\n    <span class=\"hljs-comment\">// heap will maintain the kth smallest elements</span>\n    <span class=\"hljs-comment\">// seen so far, when new elements, E_new arrives,</span>\n    <span class=\"hljs-comment\">// it is compared with the largest element of the</span>\n    <span class=\"hljs-comment\">// current Heap E_large, which is the current kth</span>\n    <span class=\"hljs-comment\">// smallest elements.</span>\n    <span class=\"hljs-comment\">// if E_new &gt; E_large, then E_new cannot be the kth</span>\n    <span class=\"hljs-comment\">// smallest because there are already k elements smaller</span>\n    <span class=\"hljs-comment\">// than it</span>\n    <span class=\"hljs-comment\">// otherwise, E_large cannot be the kth smallest, and should</span>\n    <span class=\"hljs-comment\">// be removed from the heap and E_new should be added</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">heap</span> = MaxHeap::<span class=\"hljs-title function_ invoke__\">new</span>();\n\n    <span class=\"hljs-comment\">// first k elements goes to the heap as the baseline</span>\n    <span class=\"hljs-keyword\">for</span> &amp;val <span class=\"hljs-keyword\">in</span> input.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">take</span>(k) {\n        heap.<span class=\"hljs-title function_ invoke__\">add</span>(val);\n    }\n\n    <span class=\"hljs-keyword\">for</span> &amp;val <span class=\"hljs-keyword\">in</span> input.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">skip</span>(k) {\n        <span class=\"hljs-comment\">// compare new value to the current kth smallest value</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">cur_big</span> = heap.<span class=\"hljs-title function_ invoke__\">next</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(); <span class=\"hljs-comment\">// heap.next() can&#x27;t be None</span>\n        <span class=\"hljs-keyword\">match</span> val.<span class=\"hljs-title function_ invoke__\">cmp</span>(&amp;cur_big) {\n            Ordering::Greater =&gt; {\n                heap.<span class=\"hljs-title function_ invoke__\">add</span>(cur_big);\n            }\n            _ =&gt; {\n                heap.<span class=\"hljs-title function_ invoke__\">add</span>(val);\n            }\n        }\n    }\n\n    heap.<span class=\"hljs-title function_ invoke__\">next</span>()\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">zero</span>: [<span class=\"hljs-type\">u8</span>; <span class=\"hljs-number\">0</span>] = [];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">first</span> = <span class=\"hljs-title function_ invoke__\">kth_smallest_heap</span>(&amp;zero, <span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-literal\">None</span>, first);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">one_element</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">one</span> = [<span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">first</span> = <span class=\"hljs-title function_ invoke__\">kth_smallest_heap</span>(&amp;one, <span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, first.<span class=\"hljs-title function_ invoke__\">unwrap</span>());\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">many_elements</span>() {\n        <span class=\"hljs-comment\">// 0 1 3 4 5 7 8 9 9 10 12 13 16 17</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">many</span> = [<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>];\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">first</span> = <span class=\"hljs-title function_ invoke__\">kth_smallest_heap</span>(&amp;many, <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">third</span> = <span class=\"hljs-title function_ invoke__\">kth_smallest_heap</span>(&amp;many, <span class=\"hljs-number\">3</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">sixth</span> = <span class=\"hljs-title function_ invoke__\">kth_smallest_heap</span>(&amp;many, <span class=\"hljs-number\">6</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">fourteenth</span> = <span class=\"hljs-title function_ invoke__\">kth_smallest_heap</span>(&amp;many, <span class=\"hljs-number\">14</span>);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, first.<span class=\"hljs-title function_ invoke__\">unwrap</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">3</span>, third.<span class=\"hljs-title function_ invoke__\">unwrap</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">7</span>, sixth.<span class=\"hljs-title function_ invoke__\">unwrap</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">17</span>, fourteenth.<span class=\"hljs-title function_ invoke__\">unwrap</span>());\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "yangchenye",
      "email": "42916814+YangchenYe323@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}