{
  "slug": "kthnumber",
  "name": "Kthnumber",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "math/kthnumber.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/math/kthnumber.go",
      "code": "<span class=\"hljs-keyword\">package</span> math\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;github.com/TheAlgorithms/Go/search&quot;</span>\n\t<span class=\"hljs-string\">&quot;github.com/TheAlgorithms/Go/sort&quot;</span>\n)\n\n<span class=\"hljs-comment\">// FindKthMax returns the kth large element given an integer slice</span>\n<span class=\"hljs-comment\">// with nil `error` if found and returns -1 with `error` `search.ErrNotFound`</span>\n<span class=\"hljs-comment\">// if not found. <span class=\"hljs-doctag\">NOTE:</span> The `nums` slice gets mutated in the process.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">FindKthMax</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, k <span class=\"hljs-type\">int</span>)</span></span> (<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">error</span>) {\n\tindex := <span class=\"hljs-built_in\">len</span>(nums) - k\n\t<span class=\"hljs-keyword\">return</span> kthNumber(nums, index)\n}\n\n<span class=\"hljs-comment\">// FindKthMin returns kth small element given an integer slice</span>\n<span class=\"hljs-comment\">// with nil `error` if found and returns -1 with `error` `search.ErrNotFound`</span>\n<span class=\"hljs-comment\">// if not found. <span class=\"hljs-doctag\">NOTE:</span> The `nums` slice gets mutated in the process.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">FindKthMin</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, k <span class=\"hljs-type\">int</span>)</span></span> (<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">error</span>) {\n\tindex := k - <span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-keyword\">return</span> kthNumber(nums, index)\n}\n\n<span class=\"hljs-comment\">// kthNumber use the selection algorithm (based on the partition method - the same one as used in quicksort).</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">kthNumber</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, k <span class=\"hljs-type\">int</span>)</span></span> (<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">error</span>) {\n\t<span class=\"hljs-keyword\">if</span> k &lt; <span class=\"hljs-number\">0</span> || k &gt;= <span class=\"hljs-built_in\">len</span>(nums) {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>, search.ErrNotFound\n\t}\n\tstart := <span class=\"hljs-number\">0</span>\n\tend := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-keyword\">for</span> start &lt;= end {\n\t\tpivot := sort.Partition(nums, start, end)\n\t\t<span class=\"hljs-keyword\">if</span> k == pivot {\n\t\t\t<span class=\"hljs-keyword\">return</span> nums[pivot], <span class=\"hljs-literal\">nil</span>\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> k &gt; pivot {\n\t\t\tstart = pivot + <span class=\"hljs-number\">1</span>\n\t\t\t<span class=\"hljs-keyword\">continue</span>\n\t\t}\n\t\tend = pivot - <span class=\"hljs-number\">1</span>\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>, search.ErrNotFound\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}