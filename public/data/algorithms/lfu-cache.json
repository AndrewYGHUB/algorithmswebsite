{
  "slug": "lfu-cache",
  "name": "Lfu Cache",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "other/lfu_cache.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/other/lfu_cache.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">from</span> collections.abc <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Callable</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Generic</span>, TypeVar\n\nT = TypeVar(<span class=\"hljs-string\">&quot;T&quot;</span>)\nU = TypeVar(<span class=\"hljs-string\">&quot;U&quot;</span>)\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DoubleLinkedListNode</span>(<span class=\"hljs-type\">Generic</span>[T, U]):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Double Linked List Node built specifically for LFU Cache\n\n    &gt;&gt;&gt; node = DoubleLinkedListNode(1,1)\n    &gt;&gt;&gt; node\n    Node: key: 1, val: 1, freq: 0, has next: False, has prev: False\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, key: T | <span class=\"hljs-literal\">None</span>, val: U | <span class=\"hljs-literal\">None</span></span>):\n        self.key = key\n        self.val = val\n        self.freq: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span>\n        self.<span class=\"hljs-built_in\">next</span>: DoubleLinkedListNode[T, U] | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\n        self.prev: DoubleLinkedListNode[T, U] | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Node: key: {}, val: {}, freq: {}, has next: {}, has prev: {}&quot;</span>.<span class=\"hljs-built_in\">format</span>(\n            self.key, self.val, self.freq, self.<span class=\"hljs-built_in\">next</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>, self.prev <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        )\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DoubleLinkedList</span>(<span class=\"hljs-type\">Generic</span>[T, U]):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Double Linked List built specifically for LFU Cache\n\n    &gt;&gt;&gt; dll: DoubleLinkedList = DoubleLinkedList()\n    &gt;&gt;&gt; dll\n    DoubleLinkedList,\n        Node: key: None, val: None, freq: 0, has next: True, has prev: False,\n        Node: key: None, val: None, freq: 0, has next: False, has prev: True\n\n    &gt;&gt;&gt; first_node = DoubleLinkedListNode(1,10)\n    &gt;&gt;&gt; first_node\n    Node: key: 1, val: 10, freq: 0, has next: False, has prev: False\n\n\n    &gt;&gt;&gt; dll.add(first_node)\n    &gt;&gt;&gt; dll\n    DoubleLinkedList,\n        Node: key: None, val: None, freq: 0, has next: True, has prev: False,\n        Node: key: 1, val: 10, freq: 1, has next: True, has prev: True,\n        Node: key: None, val: None, freq: 0, has next: False, has prev: True\n\n    &gt;&gt;&gt; # node is mutated\n    &gt;&gt;&gt; first_node\n    Node: key: 1, val: 10, freq: 1, has next: True, has prev: True\n\n    &gt;&gt;&gt; second_node = DoubleLinkedListNode(2,20)\n    &gt;&gt;&gt; second_node\n    Node: key: 2, val: 20, freq: 0, has next: False, has prev: False\n\n    &gt;&gt;&gt; dll.add(second_node)\n    &gt;&gt;&gt; dll\n    DoubleLinkedList,\n        Node: key: None, val: None, freq: 0, has next: True, has prev: False,\n        Node: key: 1, val: 10, freq: 1, has next: True, has prev: True,\n        Node: key: 2, val: 20, freq: 1, has next: True, has prev: True,\n        Node: key: None, val: None, freq: 0, has next: False, has prev: True\n\n    &gt;&gt;&gt; removed_node = dll.remove(first_node)\n    &gt;&gt;&gt; assert removed_node == first_node\n    &gt;&gt;&gt; dll\n    DoubleLinkedList,\n        Node: key: None, val: None, freq: 0, has next: True, has prev: False,\n        Node: key: 2, val: 20, freq: 1, has next: True, has prev: True,\n        Node: key: None, val: None, freq: 0, has next: False, has prev: True\n\n\n    &gt;&gt;&gt; # Attempt to remove node not on list\n    &gt;&gt;&gt; removed_node = dll.remove(first_node)\n    &gt;&gt;&gt; removed_node is None\n    True\n\n    &gt;&gt;&gt; # Attempt to remove head or rear\n    &gt;&gt;&gt; dll.head\n    Node: key: None, val: None, freq: 0, has next: True, has prev: False\n    &gt;&gt;&gt; dll.remove(dll.head) is None\n    True\n\n    &gt;&gt;&gt; # Attempt to remove head or rear\n    &gt;&gt;&gt; dll.rear\n    Node: key: None, val: None, freq: 0, has next: False, has prev: True\n    &gt;&gt;&gt; dll.remove(dll.rear) is None\n    True\n\n\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.head: DoubleLinkedListNode[T, U] = DoubleLinkedListNode(<span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>)\n        self.rear: DoubleLinkedListNode[T, U] = DoubleLinkedListNode(<span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>)\n        self.head.<span class=\"hljs-built_in\">next</span>, self.rear.prev = self.rear, self.head\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        rep = [<span class=\"hljs-string\">&quot;DoubleLinkedList&quot;</span>]\n        node = self.head\n        <span class=\"hljs-keyword\">while</span> node.<span class=\"hljs-built_in\">next</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            rep.append(<span class=\"hljs-built_in\">str</span>(node))\n            node = node.<span class=\"hljs-built_in\">next</span>\n        rep.append(<span class=\"hljs-built_in\">str</span>(self.rear))\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;,\\n    &quot;</span>.join(rep)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">self, node: DoubleLinkedListNode[T, U]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Adds the given node at the tail of the list and shifting it to proper position\n        &quot;&quot;&quot;</span>\n\n        previous = self.rear.prev\n\n        <span class=\"hljs-comment\"># All nodes other than self.head are guaranteed to have non-None previous</span>\n        <span class=\"hljs-keyword\">assert</span> previous <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n\n        previous.<span class=\"hljs-built_in\">next</span> = node\n        node.prev = previous\n        self.rear.prev = node\n        node.<span class=\"hljs-built_in\">next</span> = self.rear\n        node.freq += <span class=\"hljs-number\">1</span>\n        self._position_node(node)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_position_node</span>(<span class=\"hljs-params\">self, node: DoubleLinkedListNode[T, U]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Moves node forward to maintain invariant of sort by freq value\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">while</span> node.prev <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> node.prev.freq &gt; node.freq:\n            <span class=\"hljs-comment\"># swap node with previous node</span>\n            previous_node = node.prev\n\n            node.prev = previous_node.prev\n            previous_node.<span class=\"hljs-built_in\">next</span> = node.prev\n            node.<span class=\"hljs-built_in\">next</span> = previous_node\n            previous_node.prev = node\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-params\">\n        self, node: DoubleLinkedListNode[T, U]\n    </span>) -&gt; DoubleLinkedListNode[T, U] | <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Removes and returns the given node from the list\n\n        Returns None if node.prev or node.next is None\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">if</span> node.prev <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">or</span> node.<span class=\"hljs-built_in\">next</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n\n        node.prev.<span class=\"hljs-built_in\">next</span> = node.<span class=\"hljs-built_in\">next</span>\n        node.<span class=\"hljs-built_in\">next</span>.prev = node.prev\n        node.prev = <span class=\"hljs-literal\">None</span>\n        node.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">return</span> node\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LFUCache</span>(<span class=\"hljs-type\">Generic</span>[T, U]):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    LFU Cache to store a given capacity of data. Can be used as a stand-alone object\n    or as a function decorator.\n\n    &gt;&gt;&gt; cache = LFUCache(2)\n    &gt;&gt;&gt; cache.set(1, 1)\n    &gt;&gt;&gt; cache.set(2, 2)\n    &gt;&gt;&gt; cache.get(1)\n    1\n    &gt;&gt;&gt; cache.set(3, 3)\n    &gt;&gt;&gt; cache.get(2) is None\n    True\n    &gt;&gt;&gt; cache.set(4, 4)\n    &gt;&gt;&gt; cache.get(1) is None\n    True\n    &gt;&gt;&gt; cache.get(3)\n    3\n    &gt;&gt;&gt; cache.get(4)\n    4\n    &gt;&gt;&gt; cache\n    CacheInfo(hits=3, misses=2, capacity=2, current_size=2)\n    &gt;&gt;&gt; @LFUCache.decorator(100)\n    ... def fib(num):\n    ...     if num in (1, 2):\n    ...         return 1\n    ...     return fib(num - 1) + fib(num - 2)\n\n    &gt;&gt;&gt; for i in range(1, 101):\n    ...     res = fib(i)\n\n    &gt;&gt;&gt; fib.cache_info()\n    CacheInfo(hits=196, misses=100, capacity=100, current_size=100)\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># class variable to map the decorator functions to their respective instance</span>\n    decorator_function_to_instance_map: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-type\">Callable</span>[[T], U], LFUCache[T, U]] = {}\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, capacity: <span class=\"hljs-built_in\">int</span></span>):\n        self.<span class=\"hljs-built_in\">list</span>: DoubleLinkedList[T, U] = DoubleLinkedList()\n        self.capacity = capacity\n        self.num_keys = <span class=\"hljs-number\">0</span>\n        self.hits = <span class=\"hljs-number\">0</span>\n        self.miss = <span class=\"hljs-number\">0</span>\n        self.cache: <span class=\"hljs-built_in\">dict</span>[T, DoubleLinkedListNode[T, U]] = {}\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Return the details for the cache instance\n        [hits, misses, capacity, current_size]\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"hljs-string\">f&quot;CacheInfo(hits=<span class=\"hljs-subst\">{self.hits}</span>, misses=<span class=\"hljs-subst\">{self.miss}</span>, &quot;</span>\n            <span class=\"hljs-string\">f&quot;capacity=<span class=\"hljs-subst\">{self.capacity}</span>, current_size=<span class=\"hljs-subst\">{self.num_keys}</span>)&quot;</span>\n        )\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__contains__</span>(<span class=\"hljs-params\">self, key: T</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &gt;&gt;&gt; cache = LFUCache(1)\n\n        &gt;&gt;&gt; 1 in cache\n        False\n\n        &gt;&gt;&gt; cache.set(1, 1)\n        &gt;&gt;&gt; 1 in cache\n        True\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">return</span> key <span class=\"hljs-keyword\">in</span> self.cache\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">self, key: T</span>) -&gt; U | <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Returns the value for the input key and updates the Double Linked List. Returns\n        Returns None if key is not present in cache\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">if</span> key <span class=\"hljs-keyword\">in</span> self.cache:\n            self.hits += <span class=\"hljs-number\">1</span>\n            value_node: DoubleLinkedListNode[T, U] = self.cache[key]\n            node = self.<span class=\"hljs-built_in\">list</span>.remove(self.cache[key])\n            <span class=\"hljs-keyword\">assert</span> node == value_node\n\n            <span class=\"hljs-comment\"># node is guaranteed not None because it is in self.cache</span>\n            <span class=\"hljs-keyword\">assert</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n            self.<span class=\"hljs-built_in\">list</span>.add(node)\n            <span class=\"hljs-keyword\">return</span> node.val\n        self.miss += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">self, key: T, value: U</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Sets the value for the input key and updates the Double Linked List\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">if</span> key <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> self.cache:\n            <span class=\"hljs-keyword\">if</span> self.num_keys &gt;= self.capacity:\n                <span class=\"hljs-comment\"># delete first node when over capacity</span>\n                first_node = self.<span class=\"hljs-built_in\">list</span>.head.<span class=\"hljs-built_in\">next</span>\n\n                <span class=\"hljs-comment\"># guaranteed to have a non-None first node when num_keys &gt; 0</span>\n                <span class=\"hljs-comment\"># explain to type checker via assertions</span>\n                <span class=\"hljs-keyword\">assert</span> first_node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n                <span class=\"hljs-keyword\">assert</span> first_node.key <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n                <span class=\"hljs-keyword\">assert</span> self.<span class=\"hljs-built_in\">list</span>.remove(first_node) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n                <span class=\"hljs-comment\"># first_node guaranteed to be in list</span>\n\n                <span class=\"hljs-keyword\">del</span> self.cache[first_node.key]\n                self.num_keys -= <span class=\"hljs-number\">1</span>\n            self.cache[key] = DoubleLinkedListNode(key, value)\n            self.<span class=\"hljs-built_in\">list</span>.add(self.cache[key])\n            self.num_keys += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">else</span>:\n            node = self.<span class=\"hljs-built_in\">list</span>.remove(self.cache[key])\n            <span class=\"hljs-keyword\">assert</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>  <span class=\"hljs-comment\"># node guaranteed to be in list</span>\n            node.val = value\n            self.<span class=\"hljs-built_in\">list</span>.add(node)\n\n<span class=\"hljs-meta\">    @classmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decorator</span>(<span class=\"hljs-params\">\n        cls: <span class=\"hljs-built_in\">type</span>[LFUCache[T, U]], size: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">128</span>\n    </span>) -&gt; <span class=\"hljs-type\">Callable</span>[[<span class=\"hljs-type\">Callable</span>[[T], U]], <span class=\"hljs-type\">Callable</span>[..., U]]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Decorator version of LFU Cache\n\n        Decorated function must be function of T -&gt; U\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cache_decorator_inner</span>(<span class=\"hljs-params\">func: <span class=\"hljs-type\">Callable</span>[[T], U]</span>) -&gt; <span class=\"hljs-type\">Callable</span>[..., U]:\n            <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cache_decorator_wrapper</span>(<span class=\"hljs-params\">*args: T</span>) -&gt; U:\n                <span class=\"hljs-keyword\">if</span> func <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> cls.decorator_function_to_instance_map:\n                    cls.decorator_function_to_instance_map[func] = LFUCache(size)\n\n                result = cls.decorator_function_to_instance_map[func].get(args[<span class=\"hljs-number\">0</span>])\n                <span class=\"hljs-keyword\">if</span> result <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n                    result = func(*args)\n                    cls.decorator_function_to_instance_map[func].<span class=\"hljs-built_in\">set</span>(args[<span class=\"hljs-number\">0</span>], result)\n                <span class=\"hljs-keyword\">return</span> result\n\n            <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cache_info</span>() -&gt; LFUCache[T, U]:\n                <span class=\"hljs-keyword\">return</span> cls.decorator_function_to_instance_map[func]\n\n            <span class=\"hljs-built_in\">setattr</span>(cache_decorator_wrapper, <span class=\"hljs-string\">&quot;cache_info&quot;</span>, cache_info)\n\n            <span class=\"hljs-keyword\">return</span> cache_decorator_wrapper\n\n        <span class=\"hljs-keyword\">return</span> cache_decorator_inner\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "javascript": {
      "dir": "Cache/LFUCache.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Cache/LFUCache.js",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CacheNode</span> {\n  <span class=\"hljs-title function_\">constructor</span> (key, value, frequency) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">key</span> = key\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = value\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">frequency</span> = frequency\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">seal</span>(<span class=\"hljs-variable language_\">this</span>)\n  }\n}\n\n<span class=\"hljs-comment\">// This frequency map class will act like javascript Map DS with more two custom method refresh &amp; insert</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FrequencyMap</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Map</span> {\n  <span class=\"hljs-keyword\">static</span> get [<span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">species</span>] () { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Map</span> } <span class=\"hljs-comment\">// for using Symbol.species we can access Map constructor  @see -&gt; https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@species</span>\n  get [<span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">toStringTag</span>] () { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&#x27;</span> }\n\n  <span class=\"hljs-comment\">/**\n  * <span class=\"hljs-doctag\">@method</span> <span class=\"hljs-variable\">refresh</span>\n  * <span class=\"hljs-doctag\">@description</span> - It&#x27;s revive a CacheNode, increment of this nodes frequency and refresh the frequencyMap via new incremented nodes frequency\n  * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">CacheNode</span>} <span class=\"hljs-variable\">node</span>\n  */</span>\n  refresh (node) {\n    <span class=\"hljs-keyword\">const</span> { frequency } = node\n    <span class=\"hljs-keyword\">const</span> freqSet = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">get</span>(frequency)\n    freqSet.<span class=\"hljs-title function_\">delete</span>(node)\n\n    node.<span class=\"hljs-property\">frequency</span>++\n\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">insert</span>(node)\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@method</span> <span class=\"hljs-variable\">insert</span>\n   * <span class=\"hljs-doctag\">@description</span> - Add new CacheNode into HashSet by the frequency\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">CacheNode</span>} <span class=\"hljs-variable\">node</span>\n   */</span>\n  insert (node) {\n    <span class=\"hljs-keyword\">const</span> { frequency } = node\n\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">has</span>(frequency)) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">set</span>(frequency, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>())\n    }\n\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">get</span>(frequency).<span class=\"hljs-title function_\">add</span>(node)\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LFUCache</span> {\n    #capacity\n    #frequencyMap\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} <span class=\"hljs-variable\">capacity</span> - The range of LFUCache\n     * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">LFUCache</span>} - sealed\n     */</span>\n    <span class=\"hljs-title function_\">constructor</span> (capacity) {\n      <span class=\"hljs-variable language_\">this</span>.#capacity = capacity\n      <span class=\"hljs-variable language_\">this</span>.#frequencyMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FrequencyMap</span>()\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">misses</span> = <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hits</span> = <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>()\n\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">seal</span>(<span class=\"hljs-variable language_\">this</span>)\n    }\n\n    <span class=\"hljs-comment\">/**\n   * Get the capacity of the LFUCache\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">number</span>}\n   */</span>\n    get capacity () {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.#capacity\n    }\n\n    <span class=\"hljs-comment\">/**\n   * Get the current size of LFUCache\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">number</span>}\n   */</span>\n    get size () {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-property\">size</span>\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Set the capacity of the LFUCache if you decrease the capacity its removed CacheNodes following the LFU - least frequency used\n     */</span>\n    set capacity (newCapacity) {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.#capacity &gt; newCapacity) {\n        <span class=\"hljs-keyword\">let</span> diff = <span class=\"hljs-variable language_\">this</span>.#capacity - newCapacity <span class=\"hljs-comment\">// get the decrement number of capacity</span>\n\n        <span class=\"hljs-keyword\">while</span> (diff--) {\n          <span class=\"hljs-variable language_\">this</span>.#<span class=\"hljs-title function_\">removeCacheNode</span>()\n        }\n\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-property\">size</span> === <span class=\"hljs-number\">0</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.#frequencyMap.<span class=\"hljs-title function_\">clear</span>()\n      }\n\n      <span class=\"hljs-variable language_\">this</span>.#capacity = newCapacity\n    }\n\n    get info () {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">freeze</span>({\n        <span class=\"hljs-attr\">misses</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">misses</span>,\n        <span class=\"hljs-attr\">hits</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hits</span>,\n        <span class=\"hljs-attr\">capacity</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">capacity</span>,\n        <span class=\"hljs-attr\">currentSize</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span>,\n        <span class=\"hljs-attr\">leastFrequency</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">leastFrequency</span>\n      })\n    }\n\n    get leastFrequency () {\n      <span class=\"hljs-keyword\">const</span> freqCacheIterator = <span class=\"hljs-variable language_\">this</span>.#frequencyMap.<span class=\"hljs-title function_\">keys</span>()\n      <span class=\"hljs-keyword\">let</span> leastFrequency = freqCacheIterator.<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span> || <span class=\"hljs-literal\">null</span>\n\n      <span class=\"hljs-comment\">// select the non-empty frequency Set</span>\n      <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-variable language_\">this</span>.#frequencyMap.<span class=\"hljs-title function_\">get</span>(leastFrequency)?.<span class=\"hljs-property\">size</span> === <span class=\"hljs-number\">0</span>) {\n        leastFrequency = freqCacheIterator.<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>\n      }\n\n      <span class=\"hljs-keyword\">return</span> leastFrequency\n    }\n\n    #removeCacheNode () {\n      <span class=\"hljs-keyword\">const</span> leastFreqSet = <span class=\"hljs-variable language_\">this</span>.#frequencyMap.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">leastFrequency</span>)\n      <span class=\"hljs-comment\">// Select the least recently used node from the least Frequency set</span>\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">LFUNode</span> = leastFreqSet.<span class=\"hljs-title function_\">values</span>().<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>\n\n      leastFreqSet.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-title class_\">LFUNode</span>)\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-title class_\">LFUNode</span>.<span class=\"hljs-property\">key</span>)\n    }\n\n    <span class=\"hljs-comment\">/**\n   * if key exist then return true otherwise false\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">any</span>} <span class=\"hljs-variable\">key</span>\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">boolean</span>}\n   */</span>\n    has (key) {\n      key = <span class=\"hljs-title class_\">String</span>(key) <span class=\"hljs-comment\">// converted to string</span>\n\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-title function_\">has</span>(key)\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@method</span> <span class=\"hljs-variable\">get</span>\n     * <span class=\"hljs-doctag\">@description</span> - This method return the value of key &amp; refresh the frequencyMap by the oldNode\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} <span class=\"hljs-variable\">key</span>\n     * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">any</span>}\n     */</span>\n    get (key) {\n      key = <span class=\"hljs-title class_\">String</span>(key) <span class=\"hljs-comment\">// converted to string</span>\n\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-title function_\">has</span>(key)) {\n        <span class=\"hljs-keyword\">const</span> oldNode = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-title function_\">get</span>(key)\n        <span class=\"hljs-variable language_\">this</span>.#frequencyMap.<span class=\"hljs-title function_\">refresh</span>(oldNode)\n\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hits</span>++\n\n        <span class=\"hljs-keyword\">return</span> oldNode.<span class=\"hljs-property\">value</span>\n      }\n\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">misses</span>++\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@method</span> <span class=\"hljs-variable\">set</span>\n     * <span class=\"hljs-doctag\">@description</span> - This method stored the value by key &amp; add frequency if it doesn&#x27;t exist\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} <span class=\"hljs-variable\">key</span>\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">any</span>} <span class=\"hljs-variable\">value</span>\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} <span class=\"hljs-variable\">frequency</span>\n     * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">LFUCache</span>}\n     */</span>\n    set (key, value, frequency = <span class=\"hljs-number\">1</span>) {\n      key = <span class=\"hljs-title class_\">String</span>(key) <span class=\"hljs-comment\">// converted to string</span>\n\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.#capacity === <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RangeError</span>(<span class=\"hljs-string\">&#x27;LFUCache ERROR: The Capacity is 0&#x27;</span>)\n      }\n\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-title function_\">has</span>(key)) {\n        <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-title function_\">get</span>(key)\n        node.<span class=\"hljs-property\">value</span> = value\n\n        <span class=\"hljs-variable language_\">this</span>.#frequencyMap.<span class=\"hljs-title function_\">refresh</span>(node)\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>\n      }\n\n      <span class=\"hljs-comment\">// if the cache size is full, then it&#x27;s delete the Least Frequency Used node</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.#capacity === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-property\">size</span>) {\n        <span class=\"hljs-variable language_\">this</span>.#<span class=\"hljs-title function_\">removeCacheNode</span>()\n      }\n\n      <span class=\"hljs-keyword\">const</span> newNode = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CacheNode</span>(key, value, frequency)\n\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-title function_\">set</span>(key, newNode)\n      <span class=\"hljs-variable language_\">this</span>.#frequencyMap.<span class=\"hljs-title function_\">insert</span>(newNode)\n\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@method</span> <span class=\"hljs-variable\">parse</span>\n     * <span class=\"hljs-doctag\">@description</span> - This method receive a valid LFUCache JSON &amp; run JSON.prase() method and merge with existing LFUCache\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">JSON</span>} <span class=\"hljs-variable\">json</span>\n     * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">LFUCache</span>} - merged\n     */</span>\n    parse (json) {\n      <span class=\"hljs-keyword\">const</span> { misses, hits, cache } = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(json)\n\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">misses</span> += misses ?? <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hits</span> += hits ?? <span class=\"hljs-number\">0</span>\n\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> cache) {\n        <span class=\"hljs-keyword\">const</span> { value, frequency } = cache[key]\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">set</span>(key, value, frequency)\n      }\n\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@method</span> <span class=\"hljs-variable\">clear</span>\n     * <span class=\"hljs-doctag\">@description</span> - This method cleared the whole LFUCache\n     * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">LFUCache</span>}\n     */</span>\n    clear () {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-title function_\">clear</span>()\n      <span class=\"hljs-variable language_\">this</span>.#frequencyMap.<span class=\"hljs-title function_\">clear</span>()\n\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@method</span> <span class=\"hljs-variable\">toString</span>\n     * <span class=\"hljs-doctag\">@description</span> - This method generate a JSON format of LFUCache &amp; return it.\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} <span class=\"hljs-variable\">indent</span>\n     * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">string</span>} - JSON\n     */</span>\n    toString (indent) {\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">replacer</span> = (<span class=\"hljs-params\">_, value</span>) =&gt; {\n        <span class=\"hljs-keyword\">if</span> (value <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Set</span>) {\n          <span class=\"hljs-keyword\">return</span> [...value]\n        }\n\n        <span class=\"hljs-keyword\">if</span> (value <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Map</span>) {\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">fromEntries</span>(value)\n        }\n\n        <span class=\"hljs-keyword\">return</span> value\n      }\n\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(<span class=\"hljs-variable language_\">this</span>, replacer, indent)\n    }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">LFUCache</span>\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/caches/LFUCache.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/caches/LFUCache.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.caches;\n\n<span class=\"hljs-keyword\">import</span> java.util.HashMap;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n\n<span class=\"hljs-comment\">/**\n * Java program for LFU Cache (https://en.wikipedia.org/wiki/Least_frequently_used)\n * <span class=\"hljs-doctag\">@author</span> Akshay Dubey (https://github.com/itsAkshayDubey)\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LFUCache</span>&lt;K,V&gt; {\n\n\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n\t\t<span class=\"hljs-keyword\">private</span> K key;\n\t\t<span class=\"hljs-keyword\">private</span> V value;\n\t\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> frequency;\n\t\t<span class=\"hljs-keyword\">private</span> Node previous;\n\t\t<span class=\"hljs-keyword\">private</span> Node next;\n\n\t\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(K key, V value, <span class=\"hljs-type\">int</span> frequency)</span> {\n\t\t\t<span class=\"hljs-built_in\">this</span>.key = key;\n\t\t\t<span class=\"hljs-built_in\">this</span>.value = value;\n\t\t\t<span class=\"hljs-built_in\">this</span>.frequency = frequency;\n\t\t}\n\t}\n\n\t<span class=\"hljs-keyword\">private</span> Node head;\n\t<span class=\"hljs-keyword\">private</span> Node tail;\n\t<span class=\"hljs-keyword\">private</span> Map&lt;K,Node&gt; map = <span class=\"hljs-literal\">null</span>;\n\t<span class=\"hljs-keyword\">private</span> Integer capacity;\n\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">DEFAULT_CAPACITY</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100</span>;\n\t\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">LFUCache</span><span class=\"hljs-params\">()</span> {\n\t\t<span class=\"hljs-built_in\">this</span>.capacity = DEFAULT_CAPACITY;\n\t}\n\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">LFUCache</span><span class=\"hljs-params\">(Integer capacity)</span> {\n\t\t<span class=\"hljs-built_in\">this</span>.capacity = capacity;\n\t\t<span class=\"hljs-built_in\">this</span>.map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n\t}\n\t\n    <span class=\"hljs-comment\">/**\n     * This method returns value present in the cache corresponding to the key passed as parameter\n     *\n     * <span class=\"hljs-doctag\">@param</span> &lt;K&gt; key for which value is to be retrieved \n     * <span class=\"hljs-doctag\">@returns</span> &lt;V&gt; object corresponding to the key passed as parameter, returns null if &lt;K&gt; key is not present in the cache\n     */</span>\n\t<span class=\"hljs-keyword\">public</span> V <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(K key)</span> {\n\t\t<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">this</span>.map.get(key) == <span class=\"hljs-literal\">null</span>) {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n\t\t}\n\n\t\t<span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">node</span> <span class=\"hljs-operator\">=</span> map.get(key);\n\t\tremoveNode(node);\n\t\tnode.frequency += <span class=\"hljs-number\">1</span>;\n\t\taddNodeWithUpdatedFrequency(node);\n\n\t\t<span class=\"hljs-keyword\">return</span> node.value;\n\t}\n\n    <span class=\"hljs-comment\">/**\n     * This method stores &lt;K&gt; key and &lt;V&gt; value in the cache\n     *\n     * <span class=\"hljs-doctag\">@param</span> &lt;K&gt; key which is to be stored in the cache\n     * <span class=\"hljs-doctag\">@param</span> &lt;V&gt; value which is to be stored in the cache \n     */</span>\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(K key, V value)</span> {\n\t\t<span class=\"hljs-keyword\">if</span>(map.containsKey(key)) {\n\t\t\t<span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">node</span> <span class=\"hljs-operator\">=</span>  map.get(key);\n\t\t\tnode.value = value;\n\t\t\tnode.frequency += <span class=\"hljs-number\">1</span>;\n\t\t\tremoveNode(node);\n\t\t\taddNodeWithUpdatedFrequency(node);\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\t<span class=\"hljs-keyword\">if</span>(map.size() &gt;= capacity) {\n\t\t\t\tmap.remove(<span class=\"hljs-built_in\">this</span>.head.key);\n\t\t\t\tremoveNode(head);\n\t\t\t}\n\t\t\t<span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">node</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(key,value,<span class=\"hljs-number\">1</span>);\n\t\t\taddNodeWithUpdatedFrequency(node);\n\t\t\tmap.put(key, node);\n\t\t}\n\t}\n\n    <span class=\"hljs-comment\">/**\n     * This method stores the node in the cache with updated frequency\n     *\n     * <span class=\"hljs-doctag\">@param</span> Node node which is to be updated in the cache \n     */</span>\n\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addNodeWithUpdatedFrequency</span><span class=\"hljs-params\">(Node node)</span> {\n\t\t<span class=\"hljs-keyword\">if</span>(tail != <span class=\"hljs-literal\">null</span> &amp;&amp; head != <span class=\"hljs-literal\">null</span>) {\n\t\t\t<span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.head;\n\t\t\t<span class=\"hljs-keyword\">while</span>(temp != <span class=\"hljs-literal\">null</span>) {\n\t\t\t\t<span class=\"hljs-keyword\">if</span>(temp.frequency &gt; node.frequency) {\n\t\t\t\t\t<span class=\"hljs-keyword\">if</span>(temp==head) {\n\t\t\t\t\t\tnode.next = temp;\n\t\t\t\t\t\ttemp.previous = node;\n\t\t\t\t\t\t<span class=\"hljs-built_in\">this</span>.head = node;\n\t\t\t\t\t\t<span class=\"hljs-keyword\">break</span>;\n\t\t\t\t\t}\n\t\t\t\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\t\t\t\tnode.next = temp;\n\t\t\t\t\t\tnode.previous = temp.previous;\n\t\t\t\t\t\ttemp.previous.next = node;\n\t\t\t\t\t\tnode.previous = temp.previous;\n\t\t\t\t\t\t<span class=\"hljs-keyword\">break</span>;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\t\t\ttemp = temp.next;\n\t\t\t\t\t<span class=\"hljs-keyword\">if</span>(temp == <span class=\"hljs-literal\">null</span>) {\n\t\t\t\t\t\ttail.next = node;\n\t\t\t\t\t\tnode.previous = tail;\n\t\t\t\t\t\tnode.next = <span class=\"hljs-literal\">null</span>;\n\t\t\t\t\t\ttail = node;\n\t\t\t\t\t\t<span class=\"hljs-keyword\">break</span>;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\ttail = node;\n\t\t\thead = tail;\n\t\t}\n\t}\n\n    <span class=\"hljs-comment\">/**\n     * This method removes node from the cache \n     * \n     * <span class=\"hljs-doctag\">@param</span> Node node which is to be removed in the cache \n     */</span>\n\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">removeNode</span><span class=\"hljs-params\">(Node node)</span> {\n\t\t<span class=\"hljs-keyword\">if</span>(node.previous != <span class=\"hljs-literal\">null</span>) {\n\t\t\tnode.previous.next = node.next;\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\t<span class=\"hljs-built_in\">this</span>.head = node.next;\n\t\t}\n\n\t\t<span class=\"hljs-keyword\">if</span>(node.next != <span class=\"hljs-literal\">null</span>) {\n\t\t\tnode.next.previous = node.previous;\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span> {\n\t\t\t<span class=\"hljs-built_in\">this</span>.tail = node.previous;\n\t\t}\t\t\n\t}\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Akshay Dubey",
      "email": "38462415+itsAkshayDubey@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Andrew Grangaard",
      "email": "granny-github@ofb.net",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Tapajyoti Bose",
      "email": "44058757+ruppysuppy@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    },
    {
      "name": "Fahim Faisaal",
      "email": "57553028+fahimfaisaal@users.noreply.github.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}