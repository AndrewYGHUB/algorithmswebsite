{
  "slug": "linear-diophantine-equations-solver",
  "name": "Linear Diophantine Equations Solver",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/maths/LinearDiophantineEquationsSolver.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/maths/LinearDiophantineEquationsSolver.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\n\n<span class=\"hljs-keyword\">import</span> java.util.Objects;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinearDiophantineEquationsSolver</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-comment\">// 3x + 4y = 7</span>\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">toSolve</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Equation</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>);\n        System.out.println(findAnySolution(toSolve));\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Solution <span class=\"hljs-title function_\">findAnySolution</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Equation equation)</span> {\n        <span class=\"hljs-keyword\">if</span> (equation.a() == <span class=\"hljs-number\">0</span> &amp;&amp; equation.b() == <span class=\"hljs-number\">0</span> &amp;&amp; equation.c() == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> Solution.INFINITE_SOLUTIONS;\n        }\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">stub</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GcdSolutionWrapper</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Solution</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>));\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">gcdSolution</span> <span class=\"hljs-operator\">=</span> gcd(equation.a(), equation.b(), stub);\n        <span class=\"hljs-keyword\">if</span> (equation.c() % gcdSolution.getGcd() != <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> Solution.NO_SOLUTION;\n        }\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">toReturn</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Solution</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">xToSet</span> <span class=\"hljs-operator\">=</span> stub.getSolution().getX() * (equation.c() / stub.getGcd());\n        <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">yToSet</span> <span class=\"hljs-operator\">=</span> stub.getSolution().getY() * (equation.c() / stub.getGcd());\n        toReturn.setX(xToSet);\n        toReturn.setY(yToSet);\n        <span class=\"hljs-keyword\">return</span> toReturn;\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> GcdSolutionWrapper <span class=\"hljs-title function_\">gcd</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> a, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> b, <span class=\"hljs-keyword\">final</span> GcdSolutionWrapper previous)</span> {\n        <span class=\"hljs-keyword\">if</span> (b == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GcdSolutionWrapper</span>(a, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Solution</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>));\n        }\n        <span class=\"hljs-comment\">// stub wrapper becomes the `previous` of the next recursive call</span>\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">stubWrapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GcdSolutionWrapper</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Solution</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>));\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">next</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-comment\">/* recursive call */</span> gcd(b, a % b, stubWrapper);\n        previous.getSolution().setX(next.getSolution().getY());\n        previous.getSolution().setY(next.getSolution().getX() - (a / b) * (next.getSolution().getY()));\n        previous.setGcd(next.getGcd());\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GcdSolutionWrapper</span>(next.getGcd(), previous.getSolution());\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Solution</span> <span class=\"hljs-variable\">NO_SOLUTION</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Solution</span>(Integer.MAX_VALUE, Integer.MAX_VALUE);\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Solution</span> <span class=\"hljs-variable\">INFINITE_SOLUTIONS</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Solution</span>(Integer.MIN_VALUE, Integer.MIN_VALUE);\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> x;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> y;\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Solution</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span> {\n            <span class=\"hljs-built_in\">this</span>.x = x;\n            <span class=\"hljs-built_in\">this</span>.y = y;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getX</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> x;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getY</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> y;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setX</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> {\n            <span class=\"hljs-built_in\">this</span>.x = x;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setY</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> y)</span> {\n            <span class=\"hljs-built_in\">this</span>.y = y;\n        }\n\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">equals</span><span class=\"hljs-params\">(Object obj)</span> {\n            <span class=\"hljs-keyword\">if</span> (obj == <span class=\"hljs-built_in\">this</span>) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n            <span class=\"hljs-keyword\">if</span> (obj == <span class=\"hljs-literal\">null</span> || obj.getClass() != <span class=\"hljs-built_in\">this</span>.getClass()) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n            <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">that</span> <span class=\"hljs-operator\">=</span> (Solution) obj;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.x == that.x\n                    &amp;&amp; <span class=\"hljs-built_in\">this</span>.y == that.y;\n        }\n\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hashCode</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> Objects.hash(x, y);\n        }\n\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Solution[&quot;</span>\n                    + <span class=\"hljs-string\">&quot;x=&quot;</span> + x + <span class=\"hljs-string\">&quot;, &quot;</span>\n                    + <span class=\"hljs-string\">&quot;y=&quot;</span> + y + <span class=\"hljs-string\">&#x27;]&#x27;</span>;\n        }\n\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">record</span> <span class=\"hljs-title class_\">Equation</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b, <span class=\"hljs-type\">int</span> c)</span> {\n\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GcdSolutionWrapper</span> {\n\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> gcd;\n        <span class=\"hljs-keyword\">private</span> Solution solution;\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">GcdSolutionWrapper</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> gcd, Solution solution)</span> {\n            <span class=\"hljs-built_in\">this</span>.gcd = gcd;\n            <span class=\"hljs-built_in\">this</span>.solution = solution;\n        }\n\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">equals</span><span class=\"hljs-params\">(Object obj)</span> {\n            <span class=\"hljs-keyword\">if</span> (obj == <span class=\"hljs-built_in\">this</span>) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n            <span class=\"hljs-keyword\">if</span> (obj == <span class=\"hljs-literal\">null</span> || obj.getClass() != <span class=\"hljs-built_in\">this</span>.getClass()) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n            <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">that</span> <span class=\"hljs-operator\">=</span> (GcdSolutionWrapper) obj;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.gcd == that.gcd\n                    &amp;&amp; Objects.equals(<span class=\"hljs-built_in\">this</span>.solution, that.solution);\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getGcd</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> gcd;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setGcd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> gcd)</span> {\n            <span class=\"hljs-built_in\">this</span>.gcd = gcd;\n        }\n\n        <span class=\"hljs-keyword\">public</span> Solution <span class=\"hljs-title function_\">getSolution</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> solution;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setSolution</span><span class=\"hljs-params\">(Solution solution)</span> {\n            <span class=\"hljs-built_in\">this</span>.solution = solution;\n        }\n\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hashCode</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> Objects.hash(gcd, solution);\n        }\n\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;GcdSolutionWrapper[&quot;</span>\n                    + <span class=\"hljs-string\">&quot;gcd=&quot;</span> + gcd + <span class=\"hljs-string\">&quot;, &quot;</span>\n                    + <span class=\"hljs-string\">&quot;solution=&quot;</span> + solution + <span class=\"hljs-string\">&#x27;]&#x27;</span>;\n        }\n\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Rahul Chhabra",
      "email": "rahul29112002@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}