{
  "slug": "linear-sieve",
  "name": "Linear Sieve",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Maths/LinearSieve.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/LinearSieve.js",
      "code": "<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">LinearSieve</span> = (<span class=\"hljs-params\">n</span>) =&gt; {\n  <span class=\"hljs-comment\">/*\n   * Calculates prime numbers till a number n\n   * Time Complexity: O(n)\n   * Explanation: https://cp-algorithms.com/algebra/prime-sieve-linear.html\n   * :param n: Number up to which to calculate primes\n   * :return: A list containing only primes\n   */</span>\n  <span class=\"hljs-keyword\">const</span> isnPrime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(n + <span class=\"hljs-number\">1</span>)\n  isnPrime[<span class=\"hljs-number\">0</span>] = isnPrime[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">const</span> primes = []\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">2</span>; i &lt;= n; i++) {\n    <span class=\"hljs-keyword\">if</span> (!isnPrime[i]) primes.<span class=\"hljs-title function_\">push</span>(i)\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> p <span class=\"hljs-keyword\">of</span> primes) {\n      <span class=\"hljs-keyword\">const</span> k = i * p\n      <span class=\"hljs-keyword\">if</span> (k &gt; n) <span class=\"hljs-keyword\">break</span>\n      isnPrime[k] = <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">if</span> (i % p === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">break</span>\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> primes\n}\n\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">LinearSieve</span> }\n"
    },
    "rust": {
      "dir": "src/math/linear_sieve.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/math/linear_sieve.rs",
      "code": "<span class=\"hljs-comment\">/*\nLinear Sieve algorithm:\nTime complexity is indeed O(n) with O(n) memory, but the sieve generally\nruns slower than a well implemented sieve of Eratosthenes. Some use cases are:\n- factorizing any number k in the sieve in O(log(k))\n- calculating arbitrary multiplicative functions on sieve numbers\n  without increasing the time complexity\n- As a by product, all prime numbers less than `max_number` are stored\n  in `primes` vector.\n */</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">LinearSieve</span> {\n    max_number: <span class=\"hljs-type\">usize</span>,\n    <span class=\"hljs-keyword\">pub</span> primes: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;,\n    <span class=\"hljs-keyword\">pub</span> minimum_prime_factor: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">LinearSieve</span> {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        LinearSieve {\n            max_number: <span class=\"hljs-number\">0</span>,\n            primes: <span class=\"hljs-built_in\">vec!</span>[],\n            minimum_prime_factor: <span class=\"hljs-built_in\">vec!</span>[],\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">prepare</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, max_number: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Result</span>&lt;(), &amp;<span class=\"hljs-symbol\">&#x27;static</span> <span class=\"hljs-type\">str</span>&gt; {\n        <span class=\"hljs-keyword\">if</span> max_number &lt;= <span class=\"hljs-number\">1</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Err</span>(<span class=\"hljs-string\">&quot;Sieve size should be more than 1&quot;</span>);\n        }\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.max_number &gt; <span class=\"hljs-number\">0</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Err</span>(<span class=\"hljs-string\">&quot;Sieve already initialized&quot;</span>);\n        }\n        <span class=\"hljs-keyword\">self</span>.max_number = max_number;\n        <span class=\"hljs-keyword\">self</span>.minimum_prime_factor.<span class=\"hljs-title function_ invoke__\">resize</span>(max_number + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">2</span>..=max_number {\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.minimum_prime_factor[i] == <span class=\"hljs-number\">0</span> {\n                <span class=\"hljs-keyword\">self</span>.minimum_prime_factor[i] = i;\n                <span class=\"hljs-keyword\">self</span>.primes.<span class=\"hljs-title function_ invoke__\">push</span>(i);\n                <span class=\"hljs-comment\">/*\n                   if needed, a multiplicative function can be\n                   calculated for this prime number here:\n                   function[i] = base_case(i);\n                */</span>\n            }\n            <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.primes.<span class=\"hljs-title function_ invoke__\">iter</span>() {\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">mlt</span> = (*p) * i;\n                <span class=\"hljs-keyword\">if</span> *p &gt; i || mlt &gt; max_number {\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n                <span class=\"hljs-keyword\">self</span>.minimum_prime_factor[mlt] = *p;\n                <span class=\"hljs-comment\">/*\n                   multiplicative function for mlt can be calculated here:\n                   if i % p:\n                       function[mlt] = add_to_prime_exponent(function[i], i, p);\n                   else:\n                       function[mlt] = function[i] * function[p]\n                */</span>\n            }\n        }\n        <span class=\"hljs-title function_ invoke__\">Ok</span>(())\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">factorize</span>(&amp;<span class=\"hljs-keyword\">self</span>, <span class=\"hljs-keyword\">mut</span> number: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Result</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;, &amp;<span class=\"hljs-symbol\">&#x27;static</span> <span class=\"hljs-type\">str</span>&gt; {\n        <span class=\"hljs-keyword\">if</span> number &gt; <span class=\"hljs-keyword\">self</span>.max_number {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Err</span>(<span class=\"hljs-string\">&quot;Number is too big, its minimum_prime_factor was not calculated&quot;</span>);\n        }\n        <span class=\"hljs-keyword\">if</span> number == <span class=\"hljs-number\">0</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Err</span>(<span class=\"hljs-string\">&quot;Number is zero&quot;</span>);\n        }\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-keyword\">while</span> number &gt; <span class=\"hljs-number\">1</span> {\n            result.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-keyword\">self</span>.minimum_prime_factor[number]);\n            number /= <span class=\"hljs-keyword\">self</span>.minimum_prime_factor[number];\n        }\n        <span class=\"hljs-title function_ invoke__\">Ok</span>(result)\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::LinearSieve;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">small_primes_list</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">ls</span> = LinearSieve::<span class=\"hljs-title function_ invoke__\">new</span>();\n        ls.<span class=\"hljs-title function_ invoke__\">prepare</span>(<span class=\"hljs-number\">25</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(ls.primes, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">23</span>]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">divisible_by_mpf</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">ls</span> = LinearSieve::<span class=\"hljs-title function_ invoke__\">new</span>();\n        ls.<span class=\"hljs-title function_ invoke__\">prepare</span>(<span class=\"hljs-number\">1000</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">2</span>..=<span class=\"hljs-number\">1000</span> {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">div</span> = i / ls.minimum_prime_factor[i];\n            <span class=\"hljs-built_in\">assert_eq!</span>(i % ls.minimum_prime_factor[i], <span class=\"hljs-number\">0</span>);\n            <span class=\"hljs-keyword\">if</span> div == <span class=\"hljs-number\">1</span> {\n                <span class=\"hljs-comment\">// Number must be prime</span>\n                <span class=\"hljs-built_in\">assert!</span>(ls.primes.<span class=\"hljs-title function_ invoke__\">binary_search</span>(&amp;i).<span class=\"hljs-title function_ invoke__\">is_ok</span>());\n            }\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">check_factorization</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">ls</span> = LinearSieve::<span class=\"hljs-title function_ invoke__\">new</span>();\n        ls.<span class=\"hljs-title function_ invoke__\">prepare</span>(<span class=\"hljs-number\">1000</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">1000</span> {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">factorization</span> = ls.<span class=\"hljs-title function_ invoke__\">factorize</span>(i).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">product</span> = <span class=\"hljs-number\">1usize</span>;\n            <span class=\"hljs-title function_ invoke__\">for</span> (idx, p) <span class=\"hljs-keyword\">in</span> factorization.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\n                <span class=\"hljs-built_in\">assert!</span>(ls.primes.<span class=\"hljs-title function_ invoke__\">binary_search</span>(&amp;p).<span class=\"hljs-title function_ invoke__\">is_ok</span>());\n                product *= *p;\n                <span class=\"hljs-keyword\">if</span> idx &gt; <span class=\"hljs-number\">0</span> {\n                    <span class=\"hljs-built_in\">assert!</span>(*p &gt;= factorization[idx - <span class=\"hljs-number\">1</span>]);\n                }\n            }\n            <span class=\"hljs-built_in\">assert_eq!</span>(product, i);\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">check_number_of_primes</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">ls</span> = LinearSieve::<span class=\"hljs-title function_ invoke__\">new</span>();\n        ls.<span class=\"hljs-title function_ invoke__\">prepare</span>(<span class=\"hljs-number\">100_000</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(ls.primes.<span class=\"hljs-title function_ invoke__\">len</span>(), <span class=\"hljs-number\">9592</span>);\n    }\n}\n"
    },
    "scala": {
      "dir": "src/main/scala/Mathematics/LinearSieve.scala",
      "url": "https://github.com/TheAlgorithms/scala/tree/master/src/main/scala/Mathematics/LinearSieve.scala",
      "code": "<span class=\"hljs-keyword\">package</span> <span class=\"hljs-type\">Mathematics</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">LinearSieve</span> </span>{\n\n  <span class=\"hljs-comment\">/** Method returns sequence of prime numbers which all are not greater than n\n    *\n    * @param n\n    * @return\n    */</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getPrimeNumbers</span></span>(n: <span class=\"hljs-type\">Int</span>): <span class=\"hljs-type\">Seq</span>[<span class=\"hljs-type\">Int</span>] = {\n    <span class=\"hljs-keyword\">var</span> primeNumbers                   = <span class=\"hljs-type\">Seq</span>.empty[<span class=\"hljs-type\">Int</span>]\n    <span class=\"hljs-keyword\">val</span> lowestPrimeDivisor: <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>] = <span class=\"hljs-type\">Array</span>.fill(n + <span class=\"hljs-number\">1</span>)(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">for</span> (i &lt;- <span class=\"hljs-number\">2</span> to n) {\n      <span class=\"hljs-keyword\">if</span> (lowestPrimeDivisor(i) == <span class=\"hljs-number\">0</span>) {\n        lowestPrimeDivisor(i) = i\n        primeNumbers :+= i\n      }\n      <span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">while</span> (j &lt; primeNumbers.length &amp;&amp; primeNumbers(j) &lt;= lowestPrimeDivisor(i) &amp;&amp; i * primeNumbers(j) &lt;= n) {\n        lowestPrimeDivisor(i * primeNumbers(j)) = primeNumbers(j)\n        j = j + <span class=\"hljs-number\">1</span>\n      }\n    }\n    primeNumbers\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Alfredo Torre",
      "email": "alfredotorre@gmail.com",
      "commits": 1
    },
    {
      "name": "Olexandr Yermilov",
      "email": "olexandr.yermilov@gmail.com",
      "commits": 1
    },
    {
      "name": "Erfan Khadem",
      "email": "45465346+er888kh@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Allen Guan",
      "email": "me@nella17.tw",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}