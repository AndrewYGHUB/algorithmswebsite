{
  "slug": "link-list-sort",
  "name": "Link List Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/sorts/LinkList_Sort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/sorts/LinkList_Sort.java",
      "code": "<span class=\"hljs-comment\">/** Author : Siddhant Swarup Mallick\n * Github : https://github.com/siddhant2002\n */</span>\n\n<span class=\"hljs-comment\">/** Program description - To sort the LinkList as per sorting technique */</span>\n\n<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\n<span class=\"hljs-keyword\">import</span> java.util.*;\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinkList_Sort</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isSorted</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> p[] , <span class=\"hljs-type\">int</span> option)</span> {\n        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in)) {\n        }\n        <span class=\"hljs-type\">int</span> a[] = p;\n        <span class=\"hljs-comment\">// Array is taken as input from test class</span>\n        <span class=\"hljs-type\">int</span> b[] = p;\n        <span class=\"hljs-comment\">// array similar to a</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ch</span> <span class=\"hljs-operator\">=</span> option;\n        <span class=\"hljs-comment\">// Choice is choosed as any number from 1 to 3 (So the linked list will be sorted by Merge sort technique/Insertion sort technique/Heap sort technique)</span>\n        <span class=\"hljs-keyword\">switch</span> (ch) {\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n                <span class=\"hljs-type\">Task</span> <span class=\"hljs-variable\">nm</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Task</span>();\n                <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>, prev = <span class=\"hljs-literal\">null</span>, fresh, ptr;\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; a.length; i++) {\n                    <span class=\"hljs-comment\">// New nodes are created and values are added</span>\n                    fresh = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(); <span class=\"hljs-comment\">// Node class is called</span>\n                    fresh.val = a[i]; <span class=\"hljs-comment\">// Node val is stored</span>\n                    <span class=\"hljs-keyword\">if</span> (start == <span class=\"hljs-literal\">null</span>)\n                        start = fresh;\n                    <span class=\"hljs-keyword\">else</span>\n                        prev.next = fresh;\n                    prev = fresh;\n                }\n                start = nm.sort_by_mergesort(start);\n                <span class=\"hljs-comment\">// method is being called</span>\n                <span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">for</span> (ptr = start;ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next) {\n                    a[i++]=ptr.val;\n                    <span class=\"hljs-comment\">// storing the sorted values in the array</span>\n                }\n                Arrays.sort(b);\n                <span class=\"hljs-comment\">// array b is sorted and it will return true when checked with sorted list</span>\n                LinkList_Sort uu=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkList_Sort</span>();\n                <span class=\"hljs-keyword\">if</span>(uu.compare(a,b))\n                {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n                }\n                <span class=\"hljs-keyword\">else</span>\n                {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n                <span class=\"hljs-comment\">// The given array and the expected array is checked if both are same then true is displayed else false is displayed</span>\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n                <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">start1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>, prev1 = <span class=\"hljs-literal\">null</span>, fresh1, ptr1;\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i1 &lt; a.length; i1++) {\n                    <span class=\"hljs-comment\">// New nodes are created and values are added</span>\n                    fresh1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(); <span class=\"hljs-comment\">// New node is created</span>\n                    fresh1.val = a[i1]; <span class=\"hljs-comment\">// Value is stored in the value part of the node</span>\n                    <span class=\"hljs-keyword\">if</span> (start1 == <span class=\"hljs-literal\">null</span>)\n                        start1 = fresh1;\n                    <span class=\"hljs-keyword\">else</span>\n                        prev1.next = fresh1;\n                    prev1 = fresh1;\n                }\n                <span class=\"hljs-type\">Task1</span> <span class=\"hljs-variable\">kk</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Task1</span>();\n                start1 = kk.sort_by_insertionsort(start1);\n                <span class=\"hljs-comment\">// method is being called</span>\n                <span class=\"hljs-type\">int</span> i1=<span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">for</span> (ptr1 = start1; ptr1 != <span class=\"hljs-literal\">null</span>; ptr1 = ptr1.next) {\n                    a[i1++]=ptr1.val;\n                    <span class=\"hljs-comment\">// storing the sorted values in the array</span>\n                }\n                LinkList_Sort uu1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkList_Sort</span>();\n                <span class=\"hljs-comment\">// array b is not sorted and it will return false when checked with sorted list</span>\n                <span class=\"hljs-keyword\">if</span>(uu1.compare(a,b))\n                {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n                }\n                <span class=\"hljs-keyword\">else</span>\n                {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n                <span class=\"hljs-comment\">// The given array and the expected array is checked if both are same then true is displayed else false is displayed</span>\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n                <span class=\"hljs-type\">Task2</span> <span class=\"hljs-variable\">mm</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Task2</span>();\n                <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">start2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>, prev2 = <span class=\"hljs-literal\">null</span>, fresh2, ptr2;\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i2 &lt; a.length; i2++) {\n                    <span class=\"hljs-comment\">// New nodes are created and values are added</span>\n                    fresh2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(); <span class=\"hljs-comment\">// Node class is created</span>\n                    fresh2.val = a[i2]; <span class=\"hljs-comment\">// Value is stored in the value part of the Node</span>\n                    <span class=\"hljs-keyword\">if</span> (start2 == <span class=\"hljs-literal\">null</span>)\n                        start2 = fresh2;\n                    <span class=\"hljs-keyword\">else</span>\n                        prev2.next = fresh2;\n                    prev2 = fresh2;\n                }\n                start2 = mm.sort_by_heapsort(start2);\n                <span class=\"hljs-comment\">// method is being called</span>\n                <span class=\"hljs-type\">int</span> i3=<span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">for</span> (ptr2 = start2; ptr2 != <span class=\"hljs-literal\">null</span>; ptr2 = ptr2.next) {\n                    a[i3++]=ptr2.val;\n                    <span class=\"hljs-comment\">// storing the sorted values in the array</span>\n                }\n                Arrays.sort(b);\n                <span class=\"hljs-comment\">// array b is sorted and it will return true when checked with sorted list</span>\n                LinkList_Sort uu2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkList_Sort</span>();\n                <span class=\"hljs-keyword\">if</span>(uu2.compare(a,b))\n                {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n                }\n                <span class=\"hljs-keyword\">else</span>\n                {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n                <span class=\"hljs-comment\">// The given array and the expected array is checked if both are same then true is displayed else false is displayed</span>\n            <span class=\"hljs-keyword\">default</span>:\n                <span class=\"hljs-comment\">// default is used incase user puts a unauthorized value</span>\n                System.out.println(<span class=\"hljs-string\">&quot;Wrong choice&quot;</span>);\n        }\n        <span class=\"hljs-comment\">// Switch case is used to call the classes as per the user requirement</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[] , <span class=\"hljs-type\">int</span> b[])</span>\n    {\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;a.length;i++)\n        {\n            <span class=\"hljs-keyword\">if</span>(a[i]!=b[i])\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-comment\">// Both the arrays are checked for equalness. If both are equal then true is returned else false is returned</span>\n    }\n    <span class=\"hljs-comment\">/**\n     * OUTPUT :\n     * Input - {89,56,98,123,26,75,12,40,39,68,91} is same for all the 3 classes\n     * Output: [12 26 39 40 56 68 75 89 91 98 123] is same for all the 3 classes\n     * 1st approach Time Complexity : O(n logn)\n     * Auxiliary Space Complexity : O(n)\n     * 2nd approach Time Complexity : O(n^2)\n     * Auxiliary Space Complexity : O(n)\n     * 3rd approach Time Complexity : O(n logn)\n     * Auxiliary Space Complexity : O(n)\n     */</span>\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-type\">int</span> val;\n    Node next;\n    <span class=\"hljs-comment\">// Node class for creation of linklist nodes</span>\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Task</span> {\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> a[];\n\n    <span class=\"hljs-keyword\">public</span> Node <span class=\"hljs-title function_\">sort_by_mergesort</span><span class=\"hljs-params\">(Node head)</span> {\n        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">null</span> || head.next == <span class=\"hljs-literal\">null</span>)\n            <span class=\"hljs-keyword\">return</span> head;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> count(head);\n        a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[c];\n        <span class=\"hljs-comment\">// Array of size c is created</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">ptr</span> <span class=\"hljs-operator\">=</span> head; ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next) {\n            a[i++] = ptr.val;\n        }\n        <span class=\"hljs-comment\">// values are stored in the array</span>\n        i = <span class=\"hljs-number\">0</span>;\n        task(a, <span class=\"hljs-number\">0</span>, c - <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-comment\">// task method will be executed</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">ptr</span> <span class=\"hljs-operator\">=</span> head; ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next) {\n            ptr.val = a[i++];\n            <span class=\"hljs-comment\">// Value is stored in the linklist after being sorted</span>\n        }\n        <span class=\"hljs-keyword\">return</span> head;\n    }\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">count</span><span class=\"hljs-params\">(Node head)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        Node ptr;\n        <span class=\"hljs-keyword\">for</span> (ptr = head; ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next) {\n            c++;\n        }\n        <span class=\"hljs-keyword\">return</span> c;\n        <span class=\"hljs-comment\">// This Method is used to count number of elements/nodes present in the linklist</span>\n        <span class=\"hljs-comment\">// It will return a integer type value denoting the number of nodes present</span>\n    }\n\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">task</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n[], <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span> {\n        <span class=\"hljs-keyword\">if</span> (i &lt; j) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">m</span> <span class=\"hljs-operator\">=</span> (i + j) / <span class=\"hljs-number\">2</span>;\n            task(n, i, m);\n            task(n, m + <span class=\"hljs-number\">1</span>, j);\n            task1(n, i, m, j);\n            <span class=\"hljs-comment\">// Array is halved and sent for sorting</span>\n        }\n    }\n\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">task1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n[], <span class=\"hljs-type\">int</span> s, <span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> e)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> s, k = <span class=\"hljs-number\">0</span>, j = m + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-type\">int</span> b[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[e - s + <span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-keyword\">while</span> (i &lt;= m &amp;&amp; j &lt;= e) {\n            <span class=\"hljs-keyword\">if</span> (n[j] &gt;= n[i])\n                b[k++] = n[i++];\n            <span class=\"hljs-keyword\">else</span>\n                b[k++] = n[j++];\n        }\n        <span class=\"hljs-comment\">// Smallest number is stored after checking from both the arrays</span>\n        <span class=\"hljs-keyword\">while</span> (i &lt;= m) {\n            b[k++] = n[i++];\n        }\n        <span class=\"hljs-keyword\">while</span> (j &lt;= e) {\n            b[k++] = n[j++];\n        }\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> s; p &lt;= e; p++) {\n            a[p] = b[p - s];\n        }\n    }\n    <span class=\"hljs-comment\">// The method task and task1 is used to sort the linklist using merge sort</span>\n}\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Task1</span> {\n    <span class=\"hljs-keyword\">public</span> Node <span class=\"hljs-title function_\">sort_by_insertionsort</span><span class=\"hljs-params\">(Node head)</span> {\n        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">null</span> || head.next == <span class=\"hljs-literal\">null</span>)\n            <span class=\"hljs-keyword\">return</span> head;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> count(head);\n        <span class=\"hljs-type\">int</span> a[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[c];\n        <span class=\"hljs-comment\">// Array of size c is created</span>\n        a[<span class=\"hljs-number\">0</span>] = head.val;\n        <span class=\"hljs-type\">int</span> i;\n        Node ptr;\n        <span class=\"hljs-keyword\">for</span> (ptr = head.next, i = <span class=\"hljs-number\">1</span>; ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next, i++) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> i - <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">while</span> (j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; a[j] &gt; ptr.val) {\n                <span class=\"hljs-comment\">// values are stored in the array</span>\n                a[j + <span class=\"hljs-number\">1</span>] = a[j];\n                j--;\n            }\n            a[j + <span class=\"hljs-number\">1</span>] = ptr.val;\n        }\n        i = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (ptr = head; ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next) {\n            ptr.val = a[i++];\n            <span class=\"hljs-comment\">// Value is stored in the linklist after being sorted</span>\n        }\n        <span class=\"hljs-keyword\">return</span> head;\n    }\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">count</span><span class=\"hljs-params\">(Node head)</span> {\n        Node ptr;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (ptr = head; ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next) {\n            c++;\n        }\n        <span class=\"hljs-keyword\">return</span> c;\n        <span class=\"hljs-comment\">// This Method is used to count number of elements/nodes present in the linklist</span>\n        <span class=\"hljs-comment\">// It will return a integer type value denoting the number of nodes present</span>\n    }\n    <span class=\"hljs-comment\">// The method task and task1 is used to sort the linklist using insertion sort</span>\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Task2</span> {\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> a[];\n\n    <span class=\"hljs-keyword\">public</span> Node <span class=\"hljs-title function_\">sort_by_heapsort</span><span class=\"hljs-params\">(Node head)</span> {\n        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">null</span> || head.next == <span class=\"hljs-literal\">null</span>)\n            <span class=\"hljs-keyword\">return</span> head;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> count(head);\n        a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[c];\n        <span class=\"hljs-comment\">// Array of size c is created</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">ptr</span> <span class=\"hljs-operator\">=</span> head; ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next) {\n            a[i++] = ptr.val;\n            <span class=\"hljs-comment\">// values are stored in the array</span>\n        }\n        i = <span class=\"hljs-number\">0</span>;\n        task(a);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">ptr</span> <span class=\"hljs-operator\">=</span> head; ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next) {\n            ptr.val = a[i++];\n            <span class=\"hljs-comment\">// Value is stored in the linklist after being sorted</span>\n        }\n        <span class=\"hljs-keyword\">return</span> head;\n    }\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">count</span><span class=\"hljs-params\">(Node head)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        Node ptr;\n        <span class=\"hljs-keyword\">for</span> (ptr = head; ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next) {\n            c++;\n        }\n        <span class=\"hljs-keyword\">return</span> c;\n        <span class=\"hljs-comment\">// This Method is used to count number of elements/nodes present in the linklist</span>\n        <span class=\"hljs-comment\">// It will return a integer type value denoting the number of nodes present</span>\n    }\n\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">task</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n[])</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> n.length;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> k / <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n            task1(n, k, i);\n        }\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> k - <span class=\"hljs-number\">1</span>; i &gt; <span class=\"hljs-number\">0</span>; i--) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">d</span> <span class=\"hljs-operator\">=</span> n[<span class=\"hljs-number\">0</span>];\n            n[<span class=\"hljs-number\">0</span>] = n[i];\n            n[i] = d;\n            task1(n, i, <span class=\"hljs-number\">0</span>);\n            <span class=\"hljs-comment\">// recursive calling of task1 method</span>\n        }\n    }\n\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">task1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n[], <span class=\"hljs-type\">int</span> k, <span class=\"hljs-type\">int</span> i)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> i;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">l</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">if</span> (l &lt; k &amp;&amp; n[l] &gt; n[p])\n            p = l;\n        <span class=\"hljs-keyword\">if</span> (r &lt; k &amp;&amp; n[r] &gt; n[p])\n            p = r;\n        <span class=\"hljs-keyword\">if</span> (p != i) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">d</span> <span class=\"hljs-operator\">=</span> n[p];\n            n[p] = n[i];\n            n[i] = d;\n            task1(n, k, p);\n        }\n    }\n    <span class=\"hljs-comment\">// The method task and task1 is used to sort the linklist using heap sort</span>\n}"
    }
  },
  "contributors": [
    {
      "name": "Siddhant Swarup Mallick",
      "email": "78552027+siddhant2002@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}