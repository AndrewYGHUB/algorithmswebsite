{
  "slug": "linked-list",
  "name": "Linked List",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "data_structures/linked_list.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/linked_list.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of singly linked list algorithm.\n * @details\n * The linked list is a data structure used for holding a sequence of\n * values, which can be added, removed and displayed.\n * ### Algorithm\n * Values can be added by iterating to the end of a list(by following\n * the pointers) starting from the first link. Whichever link points to null\n * is considered the last link and is pointed to the new value.\n *\n * Values can be removed by also iterating through the list. When the node\n * containing the value is found, the node pointing to the current node is made\n * to point to the node that the current node is pointing to, and then returning\n * the current node to heap store.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;memory&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace data_structures\n * @brief Data Structures algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> data_structures {\n\n<span class=\"hljs-comment\">/**\n * @namespace linked_list\n * @brief Functions for singly linked list algorithm\n */</span>\n<span class=\"hljs-keyword\">namespace</span> linked_list {\n\n<span class=\"hljs-comment\">/**\n * This function checks if the string passed consists\n * of only digits.\n * @param s To be checked if s contains only integers\n * @returns true if there are only digits present in the string\n * @returns false if any other character is found\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">isDigit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::string&amp; s)</span> </span>{\n    <span class=\"hljs-comment\">// function statements here</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> i : s) {\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">isdigit</span>(i)) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * A link class containing a value and pointer to another link\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">link</span> {\n <span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-type\">int</span> pvalue;                   <span class=\"hljs-comment\">///&lt; value of the current link</span>\n    std::shared_ptr&lt;link&gt; psucc;  <span class=\"hljs-comment\">///&lt; pointer to the next value on the list</span>\n\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/**\n     * function returns the integer value stored in the link.\n     * @returns the integer value stored in the link.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">val</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> pvalue; }\n\n    <span class=\"hljs-comment\">/**\n     * function returns the pointer to next link\n     * @returns the pointer to the next link\n     * */</span>\n    <span class=\"hljs-function\">std::shared_ptr&lt;link&gt;&amp; <span class=\"hljs-title\">succ</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> psucc; }\n\n    <span class=\"hljs-comment\">/**\n     * Creates link with provided value and pointer to next link\n     * @param value is the integer stored in the link\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">link</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value = <span class=\"hljs-number\">0</span>)</span> : pvalue(value), psucc(nullptr) {</span>}\n};\n\n<span class=\"hljs-comment\">/**\n * A list class containing a sequence of links\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">list</span> {\n <span class=\"hljs-keyword\">private</span>:\n    std::shared_ptr&lt;link&gt; first;  <span class=\"hljs-comment\">///&lt; link before the actual first element</span>\n    std::shared_ptr&lt;link&gt; last;   <span class=\"hljs-comment\">///&lt; last link on the list</span>\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/**\n     * List constructor. Initializes the first and last link.\n     */</span>\n    <span class=\"hljs-built_in\">list</span>() {\n        <span class=\"hljs-comment\">// Initialize the first link</span>\n        first = std::<span class=\"hljs-built_in\">make_shared</span>&lt;link&gt;();\n        <span class=\"hljs-comment\">// Initialize the last link with the first link</span>\n        last = <span class=\"hljs-literal\">nullptr</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">push_back</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> new_elem)</span></span>;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">push_front</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> new_elem)</span></span>;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">erase</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> old_elem)</span></span>;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">display</span><span class=\"hljs-params\">()</span></span>;\n    <span class=\"hljs-function\">std::shared_ptr&lt;link&gt; <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> find_elem)</span></span>;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">reverse</span><span class=\"hljs-params\">()</span></span>;\n};\n\n<span class=\"hljs-comment\">/**\n * function checks if list is empty\n * @returns true if list is empty\n * @returns false if list is not empty\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">list::isEmpty</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (last == <span class=\"hljs-literal\">nullptr</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * function adds new element to the end of the list\n * @param new_elem to be added to the end of the list\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">list::push_back</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> new_elem)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isEmpty</span>()) {\n        first-&gt;<span class=\"hljs-built_in\">succ</span>() = std::<span class=\"hljs-built_in\">make_shared</span>&lt;link&gt;(new_elem);\n        last = first-&gt;<span class=\"hljs-built_in\">succ</span>();\n    } <span class=\"hljs-keyword\">else</span> {\n        last-&gt;<span class=\"hljs-built_in\">succ</span>() = std::<span class=\"hljs-built_in\">make_shared</span>&lt;link&gt;(new_elem);\n        last = last-&gt;<span class=\"hljs-built_in\">succ</span>();\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * function adds new element to the beginning of the list\n * @param new_elem to be added to front of the list\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">list::push_front</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> new_elem)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isEmpty</span>()) {\n        first-&gt;<span class=\"hljs-built_in\">succ</span>() = std::<span class=\"hljs-built_in\">make_shared</span>&lt;link&gt;(new_elem);\n        last = first-&gt;<span class=\"hljs-built_in\">succ</span>();\n    } <span class=\"hljs-keyword\">else</span> {\n        std::shared_ptr&lt;link&gt; t = std::<span class=\"hljs-built_in\">make_shared</span>&lt;link&gt;(new_elem);\n        t-&gt;<span class=\"hljs-built_in\">succ</span>() = first-&gt;<span class=\"hljs-built_in\">succ</span>();\n        first-&gt;<span class=\"hljs-built_in\">succ</span>() = t;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * function erases old element from the list\n * @param old_elem to be erased from the list\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">list::erase</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> old_elem)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isEmpty</span>()) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;List is Empty!&quot;</span>;\n        <span class=\"hljs-keyword\">return</span>;\n    }\n    std::shared_ptr&lt;link&gt; t = first;\n    std::shared_ptr&lt;link&gt; to_be_removed = <span class=\"hljs-literal\">nullptr</span>;\n    <span class=\"hljs-keyword\">while</span> (t != last &amp;&amp; t-&gt;<span class=\"hljs-built_in\">succ</span>()-&gt;<span class=\"hljs-built_in\">val</span>() != old_elem) {\n        t = t-&gt;<span class=\"hljs-built_in\">succ</span>();\n    }\n    <span class=\"hljs-keyword\">if</span> (t == last) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Element not found\\n&quot;</span>;\n        <span class=\"hljs-keyword\">return</span>;\n    }\n    to_be_removed = t-&gt;<span class=\"hljs-built_in\">succ</span>();\n    t-&gt;<span class=\"hljs-built_in\">succ</span>() = t-&gt;<span class=\"hljs-built_in\">succ</span>()-&gt;<span class=\"hljs-built_in\">succ</span>();\n    to_be_removed.<span class=\"hljs-built_in\">reset</span>();\n    <span class=\"hljs-keyword\">if</span> (t-&gt;<span class=\"hljs-built_in\">succ</span>() == <span class=\"hljs-literal\">nullptr</span>) {\n        last = t;\n    }\n    <span class=\"hljs-keyword\">if</span> (first == last){\n        last = <span class=\"hljs-literal\">nullptr</span>;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * function displays all the elements in the list\n * @returns &#x27;void&#x27;\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">list::display</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isEmpty</span>()) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;List is Empty!&quot;</span>;\n        <span class=\"hljs-keyword\">return</span>;\n    }\n    std::shared_ptr&lt;link&gt; t = first;\n    <span class=\"hljs-keyword\">while</span> (t-&gt;<span class=\"hljs-built_in\">succ</span>() != <span class=\"hljs-literal\">nullptr</span>) {\n        std::cout &lt;&lt; t-&gt;<span class=\"hljs-built_in\">succ</span>()-&gt;<span class=\"hljs-built_in\">val</span>() &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span>;\n        t = t-&gt;<span class=\"hljs-built_in\">succ</span>();\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * function searchs for @param find_elem in the list\n * @param find_elem to be searched for in the list\n */</span>\n<span class=\"hljs-function\">std::shared_ptr&lt;link&gt; <span class=\"hljs-title\">list::search</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> find_elem)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isEmpty</span>()) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;List is Empty!&quot;</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nullptr</span>;\n    }\n    std::shared_ptr&lt;link&gt; t = first;\n    <span class=\"hljs-keyword\">while</span> (t != last &amp;&amp; t-&gt;<span class=\"hljs-built_in\">succ</span>()-&gt;<span class=\"hljs-built_in\">val</span>() != find_elem) {\n        t = t-&gt;<span class=\"hljs-built_in\">succ</span>();\n    }\n    <span class=\"hljs-keyword\">if</span> (t == last) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Element not found\\n&quot;</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nullptr</span>;\n    }\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Element was found\\n&quot;</span>;\n    <span class=\"hljs-keyword\">return</span> t-&gt;<span class=\"hljs-built_in\">succ</span>();\n}\n}  <span class=\"hljs-comment\">// namespace linked_list</span>\n}  <span class=\"hljs-comment\">// namespace data_structures</span>\n\n<span class=\"hljs-comment\">/**\n * Main function:\n * Allows the user add and delete values from the list.\n * Also allows user to search for and display values in the list.\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    data_structures::linked_list::list l;\n    <span class=\"hljs-type\">int</span> choice = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> x = <span class=\"hljs-number\">0</span>;\n    std::string s;\n    <span class=\"hljs-keyword\">do</span> {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n1. Insert&quot;</span>;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n2. Delete&quot;</span>;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n3. Search&quot;</span>;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n4. Print&quot;</span>;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n0. Exit&quot;</span>;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\nEnter you choice : &quot;</span>;\n        std::cin &gt;&gt; choice;\n        <span class=\"hljs-keyword\">switch</span> (choice) {\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:\n                std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nQuitting the program...\\n&quot;</span>;\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n                std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the element to be inserted : &quot;</span>;\n                std::cin &gt;&gt; s;\n\n                <span class=\"hljs-keyword\">if</span> (data_structures::linked_list::<span class=\"hljs-built_in\">isDigit</span>(s)) {\n                    x = std::<span class=\"hljs-built_in\">stoi</span>(s);\n                    l.<span class=\"hljs-built_in\">push_back</span>(x);\n                } <span class=\"hljs-keyword\">else</span> {\n                    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Wrong Input!\\n&quot;</span>;\n                }\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n                std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the element to be removed : &quot;</span>;\n                std::cin &gt;&gt; s;\n                <span class=\"hljs-keyword\">if</span> (data_structures::linked_list::<span class=\"hljs-built_in\">isDigit</span>(s)) {\n                    x = std::<span class=\"hljs-built_in\">stoi</span>(s);\n                    l.<span class=\"hljs-built_in\">erase</span>(x);\n                } <span class=\"hljs-keyword\">else</span> {\n                    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Wrong Input!\\n&quot;</span>;\n                }\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n                std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the element to be searched : &quot;</span>;\n                std::cin &gt;&gt; s;\n                <span class=\"hljs-keyword\">if</span> (data_structures::linked_list::<span class=\"hljs-built_in\">isDigit</span>(s)) {\n                    x = std::<span class=\"hljs-built_in\">stoi</span>(s);\n                    std::shared_ptr&lt;data_structures::linked_list::link&gt; found =\n                        l.<span class=\"hljs-built_in\">search</span>(x);\n                } <span class=\"hljs-keyword\">else</span> {\n                    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Wrong Input!\\n&quot;</span>;\n                }\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\n                l.<span class=\"hljs-built_in\">display</span>();\n                std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">default</span>:\n                std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Invalid Input\\n&quot;</span> &lt;&lt; std::endl;\n                <span class=\"hljs-keyword\">break</span>;\n        }\n    } <span class=\"hljs-keyword\">while</span> (choice != <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "rust": {
      "dir": "src/data_structures/linked_list.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/data_structures/linked_list.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::fmt::{<span class=\"hljs-keyword\">self</span>, Display, Formatter};\n<span class=\"hljs-keyword\">use</span> std::marker::PhantomData;\n<span class=\"hljs-keyword\">use</span> std::ptr::NonNull;\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Node</span>&lt;T&gt; {\n    val: T,\n    next: <span class=\"hljs-type\">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,\n    prev: <span class=\"hljs-type\">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Node&lt;T&gt; {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>(t: T) <span class=\"hljs-punctuation\">-&gt;</span> Node&lt;T&gt; {\n        Node {\n            val: t,\n            prev: <span class=\"hljs-literal\">None</span>,\n            next: <span class=\"hljs-literal\">None</span>,\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;T&gt; {\n    length: <span class=\"hljs-type\">u32</span>,\n    head: <span class=\"hljs-type\">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,\n    tail: <span class=\"hljs-type\">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,\n    <span class=\"hljs-comment\">// Act like we own boxed nodes since we construct and leak them</span>\n    marker: PhantomData&lt;<span class=\"hljs-type\">Box</span>&lt;Node&lt;T&gt;&gt;&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Default</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">default</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">Self</span>::<span class=\"hljs-title function_ invoke__\">new</span>()\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; LinkedList&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">Self</span> {\n            length: <span class=\"hljs-number\">0</span>,\n            head: <span class=\"hljs-literal\">None</span>,\n            tail: <span class=\"hljs-literal\">None</span>,\n            marker: PhantomData,\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert_at_head</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, obj: T) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">node</span> = Box::<span class=\"hljs-title function_ invoke__\">new</span>(Node::<span class=\"hljs-title function_ invoke__\">new</span>(obj));\n        node.next = <span class=\"hljs-keyword\">self</span>.head;\n        node.prev = <span class=\"hljs-literal\">None</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">node_ptr</span> = <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-keyword\">unsafe</span> { NonNull::<span class=\"hljs-title function_ invoke__\">new_unchecked</span>(Box::<span class=\"hljs-title function_ invoke__\">into_raw</span>(node)) });\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.head {\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">self</span>.tail = node_ptr,\n            <span class=\"hljs-title function_ invoke__\">Some</span>(head_ptr) =&gt; <span class=\"hljs-keyword\">unsafe</span> { (*head_ptr.<span class=\"hljs-title function_ invoke__\">as_ptr</span>()).prev = node_ptr },\n        }\n        <span class=\"hljs-keyword\">self</span>.head = node_ptr;\n        <span class=\"hljs-keyword\">self</span>.length += <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert_at_tail</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, obj: T) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">node</span> = Box::<span class=\"hljs-title function_ invoke__\">new</span>(Node::<span class=\"hljs-title function_ invoke__\">new</span>(obj));\n        node.next = <span class=\"hljs-literal\">None</span>;\n        node.prev = <span class=\"hljs-keyword\">self</span>.tail;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">node_ptr</span> = <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-keyword\">unsafe</span> { NonNull::<span class=\"hljs-title function_ invoke__\">new_unchecked</span>(Box::<span class=\"hljs-title function_ invoke__\">into_raw</span>(node)) });\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.tail {\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">self</span>.head = node_ptr,\n            <span class=\"hljs-title function_ invoke__\">Some</span>(tail_ptr) =&gt; <span class=\"hljs-keyword\">unsafe</span> { (*tail_ptr.<span class=\"hljs-title function_ invoke__\">as_ptr</span>()).next = node_ptr },\n        }\n        <span class=\"hljs-keyword\">self</span>.tail = node_ptr;\n        <span class=\"hljs-keyword\">self</span>.length += <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert_at_ith</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, index: <span class=\"hljs-type\">u32</span>, obj: T) {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.length &lt; index {\n            <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Index out of bounds&quot;</span>);\n        }\n\n        <span class=\"hljs-keyword\">if</span> index == <span class=\"hljs-number\">0</span> || <span class=\"hljs-keyword\">self</span>.head == <span class=\"hljs-literal\">None</span> {\n            <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">insert_at_head</span>(obj);\n            <span class=\"hljs-keyword\">return</span>;\n        }\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.length == index {\n            <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(obj);\n            <span class=\"hljs-keyword\">return</span>;\n        }\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(<span class=\"hljs-keyword\">mut</span> ith_node) = <span class=\"hljs-keyword\">self</span>.head {\n            <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">_</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..index {\n                <span class=\"hljs-keyword\">unsafe</span> {\n                    <span class=\"hljs-title function_ invoke__\">match</span> (*ith_node.<span class=\"hljs-title function_ invoke__\">as_ptr</span>()).next {\n                        <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Index out of bounds&quot;</span>),\n                        <span class=\"hljs-title function_ invoke__\">Some</span>(next_ptr) =&gt; ith_node = next_ptr,\n                    }\n                }\n            }\n\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">node</span> = Box::<span class=\"hljs-title function_ invoke__\">new</span>(Node::<span class=\"hljs-title function_ invoke__\">new</span>(obj));\n            <span class=\"hljs-keyword\">unsafe</span> {\n                node.prev = (*ith_node.<span class=\"hljs-title function_ invoke__\">as_ptr</span>()).prev;\n                node.next = <span class=\"hljs-title function_ invoke__\">Some</span>(ith_node);\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(p) = (*ith_node.<span class=\"hljs-title function_ invoke__\">as_ptr</span>()).prev {\n                    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">node_ptr</span> = <span class=\"hljs-title function_ invoke__\">Some</span>(NonNull::<span class=\"hljs-title function_ invoke__\">new_unchecked</span>(Box::<span class=\"hljs-title function_ invoke__\">into_raw</span>(node)));\n                    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;{:?}&quot;</span>, (*p.<span class=\"hljs-title function_ invoke__\">as_ptr</span>()).next);\n                    (*p.<span class=\"hljs-title function_ invoke__\">as_ptr</span>()).next = node_ptr;\n                    <span class=\"hljs-keyword\">self</span>.length += <span class=\"hljs-number\">1</span>;\n                }\n            }\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">delete_head</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;T&gt; {\n        <span class=\"hljs-comment\">// Safety: head_ptr points to a leaked boxed node managed by this list</span>\n        <span class=\"hljs-comment\">// We reassign pointers that pointed to the head node</span>\n        <span class=\"hljs-keyword\">self</span>.head.<span class=\"hljs-title function_ invoke__\">map</span>(|head_ptr| <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">old_head</span> = Box::<span class=\"hljs-title function_ invoke__\">from_raw</span>(head_ptr.<span class=\"hljs-title function_ invoke__\">as_ptr</span>());\n            <span class=\"hljs-keyword\">match</span> old_head.next {\n                <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-keyword\">mut</span> next_ptr) =&gt; next_ptr.<span class=\"hljs-title function_ invoke__\">as_mut</span>().prev = <span class=\"hljs-literal\">None</span>,\n                <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">self</span>.tail = <span class=\"hljs-literal\">None</span>,\n            }\n            <span class=\"hljs-keyword\">self</span>.head = old_head.next;\n            <span class=\"hljs-keyword\">self</span>.length -= <span class=\"hljs-number\">1</span>;\n            old_head.val\n        })\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">delete_tail</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;T&gt; {\n        <span class=\"hljs-comment\">// Safety: tail_ptr points to a leaked boxed node managed by this list</span>\n        <span class=\"hljs-comment\">// We reassign pointers that pointed to the tail node</span>\n        <span class=\"hljs-keyword\">self</span>.tail.<span class=\"hljs-title function_ invoke__\">map</span>(|tail_ptr| <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">old_tail</span> = Box::<span class=\"hljs-title function_ invoke__\">from_raw</span>(tail_ptr.<span class=\"hljs-title function_ invoke__\">as_ptr</span>());\n            <span class=\"hljs-keyword\">match</span> old_tail.prev {\n                <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-keyword\">mut</span> prev) =&gt; prev.<span class=\"hljs-title function_ invoke__\">as_mut</span>().next = <span class=\"hljs-literal\">None</span>,\n                <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">self</span>.head = <span class=\"hljs-literal\">None</span>,\n            }\n            <span class=\"hljs-keyword\">self</span>.tail = old_tail.prev;\n            <span class=\"hljs-keyword\">self</span>.length -= <span class=\"hljs-number\">1</span>;\n            old_tail.val\n        })\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">delete_ith</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, index: <span class=\"hljs-type\">u32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;T&gt; {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.length &lt; index {\n            <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Index out of bounds&quot;</span>);\n        }\n\n        <span class=\"hljs-keyword\">if</span> index == <span class=\"hljs-number\">0</span> || <span class=\"hljs-keyword\">self</span>.head == <span class=\"hljs-literal\">None</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">delete_head</span>();\n        }\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.length == index {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">delete_tail</span>();\n        }\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(<span class=\"hljs-keyword\">mut</span> ith_node) = <span class=\"hljs-keyword\">self</span>.head {\n            <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">_</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..index {\n                <span class=\"hljs-keyword\">unsafe</span> {\n                    <span class=\"hljs-title function_ invoke__\">match</span> (*ith_node.<span class=\"hljs-title function_ invoke__\">as_ptr</span>()).next {\n                        <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Index out of bounds&quot;</span>),\n                        <span class=\"hljs-title function_ invoke__\">Some</span>(next_ptr) =&gt; ith_node = next_ptr,\n                    }\n                }\n            }\n\n            <span class=\"hljs-keyword\">unsafe</span> {\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">old_ith</span> = Box::<span class=\"hljs-title function_ invoke__\">from_raw</span>(ith_node.<span class=\"hljs-title function_ invoke__\">as_ptr</span>());\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(<span class=\"hljs-keyword\">mut</span> prev) = old_ith.prev {\n                    prev.<span class=\"hljs-title function_ invoke__\">as_mut</span>().next = old_ith.next;\n                }\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(<span class=\"hljs-keyword\">mut</span> next) = old_ith.next {\n                    next.<span class=\"hljs-title function_ invoke__\">as_mut</span>().prev = old_ith.prev;\n                }\n\n                <span class=\"hljs-keyword\">self</span>.length -= <span class=\"hljs-number\">1</span>;\n                <span class=\"hljs-title function_ invoke__\">Some</span>(old_ith.val)\n            }\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-literal\">None</span>\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, index: <span class=\"hljs-type\">i32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;&amp;T&gt; {\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">get_ith_node</span>(<span class=\"hljs-keyword\">self</span>.head, index)\n    }\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_ith_node</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, node: <span class=\"hljs-type\">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;, index: <span class=\"hljs-type\">i32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;&amp;T&gt; {\n        <span class=\"hljs-keyword\">match</span> node {\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\n            <span class=\"hljs-title function_ invoke__\">Some</span>(next_ptr) =&gt; <span class=\"hljs-keyword\">match</span> index {\n                <span class=\"hljs-number\">0</span> =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-keyword\">unsafe</span> { &amp;(*next_ptr.<span class=\"hljs-title function_ invoke__\">as_ptr</span>()).val }),\n                _ =&gt; <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">get_ith_node</span>(<span class=\"hljs-keyword\">unsafe</span> { (*next_ptr.<span class=\"hljs-title function_ invoke__\">as_ptr</span>()).next }, index - <span class=\"hljs-number\">1</span>),\n            },\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">drop</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-comment\">// Pop items until there are none left</span>\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">delete_head</span>().<span class=\"hljs-title function_ invoke__\">is_some</span>() {}\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Display <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;T&gt;\n<span class=\"hljs-keyword\">where</span>\n    T: Display,\n{\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fmt</span>(&amp;<span class=\"hljs-keyword\">self</span>, f: &amp;<span class=\"hljs-keyword\">mut</span> Formatter) <span class=\"hljs-punctuation\">-&gt;</span> fmt::<span class=\"hljs-type\">Result</span> {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.head {\n            <span class=\"hljs-title function_ invoke__\">Some</span>(node) =&gt; <span class=\"hljs-built_in\">write!</span>(f, <span class=\"hljs-string\">&quot;{}&quot;</span>, <span class=\"hljs-keyword\">unsafe</span> { node.<span class=\"hljs-title function_ invoke__\">as_ref</span>() }),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-title function_ invoke__\">Ok</span>(()),\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Display <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Node</span>&lt;T&gt;\n<span class=\"hljs-keyword\">where</span>\n    T: Display,\n{\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fmt</span>(&amp;<span class=\"hljs-keyword\">self</span>, f: &amp;<span class=\"hljs-keyword\">mut</span> Formatter) <span class=\"hljs-punctuation\">-&gt;</span> fmt::<span class=\"hljs-type\">Result</span> {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.next {\n            <span class=\"hljs-title function_ invoke__\">Some</span>(node) =&gt; <span class=\"hljs-built_in\">write!</span>(f, <span class=\"hljs-string\">&quot;{}, {}&quot;</span>, <span class=\"hljs-keyword\">self</span>.val, <span class=\"hljs-keyword\">unsafe</span> { node.<span class=\"hljs-title function_ invoke__\">as_ref</span>() }),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">write!</span>(f, <span class=\"hljs-string\">&quot;{}&quot;</span>, <span class=\"hljs-keyword\">self</span>.val),\n        }\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> std::convert::TryInto;\n\n    <span class=\"hljs-keyword\">use</span> super::LinkedList;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert_at_tail_works</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list</span> = LinkedList::&lt;<span class=\"hljs-type\">i32</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">second_value</span> = <span class=\"hljs-number\">2</span>;\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(<span class=\"hljs-number\">1</span>);\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(second_value);\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;Linked List is {}&quot;</span>, list);\n        <span class=\"hljs-keyword\">match</span> list.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-title function_ invoke__\">Some</span>(val) =&gt; <span class=\"hljs-built_in\">assert_eq!</span>(*val, second_value),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Expected to find {} at index 1&quot;</span>, second_value),\n        }\n    }\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert_at_head_works</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list</span> = LinkedList::&lt;<span class=\"hljs-type\">i32</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">second_value</span> = <span class=\"hljs-number\">2</span>;\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_head</span>(<span class=\"hljs-number\">1</span>);\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_head</span>(second_value);\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;Linked List is {}&quot;</span>, list);\n        <span class=\"hljs-keyword\">match</span> list.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-title function_ invoke__\">Some</span>(val) =&gt; <span class=\"hljs-built_in\">assert_eq!</span>(*val, second_value),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Expected to find {} at index 0&quot;</span>, second_value),\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert_at_ith_can_add_to_tail</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list</span> = LinkedList::&lt;<span class=\"hljs-type\">i32</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">second_value</span> = <span class=\"hljs-number\">2</span>;\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_ith</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_ith</span>(<span class=\"hljs-number\">1</span>, second_value);\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;Linked List is {}&quot;</span>, list);\n        <span class=\"hljs-keyword\">match</span> list.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-title function_ invoke__\">Some</span>(val) =&gt; <span class=\"hljs-built_in\">assert_eq!</span>(*val, second_value),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Expected to find {} at index 1&quot;</span>, second_value),\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert_at_ith_can_add_to_head</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list</span> = LinkedList::&lt;<span class=\"hljs-type\">i32</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">second_value</span> = <span class=\"hljs-number\">2</span>;\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_ith</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_ith</span>(<span class=\"hljs-number\">0</span>, second_value);\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;Linked List is {}&quot;</span>, list);\n        <span class=\"hljs-keyword\">match</span> list.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-title function_ invoke__\">Some</span>(val) =&gt; <span class=\"hljs-built_in\">assert_eq!</span>(*val, second_value),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Expected to find {} at index 0&quot;</span>, second_value),\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert_at_ith_can_add_to_middle</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list</span> = LinkedList::&lt;<span class=\"hljs-type\">i32</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">second_value</span> = <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">third_value</span> = <span class=\"hljs-number\">3</span>;\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_ith</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_ith</span>(<span class=\"hljs-number\">1</span>, second_value);\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_ith</span>(<span class=\"hljs-number\">1</span>, third_value);\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;Linked List is {}&quot;</span>, list);\n        <span class=\"hljs-keyword\">match</span> list.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-title function_ invoke__\">Some</span>(val) =&gt; <span class=\"hljs-built_in\">assert_eq!</span>(*val, third_value),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Expected to find {} at index 1&quot;</span>, third_value),\n        }\n\n        <span class=\"hljs-keyword\">match</span> list.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-number\">2</span>) {\n            <span class=\"hljs-title function_ invoke__\">Some</span>(val) =&gt; <span class=\"hljs-built_in\">assert_eq!</span>(*val, second_value),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Expected to find {} at index 1&quot;</span>, second_value),\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert_at_ith_and_delete_ith_work_over_many_iterations</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list</span> = LinkedList::&lt;<span class=\"hljs-type\">i32</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">100</span> {\n            list.<span class=\"hljs-title function_ invoke__\">insert_at_ith</span>(i, i.<span class=\"hljs-title function_ invoke__\">try_into</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>());\n        }\n\n        <span class=\"hljs-comment\">// Pop even numbers to 50</span>\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">50</span> {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;list.length {}&quot;</span>, list.length);\n            <span class=\"hljs-keyword\">if</span> i % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> {\n                list.<span class=\"hljs-title function_ invoke__\">delete_ith</span>(i);\n            }\n        }\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(list.length, <span class=\"hljs-number\">75</span>);\n\n        <span class=\"hljs-comment\">// Insert even numbers back</span>\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">50</span> {\n            <span class=\"hljs-keyword\">if</span> i % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> {\n                list.<span class=\"hljs-title function_ invoke__\">insert_at_ith</span>(i, i.<span class=\"hljs-title function_ invoke__\">try_into</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>());\n            }\n        }\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(list.length, <span class=\"hljs-number\">100</span>);\n\n        <span class=\"hljs-comment\">// Ensure numbers were adderd back and we&#x27;re able to traverse nodes</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(val) = list.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-number\">78</span>) {\n            <span class=\"hljs-built_in\">assert_eq!</span>(*val, <span class=\"hljs-number\">78</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Expected to find 78 at index 78&quot;</span>);\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">delete_tail_works</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list</span> = LinkedList::&lt;<span class=\"hljs-type\">i32</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">first_value</span> = <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">second_value</span> = <span class=\"hljs-number\">2</span>;\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(first_value);\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(second_value);\n        <span class=\"hljs-keyword\">match</span> list.<span class=\"hljs-title function_ invoke__\">delete_tail</span>() {\n            <span class=\"hljs-title function_ invoke__\">Some</span>(val) =&gt; <span class=\"hljs-built_in\">assert_eq!</span>(val, <span class=\"hljs-number\">2</span>),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Expected to remove {} at tail&quot;</span>, second_value),\n        }\n\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;Linked List is {}&quot;</span>, list);\n        <span class=\"hljs-keyword\">match</span> list.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-title function_ invoke__\">Some</span>(val) =&gt; <span class=\"hljs-built_in\">assert_eq!</span>(*val, first_value),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Expected to find {} at index 0&quot;</span>, first_value),\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">delete_head_works</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list</span> = LinkedList::&lt;<span class=\"hljs-type\">i32</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">first_value</span> = <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">second_value</span> = <span class=\"hljs-number\">2</span>;\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(first_value);\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(second_value);\n        <span class=\"hljs-keyword\">match</span> list.<span class=\"hljs-title function_ invoke__\">delete_head</span>() {\n            <span class=\"hljs-title function_ invoke__\">Some</span>(val) =&gt; <span class=\"hljs-built_in\">assert_eq!</span>(val, <span class=\"hljs-number\">1</span>),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Expected to remove {} at head&quot;</span>, first_value),\n        }\n\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;Linked List is {}&quot;</span>, list);\n        <span class=\"hljs-keyword\">match</span> list.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-title function_ invoke__\">Some</span>(val) =&gt; <span class=\"hljs-built_in\">assert_eq!</span>(*val, second_value),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Expected to find {} at index 0&quot;</span>, second_value),\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">delete_ith_can_delete_at_tail</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list</span> = LinkedList::&lt;<span class=\"hljs-type\">i32</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">first_value</span> = <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">second_value</span> = <span class=\"hljs-number\">2</span>;\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(first_value);\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(second_value);\n        <span class=\"hljs-keyword\">match</span> list.<span class=\"hljs-title function_ invoke__\">delete_ith</span>(<span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-title function_ invoke__\">Some</span>(val) =&gt; <span class=\"hljs-built_in\">assert_eq!</span>(val, <span class=\"hljs-number\">2</span>),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Expected to remove {} at tail&quot;</span>, second_value),\n        }\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(list.length, <span class=\"hljs-number\">1</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">delete_ith_can_delete_at_head</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list</span> = LinkedList::&lt;<span class=\"hljs-type\">i32</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">first_value</span> = <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">second_value</span> = <span class=\"hljs-number\">2</span>;\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(first_value);\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(second_value);\n        <span class=\"hljs-keyword\">match</span> list.<span class=\"hljs-title function_ invoke__\">delete_ith</span>(<span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-title function_ invoke__\">Some</span>(val) =&gt; <span class=\"hljs-built_in\">assert_eq!</span>(val, <span class=\"hljs-number\">1</span>),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Expected to remove {} at tail&quot;</span>, first_value),\n        }\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(list.length, <span class=\"hljs-number\">1</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">delete_ith_can_delete_in_middle</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list</span> = LinkedList::&lt;<span class=\"hljs-type\">i32</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">first_value</span> = <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">second_value</span> = <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">third_value</span> = <span class=\"hljs-number\">3</span>;\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(first_value);\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(second_value);\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(third_value);\n        <span class=\"hljs-keyword\">match</span> list.<span class=\"hljs-title function_ invoke__\">delete_ith</span>(<span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-title function_ invoke__\">Some</span>(val) =&gt; <span class=\"hljs-built_in\">assert_eq!</span>(val, <span class=\"hljs-number\">2</span>),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Expected to remove {} at tail&quot;</span>, second_value),\n        }\n\n        <span class=\"hljs-keyword\">match</span> list.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-title function_ invoke__\">Some</span>(val) =&gt; <span class=\"hljs-built_in\">assert_eq!</span>(*val, third_value),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Expected to find {} at index 1&quot;</span>, third_value),\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">create_numeric_list</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list</span> = LinkedList::&lt;<span class=\"hljs-type\">i32</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(<span class=\"hljs-number\">1</span>);\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(<span class=\"hljs-number\">2</span>);\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(<span class=\"hljs-number\">3</span>);\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;Linked List is {}&quot;</span>, list);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">3</span>, list.length);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">create_string_list</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list_str</span> = LinkedList::&lt;<span class=\"hljs-type\">String</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        list_str.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(<span class=\"hljs-string\">&quot;A&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>());\n        list_str.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(<span class=\"hljs-string\">&quot;B&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>());\n        list_str.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(<span class=\"hljs-string\">&quot;C&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>());\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;Linked List is {}&quot;</span>, list_str);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">3</span>, list_str.length);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_by_index_in_numeric_list</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list</span> = LinkedList::&lt;<span class=\"hljs-type\">i32</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(<span class=\"hljs-number\">1</span>);\n        list.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(<span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;Linked List is {}&quot;</span>, list);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">retrived_item</span> = list.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert!</span>(retrived_item.<span class=\"hljs-title function_ invoke__\">is_some</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i32</span>, *retrived_item.<span class=\"hljs-title function_ invoke__\">unwrap</span>());\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_by_index_in_string_list</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list_str</span> = LinkedList::&lt;<span class=\"hljs-type\">String</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        list_str.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(<span class=\"hljs-string\">&quot;A&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>());\n        list_str.<span class=\"hljs-title function_ invoke__\">insert_at_tail</span>(<span class=\"hljs-string\">&quot;B&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>());\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;Linked List is {}&quot;</span>, list_str);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">retrived_item</span> = list_str.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert!</span>(retrived_item.<span class=\"hljs-title function_ invoke__\">is_some</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">&quot;B&quot;</span>, *retrived_item.<span class=\"hljs-title function_ invoke__\">unwrap</span>());\n    }\n}\n"
    },
    "dart": {
      "dir": "data_structures/linked_list/linked_list.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/data_structures/linked_list/linked_list.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span>&lt;<span class=\"hljs-title\">T</span>&gt; </span>{\n  Node&lt;T&gt; next;\n  T value;\n\n  Node(<span class=\"hljs-keyword\">this</span>.value);\n  Node.before(<span class=\"hljs-keyword\">this</span>.next, <span class=\"hljs-keyword\">this</span>.value);\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LinkedListIterator</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Iterator</span>&lt;<span class=\"hljs-title\">T</span>&gt; </span>{\n  Node&lt;T&gt; _current;\n\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-built_in\">bool</span> moveNext() =&gt; _current != <span class=\"hljs-keyword\">null</span>;\n\n  <span class=\"hljs-meta\">@override</span>\n  T <span class=\"hljs-keyword\">get</span> current {\n    T currentValue = <span class=\"hljs-keyword\">this</span>._current.value;\n\n    <span class=\"hljs-keyword\">this</span>._current = <span class=\"hljs-keyword\">this</span>._current.next;\n\n    <span class=\"hljs-keyword\">return</span> currentValue;\n  }\n\n  LinkedListIterator(<span class=\"hljs-keyword\">this</span>._current);\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LinkedList</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Iterable</span>&lt;<span class=\"hljs-title\">T</span>&gt; </span>{\n  <span class=\"hljs-built_in\">int</span> _length = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">get</span> length =&gt; <span class=\"hljs-keyword\">this</span>._length;\n\n  Node&lt;T&gt; _head;\n\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-built_in\">Iterator</span>&lt;T&gt; <span class=\"hljs-keyword\">get</span> iterator =&gt; <span class=\"hljs-keyword\">new</span> LinkedListIterator&lt;T&gt;(<span class=\"hljs-keyword\">this</span>._head);\n\n  <span class=\"hljs-keyword\">void</span> remove(T item) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>._head?.value == item) {\n      <span class=\"hljs-keyword\">this</span>._head = <span class=\"hljs-keyword\">this</span>._head?.next;\n      <span class=\"hljs-keyword\">this</span>._length--;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>._head != <span class=\"hljs-keyword\">null</span>) {\n      Node&lt;T&gt; current = <span class=\"hljs-keyword\">this</span>._head;\n      <span class=\"hljs-keyword\">while</span> (current?.next != <span class=\"hljs-keyword\">null</span>) {\n        <span class=\"hljs-keyword\">if</span> (current.next.value == item) {\n          current.next = current.next.next;\n          <span class=\"hljs-keyword\">this</span>._length--;\n        }\n\n        current = current.next;\n      }\n    }\n  }\n\n  T pop() {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>._head != <span class=\"hljs-keyword\">null</span>) {\n      T value = <span class=\"hljs-keyword\">this</span>._head.value;\n      <span class=\"hljs-keyword\">this</span>._head = <span class=\"hljs-keyword\">this</span>._head.next;\n      <span class=\"hljs-keyword\">this</span>._length--;\n\n      <span class=\"hljs-keyword\">return</span> value;\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n  }\n\n  <span class=\"hljs-keyword\">void</span> push(T item) {\n    <span class=\"hljs-keyword\">this</span>._head = <span class=\"hljs-keyword\">new</span> Node.before(<span class=\"hljs-keyword\">this</span>._head, item);\n    <span class=\"hljs-keyword\">this</span>._length++;\n  }\n\n  <span class=\"hljs-keyword\">void</span> add(T item) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>._head == <span class=\"hljs-keyword\">null</span>) {\n      <span class=\"hljs-keyword\">this</span>._head = <span class=\"hljs-keyword\">new</span> Node(item);\n    } <span class=\"hljs-keyword\">else</span> {\n      Node&lt;T&gt; current = <span class=\"hljs-keyword\">this</span>._head;\n      <span class=\"hljs-keyword\">while</span> (current?.next != <span class=\"hljs-keyword\">null</span>) {\n        current = current.next;\n      }\n\n      current.next = Node(item);\n    }\n    <span class=\"hljs-keyword\">this</span>._length++;\n  }\n}\n\nmain() {\n  test(<span class=\"hljs-string\">&quot;.add is adding elements in order&quot;</span>, () {\n    LinkedList&lt;<span class=\"hljs-built_in\">double</span>&gt; linkedList = <span class=\"hljs-keyword\">new</span> LinkedList();\n    linkedList.add(<span class=\"hljs-number\">1</span>);\n    linkedList.add(<span class=\"hljs-number\">2</span>);\n    linkedList.add(<span class=\"hljs-number\">3</span>);\n\n    expect(linkedList, equals([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]));\n  });\n\n  test(<span class=\"hljs-string\">&quot;.remove is removing all elements with given value&quot;</span>, () {\n    LinkedList&lt;<span class=\"hljs-built_in\">double</span>&gt; linkedList = <span class=\"hljs-keyword\">new</span> LinkedList();\n    linkedList.add(<span class=\"hljs-number\">1</span>);\n    linkedList.add(<span class=\"hljs-number\">2</span>);\n    linkedList.add(<span class=\"hljs-number\">3</span>);\n    linkedList.add(<span class=\"hljs-number\">2</span>);\n\n    linkedList.remove(<span class=\"hljs-number\">2</span>);\n\n    expect(linkedList, equals([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>]));\n  });\n\n  test(<span class=\"hljs-string\">&quot;.remove on empty list do nothing&quot;</span>, () {\n    LinkedList&lt;<span class=\"hljs-built_in\">double</span>&gt; linkedList = <span class=\"hljs-keyword\">new</span> LinkedList();\n\n    linkedList.remove(<span class=\"hljs-number\">2</span>);\n\n    expect(linkedList, isEmpty);\n  });\n\n  test(<span class=\"hljs-string\">&quot;.push is appending first element&quot;</span>, () {\n    LinkedList&lt;<span class=\"hljs-built_in\">double</span>&gt; linkedList = <span class=\"hljs-keyword\">new</span> LinkedList();\n\n    linkedList.push(<span class=\"hljs-number\">1</span>);\n    expect(linkedList, equals([<span class=\"hljs-number\">1</span>]));\n\n    linkedList.push(<span class=\"hljs-number\">2</span>);\n    expect(linkedList, equals([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]));\n\n    linkedList.push(<span class=\"hljs-number\">3</span>);\n    expect(linkedList, equals([<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]));\n  });\n\n  test(<span class=\"hljs-string\">&quot;.pop is returning and removing first element&quot;</span>, () {\n    LinkedList&lt;<span class=\"hljs-built_in\">double</span>&gt; linkedList = <span class=\"hljs-keyword\">new</span> LinkedList();\n\n    linkedList.add(<span class=\"hljs-number\">1</span>);\n    linkedList.add(<span class=\"hljs-number\">2</span>);\n    linkedList.add(<span class=\"hljs-number\">3</span>);\n\n    expect(linkedList.pop(), equals(<span class=\"hljs-number\">1</span>));\n    expect(linkedList, equals([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]));\n\n    expect(linkedList.pop(), equals(<span class=\"hljs-number\">2</span>));\n    expect(linkedList, equals([<span class=\"hljs-number\">3</span>]));\n\n    expect(linkedList.pop(), equals(<span class=\"hljs-number\">3</span>));\n    expect(linkedList, equals([]));\n  });\n\n  test(<span class=\"hljs-string\">&quot;.pop is returning null when list is empty&quot;</span>, () {\n    LinkedList&lt;<span class=\"hljs-built_in\">double</span>&gt; linkedList = <span class=\"hljs-keyword\">new</span> LinkedList();\n\n    expect(linkedList.pop(), isNull);\n  });\n}\n"
    },
    "swift": {
      "dir": "data_structures/Linked List/LinkedList.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/data_structures/Linked List/LinkedList.swift",
      "code": "<span class=\"hljs-keyword\">import</span> Foundation\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>&lt;<span class=\"hljs-title class_\">Value</span>&gt; {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">var</span> value: <span class=\"hljs-type\">Value</span>?\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">var</span> next: <span class=\"hljs-type\">Node</span>?\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">init</span>(<span class=\"hljs-params\">value</span>: <span class=\"hljs-type\">Value</span>? <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-params\">next</span>: <span class=\"hljs-type\">Node</span>&lt;<span class=\"hljs-type\">Value</span>&gt;? <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">nil</span>) {\n        <span class=\"hljs-keyword\">self</span>.value <span class=\"hljs-operator\">=</span> value\n        <span class=\"hljs-keyword\">self</span>.next <span class=\"hljs-operator\">=</span> next\n    }\n}\n\n<span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title class_\">Node</span>: <span class=\"hljs-title class_\">CustomStringConvertible</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">var</span> description: <span class=\"hljs-type\">String</span> {\n        <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> next <span class=\"hljs-operator\">=</span> next <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">\\(String(describing: value))</span>&quot;</span>\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">\\(String(describing: value))</span> -&gt; &quot;</span> <span class=\"hljs-operator\">+</span> <span class=\"hljs-type\">String</span>(describing: next) <span class=\"hljs-operator\">+</span> <span class=\"hljs-string\">&quot; &quot;</span>\n    }\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;<span class=\"hljs-title class_\">Value</span>&gt; {\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">var</span> head: <span class=\"hljs-type\">Node</span>&lt;<span class=\"hljs-type\">Value</span>&gt;?\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">var</span> tail: <span class=\"hljs-type\">Node</span>&lt;<span class=\"hljs-type\">Value</span>&gt;?\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">init</span>() {}\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">var</span> isEmpty: <span class=\"hljs-type\">Bool</span> {\n        <span class=\"hljs-keyword\">return</span> head <span class=\"hljs-operator\">==</span> <span class=\"hljs-literal\">nil</span>\n    }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">value</span>: <span class=\"hljs-type\">Value</span>) {\n        head <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">Node</span>(value: value, next: head)\n        \n        <span class=\"hljs-keyword\">if</span> tail <span class=\"hljs-operator\">==</span> <span class=\"hljs-literal\">nil</span> {\n            tail <span class=\"hljs-operator\">=</span> head\n        }\n    }\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">append</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">value</span>: <span class=\"hljs-type\">Value</span>) {\n        <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-operator\">!</span>isEmpty <span class=\"hljs-keyword\">else</span> {\n            push(value)\n            <span class=\"hljs-keyword\">return</span>\n        }\n        \n        tail<span class=\"hljs-operator\">!</span>.next <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">Node</span>(value: value)\n        \n        tail <span class=\"hljs-operator\">=</span> tail<span class=\"hljs-operator\">!</span>.next\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">node</span>(<span class=\"hljs-params\">at</span> <span class=\"hljs-params\">index</span>: <span class=\"hljs-type\">Int</span>) -&gt; <span class=\"hljs-type\">Node</span>&lt;<span class=\"hljs-type\">Value</span>&gt;? {\n        <span class=\"hljs-keyword\">var</span> currentNode <span class=\"hljs-operator\">=</span> head\n        <span class=\"hljs-keyword\">var</span> currentIndex <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\n        \n        <span class=\"hljs-keyword\">while</span> currentNode <span class=\"hljs-operator\">!=</span> <span class=\"hljs-literal\">nil</span> <span class=\"hljs-operator\">&amp;&amp;</span> currentIndex <span class=\"hljs-operator\">&lt;</span> index {\n            currentNode <span class=\"hljs-operator\">=</span> currentNode<span class=\"hljs-operator\">!</span>.next\n            currentIndex <span class=\"hljs-operator\">+=</span> <span class=\"hljs-number\">1</span>\n        }\n        \n        <span class=\"hljs-keyword\">return</span> currentNode\n    }\n\n    <span class=\"hljs-keyword\">@discardableResult</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">value</span>: <span class=\"hljs-type\">Value</span>,\n                                <span class=\"hljs-params\">after</span> <span class=\"hljs-params\">node</span>: <span class=\"hljs-type\">Node</span>&lt;<span class=\"hljs-type\">Value</span>&gt;) -&gt; <span class=\"hljs-type\">Node</span>&lt;<span class=\"hljs-type\">Value</span>&gt; {\n        <span class=\"hljs-keyword\">guard</span> tail <span class=\"hljs-operator\">!==</span> node <span class=\"hljs-keyword\">else</span> {\n          append(value)\n          <span class=\"hljs-keyword\">return</span> tail<span class=\"hljs-operator\">!</span>\n        }\n        node.next <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">Node</span>(value: value, next: node.next)\n        \n        <span class=\"hljs-keyword\">return</span> node.next<span class=\"hljs-operator\">!</span>\n    }\n    \n    <span class=\"hljs-keyword\">@discardableResult</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">pop</span>() -&gt; <span class=\"hljs-type\">Value</span>? {\n        <span class=\"hljs-keyword\">defer</span> {\n            head <span class=\"hljs-operator\">=</span> head<span class=\"hljs-operator\">?</span>.next\n            <span class=\"hljs-keyword\">if</span> isEmpty {\n                tail <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">nil</span>\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> head<span class=\"hljs-operator\">?</span>.value\n    }\n    \n    <span class=\"hljs-keyword\">@discardableResult</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">removeLast</span>() -&gt; <span class=\"hljs-type\">Value</span>? {\n      <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> head <span class=\"hljs-operator\">=</span> head <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n    }\n      <span class=\"hljs-keyword\">guard</span> head.next <span class=\"hljs-operator\">!=</span> <span class=\"hljs-literal\">nil</span> <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">return</span> pop()\n      }\n      <span class=\"hljs-keyword\">var</span> prev <span class=\"hljs-operator\">=</span> head\n      <span class=\"hljs-keyword\">var</span> current <span class=\"hljs-operator\">=</span> head\n      <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> next <span class=\"hljs-operator\">=</span> current.next {\n        prev <span class=\"hljs-operator\">=</span> current\n        current <span class=\"hljs-operator\">=</span> next\n      }\n      prev.next <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">nil</span>\n      tail <span class=\"hljs-operator\">=</span> prev\n      <span class=\"hljs-keyword\">return</span> current.value\n    }\n    \n    <span class=\"hljs-keyword\">@discardableResult</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-params\">after</span> <span class=\"hljs-params\">node</span>: <span class=\"hljs-type\">Node</span>&lt;<span class=\"hljs-type\">Value</span>&gt;) -&gt; <span class=\"hljs-type\">Value</span>? {\n      <span class=\"hljs-keyword\">defer</span> {\n        <span class=\"hljs-keyword\">if</span> node.next <span class=\"hljs-operator\">===</span> tail {\n          tail <span class=\"hljs-operator\">=</span> node \n        }\n        node.next <span class=\"hljs-operator\">=</span> node.next<span class=\"hljs-operator\">?</span>.next\n      }\n      <span class=\"hljs-keyword\">return</span> node.next<span class=\"hljs-operator\">?</span>.value\n    }\n}\n\n<span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title class_\">LinkedList</span>: <span class=\"hljs-title class_\">CustomStringConvertible</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">var</span> description: <span class=\"hljs-type\">String</span> {\n        <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> head <span class=\"hljs-operator\">=</span> head <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Empty list&quot;</span>\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">String</span>(describing: head)\n      }\n}\n\n<span class=\"hljs-comment\">// Below you can find a testing Scenario for Playground.</span>\n\n<span class=\"hljs-comment\">/*\n import UIKit\n\n // Test Linked List\n\n let node1 = Node(value: 1)\n let node2 = Node(value: 2)\n let node3 = Node(value: 3)\n\n node1.next = node2\n node2.next = node3\n\n print(node1)\n\n var list = LinkedList&lt;Int&gt;()\n list.push(3)\n list.push(2)\n list.push(1)\n\n print(list)\n\n var listAppend = LinkedList&lt;Int&gt;()\n\n listAppend.append(1)\n listAppend.append(2)\n listAppend.append(3)\n\n print(listAppend)\n */</span>\n"
    },
    "julia": {
      "dir": "src/data_structures/linked_list.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/data_structures/linked_list.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n   Linked List\n\n# Brief:\n    A linked list is a data structure where each element is connected to the next one.\n\n# Complexity of some operations\n    - insert            - O(N)\n    - insert to front   - O(1)\n    - delete            - O(N)\n    - delete first      - O(1)\n    - get element       - O(N)\n\n# Functions\n    - create_node(val, next=missing) - Create node with value &#x27;val&#x27; and the pointer to the next node ( missing by default ) \n    - create_list(n::Int=0, val=missing) - Create root node of the list with n elements with value set to &#x27;val&#x27;\n    - insert(list::Node, new_node::Node, index::Int=1) - Add a new node to the list at the specified index\n    - insert(list::Node, val, index::Int=1) - Create a new node with value &#x27;val&#x27; in the list at the specified index\n    - push_back(list::Node, node::Node) - Add a new node to the end of the list\n    - push_back(list::Node, val) - Add a new node with value &#x27;val&#x27; to the end of the list\n    - return_as_array(list::Node) - Return the array representation of the list\n    - clear(list::Node) - Remove all elements from the list\n    - remove(list::Node, index::Int) - Remove an element at the specified index\n    - remove_all(list::Node, val) Remove all elements with the value &#x27;val&#x27;\n    - remove_first(list::Node, val) - Remove the first element in the list with value &#x27;val&#x27;\n    - get_node(list::Node, index::Int) - Get a node at the specified index\n    - get(list::Node, index::Int) - Get a value from the node at the specified index\n    - indexOf(list::Node, val) - Return the index of the first element with a value &#x27;val&#x27;\n    - is_empty(list) - Return true if list is empty, false if it has elements\n\n# Contributed by: [Nikola Mircic](https://github.com/Nikola-Mircic)\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">module</span> LinkedList\n\n<span class=\"hljs-keyword\">mutable struct</span> Node\n    val::<span class=\"hljs-built_in\">Any</span> <span class=\"hljs-comment\"># Value of the node</span>\n    next::<span class=\"hljs-built_in\">Any</span> <span class=\"hljs-comment\"># Pointer to the next node</span>\n    Node(val, next = <span class=\"hljs-literal\">missing</span>) = new(val, next)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Create node with value &#x27;val&#x27; and the pointer to the next node ( missing by default ) </span>\n<span class=\"hljs-keyword\">function</span> create_node(val, next = <span class=\"hljs-literal\">missing</span>)\n    <span class=\"hljs-keyword\">return</span> Node(val, next)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Create root node of the list</span>\n<span class=\"hljs-keyword\">function</span> create_list(n::<span class=\"hljs-built_in\">Int</span> = <span class=\"hljs-number\">0</span>, val = <span class=\"hljs-literal\">missing</span>)\n    root_node = create_node(<span class=\"hljs-string\">&quot;root&quot;</span>) <span class=\"hljs-comment\"># Root node with value &quot;root&quot;</span>\n\n    current_node = root_node\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:n\n        new_node = create_node(val, <span class=\"hljs-literal\">missing</span>)\n        current_node.next = new_node\n\n        current_node = current_node.next\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-keyword\">return</span> root_node\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Add a new node to the list at the specified index</span>\n<span class=\"hljs-keyword\">function</span> insert(list::Node, new_node::Node, index::<span class=\"hljs-built_in\">Int</span> = <span class=\"hljs-number\">1</span>)\n    current_node = get_node(list, index - <span class=\"hljs-number\">1</span>)\n\n    next = current_node.next\n    current_node.next = new_node\n    <span class=\"hljs-keyword\">return</span> new_node.next = next\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Create a new node with value &#x27;val&#x27; in the list at the specified index</span>\n<span class=\"hljs-keyword\">function</span> insert(list::Node, val, index::<span class=\"hljs-built_in\">Int</span> = <span class=\"hljs-number\">1</span>)\n    new_node = create_node(val)\n    <span class=\"hljs-keyword\">return</span> insert(list, new_node, index)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Add a new node to the end of the list</span>\n<span class=\"hljs-keyword\">function</span> push_back(list::Node, node::Node)\n    current_node = list\n    <span class=\"hljs-keyword\">while</span> !ismissing(current_node.next)\n        current_node = current_node.next\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-keyword\">return</span> current_node.next = node\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Add a new node with value &#x27;val&#x27; to the end of the list</span>\n<span class=\"hljs-keyword\">function</span> push_back(list::Node, val)\n    new_node = create_node(val)\n    <span class=\"hljs-keyword\">return</span> push_back(list, new_node)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">function</span> return_as_array(list::Node)\n    arr = <span class=\"hljs-built_in\">Array</span>{<span class=\"hljs-built_in\">Any</span>}(<span class=\"hljs-literal\">missing</span>, <span class=\"hljs-number\">0</span>)\n    node = list.next\n\n    <span class=\"hljs-keyword\">while</span> !ismissing(node)\n        push!(arr, node.val)\n        node = node.next\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-keyword\">return</span> arr\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Remove all elements from the list</span>\n<span class=\"hljs-keyword\">function</span> clear(list::Node)\n    <span class=\"hljs-keyword\">return</span> list.next = <span class=\"hljs-literal\">missing</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Remove an element at the specified index</span>\n<span class=\"hljs-keyword\">function</span> remove(list::Node, index::<span class=\"hljs-built_in\">Int</span>)\n    node_before = get_node(list, index - <span class=\"hljs-number\">1</span>)\n    to_remove = node_before.next\n    <span class=\"hljs-keyword\">return</span> node_before.next = to_remove.next\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Remove all elements with the value &#x27;val&#x27;</span>\n<span class=\"hljs-keyword\">function</span> remove_all(list::Node, val)\n    current_node = list\n    <span class=\"hljs-keyword\">while</span> !ismissing(current_node.next)\n        next_node = current_node.next\n        <span class=\"hljs-keyword\">if</span> next_node.val == val\n            current_node.next = next_node.next\n        <span class=\"hljs-keyword\">else</span>\n            current_node = next_node\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Remove the first element in the list with value &#x27;val&#x27;</span>\n<span class=\"hljs-keyword\">function</span> remove_first(list::Node, val)\n    index = indexOf(list, val)\n    <span class=\"hljs-keyword\">return</span> remove(list, index)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Get a node at the specified index</span>\n<span class=\"hljs-keyword\">function</span> get_node(list::Node, index::<span class=\"hljs-built_in\">Int</span>)\n    current_node = list\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:index\n        <span class=\"hljs-keyword\">if</span> !ismissing(current_node)\n            current_node = current_node.next\n        <span class=\"hljs-keyword\">else</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">missing</span>\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> current_node\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Get a value from the node at the specified index</span>\n<span class=\"hljs-keyword\">function</span> get(list::Node, index::<span class=\"hljs-built_in\">Int</span>)\n    node = get_node(list, index)\n    <span class=\"hljs-keyword\">if</span> !ismissing(node)\n        <span class=\"hljs-keyword\">return</span> node.val\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">missing</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Return the index of the first element with a value &#x27;val&#x27;</span>\n<span class=\"hljs-keyword\">function</span> indexOf(list::Node, val)\n    current_node = list.next\n    i = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> !ismissing(current_node)\n        <span class=\"hljs-keyword\">if</span> current_node.val == val\n            <span class=\"hljs-keyword\">return</span> i\n        <span class=\"hljs-keyword\">else</span>\n            current_node = current_node.next\n            i += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Return true if list is empty, false if it has elements</span>\n<span class=\"hljs-keyword\">function</span> is_empty(list)\n    <span class=\"hljs-keyword\">return</span> ismissing(list.next)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Oskar Niburski",
      "email": "oskarniburski@gmail.com",
      "commits": 1
    },
    {
      "name": "Thomas O'Brien",
      "email": "tbobrien612@gmail.com",
      "commits": 1
    },
    {
      "name": "Ryan Lowe",
      "email": "rlowe13@me.com",
      "commits": 1
    },
    {
      "name": "Boyd Johnson",
      "email": "boydjohnson@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Linda_pp",
      "email": "rhysd@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Matthias Gilch",
      "email": "matthias.gilch.mg@gmail.com",
      "commits": 1
    },
    {
      "name": "Vivek Yadav",
      "email": "mail@vivek.nl",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Anup Kumar Panwar",
      "email": "mylnext@gmail.com",
      "commits": 1
    },
    {
      "name": "Nikola Mircic",
      "email": "nikola123mircic@gmail.com",
      "commits": 1
    },
    {
      "name": "Ihjass Thasbekha",
      "email": "44056715+Ihjass@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Akash G Krishnan",
      "email": "krishnanag1996@gmail.com",
      "commits": 1
    },
    {
      "name": "Brayo",
      "email": "vukubrian@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ashwek Swamy",
      "email": "39827514+ashwek@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Tanisha Belkar",
      "email": "68585820+tanishabelkar@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "rynrin",
      "email": "92236935+rynrin@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Marian Gusatu",
      "email": "marian.mgusatu@gmail.com",
      "commits": 1
    },
    {
      "name": "Shivam Mishra",
      "email": "41479737+codder-shivam@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Khavin Shankar",
      "email": "khavinshankar@gmail.com",
      "commits": 1
    },
    {
      "name": "Manas Khosla",
      "email": "43397881+ManasKhosla@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "EAlexa",
      "email": "rubi_81@outlook.de",
      "commits": 1
    },
    {
      "name": "shivg7706",
      "email": "shivamgupta7706@gmail.com",
      "commits": 1
    },
    {
      "name": "Carlos Henrique",
      "email": "juliaomartinsch@gmail.com",
      "commits": 2
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 2
    },
    {
      "name": "S. Graf",
      "email": "39885965+Graflinger@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Bolaji Boluwatife",
      "email": "bolubee95@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "Parowicz",
      "email": "arturparowicz@gmail.com",
      "commits": 4
    },
    {
      "name": "Marian Gusatu",
      "email": "45270790+mariangusatu@users.noreply.github.com",
      "commits": 6
    }
  ],
  "explanationUrl": {}
}