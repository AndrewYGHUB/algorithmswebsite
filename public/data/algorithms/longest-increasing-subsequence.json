{
  "slug": "longest-increasing-subsequence",
  "name": "Longest Increasing Subsequence",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {
    "en": "<h2>Problem Statement</h2>\n<p>Given an Array of Integers <code>A</code>, find the length of the longest increasing subsequence (<strong>LIS</strong>) such that all elements of the subsequence are sorted in increasing order. An increasing subsequence contains elements <code>A[i]</code> and <code>A[j]</code> only if <code>i &#x3C; j</code> and <code>A[i] &#x3C;  A[j]</code>.</p>\n<h2>Approach</h2>\n<p>The basic idea behind the solution is to keep track of all active subsequences at a given point in time. Based on the current number being considered, update these active lists. To understand this process, let’s work out an example.</p>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">A</span> = {<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">7</span>}\n<span class=\"hljs-attribute\">Monotonically</span> increasing subsequences are {<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">8</span>} and {<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">7</span>}\n</code></pre>\n<p>What if we add another element, 11 in this?</p>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">A</span> = {<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">11</span>}\n<span class=\"hljs-attribute\">Monotonically</span> increasing subsequences are {<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">11</span>} and {<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">11</span>}\n</code></pre>\n<p>What if a new element 9 is added to the array? What happens now? If we add t0 subsequences, the length of the longest subsequence remains 3.</p>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">A</span> = {<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">9</span>}\n<span class=\"hljs-attribute\">Monotonically</span> increasing subsequences are {<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>} and {<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">9</span>}\n</code></pre>\n<p>The decision to take for each element being considered is whether we create new active subsequences with length 3 with element 9 in them or continue with 11. If the next element is 10 we know that adding 9 to subsequence leads us to longer subsequences rather than keeping 11.</p>\n<p>How do we decide when to replace and when to continue with the old element in the list of subsequences?</p>\n<p>We add a new number <code>A[i]</code> to the sequence if <code>A[i]</code> > <code>E</code>, <code>E</code> is the last element in subsequence\nand replace an number with <code>A[i]</code>, if there exists a number <code>A[j]</code> such that if <code>E</code> > <code>A[i]</code> &#x3C; <code>A[j]</code>, it means, the new number falls somewhere between <code>A[j]</code> and <code>E</code>.</p>\n<p>What if <code>A[i]</code> is smaller than all elements in the present list of subsequences? In this case, we have to create a new list and add <code>A[i]</code> into it. The invariant is to maintain lists of increasing sequences and update them based on the next number.\nEach time a new element is to be added, scan all the lists of subsequences in decreasing order of their length. The following algorithm shows how to add/replace the new elements in the existing lists or to create a new list with them.</p>\n<pre><code class=\"hljs language-sql_more\">1. If A[i] is the smallest among all <span class=\"hljs-keyword\">end</span> candidates <span class=\"hljs-keyword\">of</span> active lists, <span class=\"hljs-keyword\">start</span> a <span class=\"hljs-keyword\">new</span> active <span class=\"hljs-keyword\">list</span> <span class=\"hljs-keyword\">with</span> A[i] <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">length</span> <span class=\"hljs-number\">1.</span>\n<span class=\"hljs-number\">2.</span> <span class=\"hljs-keyword\">If</span> A[i] <span class=\"hljs-keyword\">is</span> largest among <span class=\"hljs-keyword\">all</span> <span class=\"hljs-keyword\">end</span> candidates <span class=\"hljs-keyword\">of</span> active lists, <span class=\"hljs-keyword\">clone</span> the largest active <span class=\"hljs-keyword\">list</span>, <span class=\"hljs-keyword\">and</span> append A[i] <span class=\"hljs-keyword\">to</span> it.\n<span class=\"hljs-number\">3.</span> <span class=\"hljs-keyword\">If</span> A[i] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">between</span>, find the <span class=\"hljs-keyword\">list</span> <span class=\"hljs-keyword\">with</span> the largest <span class=\"hljs-keyword\">end</span> <span class=\"hljs-built_in\">number</span> that <span class=\"hljs-keyword\">is</span> smaller <span class=\"hljs-keyword\">than</span> A[i]. <span class=\"hljs-keyword\">Clone</span> <span class=\"hljs-keyword\">and</span> append A[i] <span class=\"hljs-keyword\">to</span> this list.\n<span class=\"hljs-number\">4.</span> Discard <span class=\"hljs-keyword\">all</span> other lists <span class=\"hljs-keyword\">of</span> the same <span class=\"hljs-keyword\">length</span> <span class=\"hljs-keyword\">as</span> that <span class=\"hljs-keyword\">of</span> this modified list.\n</code></pre>\n<h2>Time Complexity</h2>\n<p><code>O(N * LogN)</code> In any case<br>\n<code>O(logn)</code> time to find the ceiling of it and put it at the correct position</p>\n<h2>Space Complexity</h2>\n<p><code>O(N)</code> for each element in the array</p>\n<h2>Example</h2>\n<p>Let’s take an example and see how it works with an array <code>A = [ 0, 8, 4, 12, 2, 10, 6, 14]</code>.\nFor <code>A[0]</code>, there are no active lists of subsequences. We will create a new one.</p>\n<pre><code class=\"hljs language-json\">[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">14</span>]\n[<span class=\"hljs-number\">0</span>]\n</code></pre>\n<p>Next, we go to <code>A[1]</code> which is 8. <code>A[i]</code> is greater than the ends of all the current lists, we will take the longest one and append <code>A[1]</code> to it.</p>\n<pre><code class=\"hljs language-json\">[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">14</span>]\n[[<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>]]\n</code></pre>\n<p>For <code>A[2]</code> with value 4, <code>A[i]</code> is less than the end of one of the lists and greater than the end of the other. We will find the list which has an end less than <code>A[i]</code>. In this case, it is the first list containing [0]. Clone it and append <code>A[2]</code> to it and discard all other lists of the same length.</p>\n<pre><code class=\"hljs language-json\">[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">14</span>]\n[[<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">4</span>]]\n[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>] is discarded as it is of the same length <span class=\"hljs-number\">2.</span>\n</code></pre>\n<p>For <code>A[3]</code> with value 12, it is the same case as <code>A[1]</code> since it is greater than all the ends of the current lists, we will clone the longest available list and append it to that.</p>\n<pre><code class=\"hljs language-json\">[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">14</span>]\n[[<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">4</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">12</span>]]\n</code></pre>\n<p><code>A[4]</code> with value 2, it has the same case as <code>A[2]</code>, clone the one with the largest end which is less than <code>A[4]</code>, append <code>A[4]</code> to it, and discard all same length lists.</p>\n<pre><code class=\"hljs language-json\">[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">14</span>]\n[[<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">12</span>]]\n</code></pre>\n<p><code>A[5]</code> with value 10. Same as <code>A[4]</code>. Clone, extend and discard all the same length subsequences.\nLists = [ [0], [0, 2], [0,2,10] ] and [0, 4, 12] is discarded.</p>\n<p><code>A[6]</code> is 6. Same as <code>A[5]</code> We will clone the list which has an end smaller than <code>A[6]</code>, extend it, and discard all other lists which have the same length.\nLists = [ [0], [0, 2], [0,2,6] ] and [0, 2, 10] is discarded.</p>\n<p>Following the same approach, we will go through all the numbers in the given array. The longest increasing subsequence in the given array is [ 0,2,6,14] with a length of 4.</p>\n<pre><code class=\"hljs language-json\">[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">14</span>]\n[[<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">6</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">14</span>]]\n</code></pre>\n<p>It seems like a lot of things need to be done just for maintaining the lists and there is significant space complexity required to store all of these lists. We can optimize on this, observe that we use only ends of the list and their sizes. We do not care what was before them on the list. So, can we store the ends of all the lists of an auxiliary array and do operations on them? The size of this array in the worst case will be n.</p>\n<p>To append to the list, add another element in the auxiliary array. To replace just overwrite the smallest number which is greater than the current number. To find the smallest number which is greater than the current number, we can use binary search algorithm.</p>\n<p>To find the length of the longest subsequence, keep track of the length of the auxiliary array because this will be the length of LIS.</p>\n<h2>Code Implementation Links</h2>\n<p><a href=\"https://www.geeksforgeeks.org/longest-monotonically-increasing-subsequence-size-n-log-n/\">Code Implementation</a></p>\n<h2>Video Explanation</h2>\n<p><a href=\"https://www.youtube.com/watch?v=S9oUiVYEq7E&#x26;ab_channel=TusharRoy-CodingMadeSimple\">Video explanation by Tushar Roy</a></p>"
  },
  "implementations": {
    "python": {
      "dir": "dynamic_programming/longest_increasing_subsequence.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/dynamic_programming/longest_increasing_subsequence.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nAuthor  : Mehdi ALAOUI\n\nThis is a pure Python implementation of Dynamic Programming solution to the longest\nincreasing subsequence of a given sequence.\n\nThe problem is  :\nGiven an array, to find the longest and increasing sub-array in that given array and\nreturn it.\nExample: [10, 22, 9, 33, 21, 50, 41, 60, 80] as input will return\n         [10, 22, 33, 41, 60, 80] as output\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">longest_subsequence</span>(<span class=\"hljs-params\">array: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:  <span class=\"hljs-comment\"># This function is recursive</span>\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Some examples\n    &gt;&gt;&gt; longest_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80])\n    [10, 22, 33, 41, 60, 80]\n    &gt;&gt;&gt; longest_subsequence([4, 8, 7, 5, 1, 12, 2, 3, 9])\n    [1, 2, 3, 9]\n    &gt;&gt;&gt; longest_subsequence([9, 8, 7, 6, 5, 7])\n    [8]\n    &gt;&gt;&gt; longest_subsequence([1, 1, 1])\n    [1, 1, 1]\n    &gt;&gt;&gt; longest_subsequence([])\n    []\n    &quot;&quot;&quot;</span>\n    array_length = <span class=\"hljs-built_in\">len</span>(array)\n    <span class=\"hljs-comment\"># If the array contains only one element, we return it (it&#x27;s the stop condition of</span>\n    <span class=\"hljs-comment\"># recursion)</span>\n    <span class=\"hljs-keyword\">if</span> array_length &lt;= <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span> array\n        <span class=\"hljs-comment\"># Else</span>\n    pivot = array[<span class=\"hljs-number\">0</span>]\n    isFound = <span class=\"hljs-literal\">False</span>\n    i = <span class=\"hljs-number\">1</span>\n    longest_subseq: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>] = []\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> isFound <span class=\"hljs-keyword\">and</span> i &lt; array_length:\n        <span class=\"hljs-keyword\">if</span> array[i] &lt; pivot:\n            isFound = <span class=\"hljs-literal\">True</span>\n            temp_array = [element <span class=\"hljs-keyword\">for</span> element <span class=\"hljs-keyword\">in</span> array[i:] <span class=\"hljs-keyword\">if</span> element &gt;= array[i]]\n            temp_array = longest_subsequence(temp_array)\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(temp_array) &gt; <span class=\"hljs-built_in\">len</span>(longest_subseq):\n                longest_subseq = temp_array\n        <span class=\"hljs-keyword\">else</span>:\n            i += <span class=\"hljs-number\">1</span>\n\n    temp_array = [element <span class=\"hljs-keyword\">for</span> element <span class=\"hljs-keyword\">in</span> array[<span class=\"hljs-number\">1</span>:] <span class=\"hljs-keyword\">if</span> element &gt;= pivot]\n    temp_array = [pivot] + longest_subsequence(temp_array)\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(temp_array) &gt; <span class=\"hljs-built_in\">len</span>(longest_subseq):\n        <span class=\"hljs-keyword\">return</span> temp_array\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> longest_subseq\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "javascript": {
      "dir": "Dynamic-Programming/LongestIncreasingSubsequence.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Dynamic-Programming/LongestIncreasingSubsequence.js",
      "code": "<span class=\"hljs-comment\">/**\n * A Dynamic Programming based solution for calculating Longest Increasing Subsequence\n * https://en.wikipedia.org/wiki/Longest_increasing_subsequence\n */</span>\n\n<span class=\"hljs-comment\">// Return the length of the Longest Increasing Subsequence, given array x</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">longestIncreasingSubsequence</span> (x) {\n  <span class=\"hljs-keyword\">const</span> length = x.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">const</span> dp = <span class=\"hljs-title class_\">Array</span>(length).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-number\">1</span>)\n\n  <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; length; i++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; i; j++) {\n      <span class=\"hljs-keyword\">if</span> (x[i] &gt; x[j]) {\n        dp[i] = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(dp[i], <span class=\"hljs-number\">1</span> + dp[j])\n        <span class=\"hljs-keyword\">if</span> (dp[i] &gt; res) {\n          res = dp[i]\n        }\n      }\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> res\n}\n\n<span class=\"hljs-keyword\">export</span> { longestIncreasingSubsequence }\n"
    },
    "c-plus-plus": {
      "dir": "dynamic_programming/longest_increasing_subsequence.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming/longest_increasing_subsequence.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Calculate the length of the [longest increasing\n * subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) in\n * an array\n *\n * @details\n * In computer science, the longest increasing subsequence problem is to find a\n * subsequence of a given sequence in which the subsequence&#x27;s elements are in\n * sorted order, lowest to highest, and in which the subsequence is as long as\n * possible. This subsequence is not necessarily contiguous, or unique. Longest\n * increasing subsequences are studied in the context of various disciplines\n * related to mathematics, including algorithmics, random matrix theory,\n * representation theory, and physics. The longest increasing subsequence\n * problem is solvable in time O(n log n), where n denotes the length of the\n * input sequence.\n *\n * @author [Krishna Vedala](https://github.com/kvedala)\n * @author [David Leal](https://github.com/Panquesito7)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;climits&gt;</span>   <span class=\"hljs-comment\">/// for std::max</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace dynamic_programming\n * @brief Dynamic Programming algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> dynamic_programming {\n<span class=\"hljs-comment\">/**\n * @brief Calculate the longest increasing subsequence for the specified numbers\n * @param a the array used to calculate the longest increasing subsequence\n * @param n the size used for the arrays\n * @returns the length of the longest increasing\n * subsequence in the `a` array of size `n`\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">LIS</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; &amp;a, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">uint32_t</span> &amp;n)</span> </span>{\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">lis</span><span class=\"hljs-params\">(n)</span></span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n        lis[i] = <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; i; ++j) {\n            <span class=\"hljs-keyword\">if</span> (a[i] &gt; a[j] &amp;&amp; lis[i] &lt; lis[j] + <span class=\"hljs-number\">1</span>) {\n                lis[i] = lis[j] + <span class=\"hljs-number\">1</span>;\n            }\n        }\n    }\n    <span class=\"hljs-type\">int</span> res = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n        res = std::<span class=\"hljs-built_in\">max</span>(res, lis[i]);\n    }\n    <span class=\"hljs-keyword\">return</span> res;\n}\n}  <span class=\"hljs-comment\">// namespace dynamic_programming</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; a = {<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>};\n    <span class=\"hljs-type\">uint32_t</span> n = a.<span class=\"hljs-built_in\">size</span>();\n\n    <span class=\"hljs-type\">uint32_t</span> result = dynamic_programming::<span class=\"hljs-built_in\">LIS</span>(a, n);\n    <span class=\"hljs-built_in\">assert</span>(result ==\n           <span class=\"hljs-number\">5</span>);  <span class=\"hljs-comment\">///&lt; The longest increasing subsequence is `{2,3,4,5,8}`</span>\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Self-test implementations passed!&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @param argc commandline argument count (ignored)\n * @param argv commandline array of arguments (ignored)\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> <span class=\"hljs-type\">const</span> *argv[])</span> </span>{\n    <span class=\"hljs-type\">uint32_t</span> n = <span class=\"hljs-number\">0</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter size of array: &quot;</span>;\n    std::cin &gt;&gt; n;\n\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">a</span><span class=\"hljs-params\">(n)</span></span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter array elements: &quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n        std::cin &gt;&gt; a[i];\n    }\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nThe result is: &quot;</span> &lt;&lt; dynamic_programming::<span class=\"hljs-built_in\">LIS</span>(a, n)\n              &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/dynamicprogramming/LongestIncreasingSubsequence.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/dynamicprogramming/LongestIncreasingSubsequence.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\n\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> Afrizal Fikri (https://github.com/icalF)\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LongestIncreasingSubsequence</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> sc.nextInt();\n\n        <span class=\"hljs-type\">int</span> arr[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n            arr[i] = sc.nextInt();\n        }\n\n        System.out.println(LIS(arr));\n        System.out.println(findLISLen(arr));\n        sc.close();\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">upperBound</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] ar, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r, <span class=\"hljs-type\">int</span> key)</span> {\n        <span class=\"hljs-keyword\">while</span> (l &lt; r - <span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">m</span> <span class=\"hljs-operator\">=</span> (l + r) &gt;&gt;&gt; <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">if</span> (ar[m] &gt;= key) {\n                r = m;\n            } <span class=\"hljs-keyword\">else</span> {\n                l = m;\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> r;\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">LIS</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] array)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">N</span> <span class=\"hljs-operator\">=</span> array.length;\n        <span class=\"hljs-keyword\">if</span> (N == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        }\n\n        <span class=\"hljs-type\">int</span>[] tail = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[N];\n\n        <span class=\"hljs-comment\">// always points empty slot in tail</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n\n        tail[<span class=\"hljs-number\">0</span>] = array[<span class=\"hljs-number\">0</span>];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; N; i++) {\n\n            <span class=\"hljs-comment\">// new smallest value</span>\n            <span class=\"hljs-keyword\">if</span> (array[i] &lt; tail[<span class=\"hljs-number\">0</span>]) {\n                tail[<span class=\"hljs-number\">0</span>] = array[i];\n            } <span class=\"hljs-comment\">// array[i] extends largest subsequence</span>\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (array[i] &gt; tail[length - <span class=\"hljs-number\">1</span>]) {\n                tail[length++] = array[i];\n            } <span class=\"hljs-comment\">// array[i] will become end candidate of an existing subsequence or</span>\n            <span class=\"hljs-comment\">// Throw away larger elements in all LIS, to make room for upcoming grater elements than</span>\n            <span class=\"hljs-comment\">// array[i]</span>\n            <span class=\"hljs-comment\">// (and also, array[i] would have already appeared in one of LIS, identify the location and</span>\n            <span class=\"hljs-comment\">// replace it)</span>\n            <span class=\"hljs-keyword\">else</span> {\n                tail[upperBound(tail, -<span class=\"hljs-number\">1</span>, length - <span class=\"hljs-number\">1</span>, array[i])] = array[i];\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> length;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@author</span> Alon Firestein (https://github.com/alonfirestein)\n     */</span>\n    <span class=\"hljs-comment\">// A function for finding the length of the LIS algorithm in O(nlogn) complexity.</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findLISLen</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[])</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> a.length;\n        <span class=\"hljs-type\">int</span> arr[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[size];\n        arr[<span class=\"hljs-number\">0</span>] = a[<span class=\"hljs-number\">0</span>];\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">lis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; size; i++) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> binarySearchBetween(arr, lis, a[i]);\n            arr[index] = a[i];\n            <span class=\"hljs-keyword\">if</span> (index &gt; lis) {\n                lis++;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> lis;\n    }\n    <span class=\"hljs-comment\">// O(logn)</span>\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">binarySearchBetween</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] t, <span class=\"hljs-type\">int</span> end, <span class=\"hljs-type\">int</span> key)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">right</span> <span class=\"hljs-operator\">=</span> end;\n        <span class=\"hljs-keyword\">if</span> (key &lt; t[<span class=\"hljs-number\">0</span>]) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (key &gt; t[end]) {\n            <span class=\"hljs-keyword\">return</span> end + <span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-keyword\">while</span> (left &lt; right - <span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">middle</span> <span class=\"hljs-operator\">=</span> (left + right) / <span class=\"hljs-number\">2</span>;\n            <span class=\"hljs-keyword\">if</span> (t[middle] &lt; key) {\n                left = middle;\n            } <span class=\"hljs-keyword\">else</span> {\n                right = middle;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> right;\n    }\n}\n"
    },
    "go": {
      "dir": "dynamic/longestincreasingsubsequence.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/dynamic/longestincreasingsubsequence.go",
      "code": "<span class=\"hljs-keyword\">package</span> dynamic\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;github.com/TheAlgorithms/Go/math/max&quot;</span>\n)\n\n<span class=\"hljs-comment\">// LongestIncreasingSubsequence returns the longest increasing subsequence</span>\n<span class=\"hljs-comment\">// where all elements of the subsequence are sorted in increasing order</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">LongestIncreasingSubsequence</span><span class=\"hljs-params\">(elements []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> {\n\tn := <span class=\"hljs-built_in\">len</span>(elements)\n\tlis := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> lis {\n\t\tlis[i] = <span class=\"hljs-number\">1</span>\n\t}\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> lis {\n\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; i; j++ {\n\t\t\t<span class=\"hljs-keyword\">if</span> elements[i] &gt; elements[j] &amp;&amp; lis[i] &lt; lis[j]+<span class=\"hljs-number\">1</span> {\n\t\t\t\tlis[i] = lis[j] + <span class=\"hljs-number\">1</span>\n\t\t\t}\n\t\t}\n\t}\n\tres := <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">for</span> _, value := <span class=\"hljs-keyword\">range</span> lis {\n\t\tres = max.Int(res, value)\n\t}\n\t<span class=\"hljs-keyword\">return</span> res\n}\n"
    },
    "rust": {
      "dir": "src/dynamic_programming/longest_increasing_subsequence.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/dynamic_programming/longest_increasing_subsequence.rs",
      "code": "<span class=\"hljs-comment\">/// Finds the longest increasing subsequence and returns it.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// If multiple subsequences with the longest possible subsequence length can be found, the</span>\n<span class=\"hljs-comment\">/// subsequence which appeared first will be returned (see `test_example_1`).</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Inspired by [this LeetCode problem](https://leetcode.com/problems/longest-increasing-subsequence/).</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">longest_increasing_subsequence</span>&lt;T: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Clone</span>&gt;(input_array: &amp;[T]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">n</span> = input_array.<span class=\"hljs-title function_ invoke__\">len</span>();\n    <span class=\"hljs-keyword\">if</span> n &lt;= <span class=\"hljs-number\">1</span> {\n        <span class=\"hljs-keyword\">return</span> input_array.<span class=\"hljs-title function_ invoke__\">to_vec</span>();\n    }\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">increasing_sequence</span>: <span class=\"hljs-type\">Vec</span>&lt;(T, <span class=\"hljs-type\">usize</span>)&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">previous</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0_usize</span>; n];\n\n    increasing_sequence.<span class=\"hljs-title function_ invoke__\">push</span>((input_array[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_ invoke__\">clone</span>(), <span class=\"hljs-number\">1</span>));\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..n {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">value</span> = input_array[i].<span class=\"hljs-title function_ invoke__\">clone</span>();\n        <span class=\"hljs-keyword\">if</span> value &gt; increasing_sequence.<span class=\"hljs-title function_ invoke__\">last</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>().<span class=\"hljs-number\">0</span> {\n            previous[i] = increasing_sequence.<span class=\"hljs-title function_ invoke__\">last</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>().<span class=\"hljs-number\">1</span> - <span class=\"hljs-number\">1</span>;\n            increasing_sequence.<span class=\"hljs-title function_ invoke__\">push</span>((value, i + <span class=\"hljs-number\">1</span>));\n            <span class=\"hljs-keyword\">continue</span>;\n        }\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">change_position</span> = increasing_sequence\n            .<span class=\"hljs-title function_ invoke__\">binary_search</span>(&amp;(value.<span class=\"hljs-title function_ invoke__\">clone</span>(), <span class=\"hljs-number\">0</span>))\n            .<span class=\"hljs-title function_ invoke__\">unwrap_or_else</span>(|x| x);\n        increasing_sequence[change_position] = (value, i + <span class=\"hljs-number\">1</span>);\n        previous[i] = <span class=\"hljs-keyword\">match</span> change_position {\n            <span class=\"hljs-number\">0</span> =&gt; i,\n            other =&gt; increasing_sequence[other - <span class=\"hljs-number\">1</span>].<span class=\"hljs-number\">1</span> - <span class=\"hljs-number\">1</span>,\n        };\n    }\n\n    <span class=\"hljs-comment\">// Construct subsequence</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">out</span>: <span class=\"hljs-type\">Vec</span>&lt;T&gt; = Vec::<span class=\"hljs-title function_ invoke__\">with_capacity</span>(increasing_sequence.<span class=\"hljs-title function_ invoke__\">len</span>());\n\n    out.<span class=\"hljs-title function_ invoke__\">push</span>(increasing_sequence.<span class=\"hljs-title function_ invoke__\">last</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>().<span class=\"hljs-number\">0</span>.<span class=\"hljs-title function_ invoke__\">clone</span>());\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">current_index</span> = increasing_sequence.<span class=\"hljs-title function_ invoke__\">last</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>().<span class=\"hljs-number\">1</span> - <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">while</span> previous[current_index] != current_index {\n        current_index = previous[current_index];\n        out.<span class=\"hljs-title function_ invoke__\">push</span>(input_array[current_index].<span class=\"hljs-title function_ invoke__\">clone</span>());\n    }\n\n    out.<span class=\"hljs-title function_ invoke__\">into_iter</span>().<span class=\"hljs-title function_ invoke__\">rev</span>().<span class=\"hljs-title function_ invoke__\">collect</span>()\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::longest_increasing_subsequence;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-comment\">/// Need to specify generic type T in order to function</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_empty_vec</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(longest_increasing_subsequence::&lt;<span class=\"hljs-type\">i32</span>&gt;(&amp;<span class=\"hljs-built_in\">vec!</span>[]), <span class=\"hljs-built_in\">vec!</span>[]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_example_1</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">longest_increasing_subsequence</span>(&amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">101</span>, <span class=\"hljs-number\">18</span>]),\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">18</span>]\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_example_2</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">longest_increasing_subsequence</span>(&amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]),\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_example_3</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">longest_increasing_subsequence</span>(&amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>]),\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">7</span>]\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_tle</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">input_array</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0i64</span>; <span class=\"hljs-number\">1e5</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">expected_result</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i64</span>&gt; = Vec::<span class=\"hljs-title function_ invoke__\">with_capacity</span>(<span class=\"hljs-number\">5e4</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>);\n        <span class=\"hljs-title function_ invoke__\">for</span> (idx, num) <span class=\"hljs-keyword\">in</span> input_array.<span class=\"hljs-title function_ invoke__\">iter_mut</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\n            <span class=\"hljs-keyword\">match</span> idx % <span class=\"hljs-number\">2</span> {\n                <span class=\"hljs-number\">0</span> =&gt; {\n                    *num = idx <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i64</span>;\n                    expected_result.<span class=\"hljs-title function_ invoke__\">push</span>(*num);\n                }\n                <span class=\"hljs-number\">1</span> =&gt; *num = -(idx <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i64</span>),\n                _ =&gt; <span class=\"hljs-built_in\">unreachable!</span>(),\n            }\n        }\n        expected_result[<span class=\"hljs-number\">0</span>] = -<span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">longest_increasing_subsequence</span>(&amp;input_array),\n            expected_result\n        );\n        <span class=\"hljs-comment\">// should be [-1, 2, 4, 6, 8, ...]</span>\n        <span class=\"hljs-comment\">// the first number is not 0, it would be replaced by -1 before 2 is added</span>\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_negative_elements</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">longest_increasing_subsequence</span>(&amp;<span class=\"hljs-built_in\">vec!</span>[-<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">1</span>]), <span class=\"hljs-built_in\">vec!</span>[-<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">1</span>]);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 1
    },
    {
      "name": "Erfan Khadem",
      "email": "45465346+er888kh@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "imp",
      "email": "imp07@qq.com",
      "commits": 1
    },
    {
      "name": "Thanh",
      "email": "quang.thanh.ta@pr1meti.de",
      "commits": 1
    },
    {
      "name": "Cole Severson",
      "email": "40706895+ColeSeverson@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Michele Caci",
      "email": "michele.caci@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "John Law",
      "email": "johnlaw.po@gmail.com",
      "commits": 1
    },
    {
      "name": "pkdism",
      "email": "pawan.dwivedi94@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Alon Firestein",
      "email": "57404551+alonfirestein@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "Daniel Müller",
      "email": "danielmueller@limebird.de",
      "commits": 1
    },
    {
      "name": "icalF",
      "email": "laser.survivor@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "dhruvsaini",
      "email": "dhruv_saini@outlook.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "Mehdi ALAOUI",
      "email": "alaoui.mehdi.1995@gmail.com",
      "commits": 3
    },
    {
      "name": "Omkarnath Parida",
      "email": "pomkarnath98@gmail.com",
      "commits": 3
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    }
  ],
  "explanationUrl": {
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en/Dynamic Programming/Longest Increasing Subsequence.md"
  }
}