{
  "slug": "lorenz-transformation-four-vector",
  "name": "Lorenz Transformation Four Vector",
  "categories": [
    "physics"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "physics/lorenz_transformation_four_vector.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/physics/lorenz_transformation_four_vector.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nLorenz transformation describes the transition from a reference frame P\nto another reference frame P&#x27;, each of which is moving in a direction with\nrespect to the other. The Lorenz transformation implemented in this code\nis the relativistic version using a four vector described by Minkowsky Space:\nx0 = ct, x1 = x, x2 = y, and x3 = z\n\nNOTE: Please note that x0 is c (speed of light) times t (time).\n\nSo, the Lorenz transformation using a four vector is defined as:\n\n|ct&#x27;|   | γ  -γβ  0  0|  |ct|\n|x&#x27; | = |-γβ  γ   0  0| *|x |\n|y&#x27; |   | 0   0   1  0|  |y |\n|z&#x27; |   | 0   0   0  1|  |z |\n\nWhere:\n           1\nγ = ---------------\n      -----------\n     /     v^2  |\n    /(1 -  ---\n  -/       c^2\n\n      v\nβ = -----\n      c\n\nReference: https://en.wikipedia.org/wiki/Lorentz_transformation\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> sqrt\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np  <span class=\"hljs-comment\"># type: ignore</span>\n<span class=\"hljs-keyword\">from</span> sympy <span class=\"hljs-keyword\">import</span> symbols  <span class=\"hljs-comment\"># type: ignore</span>\n\n<span class=\"hljs-comment\"># Coefficient</span>\n<span class=\"hljs-comment\"># Speed of light (m/s)</span>\nc = <span class=\"hljs-number\">299792458</span>\n\n<span class=\"hljs-comment\"># Symbols</span>\nct, x, y, z = symbols(<span class=\"hljs-string\">&quot;ct x y z&quot;</span>)\nct_p, x_p, y_p, z_p = symbols(<span class=\"hljs-string\">&quot;ct&#x27; x&#x27; y&#x27; z&#x27;&quot;</span>)\n\n\n<span class=\"hljs-comment\"># Vehicle&#x27;s speed divided by speed of light (no units)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">beta</span>(<span class=\"hljs-params\">velocity: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; beta(c)\n    1.0\n\n    &gt;&gt;&gt; beta(199792458)\n    0.666435904801848\n\n    &gt;&gt;&gt; beta(1e5)\n    0.00033356409519815205\n\n    &gt;&gt;&gt; beta(0.2)\n    Traceback (most recent call last):\n      ...\n    ValueError: Speed must be greater than 1!\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> velocity &gt; c:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Speed must not exceed Light Speed 299,792,458 [m/s]!&quot;</span>)\n\n    <span class=\"hljs-comment\"># Usually the speed u should be much higher than 1 (c order of magnitude)</span>\n    <span class=\"hljs-keyword\">elif</span> velocity &lt; <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Speed must be greater than 1!&quot;</span>)\n    <span class=\"hljs-keyword\">return</span> velocity / c\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gamma</span>(<span class=\"hljs-params\">velocity: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; gamma(4)\n    1.0000000000000002\n\n    &gt;&gt;&gt; gamma(1e5)\n    1.0000000556325075\n\n    &gt;&gt;&gt; gamma(3e7)\n    1.005044845777813\n\n    &gt;&gt;&gt; gamma(2.8e8)\n    2.7985595722318277\n\n    &gt;&gt;&gt; gamma(299792451)\n    4627.49902669495\n\n    &gt;&gt;&gt; gamma(0.3)\n    Traceback (most recent call last):\n      ...\n    ValueError: Speed must be greater than 1!\n\n    &gt;&gt;&gt; gamma(2*c)\n    Traceback (most recent call last):\n      ...\n    ValueError: Speed must not exceed Light Speed 299,792,458 [m/s]!\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / (sqrt(<span class=\"hljs-number\">1</span> - beta(velocity) ** <span class=\"hljs-number\">2</span>))\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">transformation_matrix</span>(<span class=\"hljs-params\">velocity: <span class=\"hljs-built_in\">float</span></span>) -&gt; np.array:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; transformation_matrix(29979245)\n    array([[ 1.00503781, -0.10050378,  0.        ,  0.        ],\n           [-0.10050378,  1.00503781,  0.        ,  0.        ],\n           [ 0.        ,  0.        ,  1.        ,  0.        ],\n           [ 0.        ,  0.        ,  0.        ,  1.        ]])\n\n    &gt;&gt;&gt; transformation_matrix(19979245.2)\n    array([[ 1.00222811, -0.06679208,  0.        ,  0.        ],\n           [-0.06679208,  1.00222811,  0.        ,  0.        ],\n           [ 0.        ,  0.        ,  1.        ,  0.        ],\n           [ 0.        ,  0.        ,  0.        ,  1.        ]])\n\n    &gt;&gt;&gt; transformation_matrix(1)\n    array([[ 1.00000000e+00, -3.33564095e-09,  0.00000000e+00,\n             0.00000000e+00],\n           [-3.33564095e-09,  1.00000000e+00,  0.00000000e+00,\n             0.00000000e+00],\n           [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n             0.00000000e+00],\n           [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n             1.00000000e+00]])\n\n    &gt;&gt;&gt; transformation_matrix(0)\n    Traceback (most recent call last):\n      ...\n    ValueError: Speed must be greater than 1!\n\n    &gt;&gt;&gt; transformation_matrix(c * 1.5)\n    Traceback (most recent call last):\n      ...\n    ValueError: Speed must not exceed Light Speed 299,792,458 [m/s]!\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> np.array(\n        [\n            [gamma(velocity), -gamma(velocity) * beta(velocity), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n            [-gamma(velocity) * beta(velocity), gamma(velocity), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n            [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],\n            [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>],\n        ]\n    )\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">transform</span>(<span class=\"hljs-params\">\n    velocity: <span class=\"hljs-built_in\">float</span>, event: np.array = np.zeros(<span class=\"hljs-params\"><span class=\"hljs-number\">4</span></span>), symbolic: <span class=\"hljs-built_in\">bool</span> = <span class=\"hljs-literal\">True</span>\n</span>) -&gt; np.array:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; transform(29979245,np.array([1,2,3,4]), False)\n    array([ 3.01302757e+08, -3.01302729e+07,  3.00000000e+00,  4.00000000e+00])\n\n    &gt;&gt;&gt; transform(29979245)\n    array([1.00503781498831*ct - 0.100503778816875*x,\n           -0.100503778816875*ct + 1.00503781498831*x, 1.0*y, 1.0*z],\n          dtype=object)\n\n    &gt;&gt;&gt; transform(19879210.2)\n    array([1.0022057787097*ct - 0.066456172618675*x,\n           -0.066456172618675*ct + 1.0022057787097*x, 1.0*y, 1.0*z],\n          dtype=object)\n\n    &gt;&gt;&gt; transform(299792459, np.array([1,1,1,1]))\n    Traceback (most recent call last):\n      ...\n    ValueError: Speed must not exceed Light Speed 299,792,458 [m/s]!\n\n    &gt;&gt;&gt; transform(-1, np.array([1,1,1,1]))\n    Traceback (most recent call last):\n      ...\n    ValueError: Speed must be greater than 1!\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># Ensure event is not a vector of zeros</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> symbolic:\n\n        <span class=\"hljs-comment\"># x0 is ct (speed of ligt * time)</span>\n        event[<span class=\"hljs-number\">0</span>] = event[<span class=\"hljs-number\">0</span>] * c\n    <span class=\"hljs-keyword\">else</span>:\n\n        <span class=\"hljs-comment\"># Symbolic four vector</span>\n        event = np.array([ct, x, y, z])\n\n    <span class=\"hljs-keyword\">return</span> transformation_matrix(velocity).dot(event)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n\n    <span class=\"hljs-comment\"># Example of symbolic vector:</span>\n    four_vector = transform(<span class=\"hljs-number\">29979245</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Example of four vector: &quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;ct&#x27; = <span class=\"hljs-subst\">{four_vector[<span class=\"hljs-number\">0</span>]}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;x&#x27; = <span class=\"hljs-subst\">{four_vector[<span class=\"hljs-number\">1</span>]}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;y&#x27; = <span class=\"hljs-subst\">{four_vector[<span class=\"hljs-number\">2</span>]}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;z&#x27; = <span class=\"hljs-subst\">{four_vector[<span class=\"hljs-number\">3</span>]}</span>&quot;</span>)\n\n    <span class=\"hljs-comment\"># Substitute symbols with numerical values:</span>\n    values = np.array([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>])\n    sub_dict = {ct: c * values[<span class=\"hljs-number\">0</span>], x: values[<span class=\"hljs-number\">1</span>], y: values[<span class=\"hljs-number\">2</span>], z: values[<span class=\"hljs-number\">3</span>]}\n    numerical_vector = [four_vector[i].subs(sub_dict) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>)]\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;\\n<span class=\"hljs-subst\">{numerical_vector}</span>&quot;</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "Aviv Faraj",
      "email": "73610201+avivfaraj@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}