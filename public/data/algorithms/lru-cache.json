{
  "slug": "lru-cache",
  "name": "Lru Cache",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "other/lru_cache.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/other/lru_cache.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">from</span> collections.abc <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Callable</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Generic</span>, TypeVar\n\nT = TypeVar(<span class=\"hljs-string\">&quot;T&quot;</span>)\nU = TypeVar(<span class=\"hljs-string\">&quot;U&quot;</span>)\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DoubleLinkedListNode</span>(<span class=\"hljs-type\">Generic</span>[T, U]):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Double Linked List Node built specifically for LRU Cache\n\n    &gt;&gt;&gt; DoubleLinkedListNode(1,1)\n    Node: key: 1, val: 1, has next: False, has prev: False\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, key: T | <span class=\"hljs-literal\">None</span>, val: U | <span class=\"hljs-literal\">None</span></span>):\n        self.key = key\n        self.val = val\n        self.<span class=\"hljs-built_in\">next</span>: DoubleLinkedListNode[T, U] | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\n        self.prev: DoubleLinkedListNode[T, U] | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"hljs-string\">f&quot;Node: key: <span class=\"hljs-subst\">{self.key}</span>, val: <span class=\"hljs-subst\">{self.val}</span>, &quot;</span>\n            <span class=\"hljs-string\">f&quot;has next: <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">bool</span>(self.<span class=\"hljs-built_in\">next</span>)}</span>, has prev: <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">bool</span>(self.prev)}</span>&quot;</span>\n        )\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DoubleLinkedList</span>(<span class=\"hljs-type\">Generic</span>[T, U]):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Double Linked List built specifically for LRU Cache\n\n    &gt;&gt;&gt; dll: DoubleLinkedList = DoubleLinkedList()\n    &gt;&gt;&gt; dll\n    DoubleLinkedList,\n        Node: key: None, val: None, has next: True, has prev: False,\n        Node: key: None, val: None, has next: False, has prev: True\n\n    &gt;&gt;&gt; first_node = DoubleLinkedListNode(1,10)\n    &gt;&gt;&gt; first_node\n    Node: key: 1, val: 10, has next: False, has prev: False\n\n\n    &gt;&gt;&gt; dll.add(first_node)\n    &gt;&gt;&gt; dll\n    DoubleLinkedList,\n        Node: key: None, val: None, has next: True, has prev: False,\n        Node: key: 1, val: 10, has next: True, has prev: True,\n        Node: key: None, val: None, has next: False, has prev: True\n\n    &gt;&gt;&gt; # node is mutated\n    &gt;&gt;&gt; first_node\n    Node: key: 1, val: 10, has next: True, has prev: True\n\n    &gt;&gt;&gt; second_node = DoubleLinkedListNode(2,20)\n    &gt;&gt;&gt; second_node\n    Node: key: 2, val: 20, has next: False, has prev: False\n\n    &gt;&gt;&gt; dll.add(second_node)\n    &gt;&gt;&gt; dll\n    DoubleLinkedList,\n        Node: key: None, val: None, has next: True, has prev: False,\n        Node: key: 1, val: 10, has next: True, has prev: True,\n        Node: key: 2, val: 20, has next: True, has prev: True,\n        Node: key: None, val: None, has next: False, has prev: True\n\n    &gt;&gt;&gt; removed_node = dll.remove(first_node)\n    &gt;&gt;&gt; assert removed_node == first_node\n    &gt;&gt;&gt; dll\n    DoubleLinkedList,\n        Node: key: None, val: None, has next: True, has prev: False,\n        Node: key: 2, val: 20, has next: True, has prev: True,\n        Node: key: None, val: None, has next: False, has prev: True\n\n\n    &gt;&gt;&gt; # Attempt to remove node not on list\n    &gt;&gt;&gt; removed_node = dll.remove(first_node)\n    &gt;&gt;&gt; removed_node is None\n    True\n\n    &gt;&gt;&gt; # Attempt to remove head or rear\n    &gt;&gt;&gt; dll.head\n    Node: key: None, val: None, has next: True, has prev: False\n    &gt;&gt;&gt; dll.remove(dll.head) is None\n    True\n\n    &gt;&gt;&gt; # Attempt to remove head or rear\n    &gt;&gt;&gt; dll.rear\n    Node: key: None, val: None, has next: False, has prev: True\n    &gt;&gt;&gt; dll.remove(dll.rear) is None\n    True\n\n\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.head: DoubleLinkedListNode[T, U] = DoubleLinkedListNode(<span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>)\n        self.rear: DoubleLinkedListNode[T, U] = DoubleLinkedListNode(<span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>)\n        self.head.<span class=\"hljs-built_in\">next</span>, self.rear.prev = self.rear, self.head\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        rep = [<span class=\"hljs-string\">&quot;DoubleLinkedList&quot;</span>]\n        node = self.head\n        <span class=\"hljs-keyword\">while</span> node.<span class=\"hljs-built_in\">next</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            rep.append(<span class=\"hljs-built_in\">str</span>(node))\n            node = node.<span class=\"hljs-built_in\">next</span>\n        rep.append(<span class=\"hljs-built_in\">str</span>(self.rear))\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;,\\n    &quot;</span>.join(rep)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">self, node: DoubleLinkedListNode[T, U]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Adds the given node to the end of the list (before rear)\n        &quot;&quot;&quot;</span>\n\n        previous = self.rear.prev\n\n        <span class=\"hljs-comment\"># All nodes other than self.head are guaranteed to have non-None previous</span>\n        <span class=\"hljs-keyword\">assert</span> previous <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n\n        previous.<span class=\"hljs-built_in\">next</span> = node\n        node.prev = previous\n        self.rear.prev = node\n        node.<span class=\"hljs-built_in\">next</span> = self.rear\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-params\">\n        self, node: DoubleLinkedListNode[T, U]\n    </span>) -&gt; DoubleLinkedListNode[T, U] | <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Removes and returns the given node from the list\n\n        Returns None if node.prev or node.next is None\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">if</span> node.prev <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">or</span> node.<span class=\"hljs-built_in\">next</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n\n        node.prev.<span class=\"hljs-built_in\">next</span> = node.<span class=\"hljs-built_in\">next</span>\n        node.<span class=\"hljs-built_in\">next</span>.prev = node.prev\n        node.prev = <span class=\"hljs-literal\">None</span>\n        node.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">return</span> node\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LRUCache</span>(<span class=\"hljs-type\">Generic</span>[T, U]):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    LRU Cache to store a given capacity of data. Can be used as a stand-alone object\n    or as a function decorator.\n\n    &gt;&gt;&gt; cache = LRUCache(2)\n\n    &gt;&gt;&gt; cache.set(1, 1)\n    &gt;&gt;&gt; cache.set(2, 2)\n    &gt;&gt;&gt; cache.get(1)\n    1\n\n    &gt;&gt;&gt; cache.list\n    DoubleLinkedList,\n        Node: key: None, val: None, has next: True, has prev: False,\n        Node: key: 2, val: 2, has next: True, has prev: True,\n        Node: key: 1, val: 1, has next: True, has prev: True,\n        Node: key: None, val: None, has next: False, has prev: True\n\n    &gt;&gt;&gt; cache.cache  # doctest: +NORMALIZE_WHITESPACE\n    {1: Node: key: 1, val: 1, has next: True, has prev: True, \\\n     2: Node: key: 2, val: 2, has next: True, has prev: True}\n\n    &gt;&gt;&gt; cache.set(3, 3)\n\n    &gt;&gt;&gt; cache.list\n    DoubleLinkedList,\n        Node: key: None, val: None, has next: True, has prev: False,\n        Node: key: 1, val: 1, has next: True, has prev: True,\n        Node: key: 3, val: 3, has next: True, has prev: True,\n        Node: key: None, val: None, has next: False, has prev: True\n\n    &gt;&gt;&gt; cache.cache  # doctest: +NORMALIZE_WHITESPACE\n    {1: Node: key: 1, val: 1, has next: True, has prev: True, \\\n     3: Node: key: 3, val: 3, has next: True, has prev: True}\n\n    &gt;&gt;&gt; cache.get(2) is None\n    True\n\n    &gt;&gt;&gt; cache.set(4, 4)\n\n    &gt;&gt;&gt; cache.get(1) is None\n    True\n\n    &gt;&gt;&gt; cache.get(3)\n    3\n\n    &gt;&gt;&gt; cache.get(4)\n    4\n\n    &gt;&gt;&gt; cache\n    CacheInfo(hits=3, misses=2, capacity=2, current size=2)\n\n    &gt;&gt;&gt; @LRUCache.decorator(100)\n    ... def fib(num):\n    ...     if num in (1, 2):\n    ...         return 1\n    ...     return fib(num - 1) + fib(num - 2)\n\n    &gt;&gt;&gt; for i in range(1, 100):\n    ...     res = fib(i)\n\n    &gt;&gt;&gt; fib.cache_info()\n    CacheInfo(hits=194, misses=99, capacity=100, current size=99)\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># class variable to map the decorator functions to their respective instance</span>\n    decorator_function_to_instance_map: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-type\">Callable</span>[[T], U], LRUCache[T, U]] = {}\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, capacity: <span class=\"hljs-built_in\">int</span></span>):\n        self.<span class=\"hljs-built_in\">list</span>: DoubleLinkedList[T, U] = DoubleLinkedList()\n        self.capacity = capacity\n        self.num_keys = <span class=\"hljs-number\">0</span>\n        self.hits = <span class=\"hljs-number\">0</span>\n        self.miss = <span class=\"hljs-number\">0</span>\n        self.cache: <span class=\"hljs-built_in\">dict</span>[T, DoubleLinkedListNode[T, U]] = {}\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Return the details for the cache instance\n        [hits, misses, capacity, current_size]\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"hljs-string\">f&quot;CacheInfo(hits=<span class=\"hljs-subst\">{self.hits}</span>, misses=<span class=\"hljs-subst\">{self.miss}</span>, &quot;</span>\n            <span class=\"hljs-string\">f&quot;capacity=<span class=\"hljs-subst\">{self.capacity}</span>, current size=<span class=\"hljs-subst\">{self.num_keys}</span>)&quot;</span>\n        )\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__contains__</span>(<span class=\"hljs-params\">self, key: T</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &gt;&gt;&gt; cache = LRUCache(1)\n\n        &gt;&gt;&gt; 1 in cache\n        False\n\n        &gt;&gt;&gt; cache.set(1, 1)\n\n        &gt;&gt;&gt; 1 in cache\n        True\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">return</span> key <span class=\"hljs-keyword\">in</span> self.cache\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">self, key: T</span>) -&gt; U | <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Returns the value for the input key and updates the Double Linked List.\n        Returns None if key is not present in cache\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-comment\"># Note: pythonic interface would throw KeyError rather than return None</span>\n\n        <span class=\"hljs-keyword\">if</span> key <span class=\"hljs-keyword\">in</span> self.cache:\n            self.hits += <span class=\"hljs-number\">1</span>\n            value_node: DoubleLinkedListNode[T, U] = self.cache[key]\n            node = self.<span class=\"hljs-built_in\">list</span>.remove(self.cache[key])\n            <span class=\"hljs-keyword\">assert</span> node == value_node\n\n            <span class=\"hljs-comment\"># node is guaranteed not None because it is in self.cache</span>\n            <span class=\"hljs-keyword\">assert</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n            self.<span class=\"hljs-built_in\">list</span>.add(node)\n            <span class=\"hljs-keyword\">return</span> node.val\n        self.miss += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">self, key: T, value: U</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Sets the value for the input key and updates the Double Linked List\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">if</span> key <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> self.cache:\n            <span class=\"hljs-keyword\">if</span> self.num_keys &gt;= self.capacity:\n                <span class=\"hljs-comment\"># delete first node (oldest) when over capacity</span>\n                first_node = self.<span class=\"hljs-built_in\">list</span>.head.<span class=\"hljs-built_in\">next</span>\n\n                <span class=\"hljs-comment\"># guaranteed to have a non-None first node when num_keys &gt; 0</span>\n                <span class=\"hljs-comment\"># explain to type checker via assertions</span>\n                <span class=\"hljs-keyword\">assert</span> first_node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n                <span class=\"hljs-keyword\">assert</span> first_node.key <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n                <span class=\"hljs-keyword\">assert</span> (\n                    self.<span class=\"hljs-built_in\">list</span>.remove(first_node) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n                )  <span class=\"hljs-comment\"># node guaranteed to be in list assert node.key is not None</span>\n\n                <span class=\"hljs-keyword\">del</span> self.cache[first_node.key]\n                self.num_keys -= <span class=\"hljs-number\">1</span>\n            self.cache[key] = DoubleLinkedListNode(key, value)\n            self.<span class=\"hljs-built_in\">list</span>.add(self.cache[key])\n            self.num_keys += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-comment\"># bump node to the end of the list, update value</span>\n            node = self.<span class=\"hljs-built_in\">list</span>.remove(self.cache[key])\n            <span class=\"hljs-keyword\">assert</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>  <span class=\"hljs-comment\"># node guaranteed to be in list</span>\n            node.val = value\n            self.<span class=\"hljs-built_in\">list</span>.add(node)\n\n<span class=\"hljs-meta\">    @classmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decorator</span>(<span class=\"hljs-params\">\n        cls, size: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">128</span>\n    </span>) -&gt; <span class=\"hljs-type\">Callable</span>[[<span class=\"hljs-type\">Callable</span>[[T], U]], <span class=\"hljs-type\">Callable</span>[..., U]]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Decorator version of LRU Cache\n\n        Decorated function must be function of T -&gt; U\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cache_decorator_inner</span>(<span class=\"hljs-params\">func: <span class=\"hljs-type\">Callable</span>[[T], U]</span>) -&gt; <span class=\"hljs-type\">Callable</span>[..., U]:\n            <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cache_decorator_wrapper</span>(<span class=\"hljs-params\">*args: T</span>) -&gt; U:\n                <span class=\"hljs-keyword\">if</span> func <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> cls.decorator_function_to_instance_map:\n                    cls.decorator_function_to_instance_map[func] = LRUCache(size)\n\n                result = cls.decorator_function_to_instance_map[func].get(args[<span class=\"hljs-number\">0</span>])\n                <span class=\"hljs-keyword\">if</span> result <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n                    result = func(*args)\n                    cls.decorator_function_to_instance_map[func].<span class=\"hljs-built_in\">set</span>(args[<span class=\"hljs-number\">0</span>], result)\n                <span class=\"hljs-keyword\">return</span> result\n\n            <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cache_info</span>() -&gt; LRUCache[T, U]:\n                <span class=\"hljs-keyword\">return</span> cls.decorator_function_to_instance_map[func]\n\n            <span class=\"hljs-built_in\">setattr</span>(cache_decorator_wrapper, <span class=\"hljs-string\">&quot;cache_info&quot;</span>, cache_info)\n\n            <span class=\"hljs-keyword\">return</span> cache_decorator_wrapper\n\n        <span class=\"hljs-keyword\">return</span> cache_decorator_inner\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "javascript": {
      "dir": "Cache/LRUCache.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Cache/LRUCache.js",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LRUCache</span> {\n  <span class=\"hljs-comment\">// LRU Cache to store a given capacity of data</span>\n  #capacity\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} <span class=\"hljs-variable\">capacity</span> - the capacity of LRUCache\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">LRUCache</span>} - sealed\n   */</span>\n  <span class=\"hljs-title function_\">constructor</span> (capacity) {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Number</span>.<span class=\"hljs-title function_\">isInteger</span>(capacity) || capacity &lt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;Invalid capacity&#x27;</span>)\n    }\n\n    <span class=\"hljs-variable language_\">this</span>.#capacity = ~~capacity\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">misses</span> = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hits</span> = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>()\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">seal</span>(<span class=\"hljs-variable language_\">this</span>)\n  }\n\n  get info () {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">freeze</span>({\n      <span class=\"hljs-attr\">misses</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">misses</span>,\n      <span class=\"hljs-attr\">hits</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hits</span>,\n      <span class=\"hljs-attr\">capacity</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">capacity</span>,\n      <span class=\"hljs-attr\">size</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span>\n    })\n  }\n\n  get size () {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-property\">size</span>\n  }\n\n  get capacity () {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.#capacity\n  }\n\n  set capacity (newCapacity) {\n    <span class=\"hljs-keyword\">if</span> (newCapacity &lt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RangeError</span>(<span class=\"hljs-string\">&#x27;Capacity should be greater than 0&#x27;</span>)\n    }\n\n    <span class=\"hljs-keyword\">if</span> (newCapacity &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">capacity</span>) {\n      <span class=\"hljs-keyword\">let</span> diff = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">capacity</span> - newCapacity\n\n      <span class=\"hljs-keyword\">while</span> (diff--) {\n        <span class=\"hljs-variable language_\">this</span>.#<span class=\"hljs-title function_\">removeLeastRecentlyUsed</span>()\n      }\n    }\n\n    <span class=\"hljs-variable language_\">this</span>.#capacity = newCapacity\n  }\n\n  <span class=\"hljs-comment\">/**\n * delete oldest key existing in map by the help of iterator\n */</span>\n  #removeLeastRecentlyUsed () {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-title function_\">keys</span>().<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>)\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} <span class=\"hljs-variable\">key</span>\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">*</span>}\n   */</span>\n  has (key) {\n    key = <span class=\"hljs-title class_\">String</span>(key)\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-title function_\">has</span>(key)\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} <span class=\"hljs-variable\">key</span>\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">*</span>} <span class=\"hljs-variable\">value</span>\n   */</span>\n  set (key, value) {\n    key = <span class=\"hljs-title class_\">String</span>(key)\n    <span class=\"hljs-comment\">// Sets the value for the input key and if the key exists it updates the existing key</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span> === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">capacity</span>) {\n      <span class=\"hljs-variable language_\">this</span>.#<span class=\"hljs-title function_\">removeLeastRecentlyUsed</span>()\n    }\n\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-title function_\">set</span>(key, value)\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} <span class=\"hljs-variable\">key</span>\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">*</span>}\n   */</span>\n  get (key) {\n    key = <span class=\"hljs-title class_\">String</span>(key)\n    <span class=\"hljs-comment\">// Returns the value for the input key. Returns null if key is not present in cache</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-title function_\">has</span>(key)) {\n      <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-title function_\">get</span>(key)\n\n      <span class=\"hljs-comment\">// refresh the cache to update the order of key</span>\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-title function_\">delete</span>(key)\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>.<span class=\"hljs-title function_\">set</span>(key, value)\n\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hits</span>++\n      <span class=\"hljs-keyword\">return</span> value\n    }\n\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">misses</span>++\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">JSON</span>} <span class=\"hljs-variable\">json</span>\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">LRUCache</span>}\n   */</span>\n  parse (json) {\n    <span class=\"hljs-keyword\">const</span> { misses, hits, cache } = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(json)\n\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">misses</span> += misses ?? <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hits</span> += hits ?? <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> cache) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">set</span>(key, cache[key])\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} <span class=\"hljs-variable\">indent</span>\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">JSON</span>} - string\n   */</span>\n  toString (indent) {\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">replacer</span> = (<span class=\"hljs-params\">_, value</span>) =&gt; {\n      <span class=\"hljs-keyword\">if</span> (value <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Set</span>) {\n        <span class=\"hljs-keyword\">return</span> [...value]\n      }\n\n      <span class=\"hljs-keyword\">if</span> (value <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Map</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">fromEntries</span>(value)\n      }\n\n      <span class=\"hljs-keyword\">return</span> value\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(<span class=\"hljs-variable language_\">this</span>, replacer, indent)\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">LRUCache</span>\n"
    },
    "c-plus-plus": {
      "dir": "others/lru_cache.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/others/lru_cache.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief An implementation of\n * [LRU\n * Cache](https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)).\n * Lru is a part of cache algorithms (also frequently called cache replacement\n * algorithms or cache replacement policies).\n *\n * ### Logic\n *      * Discards the least recently used items first.\n *      * This algorithm requires keeping track of what was used when, which is\n * expensive if one wants to make sure the algorithm always discards the least\n * recently used item.\n *      * General implementations of this technique require keeping &quot;age bits&quot;\n * for cache-lines and track the &quot;Least Recently Used&quot; cache-line based on\n * age-bits.\n *      * In such an implementation, every time a cache-line is used, the age of\n * all other cache-lines changes\n *\n * ### Algorithm explanation\n *      For a cache of page frame x:\n *          * Check if the page is present in cache.\n *          * If not present, then check is the cache is full or not:\n *          * If the cache is full, REMOVE the last element from the cache.\n *          * If the element is present in cache, then shift that element to\n * first position in cache from its original position.\n *              * This way you can keep the least recently used elements in the\n * last and most recently used in front of the cache.\n *\n *  Every time a requested page is  not found in cache, that is a miss or page\n * fault, and if the page is present in cache, then its a hit.\n *\n * ## Data Structure used\n *  * In the algorithm below we used two different data structure, one is linked\n * list and other one is a hash map\n *  * The linked list is used to contain the pages and the hash map contains the\n * pages and their address.\n *  * Every time a new page is requested, we first check in the hash map if the\n * page is present or not.\n *  * If not present, and the cache is full, we simply delete the last entry in\n * the cache.\n *  * If present, we shift that page from its current location to beginning of\n * the cache and update the address in hash map for that page.\n *\n * @author [Nitin Sharma](https://github.com/foo290)\n * */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>        <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>       <span class=\"hljs-comment\">/// for IO Operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;list&gt;</span>           <span class=\"hljs-comment\">/// for std::list</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unordered_map&gt;</span>  <span class=\"hljs-comment\">/// for std::unordered_map</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace others\n * @brief Other algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> others {\n<span class=\"hljs-comment\">/**\n * @namespace lru_cache\n * @brief Implementation of the [LRU caching\n * algorithm](https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU))\n */</span>\n<span class=\"hljs-keyword\">namespace</span> lru_cache {\n<span class=\"hljs-comment\">/**\n * @brief LRU cache class\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LRUCache</span> {\n    <span class=\"hljs-type\">uint64_t</span> pageFrame;         <span class=\"hljs-comment\">///&lt; Page frame, or total size of the cache.</span>\n    std::list&lt;<span class=\"hljs-type\">uint64_t</span>&gt; cache;  <span class=\"hljs-comment\">///&lt; Cache linked list (using the STL)</span>\n    std::unordered_map&lt;<span class=\"hljs-type\">uint64_t</span>, std::list&lt;<span class=\"hljs-type\">uint64_t</span>&gt;::iterator&gt;\n        pageMap;  <span class=\"hljs-comment\">///&lt; Hash map containing pages and their addresses</span>\n\n    <span class=\"hljs-type\">uint64_t</span> hits =\n        <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">///&lt; Total number of hits, or total number of times a page</span>\n    <span class=\"hljs-comment\">///&lt; was found in cache.</span>\n    <span class=\"hljs-type\">uint64_t</span> pageFault = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">///&lt; Total number of miss/page fault, or total</span>\n                             <span class=\"hljs-comment\">///&lt; number of times a page was not found in cache</span>\n\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/**\n     * @brief Constructor, Initialize thee LRU class with page frame.\n     * @param pf Page frame or total size of cache.\n     * */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">LRUCache</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> pf)</span> </span>{ pageFrame = pf; }\n\n    <span class=\"hljs-comment\">/**\n     * @brief Refer to a page, or request a page from memory.\n     * @param page The page that you are referring to.\n     * @returns void\n     * */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">refer</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> page)</span> </span>{\n        <span class=\"hljs-comment\">// If the page requested not in cache.</span>\n        <span class=\"hljs-keyword\">if</span> (pageMap.<span class=\"hljs-built_in\">find</span>(page) == pageMap.<span class=\"hljs-built_in\">end</span>()) {\n            pageFault++;  <span class=\"hljs-comment\">///&lt; Increase the page fault by one.</span>\n\n            <span class=\"hljs-comment\">// Check if the cache is full</span>\n            <span class=\"hljs-keyword\">if</span> (cache.<span class=\"hljs-built_in\">size</span>() == pageFrame) {\n                <span class=\"hljs-comment\">// delete the last page from cache</span>\n                <span class=\"hljs-type\">uint64_t</span> lastPage = cache.<span class=\"hljs-built_in\">back</span>();\n                cache.<span class=\"hljs-built_in\">pop_back</span>();\n                pageMap.<span class=\"hljs-built_in\">erase</span>(lastPage);\n            }\n        }\n        <span class=\"hljs-comment\">// The requested page is in the cache</span>\n        <span class=\"hljs-keyword\">else</span> {\n            hits++;\n            <span class=\"hljs-comment\">// present in cache, erase from current position to bring in front</span>\n            cache.<span class=\"hljs-built_in\">erase</span>(pageMap[page]);\n        }\n        <span class=\"hljs-comment\">// Push it in the front of the cache and update the page reference in</span>\n        <span class=\"hljs-comment\">// page map.</span>\n        cache.<span class=\"hljs-built_in\">push_front</span>(page);\n        pageMap[page] = cache.<span class=\"hljs-built_in\">begin</span>();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief A function to display the current cache\n     * @returns Void\n     * */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">display</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> &amp;it : cache) {\n            std::cout &lt;&lt; it &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n        }\n        std::cout &lt;&lt; std::endl;\n    }\n    <span class=\"hljs-comment\">/**\n     * @brief A function to get page hits\n     * @returns int\n     * */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">getHits</span><span class=\"hljs-params\">()</span> <span class=\"hljs-type\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> hits; }\n    <span class=\"hljs-comment\">/**\n     * @brief A function to get page fault\n     * @returns int\n     * */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">getPageFault</span><span class=\"hljs-params\">()</span> <span class=\"hljs-type\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> pageFault; }\n};\n\n}  <span class=\"hljs-comment\">// namespace lru_cache</span>\n}  <span class=\"hljs-comment\">// namespace others</span>\n\n<span class=\"hljs-keyword\">namespace</span> lru_tests {\n<span class=\"hljs-comment\">/**\n * @brief A function to print given message on console.\n * @tparam T Type of the given message.\n * @returns void\n * */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">log</span><span class=\"hljs-params\">(T msg)</span> </span>{\n    <span class=\"hljs-comment\">// It&#x27;s just to avoid writing cout and endl</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;[TESTS] : ---&gt; &quot;</span> &lt;&lt; msg &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief A simple test case\n * The assert statement will check expected hist and miss to resultant hits and\n * miss\n * @returns void\n * */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_1</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">uint64_t</span> expected_hits = <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-type\">uint64_t</span> expected_pageFault = <span class=\"hljs-number\">4</span>;\n\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Running Test-1...&quot;</span>);\n\n    others::<span class=\"hljs-function\">lru_cache::LRUCache <span class=\"hljs-title\">cache</span><span class=\"hljs-params\">(<span class=\"hljs-number\">4</span>)</span></span>;\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">1</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">2</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">5</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">1</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">4</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Checking assert statement...&quot;</span>);\n    <span class=\"hljs-built_in\">assert</span>(cache.<span class=\"hljs-built_in\">getHits</span>() == expected_hits &amp;&amp;\n           cache.<span class=\"hljs-built_in\">getPageFault</span>() == expected_pageFault);\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Assert successful!&quot;</span>);\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Test-1 complete!&quot;</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief A test case contains hits more than cache size\n * The assert statement will check expected hist and miss to resultant hits and\n * miss\n * @returns void\n * */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_2</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">uint64_t</span> expected_hits = <span class=\"hljs-number\">4</span>;\n    <span class=\"hljs-type\">uint64_t</span> expected_pageFault = <span class=\"hljs-number\">2</span>;\n\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Running Test-2...&quot;</span>);\n\n    others::<span class=\"hljs-function\">lru_cache::LRUCache <span class=\"hljs-title\">cache</span><span class=\"hljs-params\">(<span class=\"hljs-number\">4</span>)</span></span>;\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">1</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">1</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">1</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">1</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">1</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Checking assert statement...&quot;</span>);\n    <span class=\"hljs-built_in\">assert</span>(cache.<span class=\"hljs-built_in\">getHits</span>() == expected_hits &amp;&amp;\n           cache.<span class=\"hljs-built_in\">getPageFault</span>() == expected_pageFault);\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Assert successful!&quot;</span>);\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Test-2 complete!&quot;</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief A simple test case\n * The assert statement will check expected hist and miss to resultant hits and\n * miss\n * @returns void\n * */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_3</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">uint64_t</span> expected_hits = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-type\">uint64_t</span> expected_pageFault = <span class=\"hljs-number\">5</span>;\n\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Running Test-3...&quot;</span>);\n\n    others::<span class=\"hljs-function\">lru_cache::LRUCache <span class=\"hljs-title\">cache</span><span class=\"hljs-params\">(<span class=\"hljs-number\">4</span>)</span></span>;\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">1</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">2</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">3</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">4</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">5</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Checking assert statement...&quot;</span>);\n    <span class=\"hljs-built_in\">assert</span>(cache.<span class=\"hljs-built_in\">getHits</span>() == expected_hits &amp;&amp;\n           cache.<span class=\"hljs-built_in\">getPageFault</span>() == expected_pageFault);\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Assert successful!&quot;</span>);\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Test-3 complete!&quot;</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief A function to invoke all test cases\n * @returns void\n * */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">run_tests</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test_1</span>();\n    <span class=\"hljs-built_in\">test_2</span>();\n    <span class=\"hljs-built_in\">test_3</span>();\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;&quot;</span>);\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;TESTS COMPLETED!&quot;</span>);\n}\n}  <span class=\"hljs-comment\">// namespace lru_tests</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    lru_tests::<span class=\"hljs-built_in\">run_tests</span>();\n\n    <span class=\"hljs-comment\">// Usage</span>\n    others::<span class=\"hljs-function\">lru_cache::LRUCache <span class=\"hljs-title\">cache</span><span class=\"hljs-params\">(<span class=\"hljs-number\">4</span>)</span></span>;\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">1</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">2</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">3</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">4</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">5</span>);\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">5</span>);\n\n    cache.<span class=\"hljs-built_in\">display</span>();\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Hits: &quot;</span> &lt;&lt; cache.<span class=\"hljs-built_in\">getHits</span>()\n              &lt;&lt; <span class=\"hljs-string\">&quot; Miss: &quot;</span> &lt;&lt; cache.<span class=\"hljs-built_in\">getPageFault</span>() &lt;&lt; std::endl;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/caches/LRUCache.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/caches/LRUCache.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.caches;\n\n<span class=\"hljs-keyword\">import</span> java.util.HashMap;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n\n<span class=\"hljs-comment\">/**\n * Least recently used (LRU)\n * &lt;p&gt;\n * Discards the least recently used items first. This algorithm requires keeping\n * track of what was used when, which is expensive if one wants to make sure the\n * algorithm always discards the least recently used item.\n * https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)\n *\n * <span class=\"hljs-doctag\">@param</span> &lt;K&gt; key type\n * <span class=\"hljs-doctag\">@param</span> &lt;V&gt; value type\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LRUCache</span>&lt;K, V&gt; {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Map&lt;K, Entry&lt;K, V&gt;&gt; data = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n    <span class=\"hljs-keyword\">private</span> Entry&lt;K, V&gt; head;\n    <span class=\"hljs-keyword\">private</span> Entry&lt;K, V&gt; tail;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> cap;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">DEFAULT_CAP</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100</span>;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">LRUCache</span><span class=\"hljs-params\">()</span> {\n        setCapacity(DEFAULT_CAP);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">LRUCache</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> cap)</span> {\n        setCapacity(cap);\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setCapacity</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> newCapacity)</span> {\n        checkCapacity(newCapacity);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> data.size(); i &gt; newCapacity; i--) {\n            Entry&lt;K, V&gt; evicted = evict();\n            data.remove(evicted.getKey());\n        }\n        <span class=\"hljs-built_in\">this</span>.cap = newCapacity;\n    }\n\n    <span class=\"hljs-keyword\">private</span> Entry&lt;K, V&gt; <span class=\"hljs-title function_\">evict</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;cache cannot be empty!&quot;</span>);\n        }\n        Entry&lt;K, V&gt; evicted = head;\n        head = evicted.getNextEntry();\n        head.setPreEntry(<span class=\"hljs-literal\">null</span>);\n        evicted.setNextEntry(<span class=\"hljs-literal\">null</span>);\n        <span class=\"hljs-keyword\">return</span> evicted;\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">checkCapacity</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> capacity)</span> {\n        <span class=\"hljs-keyword\">if</span> (capacity &lt;= <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;capacity must greater than 0!&quot;</span>);\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> V <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(K key)</span> {\n        <span class=\"hljs-keyword\">if</span> (!data.containsKey(key)) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n        <span class=\"hljs-keyword\">final</span> Entry&lt;K, V&gt; entry = data.get(key);\n        moveNodeToLast(entry);\n        <span class=\"hljs-keyword\">return</span> entry.getValue();\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">moveNodeToLast</span><span class=\"hljs-params\">(Entry&lt;K, V&gt; entry)</span> {\n        <span class=\"hljs-keyword\">if</span> (tail == entry) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-keyword\">final</span> Entry&lt;K, V&gt; preEntry = entry.getPreEntry();\n        <span class=\"hljs-keyword\">final</span> Entry&lt;K, V&gt; nextEntry = entry.getNextEntry();\n        <span class=\"hljs-keyword\">if</span> (preEntry != <span class=\"hljs-literal\">null</span>) {\n            preEntry.setNextEntry(nextEntry);\n        }\n        <span class=\"hljs-keyword\">if</span> (nextEntry != <span class=\"hljs-literal\">null</span>) {\n            nextEntry.setPreEntry(preEntry);\n        }\n        <span class=\"hljs-keyword\">if</span> (head == entry) {\n            head = nextEntry;\n        }\n        tail.setNextEntry(entry);\n        entry.setPreEntry(tail);\n        entry.setNextEntry(<span class=\"hljs-literal\">null</span>);\n        tail = entry;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(K key, V value)</span> {\n        <span class=\"hljs-keyword\">if</span> (data.containsKey(key)) {\n            <span class=\"hljs-keyword\">final</span> Entry&lt;K, V&gt; existingEntry = data.get(key);\n            existingEntry.setValue(value);\n            moveNodeToLast(existingEntry);\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        Entry&lt;K, V&gt; newEntry;\n        <span class=\"hljs-keyword\">if</span> (data.size() == cap) {\n            newEntry = evict();\n            data.remove(newEntry.getKey());\n        } <span class=\"hljs-keyword\">else</span> {\n            newEntry = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Entry</span>&lt;&gt;();\n        }\n\n        newEntry.setKey(key);\n        newEntry.setValue(value);\n        addNewEntry(newEntry);\n        data.put(key, newEntry);\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addNewEntry</span><span class=\"hljs-params\">(Entry&lt;K, V&gt; newEntry)</span> {\n        <span class=\"hljs-keyword\">if</span> (data.isEmpty()) {\n            head = newEntry;\n            tail = newEntry;\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        tail.setNextEntry(newEntry);\n        newEntry.setPreEntry(tail);\n        newEntry.setNextEntry(<span class=\"hljs-literal\">null</span>);\n        tail = newEntry;\n    }\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Entry</span>&lt;I, J&gt; {\n\n        <span class=\"hljs-keyword\">private</span> Entry&lt;I, J&gt; preEntry;\n        <span class=\"hljs-keyword\">private</span> Entry&lt;I, J&gt; nextEntry;\n        <span class=\"hljs-keyword\">private</span> I key;\n        <span class=\"hljs-keyword\">private</span> J value;\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Entry</span><span class=\"hljs-params\">()</span> {\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Entry</span><span class=\"hljs-params\">(Entry&lt;I, J&gt; preEntry, Entry&lt;I, J&gt; nextEntry, I key, J value)</span> {\n            <span class=\"hljs-built_in\">this</span>.preEntry = preEntry;\n            <span class=\"hljs-built_in\">this</span>.nextEntry = nextEntry;\n            <span class=\"hljs-built_in\">this</span>.key = key;\n            <span class=\"hljs-built_in\">this</span>.value = value;\n        }\n\n        <span class=\"hljs-keyword\">public</span> Entry&lt;I, J&gt; <span class=\"hljs-title function_\">getPreEntry</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> preEntry;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setPreEntry</span><span class=\"hljs-params\">(Entry&lt;I, J&gt; preEntry)</span> {\n            <span class=\"hljs-built_in\">this</span>.preEntry = preEntry;\n        }\n\n        <span class=\"hljs-keyword\">public</span> Entry&lt;I, J&gt; <span class=\"hljs-title function_\">getNextEntry</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> nextEntry;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setNextEntry</span><span class=\"hljs-params\">(Entry&lt;I, J&gt; nextEntry)</span> {\n            <span class=\"hljs-built_in\">this</span>.nextEntry = nextEntry;\n        }\n\n        <span class=\"hljs-keyword\">public</span> I <span class=\"hljs-title function_\">getKey</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> key;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setKey</span><span class=\"hljs-params\">(I key)</span> {\n            <span class=\"hljs-built_in\">this</span>.key = key;\n        }\n\n        <span class=\"hljs-keyword\">public</span> J <span class=\"hljs-title function_\">getValue</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> value;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setValue</span><span class=\"hljs-params\">(J value)</span> {\n            <span class=\"hljs-built_in\">this</span>.value = value;\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-keyword\">final</span> LRUCache&lt;String, Integer&gt; cache = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LRUCache</span>&lt;&gt;(<span class=\"hljs-number\">2</span>);\n        cache.put(<span class=\"hljs-string\">&quot;Key1&quot;</span>, <span class=\"hljs-number\">1</span>);\n        cache.put(<span class=\"hljs-string\">&quot;Key2&quot;</span>, <span class=\"hljs-number\">2</span>);\n        cache.put(<span class=\"hljs-string\">&quot;Key3&quot;</span>, <span class=\"hljs-number\">3</span>);\n        cache.put(<span class=\"hljs-string\">&quot;Key4&quot;</span>, <span class=\"hljs-number\">4</span>);\n        System.out.println(<span class=\"hljs-string\">&quot;getValue(Key1): &quot;</span> + cache.get(<span class=\"hljs-string\">&quot;Key1&quot;</span>));\n        System.out.println(<span class=\"hljs-string\">&quot;getValue(Key2): &quot;</span> + cache.get(<span class=\"hljs-string\">&quot;Key2&quot;</span>));\n        System.out.println(<span class=\"hljs-string\">&quot;getValue(Key3): &quot;</span> + cache.get(<span class=\"hljs-string\">&quot;Key3&quot;</span>));\n        System.out.println(<span class=\"hljs-string\">&quot;getValue(Key4): &quot;</span> + cache.get(<span class=\"hljs-string\">&quot;Key4&quot;</span>));\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Aditya Kumar",
      "email": "aditya1944@live.com",
      "commits": 1
    },
    {
      "name": "Nitin Sharma",
      "email": "32377892+foo290@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "januslinhc",
      "email": "januslinhc@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Vardhaman",
      "email": "83634399+cyai@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Andrew Grangaard",
      "email": "granny-github@ofb.net",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Tapajyoti Bose",
      "email": "44058757+ruppysuppy@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    },
    {
      "name": "Fahim Faisaal",
      "email": "57553028+fahimfaisaal@users.noreply.github.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}