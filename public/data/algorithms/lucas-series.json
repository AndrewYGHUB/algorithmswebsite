{
  "slug": "lucas-series",
  "name": "Lucas Series",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/lucas_series.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/lucas_series.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nhttps://en.wikipedia.org/wiki/Lucas_number\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">recursive_lucas_number</span>(<span class=\"hljs-params\">n_th_number: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns the nth lucas number\n    &gt;&gt;&gt; recursive_lucas_number(1)\n    1\n    &gt;&gt;&gt; recursive_lucas_number(20)\n    15127\n    &gt;&gt;&gt; recursive_lucas_number(0)\n    2\n    &gt;&gt;&gt; recursive_lucas_number(25)\n    167761\n    &gt;&gt;&gt; recursive_lucas_number(-1.5)\n    Traceback (most recent call last):\n        ...\n    TypeError: recursive_lucas_number accepts only integer arguments.\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(n_th_number, <span class=\"hljs-built_in\">int</span>):\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;recursive_lucas_number accepts only integer arguments.&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> n_th_number == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">if</span> n_th_number == <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> recursive_lucas_number(n_th_number - <span class=\"hljs-number\">1</span>) + recursive_lucas_number(\n        n_th_number - <span class=\"hljs-number\">2</span>\n    )\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dynamic_lucas_number</span>(<span class=\"hljs-params\">n_th_number: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns the nth lucas number\n    &gt;&gt;&gt; dynamic_lucas_number(1)\n    1\n    &gt;&gt;&gt; dynamic_lucas_number(20)\n    15127\n    &gt;&gt;&gt; dynamic_lucas_number(0)\n    2\n    &gt;&gt;&gt; dynamic_lucas_number(25)\n    167761\n    &gt;&gt;&gt; dynamic_lucas_number(-1.5)\n    Traceback (most recent call last):\n        ...\n    TypeError: dynamic_lucas_number accepts only integer arguments.\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(n_th_number, <span class=\"hljs-built_in\">int</span>):\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;dynamic_lucas_number accepts only integer arguments.&quot;</span>)\n    a, b = <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n_th_number):\n        a, b = b, a + b\n    <span class=\"hljs-keyword\">return</span> a\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\n\n    testmod()\n    n = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter the number of terms in lucas series:\\n&quot;</span>).strip())\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Using recursive function to calculate lucas series:&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot; &quot;</span>.join(<span class=\"hljs-built_in\">str</span>(recursive_lucas_number(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n)))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nUsing dynamic function to calculate lucas series:&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot; &quot;</span>.join(<span class=\"hljs-built_in\">str</span>(dynamic_lucas_number(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n)))\n"
    },
    "javascript": {
      "dir": "Maths/LucasSeries.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/LucasSeries.js",
      "code": "<span class=\"hljs-comment\">/*\n  Program to get the Nth Lucas Number\n  Article on Lucas Number: https://en.wikipedia.org/wiki/Lucas_number\n  Examples:\n    &gt; loopLucas(1)\n    1\n    &gt; loopLucas(20)\n    15127\n    &gt; loopLucas(100)\n    792070839848372100000\n*/</span>\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} index The position of the number you want to get from the Lucas Series\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">lucas</span> (index) {\n  <span class=\"hljs-comment\">// index can&#x27;t be negative</span>\n  <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;Index cannot be Negative&#x27;</span>)\n\n  <span class=\"hljs-comment\">// index can&#x27;t be a decimal</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(index) !== index) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;Index cannot be a Decimal&#x27;</span>)\n\n  <span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">2</span>\n  <span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; index; i++) {\n    <span class=\"hljs-keyword\">const</span> temp = a + b\n    a = b\n    b = temp\n  }\n  <span class=\"hljs-keyword\">return</span> a\n}\n\n<span class=\"hljs-keyword\">export</span> { lucas }\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/maths/LucasSeries.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/maths/LucasSeries.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\n\n<span class=\"hljs-comment\">/**\n * https://en.wikipedia.org/wiki/Lucas_number\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LucasSeries</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">lucasSeries</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span> == <span class=\"hljs-number\">2</span> &amp;&amp; lucasSeriesIteration(<span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">lucasSeries</span><span class=\"hljs-params\">(<span class=\"hljs-number\">2</span>)</span> == <span class=\"hljs-number\">1</span> &amp;&amp; lucasSeriesIteration(<span class=\"hljs-number\">2</span>) == <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">lucasSeries</span><span class=\"hljs-params\">(<span class=\"hljs-number\">3</span>)</span> == <span class=\"hljs-number\">3</span> &amp;&amp; lucasSeriesIteration(<span class=\"hljs-number\">3</span>) == <span class=\"hljs-number\">3</span>;\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">lucasSeries</span><span class=\"hljs-params\">(<span class=\"hljs-number\">4</span>)</span> == <span class=\"hljs-number\">4</span> &amp;&amp; lucasSeriesIteration(<span class=\"hljs-number\">4</span>) == <span class=\"hljs-number\">4</span>;\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">lucasSeries</span><span class=\"hljs-params\">(<span class=\"hljs-number\">5</span>)</span> == <span class=\"hljs-number\">7</span> &amp;&amp; lucasSeriesIteration(<span class=\"hljs-number\">5</span>) == <span class=\"hljs-number\">7</span>;\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">lucasSeries</span><span class=\"hljs-params\">(<span class=\"hljs-number\">6</span>)</span> == <span class=\"hljs-number\">11</span> &amp;&amp; lucasSeriesIteration(<span class=\"hljs-number\">6</span>) == <span class=\"hljs-number\">11</span>;\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">lucasSeries</span><span class=\"hljs-params\">(<span class=\"hljs-number\">11</span>)</span> == <span class=\"hljs-number\">123</span> &amp;&amp; lucasSeriesIteration(<span class=\"hljs-number\">11</span>) == <span class=\"hljs-number\">123</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate nth number of lucas series(2, 1, 3, 4, 7, 11, 18, 29, 47, 76,\n     * 123, ....) using recursion\n     *\n     * <span class=\"hljs-doctag\">@param</span> n nth\n     * <span class=\"hljs-doctag\">@return</span> nth number of lucas series\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">lucasSeries</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> {\n        <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-number\">1</span> ? <span class=\"hljs-number\">2</span> : n == <span class=\"hljs-number\">2</span> ? <span class=\"hljs-number\">1</span> : lucasSeries(n - <span class=\"hljs-number\">1</span>) + lucasSeries(n - <span class=\"hljs-number\">2</span>);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate nth number of lucas series(2, 1, 3, 4, 7, 11, 18, 29, 47, 76,\n     * 123, ....) using iteration\n     *\n     * <span class=\"hljs-doctag\">@param</span> n nth\n     * <span class=\"hljs-doctag\">@return</span> nth number of lucas series\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">lucasSeriesIteration</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">previous</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">current</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; n; i++) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">next</span> <span class=\"hljs-operator\">=</span> previous + current;\n            previous = current;\n            current = next;\n        }\n        <span class=\"hljs-keyword\">return</span> previous;\n    }\n}\n"
    },
    "ruby": {
      "dir": "maths/lucas_series.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/maths/lucas_series.rb",
      "code": "<span class=\"hljs-comment\"># A ruby program for Lucas series</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># The Lucas numbers, commonly denoted L(n) form a sequence,</span>\n<span class=\"hljs-comment\"># called the Lucas series, such that each number is the sum</span>\n<span class=\"hljs-comment\"># of the two preceding ones, starting from 2 and 1. That is,</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># L(0) = 2, L(1) = 1</span>\n<span class=\"hljs-comment\"># L(n) = L(n - 1) + L(n - 2), for n &gt; 1.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Given n, calculate L(n).</span>\n<span class=\"hljs-comment\"># Example: 2 1 3 4 7 11 18...</span>\n<span class=\"hljs-comment\"># Resource: https://en.wikipedia.org/wiki/Lucas_number</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">lucas</span>(<span class=\"hljs-params\">number</span>)\n  golden_ratio = (<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">5</span>**<span class=\"hljs-number\">0.5</span>) / <span class=\"hljs-number\">2</span>\n  (golden_ratio**number).round.to_i\n<span class=\"hljs-keyword\">rescue</span> StandardError\n  <span class=\"hljs-string\">&#x27;Error: Provide number only!&#x27;</span>\n<span class=\"hljs-keyword\">end</span>\n\nputs lucas(<span class=\"hljs-number\">4</span>)\n<span class=\"hljs-comment\"># 7</span>\n\nputs lucas(<span class=\"hljs-number\">3</span>)\n<span class=\"hljs-comment\"># 4</span>\n\nputs lucas(<span class=\"hljs-string\">&#x27;3&#x27;</span>)\n<span class=\"hljs-comment\"># Error: Provide number only!</span>\n\nputs lucas(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-comment\"># 3</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Sahil Afrid Farookhi",
      "email": "msafarookhi@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Kushagra Bansal",
      "email": "kushagrabansalajmer@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "victoni",
      "email": "32034171+victoni@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 2
    },
    {
      "name": "Dumby",
      "email": "71999854+SpiderMath@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}