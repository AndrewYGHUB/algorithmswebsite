{
  "slug": "luhn",
  "name": "Luhn",
  "categories": [
    "hashing"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "hashes/luhn.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/hashes/luhn.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot; Luhn Algorithm &quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_luhn</span>(<span class=\"hljs-params\">string: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Perform Luhn validation on an input string\n    Algorithm:\n    * Double every other digit starting from 2nd last digit.\n    * Subtract 9 if number is greater than 9.\n    * Sum the numbers\n    *\n    &gt;&gt;&gt; test_cases = (79927398710, 79927398711, 79927398712, 79927398713,\n    ...     79927398714, 79927398715, 79927398716, 79927398717, 79927398718,\n    ...     79927398719)\n    &gt;&gt;&gt; [is_luhn(str(test_case)) for test_case in test_cases]\n    [False, False, False, True, False, False, False, False, False, False]\n    &quot;&quot;&quot;</span>\n    check_digit: <span class=\"hljs-built_in\">int</span>\n    _vector: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>] = <span class=\"hljs-built_in\">list</span>(string)\n    __vector, check_digit = _vector[:-<span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">int</span>(_vector[-<span class=\"hljs-number\">1</span>])\n    vector: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>] = [<span class=\"hljs-built_in\">int</span>(digit) <span class=\"hljs-keyword\">for</span> digit <span class=\"hljs-keyword\">in</span> __vector]\n\n    vector.reverse()\n    <span class=\"hljs-keyword\">for</span> i, digit <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(vector):\n        <span class=\"hljs-keyword\">if</span> i &amp; <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">0</span>:\n            doubled: <span class=\"hljs-built_in\">int</span> = digit * <span class=\"hljs-number\">2</span>\n            <span class=\"hljs-keyword\">if</span> doubled &gt; <span class=\"hljs-number\">9</span>:\n                doubled -= <span class=\"hljs-number\">9</span>\n            check_digit += doubled\n        <span class=\"hljs-keyword\">else</span>:\n            check_digit += digit\n\n    <span class=\"hljs-keyword\">return</span> check_digit % <span class=\"hljs-number\">10</span> == <span class=\"hljs-number\">0</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n    <span class=\"hljs-keyword\">assert</span> is_luhn(<span class=\"hljs-string\">&quot;79927398713&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> is_luhn(<span class=\"hljs-string\">&quot;79927398714&quot;</span>)\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/others/Luhn.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/others/Luhn.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.others;\n\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n<span class=\"hljs-keyword\">import</span> java.util.Objects;\n\n<span class=\"hljs-comment\">/**\n * The Luhn algorithm or Luhn formula, also known as the &quot;modulus 10&quot; or &quot;mod\n * 10&quot; algorithm, named after its creator, IBM scientist Hans Peter Luhn, is a\n * simple checksum formula used to validate a variety of identification numbers.\n *\n * &lt;p&gt;\n * The algorithm is in the public domain and is in wide use today. It is\n * specified in ISO/IEC 7812-1. It is not intended to be a cryptographically\n * secure hash function; it was designed to protect against accidental errors,\n * not malicious attacks. Most credit cards and many government identification\n * numbers use the algorithm as a simple method of distinguishing valid numbers\n * from mistyped or otherwise incorrect numbers.&lt;/p&gt;\n *\n * &lt;p&gt;\n * The Luhn algorithm will detect any single-digit error, as well as almost all\n * transpositions of adjacent digits. It will not, however, detect transposition\n * of the two-digit sequence 09 to 90 (or vice versa). It will detect most of\n * the possible twin errors (it will not detect 22 ↔ 55, 33 ↔ 66 or 44 ↔\n * 77).&lt;/p&gt;\n *\n * &lt;p&gt;\n * The check digit is computed as follows:&lt;/p&gt;\n * &lt;ol&gt;\n * &lt;li&gt;Take the original number and starting from the rightmost digit moving\n * left, double the value of every second digit (including the rightmost\n * digit).&lt;/li&gt;\n * &lt;li&gt;Replace the resulting value at each position with the sum of the digits\n * of this position&#x27;s value or just subtract 9 from all numbers more or equal\n * then 10.&lt;/li&gt;\n * &lt;li&gt;Sum up the resulting values from all positions (s).&lt;/li&gt;\n * &lt;li&gt;The calculated check digit is equal to {<span class=\"hljs-doctag\">@code</span> 10 - s % 10}.&lt;/li&gt;\n * &lt;/ol&gt;\n *\n * <span class=\"hljs-doctag\">@see</span> &lt;a href=&quot;https://en.wikipedia.org/wiki/Luhn_algorithm&quot;&gt;Wiki&lt;/a&gt;\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Luhn</span> {\n\n    <span class=\"hljs-comment\">/**\n     * Check input digits array by Luhn algorithm. Initial array doesn&#x27;t change\n     * while processing.\n     *\n     * <span class=\"hljs-doctag\">@param</span> digits array of digits from 0 to 9\n     * <span class=\"hljs-doctag\">@return</span> true if check was successful, false otherwise\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">luhnCheck</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] digits)</span> {\n        <span class=\"hljs-type\">int</span>[] numbers = Arrays.copyOf(digits, digits.length);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> numbers.length - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n            <span class=\"hljs-keyword\">if</span> (i % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> numbers[i] * <span class=\"hljs-number\">2</span>;\n                <span class=\"hljs-keyword\">if</span> (temp &gt; <span class=\"hljs-number\">9</span>) {\n                    temp = temp - <span class=\"hljs-number\">9</span>;\n                }\n                numbers[i] = temp;\n            }\n            sum += numbers[i];\n        }\n\n        <span class=\"hljs-keyword\">return</span> sum % <span class=\"hljs-number\">10</span> == <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        System.out.println(<span class=\"hljs-string\">&quot;Luhn algorithm usage examples:&quot;</span>);\n        <span class=\"hljs-type\">int</span>[] validInput = {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>};\n        <span class=\"hljs-type\">int</span>[] invalidInput = {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>}; <span class=\"hljs-comment\">//typo in last symbol</span>\n        checkAndPrint(validInput);\n        checkAndPrint(invalidInput);\n\n        System.out.println(<span class=\"hljs-string\">&quot;\\nBusiness examples:&quot;</span>);\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">validCardNumber</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;5265 9251 6151 1412&quot;</span>;\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">invalidCardNumber</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;4929 3231 3088 1896&quot;</span>;\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">illegalCardNumber</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;4F15 BC06 3A88 76D5&quot;</span>;\n        businessExample(validCardNumber);\n        businessExample(invalidCardNumber);\n        businessExample(illegalCardNumber);\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">checkAndPrint</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] input)</span> {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">validationResult</span> <span class=\"hljs-operator\">=</span> Luhn.luhnCheck(input)\n                ? <span class=\"hljs-string\">&quot;valid&quot;</span>\n                : <span class=\"hljs-string\">&quot;not valid&quot;</span>;\n        System.out.println(<span class=\"hljs-string\">&quot;Input &quot;</span> + Arrays.toString(input) + <span class=\"hljs-string\">&quot; is &quot;</span> + validationResult);\n    }\n\n\n    <span class=\"hljs-comment\">/*\n        ========================\n         Business usage example\n        ========================\n     */</span>\n    <span class=\"hljs-comment\">/**\n     * Object representation of credit card.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">record</span> <span class=\"hljs-title class_\">CreditCard</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] digits)</span> {\n\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">DIGITS_COUNT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">16</span>;\n\n        <span class=\"hljs-comment\">/**\n         * <span class=\"hljs-doctag\">@param</span> cardNumber string representation of credit card number - 16\n         * digits. Can have spaces for digits separation\n         * <span class=\"hljs-doctag\">@return</span> credit card object\n         * <span class=\"hljs-doctag\">@throws</span> IllegalArgumentException if input string is not 16 digits or\n         * if Luhn check was failed\n         */</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> CreditCard <span class=\"hljs-title function_\">fromString</span><span class=\"hljs-params\">(String cardNumber)</span> {\n            Objects.requireNonNull(cardNumber);\n            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">trimmedCardNumber</span> <span class=\"hljs-operator\">=</span> cardNumber.replaceAll(<span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>);\n            <span class=\"hljs-keyword\">if</span> (trimmedCardNumber.length() != DIGITS_COUNT || !trimmedCardNumber.matches(<span class=\"hljs-string\">&quot;\\\\d+&quot;</span>)) {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;{&quot;</span> + cardNumber + <span class=\"hljs-string\">&quot;} - is not a card number&quot;</span>);\n            }\n\n            <span class=\"hljs-type\">int</span>[] cardNumbers = toIntArray(trimmedCardNumber);\n            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">isValid</span> <span class=\"hljs-operator\">=</span> luhnCheck(cardNumbers);\n            <span class=\"hljs-keyword\">if</span> (!isValid) {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Credit card number {&quot;</span> + cardNumber + <span class=\"hljs-string\">&quot;} - have a typo&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CreditCard</span>(cardNumbers);\n        }\n\n        <span class=\"hljs-comment\">/**\n         * <span class=\"hljs-doctag\">@return</span> string representation separated by space every 4 digits.\n         * Example: &quot;5265 9251 6151 1412&quot;\n         */</span>\n        <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">number</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; DIGITS_COUNT; i++) {\n                <span class=\"hljs-keyword\">if</span> (i % <span class=\"hljs-number\">4</span> == <span class=\"hljs-number\">0</span> &amp;&amp; i != <span class=\"hljs-number\">0</span>) {\n                    result.append(<span class=\"hljs-string\">&quot; &quot;</span>);\n                }\n                result.append(digits[i]);\n            }\n            <span class=\"hljs-keyword\">return</span> result.toString();\n        }\n\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> String.format(<span class=\"hljs-string\">&quot;%s {%s}&quot;</span>, CreditCard.class.getSimpleName(), number());\n        }\n\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] toIntArray(String string) {\n            <span class=\"hljs-keyword\">return</span> string.chars()\n                    .map(i -&gt; Character.digit(i, <span class=\"hljs-number\">10</span>))\n                    .toArray();\n        }\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">businessExample</span><span class=\"hljs-params\">(String cardNumber)</span> {\n        <span class=\"hljs-keyword\">try</span> {\n            System.out.println(<span class=\"hljs-string\">&quot;Trying to create CreditCard object from valid card number: &quot;</span> + cardNumber);\n            <span class=\"hljs-type\">CreditCard</span> <span class=\"hljs-variable\">creditCard</span> <span class=\"hljs-operator\">=</span> CreditCard.fromString(cardNumber);\n            System.out.println(<span class=\"hljs-string\">&quot;And business object is successfully created: &quot;</span> + creditCard + <span class=\"hljs-string\">&quot;\\n&quot;</span>);\n        } <span class=\"hljs-keyword\">catch</span> (IllegalArgumentException e) {\n            System.out.println(<span class=\"hljs-string\">&quot;And fail with exception message: &quot;</span> + e.getMessage() + <span class=\"hljs-string\">&quot;\\n&quot;</span>);\n        }\n    }\n}\n"
    },
    "go": {
      "dir": "checksum/luhn.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/checksum/luhn.go",
      "code": "<span class=\"hljs-comment\">// lunh.go</span>\n<span class=\"hljs-comment\">// description: Luhn algorithm</span>\n<span class=\"hljs-comment\">// details: is a simple checksum formula used to validate a variety of identification numbers, such as credit card numbers, IMEI numbers, etc [Lunh](https://en.wikipedia.org/wiki/Luhn_algorithm)</span>\n<span class=\"hljs-comment\">// author(s) [red_byte](https://github.com/i-redbyte)</span>\n<span class=\"hljs-comment\">// see lunh_test.go</span>\n\n<span class=\"hljs-comment\">// Package checksum describes algorithms for finding various checksums</span>\n<span class=\"hljs-keyword\">package</span> checksum\n\n<span class=\"hljs-comment\">// Luhn validates the provided data using the Luhn algorithm.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Luhn</span><span class=\"hljs-params\">(s []<span class=\"hljs-type\">byte</span>)</span></span> <span class=\"hljs-type\">bool</span> {\n\tn := <span class=\"hljs-built_in\">len</span>(s)\n\tnumber := <span class=\"hljs-number\">0</span>\n\tresult := <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ {\n\t\tnumber = <span class=\"hljs-type\">int</span>(s[i]) - <span class=\"hljs-string\">&#x27;0&#x27;</span>\n\t\t<span class=\"hljs-keyword\">if</span> i%<span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span> {\n\t\t\tresult += number\n\t\t\t<span class=\"hljs-keyword\">continue</span>\n\t\t}\n\t\tnumber *= <span class=\"hljs-number\">2</span>\n\t\t<span class=\"hljs-keyword\">if</span> number &gt; <span class=\"hljs-number\">9</span> {\n\t\t\tnumber -= <span class=\"hljs-number\">9</span>\n\t\t}\n\t\tresult += number\n\t}\n\t<span class=\"hljs-keyword\">return</span> result%<span class=\"hljs-number\">10</span> == <span class=\"hljs-number\">0</span>\n}\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Other/Luhn.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/Algorithms/Other/Luhn.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Other</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Luhn algorithm is a simple</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     checksum formula used to validate</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     a variety of identification numbers,</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     such as credit card numbers.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     More information on the link:</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     https://en.wikipedia.org/wiki/Luhn_algorithm.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Luhn</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Checking the validity of a sequence of numbers.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;number&quot;&gt;</span>The number that will be checked for validity.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     True: Number is valid.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     False: Number isn`t valid.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">Validate</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> number</span>)</span> =&gt; GetSum(number) % <span class=\"hljs-number\">10</span> == <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     This algorithm only finds one number.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     In place of the unknown digit, put &quot;x&quot;.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;number&quot;&gt;</span>The number in which to find the missing digit.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Missing digit.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">GetLostNum</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> number</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> lostIndex = number.Length - <span class=\"hljs-number\">1</span> - number.LastIndexOf(<span class=\"hljs-string\">&quot;x&quot;</span>, StringComparison.CurrentCultureIgnoreCase);\n            <span class=\"hljs-keyword\">var</span> lostNum = GetSum(number.Replace(<span class=\"hljs-string\">&quot;x&quot;</span>, <span class=\"hljs-string\">&quot;0&quot;</span>, StringComparison.CurrentCultureIgnoreCase)) * <span class=\"hljs-number\">9</span> % <span class=\"hljs-number\">10</span>;\n\n            <span class=\"hljs-comment\">// Case 1: If the index of the lost digit is even.</span>\n            <span class=\"hljs-keyword\">if</span> (lostIndex % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> lostNum;\n            }\n\n            <span class=\"hljs-keyword\">var</span> tempLostNum = lostNum / <span class=\"hljs-number\">2</span>;\n\n            <span class=\"hljs-comment\">// Case 2: if the index of the lost digit isn`t even and that number &lt;= 4.</span>\n            <span class=\"hljs-comment\">// Case 3: if the index of the lost digit isn`t even and that number &gt; 4.</span>\n            <span class=\"hljs-keyword\">return</span> Validate(number.Replace(<span class=\"hljs-string\">&quot;x&quot;</span>, tempLostNum.ToString())) ? tempLostNum : (lostNum + <span class=\"hljs-number\">9</span>) / <span class=\"hljs-number\">2</span>;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Computes the sum found by the algorithm.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;number&quot;&gt;</span>The number for which the sum will be found.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Sum.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">GetSum</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> number</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> sum = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; number.Length; i++)\n            {\n                <span class=\"hljs-keyword\">var</span> d = number[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;\n                d = (i + number.Length) % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>\n                    ? <span class=\"hljs-number\">2</span> * d\n                    : d;\n                <span class=\"hljs-keyword\">if</span> (d &gt; <span class=\"hljs-number\">9</span>)\n                {\n                    d -= <span class=\"hljs-number\">9</span>;\n                }\n\n                sum += d;\n            }\n\n            <span class=\"hljs-keyword\">return</span> sum;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "QuantumNovice",
      "email": "43876848+QuantumNovice@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "NikitaYermak",
      "email": "50529884+NikitaYermak@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ilya Sokolov",
      "email": "developer.sokolov@gmail.com",
      "commits": 1
    },
    {
      "name": "Artem Boiarshinov",
      "email": "54187376+Boiarshinov@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}