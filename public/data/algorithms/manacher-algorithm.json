{
  "slug": "manacher-algorithm",
  "name": "Manacher Algorithm",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "strings/manacher_algorithm.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/strings/manacher_algorithm.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of [Manacher&#x27;s\n * Algorithm](https://en.wikipedia.org/wiki/Longest_palindromic_substring)\n * @details\n * Manacher&#x27;s Algorithm is used to find the longest palindromic substring within\n * a string in O(n) time. It exploits the property of a palindrome that its\n * first half is symmetric to the last half, and thus if the first half is a\n * palindrome, then last half is also a palindrome.\n * @author [Riti Kumari](https://github.com/riti2409)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector STL</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _MSC_VER</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span>  <span class=\"hljs-comment\">/// for string (required for MS Visual C++)</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span>  <span class=\"hljs-comment\">/// for string</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace strings\n * @brief Algorithms with strings\n */</span>\n<span class=\"hljs-keyword\">namespace</span> strings {\n<span class=\"hljs-comment\">/**\n * @namespace manacher\n * @brief Functions for [Manacher&#x27;s\n * Algorithm](https://en.wikipedia.org/wiki/Longest_palindromic_substring)\n * implementation\n */</span>\n<span class=\"hljs-keyword\">namespace</span> manacher {\n<span class=\"hljs-comment\">/**\n * @brief A function that implements Manacher&#x27;s algorithm\n * @param prototype is the string where algorithm finds a palindromic substring.\n * This string can contain any character except `@` `#` `&amp;`\n * @returns the largest palindromic substring\n */</span>\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">manacher</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::string &amp;prototype)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (prototype.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-comment\">// stuffing characters between the input string to handle cases with</span>\n        <span class=\"hljs-comment\">// even length palindrome</span>\n        std::string stuffed_string = <span class=\"hljs-string\">&quot;&quot;</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> str : prototype) {\n            stuffed_string += str;\n            stuffed_string += <span class=\"hljs-string\">&quot;#&quot;</span>;\n        }\n        stuffed_string = <span class=\"hljs-string\">&quot;@#&quot;</span> + stuffed_string + <span class=\"hljs-string\">&quot;&amp;&quot;</span>;\n\n        <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">palindrome_max_half_length</span><span class=\"hljs-params\">(\n            stuffed_string.size(),\n            <span class=\"hljs-number\">0</span>)</span></span>;  <span class=\"hljs-comment\">// this array will consist of largest possible half length of</span>\n                 <span class=\"hljs-comment\">// palindrome centered at index (say i with respect to the</span>\n                 <span class=\"hljs-comment\">// stuffed string). This value will be lower bound of half</span>\n                 <span class=\"hljs-comment\">// length since single character is a palindrome in itself.</span>\n\n        <span class=\"hljs-type\">uint64_t</span> bigger_center =\n            <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// this is the index of the center of palindromic</span>\n                <span class=\"hljs-comment\">// substring which would be considered as the larger</span>\n                <span class=\"hljs-comment\">// palindrome, having symmetric halves</span>\n\n        <span class=\"hljs-type\">uint64_t</span> right = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// this is the maximum length of the palindrome</span>\n                             <span class=\"hljs-comment\">// from &#x27;bigger_center&#x27; to the rightmost end</span>\n\n        <span class=\"hljs-comment\">// i is considered as center lying within one half of the palindrone</span>\n        <span class=\"hljs-comment\">// which is centered at &#x27;bigger_center&#x27;</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">1</span>; i &lt; stuffed_string.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; i++) {\n            <span class=\"hljs-keyword\">if</span> (i &lt; right) {  <span class=\"hljs-comment\">// when i is before right end, considering</span>\n                              <span class=\"hljs-comment\">// &#x27;bigger_center&#x27; as center of palindrome</span>\n                <span class=\"hljs-type\">uint64_t</span> opposite_to_i =\n                    <span class=\"hljs-number\">2</span> * bigger_center -\n                    i;  <span class=\"hljs-comment\">// this is the opposite end of string, if</span>\n                        <span class=\"hljs-comment\">// centered at center, and having one end as i</span>\n\n                <span class=\"hljs-comment\">// finding the minimum possible half length among</span>\n                <span class=\"hljs-comment\">// the palindrome on having center at opposite end,</span>\n                <span class=\"hljs-comment\">// and the string between i and right end,</span>\n                <span class=\"hljs-comment\">// considering &#x27;bigger_center&#x27; as center of palindrome</span>\n                palindrome_max_half_length[i] = std::<span class=\"hljs-built_in\">min</span>(\n                    palindrome_max_half_length[opposite_to_i], right - i);\n            }\n\n            <span class=\"hljs-comment\">// expanding the palindrome across the maximum stored length in the</span>\n            <span class=\"hljs-comment\">// array, centered at i</span>\n            <span class=\"hljs-keyword\">while</span> (stuffed_string[i + (palindrome_max_half_length[i] + <span class=\"hljs-number\">1</span>)] ==\n                   stuffed_string[i - (palindrome_max_half_length[i] + <span class=\"hljs-number\">1</span>)]) {\n                palindrome_max_half_length[i]++;\n            }\n\n            <span class=\"hljs-comment\">// if palindrome centered at i exceeds the rightmost end of</span>\n            <span class=\"hljs-comment\">// palindrome centered at &#x27;bigger_center&#x27;, then i will be made the</span>\n            <span class=\"hljs-comment\">// &#x27;bigger_center&#x27; and right value will also be updated with respect</span>\n            <span class=\"hljs-comment\">// to center i</span>\n            <span class=\"hljs-keyword\">if</span> (i + palindrome_max_half_length[i] &gt; right) {\n                bigger_center = i;\n                right = i + palindrome_max_half_length[i];\n            }\n        }\n\n        <span class=\"hljs-comment\">// now extracting the first largest palindrome</span>\n        <span class=\"hljs-type\">uint64_t</span> half_length = <span class=\"hljs-number\">0</span>;   <span class=\"hljs-comment\">// half length of the largest palindrome</span>\n        <span class=\"hljs-type\">uint64_t</span> center_index = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// index of center of the largest palindrome</span>\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">1</span>; i &lt; stuffed_string.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; i++) {\n            <span class=\"hljs-keyword\">if</span> (palindrome_max_half_length[i] &gt; half_length) {\n                half_length = palindrome_max_half_length[i];\n                center_index = i;\n            }\n        }\n\n        std::string palindromic_substring =\n            <span class=\"hljs-string\">&quot;&quot;</span>;  <span class=\"hljs-comment\">// contains the resulting largest palindrome</span>\n\n        <span class=\"hljs-keyword\">if</span> (half_length &gt; <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-comment\">// extra information: when &#x27;#&#x27; is the center, then palindromic</span>\n            <span class=\"hljs-comment\">// substring will have even length, else palindromic substring will</span>\n            <span class=\"hljs-comment\">// have odd length</span>\n\n            <span class=\"hljs-type\">uint64_t</span> start =\n                center_index - half_length +\n                <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// index of first character of palindromic substring</span>\n            <span class=\"hljs-type\">uint64_t</span> end =\n                center_index + half_length -\n                <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// index of last character of palindromic substring</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> index = start; index &lt;= end; index += <span class=\"hljs-number\">2</span>) {\n                palindromic_substring += stuffed_string[index];\n            }\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// if length = 0, then there does not exist any palindrome of length</span>\n            <span class=\"hljs-comment\">// &gt; 1 so we can assign any character of length 1 from string as the</span>\n            <span class=\"hljs-comment\">// palindromic substring</span>\n            palindromic_substring = prototype[<span class=\"hljs-number\">0</span>];\n        }\n        <span class=\"hljs-keyword\">return</span> palindromic_substring;\n\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// handling case when string is empty</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n    }\n}\n\n}  <span class=\"hljs-comment\">// namespace manacher</span>\n}  <span class=\"hljs-comment\">// namespace strings</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">assert</span>(strings::manacher::<span class=\"hljs-built_in\">manacher</span>(<span class=\"hljs-string\">&quot;&quot;</span>) == <span class=\"hljs-string\">&quot;&quot;</span>);\n    <span class=\"hljs-built_in\">assert</span>(strings::manacher::<span class=\"hljs-built_in\">manacher</span>(<span class=\"hljs-string\">&quot;abababc&quot;</span>) == <span class=\"hljs-string\">&quot;ababa&quot;</span>);\n    <span class=\"hljs-built_in\">assert</span>(strings::manacher::<span class=\"hljs-built_in\">manacher</span>(<span class=\"hljs-string\">&quot;cbaabd&quot;</span>) == <span class=\"hljs-string\">&quot;baab&quot;</span>);\n    <span class=\"hljs-built_in\">assert</span>(strings::manacher::<span class=\"hljs-built_in\">manacher</span>(<span class=\"hljs-string\">&quot;DedzefDeD&quot;</span>) == <span class=\"hljs-string\">&quot;DeD&quot;</span>);\n    <span class=\"hljs-built_in\">assert</span>(strings::manacher::<span class=\"hljs-built_in\">manacher</span>(<span class=\"hljs-string\">&quot;XZYYXXYZXX&quot;</span>) == <span class=\"hljs-string\">&quot;YXXY&quot;</span>);\n    <span class=\"hljs-built_in\">assert</span>(strings::manacher::<span class=\"hljs-built_in\">manacher</span>(<span class=\"hljs-string\">&quot;1sm222m10abc&quot;</span>) == <span class=\"hljs-string\">&quot;m222m&quot;</span>);\n    <span class=\"hljs-built_in\">assert</span>(strings::manacher::<span class=\"hljs-built_in\">manacher</span>(<span class=\"hljs-string\">&quot;798989591&quot;</span>) == <span class=\"hljs-string\">&quot;98989&quot;</span>);\n    <span class=\"hljs-built_in\">assert</span>(strings::manacher::<span class=\"hljs-built_in\">manacher</span>(<span class=\"hljs-string\">&quot;xacdedcax&quot;</span>) == <span class=\"hljs-string\">&quot;xacdedcax&quot;</span>);\n    <span class=\"hljs-built_in\">assert</span>(strings::manacher::<span class=\"hljs-built_in\">manacher</span>(<span class=\"hljs-string\">&quot;xaccax&quot;</span>) == <span class=\"hljs-string\">&quot;xaccax&quot;</span>);\n    <span class=\"hljs-built_in\">assert</span>(strings::manacher::<span class=\"hljs-built_in\">manacher</span>(<span class=\"hljs-string\">&quot;a&quot;</span>) == <span class=\"hljs-string\">&quot;a&quot;</span>);\n    <span class=\"hljs-built_in\">assert</span>(strings::manacher::<span class=\"hljs-built_in\">manacher</span>(<span class=\"hljs-string\">&quot;xy&quot;</span>) == <span class=\"hljs-string\">&quot;x&quot;</span>);\n    <span class=\"hljs-built_in\">assert</span>(strings::manacher::<span class=\"hljs-built_in\">manacher</span>(<span class=\"hljs-string\">&quot;abced&quot;</span>) == <span class=\"hljs-string\">&quot;a&quot;</span>);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;All tests have passed!&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Riti Kumari",
      "email": "ritikumariupadhyay24@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}