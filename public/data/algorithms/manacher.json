{
  "slug": "manacher",
  "name": "Manacher",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings/manacher.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings/manacher.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">palindromic_string</span>(<span class=\"hljs-params\">input_string: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; palindromic_string(&#x27;abbbaba&#x27;)\r\n    &#x27;abbba&#x27;\r\n    &gt;&gt;&gt; palindromic_string(&#x27;ababa&#x27;)\r\n    &#x27;ababa&#x27;\r\n\r\n    Manacher’s algorithm which finds Longest palindromic Substring in linear time.\r\n\r\n    1. first this convert input_string(&quot;xyx&quot;) into new_string(&quot;x|y|x&quot;) where odd\r\n        positions are actual input characters.\r\n    2. for each character in new_string it find corresponding length and store the\r\n        length and l,r to store previously calculated info.(please look the explanation\r\n        for details)\r\n\r\n    3. return corresponding output_string by removing all &quot;|&quot;\r\n    &quot;&quot;&quot;</span>\r\n    max_length = <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-comment\"># if input_string is &quot;aba&quot; than new_input_string become &quot;a|b|a&quot;</span>\r\n    new_input_string = <span class=\"hljs-string\">&quot;&quot;</span>\r\n    output_string = <span class=\"hljs-string\">&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-comment\"># append each character + &quot;|&quot; in new_string for range(0, length-1)</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> input_string[: <span class=\"hljs-built_in\">len</span>(input_string) - <span class=\"hljs-number\">1</span>]:\r\n        new_input_string += i + <span class=\"hljs-string\">&quot;|&quot;</span>\r\n    <span class=\"hljs-comment\"># append last character</span>\r\n    new_input_string += input_string[-<span class=\"hljs-number\">1</span>]\r\n\r\n    <span class=\"hljs-comment\"># we will store the starting and ending of previous furthest ending palindromic</span>\r\n    <span class=\"hljs-comment\"># substring</span>\r\n    l, r = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-comment\"># length[i] shows the length of palindromic substring with center i</span>\r\n    length = [<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(new_input_string))]\r\n\r\n    <span class=\"hljs-comment\"># for each character in new_string find corresponding palindromic string</span>\r\n    start = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(new_input_string)):\r\n        k = <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> j &gt; r <span class=\"hljs-keyword\">else</span> <span class=\"hljs-built_in\">min</span>(length[l + r - j] // <span class=\"hljs-number\">2</span>, r - j + <span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-keyword\">while</span> (\r\n            j - k &gt;= <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-keyword\">and</span> j + k &lt; <span class=\"hljs-built_in\">len</span>(new_input_string)\r\n            <span class=\"hljs-keyword\">and</span> new_input_string[k + j] == new_input_string[j - k]\r\n        ):\r\n            k += <span class=\"hljs-number\">1</span>\r\n\r\n        length[j] = <span class=\"hljs-number\">2</span> * k - <span class=\"hljs-number\">1</span>\r\n\r\n        <span class=\"hljs-comment\"># does this string is ending after the previously explored end (that is r) ?</span>\r\n        <span class=\"hljs-comment\"># if yes the update the new r to the last index of this</span>\r\n        <span class=\"hljs-keyword\">if</span> j + k - <span class=\"hljs-number\">1</span> &gt; r:\r\n            l = j - k + <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># noqa: E741</span>\r\n            r = j + k - <span class=\"hljs-number\">1</span>\r\n\r\n        <span class=\"hljs-comment\"># update max_length and start position</span>\r\n        <span class=\"hljs-keyword\">if</span> max_length &lt; length[j]:\r\n            max_length = length[j]\r\n            start = j\r\n\r\n    <span class=\"hljs-comment\"># create that string</span>\r\n    s = new_input_string[start - max_length // <span class=\"hljs-number\">2</span> : start + max_length // <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>]\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> s:\r\n        <span class=\"hljs-keyword\">if</span> i != <span class=\"hljs-string\">&quot;|&quot;</span>:\r\n            output_string += i\r\n\r\n    <span class=\"hljs-keyword\">return</span> output_string\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\n...a0...a1...a2.....a3......a4...a5...a6....\r\n\r\nconsider the string for which we are calculating the longest palindromic substring is\r\nshown above where ... are some characters in between and right now we are calculating\r\nthe length of palindromic substring with center at a5 with following conditions :\r\ni) we have stored the length of palindromic substring which has center at a3 (starts at\r\n    l ends at r) and it is the furthest ending till now, and it has ending after a6\r\nii) a2 and a4 are equally distant from a3 so char(a2) == char(a4)\r\niii) a0 and a6 are equally distant from a3 so char(a0) == char(a6)\r\niv) a1 is corresponding equal character of a5 in palindrome with center a3 (remember\r\n    that in below derivation of a4==a6)\r\n\r\nnow for a5 we will calculate the length of palindromic substring with center as a5 but\r\ncan we use previously calculated information in some way?\r\nYes, look the above string we know that a5 is inside the palindrome with center a3 and\r\npreviously we have calculated that\r\na0==a2 (palindrome of center a1)\r\na2==a4 (palindrome of center a3)\r\na0==a6 (palindrome of center a3)\r\nso a4==a6\r\n\r\nso we can say that palindrome at center a5 is at least as long as palindrome at center\r\na1 but this only holds if a0 and a6 are inside the limits of palindrome centered at a3\r\nso finally ..\r\n\r\nlen_of_palindrome__at(a5) = min(len_of_palindrome_at(a1), r-a5)\r\nwhere a3 lies from l to r and we have to keep updating that\r\n\r\nand if the a5 lies outside of l,r boundary we calculate length of palindrome with\r\nbruteforce and update l,r.\r\n\r\nit gives the linear time complexity just like z-function\r\n&quot;&quot;&quot;</span>\r\n"
    },
    "f-sharp": {
      "dir": "Algorithms/Strings/Manacher.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms/Strings/Manacher.fs",
      "code": "﻿<span class=\"hljs-keyword\">namespace</span> Algorithms.Strings\n\n<span class=\"hljs-keyword\">module</span> Manacher <span class=\"hljs-operator\">=</span>\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">List</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-symbol\">&#x27;a</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">with</span>\n        <span class=\"hljs-keyword\">member</span> this.LengthInDouble <span class=\"hljs-operator\">=</span> (double) this.Length\n\n    <span class=\"hljs-keyword\">let</span> palindromicString (inputString<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>)<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span> <span class=\"hljs-operator\">=</span>\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> maxLength <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\n\n        <span class=\"hljs-comment\">// If input_string is &quot;aba&quot; than new_input_string become &quot;a|b|a&quot;</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> newInputString <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> outputString <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>\n\n        <span class=\"hljs-comment\">// Append each character + &quot;|&quot; in new_string for range(0, length-1)</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> inputString.[<span class=\"hljs-operator\">..</span>(inputString.Length <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">do</span>\n            newInputString <span class=\"hljs-operator\">&lt;-</span> newInputString <span class=\"hljs-operator\">+</span> string (i) <span class=\"hljs-operator\">+</span> <span class=\"hljs-string\">&quot;|&quot;</span>\n\n        <span class=\"hljs-built_in\">printfn</span> <span class=\"hljs-string\">&quot;%A&quot;</span> newInputString\n        <span class=\"hljs-comment\">// Append last character</span>\n        newInputString <span class=\"hljs-operator\">&lt;-</span>\n            newInputString\n            <span class=\"hljs-operator\">+</span> string inputString.[inputString.Length <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>]\n\n        <span class=\"hljs-comment\">// We will store the starting and ending of previous furthest ending palindromic</span>\n        <span class=\"hljs-comment\">// substring</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> l, r <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>\n\n        <span class=\"hljs-comment\">// length.[i] shows the length of palindromic substring with center i</span>\n        <span class=\"hljs-keyword\">let</span> length <span class=\"hljs-operator\">=</span>\n            [ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..</span> newInputString.Length <span class=\"hljs-operator\">-&gt;</span> <span class=\"hljs-number\">1</span> ]\n            <span class=\"hljs-operator\">|&gt;</span> Array.ofList\n\n\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> start <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\n\n        <span class=\"hljs-comment\">// For each character in new_string find corresponding palindromic string</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..</span> newInputString.Length <span class=\"hljs-keyword\">do</span>\n            <span class=\"hljs-comment\">// k = 1 if i &gt; r else min(length[l + r - i] // 2, r - i + 1)</span>\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> k <span class=\"hljs-operator\">=</span>\n                <span class=\"hljs-keyword\">if</span> i <span class=\"hljs-operator\">&gt;</span> r <span class=\"hljs-keyword\">then</span>\n                    <span class=\"hljs-number\">1</span>\n                <span class=\"hljs-keyword\">else</span>\n                    min ((int) (floor ([ l <span class=\"hljs-operator\">+</span> r <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> ].LengthInDouble <span class=\"hljs-operator\">/</span> <span class=\"hljs-number\">2.0</span>))) (r <span class=\"hljs-operator\">-</span> i <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>)\n\n            <span class=\"hljs-keyword\">while</span> i <span class=\"hljs-operator\">-</span> k <span class=\"hljs-operator\">&gt;=</span> <span class=\"hljs-number\">0</span>\n                  <span class=\"hljs-operator\">&amp;&amp;</span> i <span class=\"hljs-operator\">+</span> k <span class=\"hljs-operator\">&lt;</span> newInputString.Length\n                  <span class=\"hljs-operator\">&amp;&amp;</span> newInputString.[k <span class=\"hljs-operator\">+</span> i] <span class=\"hljs-operator\">=</span> newInputString.[i <span class=\"hljs-operator\">-</span> k] <span class=\"hljs-keyword\">do</span>\n                k <span class=\"hljs-operator\">&lt;-</span> k <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\n\n                length.[i] <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">*</span> k <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>\n\n                <span class=\"hljs-comment\">// Does this string end after the previously explored end (that is r) ?</span>\n                <span class=\"hljs-comment\">// if yes the update the new r to the last index of this</span>\n                <span class=\"hljs-keyword\">if</span> i <span class=\"hljs-operator\">+</span> k <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">&gt;</span> r <span class=\"hljs-keyword\">then</span>\n                    l <span class=\"hljs-operator\">&lt;-</span> i <span class=\"hljs-operator\">-</span> k <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// noqa: E741</span>\n                    r <span class=\"hljs-operator\">&lt;-</span> i <span class=\"hljs-operator\">+</span> k <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>\n\n                <span class=\"hljs-comment\">// update max_length and start position</span>\n                <span class=\"hljs-keyword\">if</span> maxLength <span class=\"hljs-operator\">&lt;</span> length.[i] <span class=\"hljs-keyword\">then</span>\n                    maxLength <span class=\"hljs-operator\">&lt;-</span> length.[i]\n                    start <span class=\"hljs-operator\">&lt;-</span> i\n\n        <span class=\"hljs-comment\">// create that string</span>\n        <span class=\"hljs-keyword\">let</span> s <span class=\"hljs-operator\">=</span>\n            newInputString.[int (floor (((double) start <span class=\"hljs-operator\">-</span> (double) maxLength <span class=\"hljs-operator\">/</span> <span class=\"hljs-number\">2.0</span>)))<span class=\"hljs-operator\">..</span>(int) (floor ((double) start <span class=\"hljs-operator\">+</span> (double) maxLength <span class=\"hljs-operator\">/</span> <span class=\"hljs-number\">2.0</span> <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1.0</span>))]\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> s <span class=\"hljs-keyword\">do</span>\n            <span class=\"hljs-keyword\">if</span> i <span class=\"hljs-operator\">&lt;&gt;</span> <span class=\"hljs-string\">&#x27;|&#x27;</span> <span class=\"hljs-keyword\">then</span>\n                outputString <span class=\"hljs-operator\">&lt;-</span> outputString <span class=\"hljs-operator\">+</span> (string) i\n\n\n        outputString\n"
    },
    "rust": {
      "dir": "src/string/manacher.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/string/manacher.rs",
      "code": "<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">manacher</span>(s: <span class=\"hljs-type\">String</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">String</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">l</span> = s.<span class=\"hljs-title function_ invoke__\">len</span>();\n    <span class=\"hljs-keyword\">if</span> l &lt;= <span class=\"hljs-number\">1</span> {\n        <span class=\"hljs-keyword\">return</span> s;\n    }\n\n    <span class=\"hljs-comment\">// MEMO: We need to detect odd palindrome as well,</span>\n    <span class=\"hljs-comment\">// therefore, inserting dummy string so that</span>\n    <span class=\"hljs-comment\">// we can find a pair with dummy center character.</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">chars</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">char</span>&gt; = Vec::<span class=\"hljs-title function_ invoke__\">with_capacity</span>(s.<span class=\"hljs-title function_ invoke__\">len</span>() * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-keyword\">in</span> s.<span class=\"hljs-title function_ invoke__\">chars</span>() {\n        chars.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-string\">&#x27;#&#x27;</span>);\n        chars.<span class=\"hljs-title function_ invoke__\">push</span>(c);\n    }\n    chars.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-string\">&#x27;#&#x27;</span>);\n\n    <span class=\"hljs-comment\">// List: storing the length of palindrome at each index of string</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">length_of_palindrome</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1usize</span>; chars.<span class=\"hljs-title function_ invoke__\">len</span>()];\n    <span class=\"hljs-comment\">// Integer: Current checking palindrome&#x27;s center index</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">current_center</span>: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-comment\">// Integer: Right edge index existing the radius away from current center</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">right_from_current_center</span>: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..chars.<span class=\"hljs-title function_ invoke__\">len</span>() {\n        <span class=\"hljs-comment\">// 1: Check if we are looking at right side of palindrome.</span>\n        <span class=\"hljs-keyword\">if</span> right_from_current_center &gt; i &amp;&amp; i &gt; current_center {\n            <span class=\"hljs-comment\">// 1-1: If so copy from the left side of palindrome.</span>\n            <span class=\"hljs-comment\">// If the value + index exceeds the right edge index, we should cut and check palindrome later #3.</span>\n            length_of_palindrome[i] = std::cmp::<span class=\"hljs-title function_ invoke__\">min</span>(\n                right_from_current_center - i,\n                length_of_palindrome[<span class=\"hljs-number\">2</span> * current_center - i],\n            );\n            <span class=\"hljs-comment\">// 1-2: Move the checking palindrome to new index if it exceeds the right edge.</span>\n            <span class=\"hljs-keyword\">if</span> length_of_palindrome[i] + i &gt;= right_from_current_center {\n                current_center = i;\n                right_from_current_center = length_of_palindrome[i] + i;\n                <span class=\"hljs-comment\">// 1-3: If radius exceeds the end of list, it means checking is over.</span>\n                <span class=\"hljs-comment\">// You will never get the larger value because the string will get only shorter.</span>\n                <span class=\"hljs-keyword\">if</span> right_from_current_center &gt;= chars.<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">1</span> {\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-comment\">// 1-4: If the checking index doesn&#x27;t exceeds the right edge,</span>\n                <span class=\"hljs-comment\">// it means the length is just as same as the left side.</span>\n                <span class=\"hljs-comment\">// You don&#x27;t need to check anymore.</span>\n                <span class=\"hljs-keyword\">continue</span>;\n            }\n        }\n\n        <span class=\"hljs-comment\">// Integer: Current radius from checking index</span>\n        <span class=\"hljs-comment\">// If it&#x27;s copied from left side and more than 1,</span>\n        <span class=\"hljs-comment\">// it means it&#x27;s ensured so you don&#x27;t need to check inside radius.</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">radius</span>: <span class=\"hljs-type\">usize</span> = (length_of_palindrome[i] - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>;\n        radius += <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-comment\">// 2: Checking palindrome.</span>\n        <span class=\"hljs-comment\">// Need to care about overflow usize.</span>\n        <span class=\"hljs-keyword\">while</span> i &gt;= radius &amp;&amp; i + radius &lt;= chars.<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">1</span> &amp;&amp; chars[i - radius] == chars[i + radius]\n        {\n            length_of_palindrome[i] += <span class=\"hljs-number\">2</span>;\n            radius += <span class=\"hljs-number\">1</span>;\n        }\n    }\n\n    <span class=\"hljs-comment\">// 3: Find the maximum length and generate answer.</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">center_of_max</span> = length_of_palindrome\n        .<span class=\"hljs-title function_ invoke__\">iter</span>()\n        .<span class=\"hljs-title function_ invoke__\">enumerate</span>()\n        .<span class=\"hljs-title function_ invoke__\">max_by_key</span>(|(_, &amp;value)| value)\n        .<span class=\"hljs-title function_ invoke__\">map</span>(|(idx, _)| idx)\n        .<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">radius_of_max</span> = (length_of_palindrome[center_of_max] - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">answer</span> = &amp;chars[(center_of_max - radius_of_max)..(center_of_max + radius_of_max + <span class=\"hljs-number\">1</span>)]\n        .<span class=\"hljs-title function_ invoke__\">iter</span>()\n        .collect::&lt;<span class=\"hljs-type\">String</span>&gt;();\n    answer.<span class=\"hljs-title function_ invoke__\">replace</span>(<span class=\"hljs-string\">&#x27;#&#x27;</span>, <span class=\"hljs-string\">&quot;&quot;</span>)\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::manacher;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_longest_palindrome_by_manacher</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">manacher</span>(<span class=\"hljs-string\">&quot;babad&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>()), <span class=\"hljs-string\">&quot;aba&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">manacher</span>(<span class=\"hljs-string\">&quot;cbbd&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>()), <span class=\"hljs-string\">&quot;bb&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">manacher</span>(<span class=\"hljs-string\">&quot;a&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>()), <span class=\"hljs-string\">&quot;a&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>());\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">ac_ans</span> = <span class=\"hljs-title function_ invoke__\">manacher</span>(<span class=\"hljs-string\">&quot;ac&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>());\n        <span class=\"hljs-built_in\">assert!</span>(ac_ans == *<span class=\"hljs-string\">&quot;a&quot;</span> || ac_ans == *<span class=\"hljs-string\">&quot;c&quot;</span>);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "i1e0",
      "email": "96235137+i1e0@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Erfan Khadem",
      "email": "45465346+er888kh@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "imp",
      "email": "imp07@qq.com",
      "commits": 1
    },
    {
      "name": "ulwlu",
      "email": "ooulwluoo@gmail.com",
      "commits": 1
    },
    {
      "name": "Shuangchi He",
      "email": "34329208+Yulv-git@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Dmytro Litvinov",
      "email": "litvinov.dmytro.it@gmail.com",
      "commits": 1
    },
    {
      "name": "faizan2700",
      "email": "46817346+faizan2700@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Erfan Alimohammadi",
      "email": "erfan.aa@gmail.com",
      "commits": 1
    },
    {
      "name": "Jitendra_Sharma",
      "email": "jitendra.sharma_cs16@gla.ac.in",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}