{
  "slug": "matrix-graphs",
  "name": "Matrix Graphs",
  "categories": [
    "datastructures",
    "graphs"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/graphs/MatrixGraphs.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/graphs/MatrixGraphs.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.graphs;\n\n<span class=\"hljs-keyword\">import</span> java.util.List;\n<span class=\"hljs-keyword\">import</span> java.util.Queue;\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.LinkedList;\n\n<span class=\"hljs-comment\">/**\n * Implementation of a graph in a matrix form Also known as an adjacency matrix\n * representation [Adjacency matrix -\n * Wikipedia](https://en.wikipedia.org/wiki/Adjacency_matrix)\n *\n * <span class=\"hljs-doctag\">@author</span> Unknown\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MatrixGraphs</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\n        <span class=\"hljs-type\">AdjacencyMatrixGraph</span> <span class=\"hljs-variable\">graph</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AdjacencyMatrixGraph</span>(<span class=\"hljs-number\">10</span>);\n        graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n        graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>);\n        graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>);\n        graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n        graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\n        graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\n        graph.addEdge(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>);\n        graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\n        graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>);\n        graph.addEdge(<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">1</span>);\n        graph.addEdge(<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">8</span>);\n        graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">8</span>);\n        graph.addEdge(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>);\n        System.out.println(<span class=\"hljs-string\">&quot;The graph matrix:&quot;</span>);\n        System.out.println(graph);\n        System.out.println(<span class=\"hljs-string\">&quot;Depth first order beginning at node &#x27;1&#x27;:&quot;</span>);\n        System.out.println(graph.depthFirstOrder(<span class=\"hljs-number\">1</span>));\n        System.out.println(<span class=\"hljs-string\">&quot;Breadth first order beginning at node &#x27;1&#x27;:&quot;</span>);\n        System.out.println(graph.breadthFirstOrder(<span class=\"hljs-number\">1</span>));\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * AdjacencyMatrixGraph Implementation\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AdjacencyMatrixGraph</span> {\n\n    <span class=\"hljs-comment\">/**\n     * The number of vertices in the graph\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> _numberOfVertices;\n\n    <span class=\"hljs-comment\">/**\n     * The number of edges in the graph\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> _numberOfEdges;\n\n    <span class=\"hljs-comment\">/**\n     * The adjacency matrix for the graph\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span>[][] _adjacency;\n\n    <span class=\"hljs-comment\">/**\n     * Static variables to define whether or not an edge exists in the adjacency\n     * matrix\n     */</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">EDGE_EXIST</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">EDGE_NONE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">/**\n     * Constructor\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">AdjacencyMatrixGraph</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> givenNumberOfVertices)</span> {\n        <span class=\"hljs-built_in\">this</span>.setNumberOfVertices(givenNumberOfVertices);\n        <span class=\"hljs-built_in\">this</span>.setNumberOfEdges(<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-built_in\">this</span>.setAdjacency(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[givenNumberOfVertices][givenNumberOfVertices]);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; givenNumberOfVertices; i++) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; givenNumberOfVertices; j++) {\n                <span class=\"hljs-built_in\">this</span>.adjacency()[i][j] = AdjacencyMatrixGraph.EDGE_NONE;\n            }\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Updates the number of vertices in the graph\n     *\n     * <span class=\"hljs-doctag\">@param</span> newNumberOfVertices the new number of vertices\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setNumberOfVertices</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> newNumberOfVertices)</span> {\n        <span class=\"hljs-built_in\">this</span>._numberOfVertices = newNumberOfVertices;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Getter for `this._numberOfVertices`\n     *\n     * <span class=\"hljs-doctag\">@return</span> the number of vertices in the graph\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">numberOfVertices</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._numberOfVertices;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Updates the number of edges in the graph\n     *\n     * <span class=\"hljs-doctag\">@param</span> newNumberOfEdges\n   *\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setNumberOfEdges</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> newNumberOfEdges)</span> {\n        <span class=\"hljs-built_in\">this</span>._numberOfEdges = newNumberOfEdges;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Getter for `this._numberOfEdges`\n     *\n     * <span class=\"hljs-doctag\">@return</span> the number of edges\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">numberOfEdges</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._numberOfEdges;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Sets a new matrix as the adjacency matrix\n     *\n     * <span class=\"hljs-doctag\">@param</span> newAdjacency the new adjaceny matrix\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAdjacency</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] newAdjacency)</span> {\n        <span class=\"hljs-built_in\">this</span>._adjacency = newAdjacency;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Getter for the adjacency matrix\n     *\n     * <span class=\"hljs-doctag\">@return</span> the adjacency matrix\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span>[][] adjacency() {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._adjacency;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Checks if two vertices are connected by an edge\n     *\n     * <span class=\"hljs-doctag\">@param</span> from the parent vertex to check for adjacency\n     * <span class=\"hljs-doctag\">@param</span> to the child vertex to check for adjacency\n     * <span class=\"hljs-doctag\">@return</span> whether or not the vertices are adjancent\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">adjacencyOfEdgeDoesExist</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> from, <span class=\"hljs-type\">int</span> to)</span> {\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">this</span>.adjacency()[from][to] != AdjacencyMatrixGraph.EDGE_NONE);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Checks if a particular vertex exists in a graph\n     *\n     * <span class=\"hljs-doctag\">@param</span> aVertex the vertex to check for existence\n     * <span class=\"hljs-doctag\">@return</span> whether or not the vertex exists\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">vertexDoesExist</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> aVertex)</span> {\n        <span class=\"hljs-keyword\">if</span> (aVertex &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; aVertex &lt; <span class=\"hljs-built_in\">this</span>.numberOfVertices()) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Checks if two vertices are connected by an edge\n     *\n     * <span class=\"hljs-doctag\">@param</span> from the parent vertex to check for adjacency\n     * <span class=\"hljs-doctag\">@param</span> to the child vertex to check for adjacency\n     * <span class=\"hljs-doctag\">@return</span> whether or not the vertices are adjancent\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">edgeDoesExist</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> from, <span class=\"hljs-type\">int</span> to)</span> {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.vertexDoesExist(from) &amp;&amp; <span class=\"hljs-built_in\">this</span>.vertexDoesExist(to)) {\n            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">this</span>.adjacencyOfEdgeDoesExist(from, to));\n        }\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * This method adds an edge to the graph between two specified vertices\n     *\n     * <span class=\"hljs-doctag\">@param</span> from the data of the vertex the edge is from\n     * <span class=\"hljs-doctag\">@param</span> to the data of the vertex the edge is going to\n     * <span class=\"hljs-doctag\">@return</span> returns true if the edge did not exist, return false if it\n     * already did\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> from, <span class=\"hljs-type\">int</span> to)</span> {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.vertexDoesExist(from) &amp;&amp; <span class=\"hljs-built_in\">this</span>.vertexDoesExist(to)) {\n            <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">this</span>.adjacencyOfEdgeDoesExist(from, to)) {\n                <span class=\"hljs-built_in\">this</span>.adjacency()[from][to] = AdjacencyMatrixGraph.EDGE_EXIST;\n                <span class=\"hljs-built_in\">this</span>.adjacency()[to][from] = AdjacencyMatrixGraph.EDGE_EXIST;\n                <span class=\"hljs-built_in\">this</span>.setNumberOfEdges(<span class=\"hljs-built_in\">this</span>.numberOfEdges() + <span class=\"hljs-number\">1</span>);\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * this method removes an edge from the graph between two specified vertices\n     *\n     * <span class=\"hljs-doctag\">@param</span> from the data of the vertex the edge is from\n     * <span class=\"hljs-doctag\">@param</span> to the data of the vertex the edge is going to\n     * <span class=\"hljs-doctag\">@return</span> returns false if the edge doesn&#x27;t exist, returns true if the edge\n     * exists and is removed\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">removeEdge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> from, <span class=\"hljs-type\">int</span> to)</span> {\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">this</span>.vertexDoesExist(from) || !<span class=\"hljs-built_in\">this</span>.vertexDoesExist(to)) {\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.adjacencyOfEdgeDoesExist(from, to)) {\n                <span class=\"hljs-built_in\">this</span>.adjacency()[from][to] = AdjacencyMatrixGraph.EDGE_NONE;\n                <span class=\"hljs-built_in\">this</span>.adjacency()[to][from] = AdjacencyMatrixGraph.EDGE_NONE;\n                <span class=\"hljs-built_in\">this</span>.setNumberOfEdges(<span class=\"hljs-built_in\">this</span>.numberOfEdges() - <span class=\"hljs-number\">1</span>);\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * This method returns a list of the vertices in a depth first order\n     * beginning with the specified vertex\n     *\n     * <span class=\"hljs-doctag\">@param</span> startVertex the vertex to begin the traversal\n     * <span class=\"hljs-doctag\">@return</span> the list of the ordered vertices\n     */</span>\n    <span class=\"hljs-keyword\">public</span> List&lt;Integer&gt; <span class=\"hljs-title function_\">depthFirstOrder</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> startVertex)</span> {\n        <span class=\"hljs-comment\">// If the startVertex is invalid, return an empty list</span>\n        <span class=\"hljs-keyword\">if</span> (startVertex &gt;= _numberOfVertices || startVertex &lt; <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Integer&gt;();\n        }\n\n        <span class=\"hljs-comment\">// Create an array to track the visited vertices</span>\n        <span class=\"hljs-type\">boolean</span>[] visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">boolean</span>[_numberOfVertices];\n\n        <span class=\"hljs-comment\">// Create a list to keep track of the order of our traversal</span>\n        ArrayList&lt;Integer&gt; orderList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Integer&gt;();\n\n        <span class=\"hljs-comment\">// Perform our DFS algorithm</span>\n        depthFirstOrder(startVertex, visited, orderList);\n\n        <span class=\"hljs-keyword\">return</span> orderList;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Helper method for public depthFirstOrder(int) that will perform a depth\n     * first traversal recursively on the graph\n     *\n     * <span class=\"hljs-doctag\">@param</span> currentVertex the currently exploring vertex\n     * <span class=\"hljs-doctag\">@param</span> visited the array of values denoting whether or not that vertex\n     * has been visited\n     * <span class=\"hljs-doctag\">@param</span> orderList the list to add vertices to as they are visited\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">depthFirstOrder</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> currentVertex, <span class=\"hljs-type\">boolean</span>[] visited, List&lt;Integer&gt; orderList)</span> {\n        <span class=\"hljs-comment\">// If this vertex has already been visited, do nothing and return</span>\n        <span class=\"hljs-keyword\">if</span> (visited[currentVertex]) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n\n        <span class=\"hljs-comment\">// Visit the currentVertex by marking it as visited and adding it</span>\n        <span class=\"hljs-comment\">// to the orderList</span>\n        visited[currentVertex] = <span class=\"hljs-literal\">true</span>;\n        orderList.add(currentVertex);\n\n        <span class=\"hljs-comment\">// Get the adjacency array for this vertex</span>\n        <span class=\"hljs-type\">int</span>[] adjacent = _adjacency[currentVertex];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; adjacent.length; i++) <span class=\"hljs-comment\">// If an edge exists between the currentVertex and the vertex</span>\n        <span class=\"hljs-comment\">// we are considering exploring, recurse on it</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (adjacent[i] == AdjacencyMatrixGraph.EDGE_EXIST) {\n                depthFirstOrder(i, visited, orderList);\n            }\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * This method returns a list of the vertices in a breadth first order\n     * beginning with the specified vertex\n     *\n     * <span class=\"hljs-doctag\">@param</span> startVertex the vertext to begin the traversal\n     * <span class=\"hljs-doctag\">@return</span> the list of the ordered vertices\n     */</span>\n    <span class=\"hljs-keyword\">public</span> List&lt;Integer&gt; <span class=\"hljs-title function_\">breadthFirstOrder</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> startVertex)</span> {\n        <span class=\"hljs-comment\">// If the specified startVertex is invalid, return an empty list</span>\n        <span class=\"hljs-keyword\">if</span> (startVertex &gt;= _numberOfVertices || startVertex &lt; <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Integer&gt;();\n        }\n\n        <span class=\"hljs-comment\">// Create an array to keep track of the visited vertices</span>\n        <span class=\"hljs-type\">boolean</span>[] visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">boolean</span>[_numberOfVertices];\n\n        <span class=\"hljs-comment\">// Create a list to keep track of the ordered vertices</span>\n        ArrayList&lt;Integer&gt; orderList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Integer&gt;();\n\n        <span class=\"hljs-comment\">// Create a queue for our BFS algorithm and add the startVertex</span>\n        <span class=\"hljs-comment\">// to the queue</span>\n        Queue&lt;Integer&gt; queue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;Integer&gt;();\n        queue.add(startVertex);\n\n        <span class=\"hljs-comment\">// Continue until the queue is empty</span>\n        <span class=\"hljs-keyword\">while</span> (!queue.isEmpty()) {\n            <span class=\"hljs-comment\">// Remove the first vertex in the queue</span>\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">currentVertex</span> <span class=\"hljs-operator\">=</span> queue.poll();\n\n            <span class=\"hljs-comment\">// If we&#x27;ve visited this vertex, skip it</span>\n            <span class=\"hljs-keyword\">if</span> (visited[currentVertex]) {\n                <span class=\"hljs-keyword\">continue</span>;\n            }\n\n            <span class=\"hljs-comment\">// We now visit this vertex by adding it to the orderList and</span>\n            <span class=\"hljs-comment\">// marking it as visited</span>\n            orderList.add(currentVertex);\n            visited[currentVertex] = <span class=\"hljs-literal\">true</span>;\n\n            <span class=\"hljs-comment\">// Get the adjacency array for the currentVertex and </span>\n            <span class=\"hljs-comment\">// check each node</span>\n            <span class=\"hljs-type\">int</span>[] adjacent = _adjacency[currentVertex];\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">vertex</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; vertex &lt; adjacent.length; vertex++) <span class=\"hljs-comment\">// If an edge exists between the current vertex and the</span>\n            <span class=\"hljs-comment\">// vertex we are considering exploring, we add it to the queue</span>\n            {\n                <span class=\"hljs-keyword\">if</span> (adjacent[vertex] == AdjacencyMatrixGraph.EDGE_EXIST) {\n                    queue.add(vertex);\n                }\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> orderList;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * this gives a list of vertices in the graph and their adjacencies\n     *\n     * <span class=\"hljs-doctag\">@return</span> returns a string describing this graph\n     */</span>\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;    &quot;</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.numberOfVertices(); i++) {\n            s = s + String.valueOf(i) + <span class=\"hljs-string\">&quot; &quot;</span>;\n        }\n        s = s + <span class=\"hljs-string\">&quot; \\n&quot;</span>;\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.numberOfVertices(); i++) {\n            s = s + String.valueOf(i) + <span class=\"hljs-string\">&quot; : &quot;</span>;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-built_in\">this</span>.numberOfVertices(); j++) {\n                s = s + String.valueOf(<span class=\"hljs-built_in\">this</span>._adjacency[i][j]) + <span class=\"hljs-string\">&quot; &quot;</span>;\n            }\n            s = s + <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> s;\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "JeonSeongBae",
      "email": "tjdqo6042@naver.com",
      "commits": 1
    },
    {
      "name": "cnuhoya",
      "email": "dk00426@naver.com",
      "commits": 1
    },
    {
      "name": "Harsha",
      "email": "Harsha@Harshas-MacBook-Pro.local",
      "commits": 1
    },
    {
      "name": "MaengMaeng",
      "email": "maybe0728@nate.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Ian Cowan",
      "email": "38896380+iccowan@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}