{
  "slug": "matrix-ops",
  "name": "Matrix Ops",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/math/matrix_ops.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/math/matrix_ops.rs",
      "code": "<span class=\"hljs-comment\">// Basic matrix operations using row vectors wrapped in column vectors as matrices.</span>\n<span class=\"hljs-comment\">// Supports i32, should be interchangeable for other types.</span>\n<span class=\"hljs-comment\">// Wikipedia reference: https://www.wikiwand.com/en/Matrix_(mathematics)</span>\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">matrix_add</span>(summand0: &amp;[<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;], summand1: &amp;[<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; {\n    <span class=\"hljs-comment\">// Add two matrices of identical dimensions</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[];\n    <span class=\"hljs-keyword\">if</span> summand0.<span class=\"hljs-title function_ invoke__\">len</span>() != summand1.<span class=\"hljs-title function_ invoke__\">len</span>() {\n        <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Matrix dimensions do not match&quot;</span>);\n    }\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">row</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..summand0.<span class=\"hljs-title function_ invoke__\">len</span>() {\n        <span class=\"hljs-keyword\">if</span> summand0[row].<span class=\"hljs-title function_ invoke__\">len</span>() != summand1[row].<span class=\"hljs-title function_ invoke__\">len</span>() {\n            <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Matrix dimensions do not match&quot;</span>);\n        }\n        result.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-built_in\">vec!</span>[]);\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">column</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..summand1[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_ invoke__\">len</span>() {\n            result[row].<span class=\"hljs-title function_ invoke__\">push</span>(summand0[row][column] + summand1[row][column]);\n        }\n    }\n    result\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">matrix_subtract</span>(minuend: &amp;[<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;], subtrahend: &amp;[<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; {\n    <span class=\"hljs-comment\">// Subtract one matrix from another. They need to have identical dimensions.</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[];\n    <span class=\"hljs-keyword\">if</span> minuend.<span class=\"hljs-title function_ invoke__\">len</span>() != subtrahend.<span class=\"hljs-title function_ invoke__\">len</span>() {\n        <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Matrix dimensions do not match&quot;</span>);\n    }\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">row</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..minuend.<span class=\"hljs-title function_ invoke__\">len</span>() {\n        <span class=\"hljs-keyword\">if</span> minuend[row].<span class=\"hljs-title function_ invoke__\">len</span>() != subtrahend[row].<span class=\"hljs-title function_ invoke__\">len</span>() {\n            <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Matrix dimensions do not match&quot;</span>);\n        }\n        result.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-built_in\">vec!</span>[]);\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">column</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..subtrahend[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_ invoke__\">len</span>() {\n            result[row].<span class=\"hljs-title function_ invoke__\">push</span>(minuend[row][column] - subtrahend[row][column]);\n        }\n    }\n    result\n}\n\n<span class=\"hljs-comment\">// Disable cargo clippy warnings about needless range loops.</span>\n<span class=\"hljs-comment\">// As the iterating variable is used as index while multiplying,</span>\n<span class=\"hljs-comment\">// using the item itself would defeat the variables purpose.</span>\n<span class=\"hljs-meta\">#[allow(clippy::needless_range_loop)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">matrix_multiply</span>(multiplier: &amp;[<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;], multiplicand: &amp;[<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; {\n    <span class=\"hljs-comment\">// Multiply two matching matrices. The multiplier needs to have the same amount</span>\n    <span class=\"hljs-comment\">// of columns as the multiplicand has rows.</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[];\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">temp</span>;\n    <span class=\"hljs-comment\">// Using variable to compare lenghts of rows in multiplicand later</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">row_right_length</span> = multiplicand[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_ invoke__\">len</span>();\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">row_left</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..multiplier.<span class=\"hljs-title function_ invoke__\">len</span>() {\n        <span class=\"hljs-keyword\">if</span> multiplier[row_left].<span class=\"hljs-title function_ invoke__\">len</span>() != multiplicand.<span class=\"hljs-title function_ invoke__\">len</span>() {\n            <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Matrix dimensions do not match&quot;</span>);\n        }\n        result.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-built_in\">vec!</span>[]);\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">column_right</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..multiplicand[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_ invoke__\">len</span>() {\n            temp = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">row_right</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..multiplicand.<span class=\"hljs-title function_ invoke__\">len</span>() {\n                <span class=\"hljs-keyword\">if</span> row_right_length != multiplicand[row_right].<span class=\"hljs-title function_ invoke__\">len</span>() {\n                    <span class=\"hljs-comment\">// If row is longer than a previous row cancel operation with error</span>\n                    <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Matrix dimensions do not match&quot;</span>);\n                }\n                temp += multiplier[row_left][row_right] * multiplicand[row_right][column_right];\n            }\n            result[row_left].<span class=\"hljs-title function_ invoke__\">push</span>(temp);\n        }\n    }\n    result\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">matrix_transpose</span>(matrix: &amp;[<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; {\n    <span class=\"hljs-comment\">// Transpose a matrix of any size</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[Vec::<span class=\"hljs-title function_ invoke__\">with_capacity</span>(matrix.<span class=\"hljs-title function_ invoke__\">len</span>()); matrix[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_ invoke__\">len</span>()];\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">row</span> <span class=\"hljs-keyword\">in</span> matrix {\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">col</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..row.<span class=\"hljs-title function_ invoke__\">len</span>() {\n            result[col].<span class=\"hljs-title function_ invoke__\">push</span>(row[col]);\n        }\n    }\n    result\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">matrix_scalar_multiplication</span>(matrix: &amp;[<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;], scalar: <span class=\"hljs-type\">i32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; {\n    <span class=\"hljs-comment\">// Multiply a matrix of any size with a scalar</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[Vec::<span class=\"hljs-title function_ invoke__\">with_capacity</span>(matrix.<span class=\"hljs-title function_ invoke__\">len</span>()); matrix[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_ invoke__\">len</span>()];\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">row</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..matrix.<span class=\"hljs-title function_ invoke__\">len</span>() {\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">column</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..matrix[row].<span class=\"hljs-title function_ invoke__\">len</span>() {\n            result[row].<span class=\"hljs-title function_ invoke__\">push</span>(scalar * matrix[row][column]);\n        }\n    }\n    result\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::matrix_add;\n    <span class=\"hljs-keyword\">use</span> super::matrix_multiply;\n    <span class=\"hljs-keyword\">use</span> super::matrix_scalar_multiplication;\n    <span class=\"hljs-keyword\">use</span> super::matrix_subtract;\n    <span class=\"hljs-keyword\">use</span> super::matrix_transpose;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_add</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">input0</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">input1</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">input_wrong0</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">input_wrong1</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; =\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">input_wrong2</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[]];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">exp_result</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>]];\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">matrix_add</span>(&amp;input0, &amp;input1), exp_result);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">result0</span> = std::panic::<span class=\"hljs-title function_ invoke__\">catch_unwind</span>(|| <span class=\"hljs-title function_ invoke__\">matrix_add</span>(&amp;input0, &amp;input_wrong0));\n        <span class=\"hljs-built_in\">assert!</span>(result0.<span class=\"hljs-title function_ invoke__\">is_err</span>());\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">result1</span> = std::panic::<span class=\"hljs-title function_ invoke__\">catch_unwind</span>(|| <span class=\"hljs-title function_ invoke__\">matrix_add</span>(&amp;input0, &amp;input_wrong1));\n        <span class=\"hljs-built_in\">assert!</span>(result1.<span class=\"hljs-title function_ invoke__\">is_err</span>());\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">result2</span> = std::panic::<span class=\"hljs-title function_ invoke__\">catch_unwind</span>(|| <span class=\"hljs-title function_ invoke__\">matrix_add</span>(&amp;input0, &amp;input_wrong2));\n        <span class=\"hljs-built_in\">assert!</span>(result2.<span class=\"hljs-title function_ invoke__\">is_err</span>());\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_subtract</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">input0</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">input1</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">input_wrong0</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">input_wrong1</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; =\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">input_wrong2</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[]];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">exp_result</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">3</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]];\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">matrix_subtract</span>(&amp;input0, &amp;input1), exp_result);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">result0</span> = std::panic::<span class=\"hljs-title function_ invoke__\">catch_unwind</span>(|| <span class=\"hljs-title function_ invoke__\">matrix_subtract</span>(&amp;input0, &amp;input_wrong0));\n        <span class=\"hljs-built_in\">assert!</span>(result0.<span class=\"hljs-title function_ invoke__\">is_err</span>());\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">result1</span> = std::panic::<span class=\"hljs-title function_ invoke__\">catch_unwind</span>(|| <span class=\"hljs-title function_ invoke__\">matrix_subtract</span>(&amp;input0, &amp;input_wrong1));\n        <span class=\"hljs-built_in\">assert!</span>(result1.<span class=\"hljs-title function_ invoke__\">is_err</span>());\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">result2</span> = std::panic::<span class=\"hljs-title function_ invoke__\">catch_unwind</span>(|| <span class=\"hljs-title function_ invoke__\">matrix_subtract</span>(&amp;input0, &amp;input_wrong2));\n        <span class=\"hljs-built_in\">assert!</span>(result2.<span class=\"hljs-title function_ invoke__\">is_err</span>());\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_multiply</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">input0</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; =\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>]];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">input1</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">input_wrong0</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">6</span>],\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>],\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>],\n        ];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">input_wrong1</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>],\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>],\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>],\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>],\n        ];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">exp_result</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">27</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">7</span>],\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">48</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">16</span>],\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">37</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">11</span>],\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">62</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">16</span>],\n        ];\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">matrix_multiply</span>(&amp;input0, &amp;input1), exp_result);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">result0</span> = std::panic::<span class=\"hljs-title function_ invoke__\">catch_unwind</span>(|| <span class=\"hljs-title function_ invoke__\">matrix_multiply</span>(&amp;input0, &amp;input_wrong0));\n        <span class=\"hljs-built_in\">assert!</span>(result0.<span class=\"hljs-title function_ invoke__\">is_err</span>());\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">result1</span> = std::panic::<span class=\"hljs-title function_ invoke__\">catch_unwind</span>(|| <span class=\"hljs-title function_ invoke__\">matrix_multiply</span>(&amp;input0, &amp;input_wrong1));\n        <span class=\"hljs-built_in\">assert!</span>(result1.<span class=\"hljs-title function_ invoke__\">is_err</span>());\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_transpose</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">input0</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">input1</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">exp_result1</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">exp_result2</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>]];\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">matrix_transpose</span>(&amp;input0), exp_result1);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">matrix_transpose</span>(&amp;input1), exp_result2);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_matrix_scalar_multiplication</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">input0</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>]];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">input1</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">exp_result1</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">6</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">3</span>]];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">exp_result2</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>]];\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">matrix_scalar_multiplication</span>(&amp;input0, <span class=\"hljs-number\">3</span>), exp_result1);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">matrix_scalar_multiplication</span>(&amp;input1, <span class=\"hljs-number\">3</span>), exp_result2);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "mhorst00",
      "email": "36167515+mhorst00@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}