{
  "slug": "matrix-util",
  "name": "Matrix Util",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/maths/MatrixUtil.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/maths/MatrixUtil.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\n\n<span class=\"hljs-keyword\">import</span> java.math.BigDecimal;\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n<span class=\"hljs-keyword\">import</span> java.util.Objects;\n<span class=\"hljs-keyword\">import</span> java.util.Optional;\n<span class=\"hljs-keyword\">import</span> java.util.function.BiFunction;\n<span class=\"hljs-keyword\">import</span> java.util.stream.IntStream;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span>: caos321\n * <span class=\"hljs-doctag\">@date</span>: 31 October 2021 (Sunday)\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MatrixUtil</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isValid</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> BigDecimal[][] matrix)</span> {\n        <span class=\"hljs-keyword\">return</span> matrix != <span class=\"hljs-literal\">null</span> &amp;&amp; matrix.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; matrix[<span class=\"hljs-number\">0</span>].length &gt; <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">hasEqualSizes</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> BigDecimal[][] matrix1, <span class=\"hljs-keyword\">final</span> BigDecimal[][] matrix2)</span> {\n        <span class=\"hljs-keyword\">return</span> isValid(matrix1) &amp;&amp; isValid(matrix2)\n                &amp;&amp; matrix1.length == matrix2.length\n                &amp;&amp; matrix1[<span class=\"hljs-number\">0</span>].length == matrix2[<span class=\"hljs-number\">0</span>].length;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">canMultiply</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> BigDecimal[][] matrix1, <span class=\"hljs-keyword\">final</span> BigDecimal[][] matrix2)</span> {\n        <span class=\"hljs-keyword\">return</span> isValid(matrix1) &amp;&amp; isValid(matrix2)\n                &amp;&amp; matrix1[<span class=\"hljs-number\">0</span>].length == matrix2.length;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Optional&lt;BigDecimal[][]&gt; operate(<span class=\"hljs-keyword\">final</span> BigDecimal[][] matrix1,\n            <span class=\"hljs-keyword\">final</span> BigDecimal[][] matrix2,\n            <span class=\"hljs-keyword\">final</span> BiFunction&lt;BigDecimal, BigDecimal, BigDecimal&gt; operation) {\n        <span class=\"hljs-keyword\">if</span> (!hasEqualSizes(matrix1, matrix2)) {\n            <span class=\"hljs-keyword\">return</span> Optional.empty();\n        }\n\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rowSize</span> <span class=\"hljs-operator\">=</span> matrix1.length;\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">columnSize</span> <span class=\"hljs-operator\">=</span> matrix1[<span class=\"hljs-number\">0</span>].length;\n\n        <span class=\"hljs-keyword\">final</span> BigDecimal[][] result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>[rowSize][columnSize];\n\n        IntStream.range(<span class=\"hljs-number\">0</span>, rowSize).forEach(rowIndex\n                -&gt; IntStream.range(<span class=\"hljs-number\">0</span>, columnSize).forEach(columnIndex -&gt; {\n                    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">BigDecimal</span> <span class=\"hljs-variable\">value1</span> <span class=\"hljs-operator\">=</span> matrix1[rowIndex][columnIndex];\n                    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">BigDecimal</span> <span class=\"hljs-variable\">value2</span> <span class=\"hljs-operator\">=</span> matrix2[rowIndex][columnIndex];\n\n                    result[rowIndex][columnIndex] = operation.apply(value1, value2);\n                }));\n\n        <span class=\"hljs-keyword\">return</span> Optional.of(result);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Optional&lt;BigDecimal[][]&gt; add(<span class=\"hljs-keyword\">final</span> BigDecimal[][] matrix1, <span class=\"hljs-keyword\">final</span> BigDecimal[][] matrix2) {\n        <span class=\"hljs-keyword\">return</span> operate(matrix1, matrix2, BigDecimal::add);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Optional&lt;BigDecimal[][]&gt; subtract(<span class=\"hljs-keyword\">final</span> BigDecimal[][] matrix1, <span class=\"hljs-keyword\">final</span> BigDecimal[][] matrix2) {\n        <span class=\"hljs-keyword\">return</span> operate(matrix1, matrix2, BigDecimal::subtract);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Optional&lt;BigDecimal[][]&gt; multiply(<span class=\"hljs-keyword\">final</span> BigDecimal[][] matrix1, <span class=\"hljs-keyword\">final</span> BigDecimal[][] matrix2) {\n        <span class=\"hljs-keyword\">if</span> (!canMultiply(matrix1, matrix2)) {\n            <span class=\"hljs-keyword\">return</span> Optional.empty();\n        }\n\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> matrix1[<span class=\"hljs-number\">0</span>].length;\n\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">matrix1RowSize</span> <span class=\"hljs-operator\">=</span> matrix1.length;\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">matrix2ColumnSize</span> <span class=\"hljs-operator\">=</span> matrix2[<span class=\"hljs-number\">0</span>].length;\n\n        <span class=\"hljs-keyword\">final</span> BigDecimal[][] result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>[matrix1RowSize][matrix2ColumnSize];\n\n        IntStream.range(<span class=\"hljs-number\">0</span>, matrix1RowSize).forEach(rowIndex\n                -&gt; IntStream.range(<span class=\"hljs-number\">0</span>, matrix2ColumnSize).forEach(columnIndex\n                        -&gt; result[rowIndex][columnIndex] = IntStream.range(<span class=\"hljs-number\">0</span>, size).mapToObj(index -&gt; {\n                    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">BigDecimal</span> <span class=\"hljs-variable\">value1</span> <span class=\"hljs-operator\">=</span> matrix1[rowIndex][index];\n                    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">BigDecimal</span> <span class=\"hljs-variable\">value2</span> <span class=\"hljs-operator\">=</span> matrix2[index][columnIndex];\n\n                    <span class=\"hljs-keyword\">return</span> value1.multiply(value2);\n                })\n                        .reduce(BigDecimal.ZERO, BigDecimal::add)\n                )\n        );\n\n        <span class=\"hljs-keyword\">return</span> Optional.of(result);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">assertThat</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> BigDecimal[][] actual, <span class=\"hljs-keyword\">final</span> BigDecimal[][] expected)</span> {\n        <span class=\"hljs-keyword\">if</span> (!Objects.deepEquals(actual, expected)) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AssertionError</span>(String.format(\n                    <span class=\"hljs-string\">&quot;expected=%s but was actual=%s&quot;</span>,\n                    Arrays.deepToString(expected),\n                    Arrays.deepToString(actual)\n            ));\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String[] args)</span> {\n        {\n            <span class=\"hljs-keyword\">final</span> BigDecimal[][] matrix1 = {\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">2</span>)},\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">1</span>)},};\n\n            <span class=\"hljs-keyword\">final</span> BigDecimal[][] matrix2 = {\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">3</span>)},\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">0</span>)},};\n\n            <span class=\"hljs-keyword\">final</span> BigDecimal[][] actual = add(matrix1, matrix2)\n                    .orElseThrow(() -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AssertionError</span>(<span class=\"hljs-string\">&quot;Could not compute matrix!&quot;</span>));\n\n            <span class=\"hljs-keyword\">final</span> BigDecimal[][] expected = {\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">4</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">5</span>)},\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">1</span>)}\n            };\n\n            assertThat(actual, expected);\n        }\n\n        {\n            <span class=\"hljs-keyword\">final</span> BigDecimal[][] matrix1 = {\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">4</span>)},\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">6</span>)},};\n\n            <span class=\"hljs-keyword\">final</span> BigDecimal[][] matrix2 = {\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">0</span>)},\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(-<span class=\"hljs-number\">2</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(-<span class=\"hljs-number\">3</span>)},};\n\n            <span class=\"hljs-keyword\">final</span> BigDecimal[][] actual = subtract(matrix1, matrix2)\n                    .orElseThrow(() -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AssertionError</span>(<span class=\"hljs-string\">&quot;Could not compute matrix!&quot;</span>));\n\n            <span class=\"hljs-keyword\">final</span> BigDecimal[][] expected = {\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(-<span class=\"hljs-number\">1</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">4</span>)},\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">7</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">9</span>)}\n            };\n\n            assertThat(actual, expected);\n        }\n\n        {\n            <span class=\"hljs-keyword\">final</span> BigDecimal[][] matrix1 = {\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">3</span>)},\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">4</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">6</span>)},\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">7</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">8</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">9</span>)}\n            };\n\n            <span class=\"hljs-keyword\">final</span> BigDecimal[][] matrix2 = {\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">2</span>)},\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">4</span>)},\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">6</span>)}\n            };\n\n            <span class=\"hljs-keyword\">final</span> BigDecimal[][] actual = multiply(matrix1, matrix2)\n                    .orElseThrow(() -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AssertionError</span>(<span class=\"hljs-string\">&quot;Could not compute matrix!&quot;</span>));\n\n            <span class=\"hljs-keyword\">final</span> BigDecimal[][] expected = {\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">22</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">28</span>)},\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">49</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">64</span>)},\n                {<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">76</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-number\">100</span>)}\n            };\n\n            assertThat(actual, expected);\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "caos321",
      "email": "36530240+caos321@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}