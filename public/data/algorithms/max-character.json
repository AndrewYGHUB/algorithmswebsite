{
  "slug": "max-character",
  "name": "Max Character",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "String/MaxCharacter.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/String/MaxCharacter.js",
      "code": "<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> <span class=\"hljs-variable\">maxCharacter</span>\n * <span class=\"hljs-doctag\">@example</span> - Given a string of characters, return the character that appears the most often. Example: input = &quot;Hello World!&quot; return &quot;l&quot;\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} <span class=\"hljs-variable\">str</span>\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">RegExp</span>} <span class=\"hljs-variable\">ignorePattern</span> - ignore the char in str that is not required\n * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">string</span>} - char\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">maxCharacter</span> = (<span class=\"hljs-params\">str, ignorePattern</span>) =&gt; { <span class=\"hljs-comment\">// initially it&#x27;s count only alphabets</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> str !== <span class=\"hljs-string\">&#x27;string&#x27;</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;Argument should be a string&#x27;</span>)\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!str) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;The param should be a nonempty string&#x27;</span>)\n  }\n\n  <span class=\"hljs-comment\">// store all char in occurrence map</span>\n  <span class=\"hljs-keyword\">const</span> occurrenceMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>()\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> char <span class=\"hljs-keyword\">of</span> str) {\n    <span class=\"hljs-keyword\">if</span> (!ignorePattern?.<span class=\"hljs-title function_\">test</span>(char)) {\n      occurrenceMap.<span class=\"hljs-title function_\">set</span>(char, occurrenceMap.<span class=\"hljs-title function_\">get</span>(char) + <span class=\"hljs-number\">1</span> || <span class=\"hljs-number\">1</span>)\n    }\n  }\n\n  <span class=\"hljs-comment\">// find the max char from the occurrence map</span>\n  <span class=\"hljs-keyword\">let</span> max = { <span class=\"hljs-attr\">char</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-attr\">occur</span>: -<span class=\"hljs-title class_\">Infinity</span> }\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> [char, occur] <span class=\"hljs-keyword\">of</span> occurrenceMap) {\n    <span class=\"hljs-keyword\">if</span> (occur &gt; max.<span class=\"hljs-property\">occur</span>) {\n      max = { char, occur }\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> max.<span class=\"hljs-property\">char</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> maxCharacter\n"
    },
    "php": {
      "dir": "String/MaxCharacter.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/String/MaxCharacter.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-comment\">/**\n * This function returns\n * the character which is\n * repeated maximum no. of\n * times in the given string.\n *\n * <span class=\"hljs-doctag\">@param</span> string $string\n * <span class=\"hljs-doctag\">@return</span> string\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxCharacter</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span></span>)\n</span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-variable\">$string</span>)) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">\\Exception</span>(<span class=\"hljs-string\">&#x27;Please pass a non-empty string value&#x27;</span>);\n    }\n\n    <span class=\"hljs-variable\">$characterCountTable</span> = []; <span class=\"hljs-comment\">// A variable to maintain the character counts</span>\n    <span class=\"hljs-variable\">$string</span>              = <span class=\"hljs-title function_ invoke__\">strtolower</span>(<span class=\"hljs-variable\">$string</span>); <span class=\"hljs-comment\">// For case-insensitive checking</span>\n    <span class=\"hljs-variable\">$characters</span>          = <span class=\"hljs-title function_ invoke__\">str_split</span>(<span class=\"hljs-variable\">$string</span>); <span class=\"hljs-comment\">// Splitting the string to a Character Array.</span>\n\n    <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-variable\">$characters</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$character</span>) {\n        <span class=\"hljs-variable\">$currentCharacterCount</span> = <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$characterCountTable</span>[<span class=\"hljs-variable\">$character</span>])) {\n            <span class=\"hljs-variable\">$currentCharacterCount</span> = <span class=\"hljs-variable\">$characterCountTable</span>[<span class=\"hljs-variable\">$character</span>] + <span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-variable\">$characterCountTable</span>[<span class=\"hljs-variable\">$character</span>] = <span class=\"hljs-variable\">$currentCharacterCount</span>;\n    }\n\n    <span class=\"hljs-title function_ invoke__\">arsort</span>(<span class=\"hljs-variable\">$characterCountTable</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">array_keys</span>(<span class=\"hljs-variable\">$characterCountTable</span>)[<span class=\"hljs-number\">0</span>];\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Akshay Khale",
      "email": "khale.akshay@gmail.com",
      "commits": 1
    },
    {
      "name": "Akshay Khale",
      "email": "khaleakshay@gmail.com",
      "commits": 1
    },
    {
      "name": "Fahim Faisaal",
      "email": "57553028+fahimfaisaal@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Carlos Carvalho",
      "email": "jcarloss.carvalho@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}