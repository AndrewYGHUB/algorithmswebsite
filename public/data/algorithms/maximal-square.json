{
  "slug": "maximal-square",
  "name": "Maximal Square",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/dynamic_programming/maximal_square.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/dynamic_programming/maximal_square.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::cmp::max;\n<span class=\"hljs-keyword\">use</span> std::cmp::min;\n\n<span class=\"hljs-comment\">/// Maximal Square</span>\n<span class=\"hljs-comment\">/// Given an m x n binary matrix filled with 0&#x27;s and 1&#x27;s, find the largest square containing only 1&#x27;s and return its area.</span>\n<span class=\"hljs-comment\">/// https://leetcode.com/problems/maximal-square/</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Arguments:</span>\n<span class=\"hljs-comment\">///     * `matrix` - an array of integer array</span>\n<span class=\"hljs-comment\">/// Complexity</span>\n<span class=\"hljs-comment\">///     - time complexity: O(n^2),</span>\n<span class=\"hljs-comment\">///     - space complexity: O(n),</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">maximal_square</span>(matrix: &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">i32</span> {\n    <span class=\"hljs-keyword\">if</span> matrix.<span class=\"hljs-title function_ invoke__\">is_empty</span>() {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">rows</span> = matrix.<span class=\"hljs-title function_ invoke__\">len</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">cols</span> = matrix[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_ invoke__\">len</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span>: <span class=\"hljs-type\">i32</span> = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">row</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..rows {\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">col</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..cols {\n            <span class=\"hljs-keyword\">if</span> matrix[row][col] == <span class=\"hljs-number\">1</span> {\n                <span class=\"hljs-keyword\">if</span> row == <span class=\"hljs-number\">0</span> || col == <span class=\"hljs-number\">0</span> {\n                    result = <span class=\"hljs-title function_ invoke__\">max</span>(result, <span class=\"hljs-number\">1</span>);\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">temp</span> = <span class=\"hljs-title function_ invoke__\">min</span>(matrix[row - <span class=\"hljs-number\">1</span>][col - <span class=\"hljs-number\">1</span>], matrix[row - <span class=\"hljs-number\">1</span>][col]);\n\n                    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">count</span>: <span class=\"hljs-type\">i32</span> = <span class=\"hljs-title function_ invoke__\">min</span>(temp, matrix[row][col - <span class=\"hljs-number\">1</span>]) + <span class=\"hljs-number\">1</span>;\n                    result = <span class=\"hljs-title function_ invoke__\">max</span>(result, count);\n\n                    matrix[row][col] = count;\n                }\n            }\n        }\n    }\n\n    result * result\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">maximal_square</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">vec!</span>[]), <span class=\"hljs-number\">0</span>);\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">matrix</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>]];\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">maximal_square</span>(&amp;<span class=\"hljs-keyword\">mut</span> matrix), <span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">matrix</span> = <span class=\"hljs-built_in\">vec!</span>[\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>],\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>],\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],\n        ];\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">maximal_square</span>(&amp;<span class=\"hljs-keyword\">mut</span> matrix), <span class=\"hljs-number\">4</span>);\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">matrix</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>]];\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">maximal_square</span>(&amp;<span class=\"hljs-keyword\">mut</span> matrix), <span class=\"hljs-number\">0</span>);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Erfan Khadem",
      "email": "45465346+er888kh@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "duy quang",
      "email": "hyouka266@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}