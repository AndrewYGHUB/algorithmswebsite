{
  "slug": "maximum-subarray",
  "name": "Maximum Subarray",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/dynamic_programming/maximum_subarray.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/dynamic_programming/maximum_subarray.rs",
      "code": "<span class=\"hljs-comment\">/// ## maximum subarray via Dynamic Programming</span>\n\n<span class=\"hljs-comment\">/// maximum_subarray(array) find the subarray (containing at least one number) which has the largest sum</span>\n<span class=\"hljs-comment\">/// and return its sum.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// A subarray is a contiguous part of an array.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Arguments:</span>\n<span class=\"hljs-comment\">///     * `array` - an integer array</span>\n<span class=\"hljs-comment\">/// Complexity</span>\n<span class=\"hljs-comment\">///     - time complexity: O(array.length),</span>\n<span class=\"hljs-comment\">///     - space complexity: O(array.length),</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">maximum_subarray</span>(array: &amp;[<span class=\"hljs-type\">i32</span>]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">i32</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">dp</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; array.<span class=\"hljs-title function_ invoke__\">len</span>()];\n    dp[<span class=\"hljs-number\">0</span>] = array[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span> = dp[<span class=\"hljs-number\">0</span>];\n\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..array.<span class=\"hljs-title function_ invoke__\">len</span>() {\n        <span class=\"hljs-keyword\">if</span> dp[i - <span class=\"hljs-number\">1</span>] &gt; <span class=\"hljs-number\">0</span> {\n            dp[i] = dp[i - <span class=\"hljs-number\">1</span>] + array[i];\n        } <span class=\"hljs-keyword\">else</span> {\n            dp[i] = array[i];\n        }\n        result = result.<span class=\"hljs-title function_ invoke__\">max</span>(dp[i]);\n    }\n\n    result\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">non_negative</span>() {\n        <span class=\"hljs-comment\">//the maximum value: 1 + 0 + 5 + 8 = 14</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">array</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>];\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">maximum_subarray</span>(&amp;array), <span class=\"hljs-number\">14</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">negative</span>() {\n        <span class=\"hljs-comment\">//the maximum value: -1</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">array</span> = <span class=\"hljs-built_in\">vec!</span>[-<span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">8</span>, -<span class=\"hljs-number\">2</span>];\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">maximum_subarray</span>(&amp;array), -<span class=\"hljs-number\">1</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">normal</span>() {\n        <span class=\"hljs-comment\">//the maximum value: 3 + (-2) + 5 = 6</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">array</span> = <span class=\"hljs-built_in\">vec!</span>[-<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">8</span>];\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">maximum_subarray</span>(&amp;array), <span class=\"hljs-number\">6</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">single_element</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">array</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">6</span>];\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">maximum_subarray</span>(&amp;array), <span class=\"hljs-number\">6</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">array</span> = <span class=\"hljs-built_in\">vec!</span>[-<span class=\"hljs-number\">6</span>];\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">maximum_subarray</span>(&amp;array), -<span class=\"hljs-number\">6</span>);\n    }\n}\n"
    },
    "ruby": {
      "dir": "data_structures/arrays/maximum_subarray.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/arrays/maximum_subarray.rb",
      "code": "<span class=\"hljs-comment\"># Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</span>\n<span class=\"hljs-comment\"># A subarray is a contiguous part of an array.</span>\n\n<span class=\"hljs-comment\"># Example 1:</span>\n<span class=\"hljs-comment\"># Input: nums = [-2,1,-3,4,-1,2,1,-5,4]</span>\n<span class=\"hljs-comment\"># Output: 6</span>\n<span class=\"hljs-comment\"># Explanation: [4,-1,2,1] has the largest sum = 6.</span>\n\n<span class=\"hljs-comment\"># Example 2:</span>\n<span class=\"hljs-comment\"># Input: nums = [1]</span>\n<span class=\"hljs-comment\"># Output: 1</span>\n\n<span class=\"hljs-comment\"># Example 3:</span>\n<span class=\"hljs-comment\"># Input: nums = [5,4,-1,7,8]</span>\n<span class=\"hljs-comment\"># Output: 23</span>\n\n<span class=\"hljs-comment\"># Constraints:</span>\n<span class=\"hljs-comment\"># 1 &lt;= nums.length &lt;= 3 * 104</span>\n<span class=\"hljs-comment\"># -105 &lt;= nums[i] &lt;= 105</span>\n\n<span class=\"hljs-comment\"># Dynamic Programming Approach (Kadane&#x27;s Algorithm) - O(n) Time / O(1) Space</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Init max_sum as first element</span>\n<span class=\"hljs-comment\"># Return first element if the array length is 1</span>\n<span class=\"hljs-comment\"># Init current_sum as 0</span>\n<span class=\"hljs-comment\"># Iterate through the array:</span>\n<span class=\"hljs-comment\"># if current_sum &lt; 0, then reset it to 0 (to eliminate any negative prefixes)</span>\n<span class=\"hljs-comment\"># current_sum += num</span>\n<span class=\"hljs-comment\"># max_sum = current_sum if current_sum is greater than max_sum</span>\n<span class=\"hljs-comment\"># Return max_sum</span>\n\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {Integer[]} nums</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@return</span> {Integer}</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">max_sub_array</span>(<span class=\"hljs-params\">nums</span>)\n  <span class=\"hljs-comment\"># initialize max sum to first number</span>\n  max_sum = nums[<span class=\"hljs-number\">0</span>]\n\n  <span class=\"hljs-comment\"># return first number if array length is 1</span>\n  <span class=\"hljs-keyword\">return</span> max_sum <span class=\"hljs-keyword\">if</span> nums.length == <span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-comment\"># init current sum to 0</span>\n  current_sum = <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-comment\"># iterate through array, reset current_sum to 0 if it ever goes below 0, track max_sum with highest current_sum</span>\n  nums.each <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">num</span>|\n    current_sum = <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">if</span> current_sum &lt; <span class=\"hljs-number\">0</span>\n\n    current_sum += num\n\n    max_sum = [max_sum, current_sum].max\n  <span class=\"hljs-keyword\">end</span>\n\n  max_sum\n<span class=\"hljs-keyword\">end</span>\n\nnums = [-<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>]\nprint max_sub_array(nums)\n<span class=\"hljs-comment\"># Output: 6</span>\n\nnums = [<span class=\"hljs-number\">1</span>]\nprint max_sub_array(nums)\n<span class=\"hljs-comment\"># Output: 1</span>\n\nnums = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>]\nprint max_sub_array(nums)\n<span class=\"hljs-comment\"># Output: 23</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "imp",
      "email": "imp07@qq.com",
      "commits": 1
    },
    {
      "name": "sidaksohi",
      "email": "31377210+sidaksohi@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}