{
  "slug": "memoization-technique-knapsack",
  "name": "Memoization Technique Knapsack",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/dynamicprogramming/MemoizationTechniqueKnapsack.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/dynamicprogramming/MemoizationTechniqueKnapsack.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\n<span class=\"hljs-comment\">// Here is the top-down approach of</span>\n<span class=\"hljs-comment\">// dynamic programming</span>\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MemoizationTechniqueKnapsack</span> {\n\n    <span class=\"hljs-comment\">// A utility function that returns</span>\n    <span class=\"hljs-comment\">// maximum of two integers</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">max</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> {\n        <span class=\"hljs-keyword\">return</span> (a &gt; b) ? a : b;\n    }\n\n    <span class=\"hljs-comment\">// Returns the value of maximum profit</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">knapSackRec</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> W, <span class=\"hljs-type\">int</span> wt[], <span class=\"hljs-type\">int</span> val[], <span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">int</span>[][] dp)</span> {\n\n        <span class=\"hljs-comment\">// Base condition</span>\n        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span> || W == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        }\n\n        <span class=\"hljs-keyword\">if</span> (dp[n][W] != -<span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-keyword\">return</span> dp[n][W];\n        }\n\n        <span class=\"hljs-keyword\">if</span> (wt[n - <span class=\"hljs-number\">1</span>] &gt; W) <span class=\"hljs-comment\">// Store the value of function call</span>\n        <span class=\"hljs-comment\">// stack in table before return</span>\n        {\n            <span class=\"hljs-keyword\">return</span> dp[n][W] = knapSackRec(W, wt, val, n - <span class=\"hljs-number\">1</span>, dp);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-comment\">// Return value of table after storing</span>\n        {\n            <span class=\"hljs-keyword\">return</span> dp[n][W]\n                    = max(\n                            (val[n - <span class=\"hljs-number\">1</span>] + knapSackRec(W - wt[n - <span class=\"hljs-number\">1</span>], wt, val, n - <span class=\"hljs-number\">1</span>, dp)),\n                            knapSackRec(W, wt, val, n - <span class=\"hljs-number\">1</span>, dp));\n        }\n    }\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">knapSack</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> W, <span class=\"hljs-type\">int</span> wt[], <span class=\"hljs-type\">int</span> val[], <span class=\"hljs-type\">int</span> N)</span> {\n\n        <span class=\"hljs-comment\">// Declare the table dynamically</span>\n        <span class=\"hljs-type\">int</span> dp[][] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[N + <span class=\"hljs-number\">1</span>][W + <span class=\"hljs-number\">1</span>];\n\n        <span class=\"hljs-comment\">// Loop to initially filled the</span>\n        <span class=\"hljs-comment\">// table with -1</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; N + <span class=\"hljs-number\">1</span>; i++) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; W + <span class=\"hljs-number\">1</span>; j++) {\n                dp[i][j] = -<span class=\"hljs-number\">1</span>;\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> knapSackRec(W, wt, val, N, dp);\n    }\n\n    <span class=\"hljs-comment\">// Driver Code</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">int</span> val[] = {<span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">120</span>};\n        <span class=\"hljs-type\">int</span> wt[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>};\n\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">W</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">50</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">N</span> <span class=\"hljs-operator\">=</span> val.length;\n\n        System.out.println(knapSack(W, wt, val, N));\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rajat Jain",
      "email": "rajatjain.jain29@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}