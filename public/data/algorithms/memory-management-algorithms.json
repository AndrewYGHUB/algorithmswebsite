{
  "slug": "memory-management-algorithms",
  "name": "Memory Management Algorithms",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/others/MemoryManagementAlgorithms.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/others/MemoryManagementAlgorithms.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.others;\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> Alexandros Lemonaris\n */</span>\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MemoryManagementAlgorithms</span> {\n\n    <span class=\"hljs-comment\">/**\n     * Method to allocate memory to blocks according to CPU algorithms.\n     * Use of inheritance to avoid repeated code.\n     * Abstract method since it is implemented different for each algorithm.\n     * It should return an ArrayList of Integers, where the index is the process\n     * ID (zero-indexed) and the value is the block number (also zero-indexed).\n     * <span class=\"hljs-doctag\">@param</span> sizeOfBlocks an int array that contains the sizes of the memory\n     * blocks available.\n     * <span class=\"hljs-doctag\">@param</span> sizeOfProcesses: an int array that contains the sizes of the\n     * processes we need memory blocks for.\n     * <span class=\"hljs-doctag\">@return</span> the ArrayList filled with Integers repressenting the memory\n     * allocation that took place.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> ArrayList&lt;Integer&gt; <span class=\"hljs-title function_\">fitProcess</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] sizeOfBlocks, <span class=\"hljs-type\">int</span>[] sizeOfProcesses)</span>;\n\n}\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> Dekas Dimitrios\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BestFitCPU</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">MemoryManagementAlgorithms</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">NO_ALLOCATION</span>\n            <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">255</span>; <span class=\"hljs-comment\">// if a process has been allocated in position -255,</span>\n    <span class=\"hljs-comment\">// it means that it has not been actually allocated.</span>\n\n    <span class=\"hljs-comment\">/**\n     * Method to find the maximum valued element of an array filled with\n     * positive integers.\n     *\n     * <span class=\"hljs-doctag\">@param</span> array: an array filled with positive integers.\n     * <span class=\"hljs-doctag\">@return</span> the maximum valued element of the array.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findMaxElement</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] array)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">max</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> value : array) {\n            <span class=\"hljs-keyword\">if</span> (value &gt; max) {\n                max = value;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> max;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Method to find the index of the memory block that is going to fit the\n     * given process based on the best fit algorithm.\n     *\n     * <span class=\"hljs-doctag\">@param</span> blocks: the array with the available memory blocks.\n     * <span class=\"hljs-doctag\">@param</span> process: the size of the process.\n     * <span class=\"hljs-doctag\">@return</span> the index of the block that fits, or -255 if no such block\n     * exists.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findBestFit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] blockSizes, <span class=\"hljs-type\">int</span> processSize)</span> {\n        <span class=\"hljs-comment\">// Initialize minDiff with an unreachable value by a difference between a blockSize and the</span>\n        <span class=\"hljs-comment\">// processSize.</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">minDiff</span> <span class=\"hljs-operator\">=</span> findMaxElement(blockSizes);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span>\n                <span class=\"hljs-operator\">=</span> NO_ALLOCATION; <span class=\"hljs-comment\">// If there is no block that can fit the process, return NO_ALLOCATION as the</span>\n        <span class=\"hljs-comment\">// result.</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n             i &lt; blockSizes.length;\n             i++) { <span class=\"hljs-comment\">// Find the most fitting memory block for the given process.</span>\n            <span class=\"hljs-keyword\">if</span> (blockSizes[i] - processSize &lt; minDiff &amp;&amp; blockSizes[i] - processSize &gt;= <span class=\"hljs-number\">0</span>) {\n                minDiff = blockSizes[i] - processSize;\n                index = i;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> index;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Method to allocate memory to blocks according to the best fit algorithm.\n     * It should return an ArrayList of Integers, where the index is the process\n     * ID (zero-indexed) and the value is the block number (also zero-indexed).\n     *\n     * <span class=\"hljs-doctag\">@param</span> sizeOfBlocks: an int array that contains the sizes of the memory\n     * blocks available.\n     * <span class=\"hljs-doctag\">@param</span> sizeOfProcesses: an int array that contains the sizes of the\n     * processes we need memory blocks for.\n     * <span class=\"hljs-doctag\">@return</span> the ArrayList filled with Integers repressenting the memory\n     * allocation that took place.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"hljs-title function_\">fitProcess</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] sizeOfBlocks, <span class=\"hljs-type\">int</span>[] sizeOfProcesses)</span> {\n        <span class=\"hljs-comment\">// The array list responsible for saving the memory allocations done by the best-fit algorithm</span>\n        ArrayList&lt;Integer&gt; memAlloc = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        <span class=\"hljs-comment\">// Do this for every process</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> processSize : sizeOfProcesses) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">chosenBlockIdx</span>\n                    <span class=\"hljs-operator\">=</span> findBestFit(\n                    sizeOfBlocks, processSize); <span class=\"hljs-comment\">// Find the index of the memory block going to be used</span>\n            memAlloc.add(chosenBlockIdx); <span class=\"hljs-comment\">// Store the chosen block index in the memAlloc array list</span>\n            <span class=\"hljs-keyword\">if</span> (chosenBlockIdx\n                    != NO_ALLOCATION) { <span class=\"hljs-comment\">// Only if a block was chosen to store the process in it,</span>\n                sizeOfBlocks[chosenBlockIdx] -= processSize; <span class=\"hljs-comment\">// resize the block based on the process size</span>\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> memAlloc;\n    }\n\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> Dekas Dimitrios\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WorstFitCPU</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">MemoryManagementAlgorithms</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">NO_ALLOCATION</span>\n            <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">255</span>; <span class=\"hljs-comment\">// if a process has been allocated in position -255,</span>\n    <span class=\"hljs-comment\">// it means that it has not been actually allocated.</span>\n\n    <span class=\"hljs-comment\">/**\n     * Method to find the index of the memory block that is going to fit the\n     * given process based on the worst fit algorithm.\n     *\n     * <span class=\"hljs-doctag\">@param</span> blocks: the array with the available memory blocks.\n     * <span class=\"hljs-doctag\">@param</span> process: the size of the process.\n     * <span class=\"hljs-doctag\">@return</span> the index of the block that fits, or -255 if no such block\n     * exists.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findWorstFit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] blockSizes, <span class=\"hljs-type\">int</span> processSize)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">max</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n             i &lt; blockSizes.length;\n             i++) { <span class=\"hljs-comment\">// Find the index of the biggest memory block available.</span>\n            <span class=\"hljs-keyword\">if</span> (blockSizes[i] &gt; max) {\n                max = blockSizes[i];\n                index = i;\n            }\n        }\n        <span class=\"hljs-comment\">// If the biggest memory block cannot fit the process, return -255 as the result</span>\n        <span class=\"hljs-keyword\">if</span> (processSize &gt; blockSizes[index]) {\n            <span class=\"hljs-keyword\">return</span> NO_ALLOCATION;\n        }\n        <span class=\"hljs-keyword\">return</span> index;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Method to allocate memory to blocks according to the worst fit algorithm.\n     * It should return an ArrayList of Integers, where the index is the process\n     * ID (zero-indexed) and the value is the block number (also zero-indexed).\n     *\n     * <span class=\"hljs-doctag\">@param</span> sizeOfBlocks: an int array that contains the sizes of the memory\n     * blocks available.\n     * <span class=\"hljs-doctag\">@param</span> sizeOfProcesses: an int array that contains the sizes of the\n     * processes we need memory blocks for.\n     * <span class=\"hljs-doctag\">@return</span> the ArrayList filled with Integers repressenting the memory\n     * allocation that took place.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"hljs-title function_\">fitProcess</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] sizeOfBlocks, <span class=\"hljs-type\">int</span>[] sizeOfProcesses)</span> {\n        <span class=\"hljs-comment\">// The array list responsible for saving the memory allocations done by the worst-fit algorithm</span>\n        ArrayList&lt;Integer&gt; memAlloc = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        <span class=\"hljs-comment\">// Do this for every process</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> processSize : sizeOfProcesses) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">chosenBlockIdx</span>\n                    <span class=\"hljs-operator\">=</span> findWorstFit(\n                    sizeOfBlocks, processSize); <span class=\"hljs-comment\">// Find the index of the memory block going to be used</span>\n            memAlloc.add(chosenBlockIdx); <span class=\"hljs-comment\">// Store the chosen block index in the memAlloc array list</span>\n            <span class=\"hljs-keyword\">if</span> (chosenBlockIdx\n                    != NO_ALLOCATION) { <span class=\"hljs-comment\">// Only if a block was chosen to store the process in it,</span>\n                sizeOfBlocks[chosenBlockIdx] -= processSize; <span class=\"hljs-comment\">// resize the block based on the process size</span>\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> memAlloc;\n    }\n\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> Dekas Dimitrios\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FirstFitCPU</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">MemoryManagementAlgorithms</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">NO_ALLOCATION</span>\n            <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">255</span>; <span class=\"hljs-comment\">// if a process has been allocated in position -255,</span>\n    <span class=\"hljs-comment\">// it means that it has not been actually allocated.</span>\n\n    <span class=\"hljs-comment\">/**\n     * Method to find the index of the memory block that is going to fit the\n     * given process based on the first fit algorithm.\n     *\n     * <span class=\"hljs-doctag\">@param</span> blocks: the array with the available memory blocks.\n     * <span class=\"hljs-doctag\">@param</span> process: the size of the process.\n     * <span class=\"hljs-doctag\">@return</span> the index of the block that fits, or -255 if no such block\n     * exists.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findFirstFit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] blockSizes, <span class=\"hljs-type\">int</span> processSize)</span> {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; blockSizes.length; i++) {\n            <span class=\"hljs-keyword\">if</span> (blockSizes[i] &gt;= processSize) {\n                <span class=\"hljs-keyword\">return</span> i;\n            }\n        }\n        <span class=\"hljs-comment\">// If there is not a block that can fit the process, return -255 as the result</span>\n        <span class=\"hljs-keyword\">return</span> NO_ALLOCATION;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Method to allocate memory to blocks according to the first fit algorithm.\n     * It should return an ArrayList of Integers, where the index is the process\n     * ID (zero-indexed) and the value is the block number (also zero-indexed).\n     *\n     * <span class=\"hljs-doctag\">@param</span> sizeOfBlocks: an int array that contains the sizes of the memory\n     * blocks available.\n     * <span class=\"hljs-doctag\">@param</span> sizeOfProcesses: an int array that contains the sizes of the\n     * processes we need memory blocks for.\n     * <span class=\"hljs-doctag\">@return</span> the ArrayList filled with Integers repressenting the memory\n     * allocation that took place.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"hljs-title function_\">fitProcess</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] sizeOfBlocks, <span class=\"hljs-type\">int</span>[] sizeOfProcesses)</span> {\n        <span class=\"hljs-comment\">// The array list responsible for saving the memory allocations done by the first-fit algorithm</span>\n        ArrayList&lt;Integer&gt; memAlloc = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        <span class=\"hljs-comment\">// Do this for every process</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> processSize : sizeOfProcesses) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">chosenBlockIdx</span>\n                    <span class=\"hljs-operator\">=</span> findFirstFit(\n                    sizeOfBlocks, processSize); <span class=\"hljs-comment\">// Find the index of the memory block going to be used</span>\n            memAlloc.add(chosenBlockIdx); <span class=\"hljs-comment\">// Store the chosen block index in the memAlloc array list</span>\n            <span class=\"hljs-keyword\">if</span> (chosenBlockIdx\n                    != NO_ALLOCATION) { <span class=\"hljs-comment\">// Only if a block was chosen to store the process in it,</span>\n                sizeOfBlocks[chosenBlockIdx] -= processSize; <span class=\"hljs-comment\">// resize the block based on the process size</span>\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> memAlloc;\n    }\n\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> Alexandros Lemonaris\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NextFit</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">MemoryManagementAlgorithms</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">NO_ALLOCATION</span>\n            <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">255</span>; <span class=\"hljs-comment\">// if a process has been allocated in position -255,</span>\n    <span class=\"hljs-comment\">// it means that it has not been actually allocated.</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">counter</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// variable that keeps the position of the last registration into the memory</span>\n    <span class=\"hljs-comment\">/**\n     * Method to find the index of the memory block that is going to fit the\n     * given process based on the next fit algorithm. In the case of next fit,\n     * if the search is interrupted in between, the new search is carried out from the last location.\n     *\n     * <span class=\"hljs-doctag\">@param</span> blocks: the array with the available memory blocks.\n     * <span class=\"hljs-doctag\">@param</span> process: the size of the process.\n     * <span class=\"hljs-doctag\">@return</span> the index of the block that fits, or -255 if no such block\n     * exists.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findNextFit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] blockSizes, <span class=\"hljs-type\">int</span> processSize)</span> {\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; blockSizes.length; i++) {\n            <span class=\"hljs-keyword\">if</span> (counter + i &gt;= blockSizes.length){\n                counter = -i; <span class=\"hljs-comment\">// starts from the start of the array</span>\n            }\n            <span class=\"hljs-keyword\">if</span> (blockSizes[i + counter] &gt;= processSize) {\n                counter += i;\n                <span class=\"hljs-keyword\">return</span> counter;\n            }\n        }\n        <span class=\"hljs-comment\">// If there is not a block that can fit the process, return -255 as the result</span>\n        counter += blockSizes.length; <span class=\"hljs-comment\">// counter keeps its last value</span>\n        <span class=\"hljs-keyword\">return</span> NO_ALLOCATION;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Method to allocate memory to blocks according to the first fit algorithm.\n     * It should return an ArrayList of Integers, where the index is the process\n     * ID (zero-indexed) and the value is the block number (also zero-indexed).\n     *\n     * <span class=\"hljs-doctag\">@param</span> sizeOfBlocks: an int array that contains the sizes of the memory\n     * blocks available.\n     * <span class=\"hljs-doctag\">@param</span> sizeOfProcesses: an int array that contains the sizes of the\n     * processes we need memory blocks for.\n     * <span class=\"hljs-doctag\">@return</span> the ArrayList filled with Integers repressenting the memory\n     * allocation that took place.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"hljs-title function_\">fitProcess</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] sizeOfBlocks, <span class=\"hljs-type\">int</span>[] sizeOfProcesses)</span> {\n        <span class=\"hljs-comment\">// The array list responsible for saving the memory allocations done by the first-fit algorithm</span>\n        ArrayList&lt;Integer&gt; memAlloc = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        <span class=\"hljs-comment\">// Do this for every process</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> processSize : sizeOfProcesses) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">chosenBlockIdx</span>\n                    <span class=\"hljs-operator\">=</span> findNextFit(\n                    sizeOfBlocks, processSize); <span class=\"hljs-comment\">// Find the index of the memory block going to be used</span>\n            memAlloc.add(chosenBlockIdx); <span class=\"hljs-comment\">// Store the chosen block index in the memAlloc array list</span>\n            <span class=\"hljs-keyword\">if</span> (chosenBlockIdx\n                    != NO_ALLOCATION) { <span class=\"hljs-comment\">// Only if a block was chosen to store the process in it,</span>\n                sizeOfBlocks[chosenBlockIdx] -= processSize; <span class=\"hljs-comment\">// resize the block based on the process size</span>\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> memAlloc;\n    }\n\n}\n\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}