{
  "slug": "merge-sort-recursive",
  "name": "Merge Sort Recursive",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/sorts/MergeSortRecursive.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/sorts/MergeSortRecursive.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\n\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MergeSortRecursive</span> {\n\n    List&lt;Integer&gt; arr;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MergeSortRecursive</span><span class=\"hljs-params\">(List&lt;Integer&gt; arr)</span> {\n        <span class=\"hljs-built_in\">this</span>.arr = arr;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">mergeSort</span><span class=\"hljs-params\">()</span> {\n        List&lt;Integer&gt; arrSorted = merge(arr);\n        System.out.println(arrSorted);\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> List&lt;Integer&gt; <span class=\"hljs-title function_\">merge</span><span class=\"hljs-params\">(List&lt;Integer&gt; arr)</span> {\n\n        <span class=\"hljs-comment\">// base condition</span>\n        <span class=\"hljs-keyword\">if</span> (arr.size() &lt;= <span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-keyword\">return</span> arr;\n        }\n\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">arrLength</span> <span class=\"hljs-operator\">=</span> arr.size();\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">half</span> <span class=\"hljs-operator\">=</span> arrLength / <span class=\"hljs-number\">2</span>;\n        List&lt;Integer&gt; arrA = arr.subList(<span class=\"hljs-number\">0</span>, half);\n        List&lt;Integer&gt; arrB = arr.subList(half, arr.size());\n\n        <span class=\"hljs-comment\">// recursion</span>\n        arrA = merge(arrA);\n        arrB = merge(arrB);\n\n        <span class=\"hljs-keyword\">return</span> sort(arrA, arrB);\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> List&lt;Integer&gt; <span class=\"hljs-title function_\">sort</span><span class=\"hljs-params\">(List&lt;Integer&gt; unsortedA, List&lt;Integer&gt; unsortedB)</span> {\n        <span class=\"hljs-keyword\">if</span> (unsortedA.size() &lt;= <span class=\"hljs-number\">0</span> &amp;&amp; unsortedB.size() &lt;= <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        }\n        <span class=\"hljs-keyword\">if</span> (unsortedA.size() &lt;= <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> unsortedB;\n        }\n        <span class=\"hljs-keyword\">if</span> (unsortedB.size() &lt;= <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> unsortedA;\n        }\n        <span class=\"hljs-keyword\">if</span> (unsortedA.get(<span class=\"hljs-number\">0</span>) &lt;= unsortedB.get(<span class=\"hljs-number\">0</span>)) {\n            List&lt;Integer&gt; newAl = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Integer&gt;() {\n                {\n                    add(unsortedA.get(<span class=\"hljs-number\">0</span>));\n                }\n            };\n            newAl.addAll(sort(unsortedA.subList(<span class=\"hljs-number\">1</span>, unsortedA.size()), unsortedB));\n            <span class=\"hljs-keyword\">return</span> newAl;\n        } <span class=\"hljs-keyword\">else</span> {\n            List&lt;Integer&gt; newAl = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Integer&gt;() {\n                {\n                    add(unsortedB.get(<span class=\"hljs-number\">0</span>));\n                }\n            };\n            newAl.addAll(sort(unsortedA, unsortedB.subList(<span class=\"hljs-number\">1</span>, unsortedB.size())));\n            <span class=\"hljs-keyword\">return</span> newAl;\n        }\n    }\n\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">MergeSortRecursive</span> <span class=\"hljs-variable\">sort</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MergeSortRecursive</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>)));\n        sort.mergeSort();\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Asindu Vidanagamachchi",
      "email": "ashvg.dev@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}