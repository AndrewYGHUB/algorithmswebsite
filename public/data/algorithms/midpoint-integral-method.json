{
  "slug": "midpoint-integral-method",
  "name": "Midpoint Integral Method",
  "categories": [
    "numericalmethods"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "numerical_methods/midpoint_integral_method.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/numerical_methods/midpoint_integral_method.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief A numerical method for easy [approximation of\n * integrals](https://en.wikipedia.org/wiki/Midpoint_method)\n * @details The idea is to split the interval into N of intervals and use as\n * interpolation points the xi for which it applies that xi = x0 + i*h, where h\n * is a step defined as h = (b-a)/N where a and b are the first and last points\n * of the interval of the integration [a, b].\n *\n * We create a table of the xi and their corresponding f(xi) values and we\n * evaluate the integral by the formula: I = h * {f(x0+h/2) + f(x1+h/2) + ... +\n * f(xN-1+h/2)}\n *\n * Arguments can be passed as parameters from the command line argv[1] = N,\n * argv[2] = a, argv[3] = b. In this case if the default values N=16, a=1, b=3\n * are changed then the tests/assert are disabled.\n *\n *\n * @author [ggkogkou](https://github.com/ggkogkou)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>     <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span>       <span class=\"hljs-comment\">/// for math functions</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdint&gt;</span>     <span class=\"hljs-comment\">/// for integer allocation</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdlib&gt;</span>     <span class=\"hljs-comment\">/// for std::atof</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;functional&gt;</span>  <span class=\"hljs-comment\">/// for std::function</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>    <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;map&gt;</span>         <span class=\"hljs-comment\">/// for std::map container</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace numerical_methods\n * @brief Numerical algorithms/methods\n */</span>\n<span class=\"hljs-keyword\">namespace</span> numerical_methods {\n<span class=\"hljs-comment\">/**\n * @namespace midpoint_rule\n * @brief Functions for the [Midpoint\n * Integral](https://en.wikipedia.org/wiki/Midpoint_method) method\n * implementation\n */</span>\n<span class=\"hljs-keyword\">namespace</span> midpoint_rule {\n<span class=\"hljs-comment\">/**\n * @fn double midpoint(const std::int32_t N, const double h, const double a,\n * const std::function&lt;double (double)&gt;&amp; func)\n * @brief Main function for implementing the Midpoint Integral Method\n * implementation\n * @param N is the number of intervals\n * @param h is the step\n * @param a is x0\n * @param func is the function that will be integrated\n * @returns the result of the integration\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">midpoint</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::<span class=\"hljs-type\">int32_t</span> N, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> h, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> a,\n                <span class=\"hljs-type\">const</span> std::function&lt;<span class=\"hljs-type\">double</span>(<span class=\"hljs-type\">double</span>)&gt;&amp; func)</span> </span>{\n    std::map&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">double</span>&gt;\n        data_table;  <span class=\"hljs-comment\">// Contains the data points, key: i, value: f(xi)</span>\n    <span class=\"hljs-type\">double</span> xi = a;   <span class=\"hljs-comment\">// Initialize xi to the starting point x0 = a</span>\n\n    <span class=\"hljs-comment\">// Create the data table</span>\n    <span class=\"hljs-comment\">// Loop from x0 to xN-1</span>\n    <span class=\"hljs-type\">double</span> temp = NAN;\n    <span class=\"hljs-keyword\">for</span> (std::<span class=\"hljs-type\">int32_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n        temp = <span class=\"hljs-built_in\">func</span>(xi + h / <span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">// find f(xi+h/2)</span>\n        data_table.<span class=\"hljs-built_in\">insert</span>(\n            std::<span class=\"hljs-built_in\">pair</span>&lt;std::<span class=\"hljs-type\">int32_t</span>, <span class=\"hljs-type\">double</span>&gt;(i, temp));  <span class=\"hljs-comment\">// add i and f(xi)</span>\n        xi += h;  <span class=\"hljs-comment\">// Get the next point xi for the next iteration</span>\n    }\n\n    <span class=\"hljs-comment\">// Evaluate the integral.</span>\n    <span class=\"hljs-comment\">// Remember: {f(x0+h/2) + f(x1+h/2) + ... + f(xN-1+h/2)}</span>\n    <span class=\"hljs-type\">double</span> evaluate_integral = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (std::<span class=\"hljs-type\">int32_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) evaluate_integral += data_table.<span class=\"hljs-built_in\">at</span>(i);\n\n    <span class=\"hljs-comment\">// Multiply by the coefficient h</span>\n    evaluate_integral *= h;\n\n    <span class=\"hljs-comment\">// If the result calculated is nan, then the user has given wrong input</span>\n    <span class=\"hljs-comment\">// interval.</span>\n    <span class=\"hljs-built_in\">assert</span>(!std::<span class=\"hljs-built_in\">isnan</span>(evaluate_integral) &amp;&amp;\n           <span class=\"hljs-string\">&quot;The definite integral can&#x27;t be evaluated. Check the validity of &quot;</span>\n           <span class=\"hljs-string\">&quot;your input.\\n&quot;</span>);\n    <span class=\"hljs-comment\">// Else return</span>\n    <span class=\"hljs-keyword\">return</span> evaluate_integral;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief A function f(x) that will be used to test the method\n * @param x The independent variable xi\n * @returns the value of the dependent variable yi = f(xi) = sqrt(xi) + ln(xi)\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> x)</span> </span>{ <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">sqrt</span>(x) + std::<span class=\"hljs-built_in\">log</span>(x); }\n<span class=\"hljs-comment\">/**\n * @brief A function g(x) that will be used to test the method\n * @param x The independent variable xi\n * @returns the value of the dependent variable yi = g(xi) = e^(-xi) * (4 -\n * xi^2)\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">g</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> x)</span> </span>{ <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">exp</span>(-x) * (<span class=\"hljs-number\">4</span> - std::<span class=\"hljs-built_in\">pow</span>(x, <span class=\"hljs-number\">2</span>)); }\n<span class=\"hljs-comment\">/**\n * @brief A function k(x) that will be used to test the method\n * @param x The independent variable xi\n * @returns the value of the dependent variable yi = k(xi) = sqrt(2*xi^3 + 3)\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">k</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> x)</span> </span>{ <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">sqrt</span>(<span class=\"hljs-number\">2</span> * std::<span class=\"hljs-built_in\">pow</span>(x, <span class=\"hljs-number\">3</span>) + <span class=\"hljs-number\">3</span>); }\n<span class=\"hljs-comment\">/**\n * @brief A function l(x) that will be used to test the method\n * @param x The independent variable xi\n * @returns the value of the dependent variable yi = l(xi) = xi + ln(2*xi + 1)\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">l</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> x)</span> </span>{ <span class=\"hljs-keyword\">return</span> x + std::<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-number\">2</span> * x + <span class=\"hljs-number\">1</span>); }\n\n}  <span class=\"hljs-comment\">// namespace midpoint_rule</span>\n}  <span class=\"hljs-comment\">// namespace numerical_methods</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @param N is the number of intervals\n * @param h is the step\n * @param a is x0\n * @param b is the end of the interval\n * @param used_argv_parameters is &#x27;true&#x27; if argv parameters are given and\n * &#x27;false&#x27; if not\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">(std::<span class=\"hljs-type\">int32_t</span> N, <span class=\"hljs-type\">double</span> h, <span class=\"hljs-type\">double</span> a, <span class=\"hljs-type\">double</span> b,\n                 <span class=\"hljs-type\">bool</span> used_argv_parameters)</span> </span>{\n    <span class=\"hljs-comment\">// Call midpoint() for each of the test functions f, g, k, l</span>\n    <span class=\"hljs-comment\">// Assert with two decimal point precision</span>\n    <span class=\"hljs-type\">double</span> result_f = numerical_methods::midpoint_rule::<span class=\"hljs-built_in\">midpoint</span>(\n        N, h, a, numerical_methods::midpoint_rule::f);\n    <span class=\"hljs-built_in\">assert</span>((used_argv_parameters || (result_f &gt;= <span class=\"hljs-number\">4.09</span> &amp;&amp; result_f &lt;= <span class=\"hljs-number\">4.10</span>)) &amp;&amp;\n           <span class=\"hljs-string\">&quot;The result of f(x) is wrong&quot;</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;The result of integral f(x) on interval [&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;, &quot;</span> &lt;&lt; b\n              &lt;&lt; <span class=\"hljs-string\">&quot;] is equal to: &quot;</span> &lt;&lt; result_f &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">double</span> result_g = numerical_methods::midpoint_rule::<span class=\"hljs-built_in\">midpoint</span>(\n        N, h, a, numerical_methods::midpoint_rule::g);\n    <span class=\"hljs-built_in\">assert</span>((used_argv_parameters || (result_g &gt;= <span class=\"hljs-number\">0.27</span> &amp;&amp; result_g &lt;= <span class=\"hljs-number\">0.28</span>)) &amp;&amp;\n           <span class=\"hljs-string\">&quot;The result of g(x) is wrong&quot;</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;The result of integral g(x) on interval [&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;, &quot;</span> &lt;&lt; b\n              &lt;&lt; <span class=\"hljs-string\">&quot;] is equal to: &quot;</span> &lt;&lt; result_g &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">double</span> result_k = numerical_methods::midpoint_rule::<span class=\"hljs-built_in\">midpoint</span>(\n        N, h, a, numerical_methods::midpoint_rule::k);\n    <span class=\"hljs-built_in\">assert</span>((used_argv_parameters || (result_k &gt;= <span class=\"hljs-number\">9.06</span> &amp;&amp; result_k &lt;= <span class=\"hljs-number\">9.07</span>)) &amp;&amp;\n           <span class=\"hljs-string\">&quot;The result of k(x) is wrong&quot;</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;The result of integral k(x) on interval [&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;, &quot;</span> &lt;&lt; b\n              &lt;&lt; <span class=\"hljs-string\">&quot;] is equal to: &quot;</span> &lt;&lt; result_k &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">double</span> result_l = numerical_methods::midpoint_rule::<span class=\"hljs-built_in\">midpoint</span>(\n        N, h, a, numerical_methods::midpoint_rule::l);\n    <span class=\"hljs-built_in\">assert</span>((used_argv_parameters || (result_l &gt;= <span class=\"hljs-number\">7.16</span> &amp;&amp; result_l &lt;= <span class=\"hljs-number\">7.17</span>)) &amp;&amp;\n           <span class=\"hljs-string\">&quot;The result of l(x) is wrong&quot;</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;The result of integral l(x) on interval [&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;, &quot;</span> &lt;&lt; b\n              &lt;&lt; <span class=\"hljs-string\">&quot;] is equal to: &quot;</span> &lt;&lt; result_l &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @param argc commandline argument count (ignored)\n * @param argv commandline array of arguments (ignored)\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span>** argv)</span> </span>{\n    std::<span class=\"hljs-type\">int32_t</span> N =\n        <span class=\"hljs-number\">16</span>;  <span class=\"hljs-comment\">/// Number of intervals to divide the integration interval.</span>\n    <span class=\"hljs-comment\">/// MUST BE EVEN</span>\n    <span class=\"hljs-type\">double</span> a = <span class=\"hljs-number\">1</span>, b = <span class=\"hljs-number\">3</span>;  <span class=\"hljs-comment\">/// Starting and ending point of the integration in</span>\n    <span class=\"hljs-comment\">/// the real axis</span>\n    <span class=\"hljs-type\">double</span> h = NAN;  <span class=\"hljs-comment\">/// Step, calculated by a, b and N</span>\n\n    <span class=\"hljs-type\">bool</span> used_argv_parameters =\n        <span class=\"hljs-literal\">false</span>;  <span class=\"hljs-comment\">// If argv parameters are used then the assert must be omitted</span>\n    <span class=\"hljs-comment\">// for the test cases</span>\n\n    <span class=\"hljs-comment\">// Get user input (by the command line parameters or the console after</span>\n    <span class=\"hljs-comment\">// displaying messages)</span>\n    <span class=\"hljs-keyword\">if</span> (argc == <span class=\"hljs-number\">4</span>) {\n        N = std::<span class=\"hljs-built_in\">atoi</span>(argv[<span class=\"hljs-number\">1</span>]);\n        a = std::<span class=\"hljs-built_in\">atof</span>(argv[<span class=\"hljs-number\">2</span>]);\n        b = std::<span class=\"hljs-built_in\">atof</span>(argv[<span class=\"hljs-number\">3</span>]);\n        <span class=\"hljs-comment\">// Check if a&lt;b else abort</span>\n        <span class=\"hljs-built_in\">assert</span>(a &lt; b &amp;&amp; <span class=\"hljs-string\">&quot;a has to be less than b&quot;</span>);\n        <span class=\"hljs-built_in\">assert</span>(N &gt; <span class=\"hljs-number\">0</span> &amp;&amp; <span class=\"hljs-string\">&quot;N has to be &gt; 0&quot;</span>);\n        <span class=\"hljs-keyword\">if</span> (N &lt; <span class=\"hljs-number\">4</span> || a != <span class=\"hljs-number\">1</span> || b != <span class=\"hljs-number\">3</span>) {\n            used_argv_parameters = <span class=\"hljs-literal\">true</span>;\n        }\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;You selected N=&quot;</span> &lt;&lt; N &lt;&lt; <span class=\"hljs-string\">&quot;, a=&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;, b=&quot;</span> &lt;&lt; b\n                  &lt;&lt; std::endl;\n    } <span class=\"hljs-keyword\">else</span> {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Default N=&quot;</span> &lt;&lt; N &lt;&lt; <span class=\"hljs-string\">&quot;, a=&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;, b=&quot;</span> &lt;&lt; b\n                  &lt;&lt; std::endl;\n    }\n\n    <span class=\"hljs-comment\">// Find the step</span>\n    h = (b - a) / N;\n\n    <span class=\"hljs-built_in\">test</span>(N, h, a, b, used_argv_parameters);  <span class=\"hljs-comment\">// run self-test implementations</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "ggkogkou",
      "email": "76820848+ggkogkou@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}