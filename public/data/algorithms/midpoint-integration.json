{
  "slug": "midpoint-integration",
  "name": "Midpoint Integration",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Maths/MidpointIntegration.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/MidpointIntegration.js",
      "code": "<span class=\"hljs-comment\">/**\n*\n* <span class=\"hljs-doctag\">@title</span> Midpoint rule for definite integral evaluation\n* <span class=\"hljs-doctag\">@author</span> [ggkogkou](https://github.com/ggkogkou)\n* <span class=\"hljs-doctag\">@brief</span> Calculate definite integrals with midpoint method\n*\n* <span class=\"hljs-doctag\">@details</span> The idea is to split the interval in a number N of intervals and use as interpolation points the xi\n* for which it applies that xi = x0 + i*h, where h is a step defined as h = (b-a)/N where a and b are the\n* first and last points of the interval of the integration [a, b].\n*\n* We create a table of the xi and their corresponding f(xi) values and we evaluate the integral by the formula:\n* I = h * {f(x0+h/2) + f(x1+h/2) + ... + f(xN-1+h/2)}\n*\n* N must be &gt; 0 and a&lt;b. By increasing N, we also increase precision\n*\n* [More info link](https://tutorial.math.lamar.edu/classes/calcii/approximatingdefintegrals.aspx)\n*\n*/</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">integralEvaluation</span> (N, a, b, func) {\n  <span class=\"hljs-comment\">// Check if all restrictions are satisfied for the given N, a, b</span>\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Number</span>.<span class=\"hljs-title function_\">isInteger</span>(N) || <span class=\"hljs-title class_\">Number</span>.<span class=\"hljs-built_in\">isNaN</span>(a) || <span class=\"hljs-title class_\">Number</span>.<span class=\"hljs-built_in\">isNaN</span>(b)) { <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;Expected integer N and finite a, b&#x27;</span>) }\n  <span class=\"hljs-keyword\">if</span> (N &lt;= <span class=\"hljs-number\">0</span>) { <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;N has to be &gt;= 2&#x27;</span>) } <span class=\"hljs-comment\">// check if N &gt; 0</span>\n  <span class=\"hljs-keyword\">if</span> (a &gt; b) { <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;a must be less or equal than b&#x27;</span>) } <span class=\"hljs-comment\">// Check if a &lt; b</span>\n  <span class=\"hljs-keyword\">if</span> (a === b) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">// If a === b integral is zero</span>\n\n  <span class=\"hljs-comment\">// Calculate the step h</span>\n  <span class=\"hljs-keyword\">const</span> h = (b - a) / N\n\n  <span class=\"hljs-comment\">// Find interpolation points</span>\n  <span class=\"hljs-keyword\">let</span> xi = a <span class=\"hljs-comment\">// initialize xi = x0</span>\n  <span class=\"hljs-keyword\">const</span> pointsArray = []\n\n  <span class=\"hljs-comment\">// Find the sum {f(x0+h/2) + f(x1+h/2) + ... + f(xN-1+h/2)}</span>\n  <span class=\"hljs-keyword\">let</span> temp\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n    temp = <span class=\"hljs-title function_\">func</span>(xi + h / <span class=\"hljs-number\">2</span>)\n    pointsArray.<span class=\"hljs-title function_\">push</span>(temp)\n    xi += h\n  }\n\n  <span class=\"hljs-comment\">// Calculate the integral</span>\n  <span class=\"hljs-keyword\">let</span> result = h\n  temp = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; pointsArray.<span class=\"hljs-property\">length</span>; i++) temp += pointsArray[i]\n\n  result *= temp\n\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Number</span>.<span class=\"hljs-built_in\">isNaN</span>(result)) { <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Result is NaN. The input interval does not belong to the functions domain&#x27;</span>) }\n\n  <span class=\"hljs-keyword\">return</span> result\n}\n\n<span class=\"hljs-keyword\">export</span> { integralEvaluation }\n"
    }
  },
  "contributors": [
    {
      "name": "ggkogkou",
      "email": "76820848+ggkogkou@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}