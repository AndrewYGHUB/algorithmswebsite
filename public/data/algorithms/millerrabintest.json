{
  "slug": "millerrabintest",
  "name": "Millerrabintest",
  "categories": [
    "math",
    "prime"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "math/prime/millerrabintest.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/math/prime/millerrabintest.go",
      "code": "<span class=\"hljs-comment\">// This file implements two versions of the Miller-Rabin primality test.</span>\n<span class=\"hljs-comment\">// One of the implementations is deterministic and the other is probabilistic.</span>\n<span class=\"hljs-comment\">// The Miller-Rabin test is one of the simplest and fastest known primality</span>\n<span class=\"hljs-comment\">// tests and is widely used.</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// Authors:</span>\n<span class=\"hljs-comment\">// [Taj](https://github.com/tjgurwara99)</span>\n<span class=\"hljs-comment\">// [Rak](https://github.com/raklaptudirm)</span>\n\n<span class=\"hljs-keyword\">package</span> prime\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;math/rand&quot;</span>\n\n\t<span class=\"hljs-string\">&quot;github.com/TheAlgorithms/Go/math/modular&quot;</span>\n)\n\n<span class=\"hljs-comment\">// formatNum accepts a number and returns the</span>\n<span class=\"hljs-comment\">// odd number d such that num = 2^s * d + 1</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">formatNum</span><span class=\"hljs-params\">(num <span class=\"hljs-type\">int64</span>)</span></span> (d <span class=\"hljs-type\">int64</span>, s <span class=\"hljs-type\">int64</span>) {\n\td = num - <span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-keyword\">for</span> num%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> {\n\t\td /= <span class=\"hljs-number\">2</span>\n\t\ts++\n\t}\n\t<span class=\"hljs-keyword\">return</span>\n}\n\n<span class=\"hljs-comment\">// isTrivial checks if num&#x27;s primality is easy to determine.</span>\n<span class=\"hljs-comment\">// If it is, it returns true and num&#x27;s primality. Otherwise</span>\n<span class=\"hljs-comment\">// it returns false and false.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isTrivial</span><span class=\"hljs-params\">(num <span class=\"hljs-type\">int64</span>)</span></span> (prime <span class=\"hljs-type\">bool</span>, trivial <span class=\"hljs-type\">bool</span>) {\n\t<span class=\"hljs-keyword\">if</span> num &lt;= <span class=\"hljs-number\">4</span> {\n\t\t<span class=\"hljs-comment\">// 2 and 3 are primes</span>\n\t\tprime = num == <span class=\"hljs-number\">2</span> || num == <span class=\"hljs-number\">3</span>\n\t\ttrivial = <span class=\"hljs-literal\">true</span>\n\t} <span class=\"hljs-keyword\">else</span> {\n\t\tprime = <span class=\"hljs-literal\">false</span>\n\t\t<span class=\"hljs-comment\">// number is trivial prime if</span>\n\t\t<span class=\"hljs-comment\">// it is divisible by 2</span>\n\t\ttrivial = num%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>\n\t}\n\n\t<span class=\"hljs-keyword\">return</span>\n}\n\n<span class=\"hljs-comment\">// MillerTest tests whether num is a strong probable prime to a witness.</span>\n<span class=\"hljs-comment\">// Formally: a^d ≡ 1 (mod n) or a^(2^r * d) ≡ -1 (mod n), 0 &lt;= r &lt;= s</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">MillerTest</span><span class=\"hljs-params\">(num, witness <span class=\"hljs-type\">int64</span>)</span></span> (<span class=\"hljs-type\">bool</span>, <span class=\"hljs-type\">error</span>) {\n\td, _ := formatNum(num)\n\tres, err := modular.Exponentiation(witness, d, num)\n\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, err\n\t}\n\t<span class=\"hljs-comment\">// miller conditions checks</span>\n\t<span class=\"hljs-keyword\">if</span> res == <span class=\"hljs-number\">1</span> || res == num<span class=\"hljs-number\">-1</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">nil</span>\n\t}\n\n\t<span class=\"hljs-keyword\">for</span> d != num<span class=\"hljs-number\">-1</span> {\n\t\tres = (res * res) % num\n\t\td *= <span class=\"hljs-number\">2</span>\n\t\t<span class=\"hljs-keyword\">if</span> res == <span class=\"hljs-number\">1</span> {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">nil</span>\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> res == num<span class=\"hljs-number\">-1</span> {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">nil</span>\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">// MillerRandomTest This is the intermediate step that repeats within the</span>\n<span class=\"hljs-comment\">// miller rabin primality test for better probabilitic chances of</span>\n<span class=\"hljs-comment\">// receiving the correct result with random witnesses.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">MillerRandomTest</span><span class=\"hljs-params\">(num <span class=\"hljs-type\">int64</span>)</span></span> (<span class=\"hljs-type\">bool</span>, <span class=\"hljs-type\">error</span>) {\n\trandom := rand.Int63n(num<span class=\"hljs-number\">-2</span>) + <span class=\"hljs-number\">2</span>\n\t<span class=\"hljs-keyword\">return</span> MillerTest(num, random)\n}\n\n<span class=\"hljs-comment\">// MillerTestMultiple is like MillerTest but runs the test for multiple</span>\n<span class=\"hljs-comment\">// witnesses.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">MillerTestMultiple</span><span class=\"hljs-params\">(num <span class=\"hljs-type\">int64</span>, witnesses ...<span class=\"hljs-type\">int64</span>)</span></span> (<span class=\"hljs-type\">bool</span>, <span class=\"hljs-type\">error</span>) {\n\t<span class=\"hljs-keyword\">for</span> _, witness := <span class=\"hljs-keyword\">range</span> witnesses {\n\t\tprime, err := MillerTest(num, witness)\n\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, err\n\t\t}\n\n\t\t<span class=\"hljs-keyword\">if</span> !prime {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">nil</span>\n\t\t}\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">// MillerRabinProbabilistic is a probabilistic test for primality</span>\n<span class=\"hljs-comment\">// of an integer based of the algorithm devised by Miller and Rabin.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">MillerRabinProbabilistic</span><span class=\"hljs-params\">(num, rounds <span class=\"hljs-type\">int64</span>)</span></span> (<span class=\"hljs-type\">bool</span>, <span class=\"hljs-type\">error</span>) {\n\t<span class=\"hljs-keyword\">if</span> prime, trivial := isTrivial(num); trivial {\n\t\t<span class=\"hljs-comment\">// num is a trivial number</span>\n\t\t<span class=\"hljs-keyword\">return</span> prime, <span class=\"hljs-literal\">nil</span>\n\t}\n\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-type\">int64</span>(<span class=\"hljs-number\">0</span>); i &lt; rounds; i++ {\n\t\tval, err := MillerRandomTest(num)\n\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, err\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> !val {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">nil</span>\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">// MillerRabinDeterministic is a Deterministic version of the Miller-Rabin</span>\n<span class=\"hljs-comment\">// test, which returns correct results for all valid int64 numbers.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">MillerRabinDeterministic</span><span class=\"hljs-params\">(num <span class=\"hljs-type\">int64</span>)</span></span> (<span class=\"hljs-type\">bool</span>, <span class=\"hljs-type\">error</span>) {\n\t<span class=\"hljs-keyword\">if</span> prime, trivial := isTrivial(num); trivial {\n\t\t<span class=\"hljs-comment\">// num is a trivial number</span>\n\t\t<span class=\"hljs-keyword\">return</span> prime, <span class=\"hljs-literal\">nil</span>\n\t}\n\n\t<span class=\"hljs-keyword\">switch</span> {\n\t<span class=\"hljs-keyword\">case</span> num &lt; <span class=\"hljs-number\">2047</span>:\n\t\t<span class=\"hljs-comment\">// witness 2 can determine the primality of any number less than 2047</span>\n\t\t<span class=\"hljs-keyword\">return</span> MillerTest(num, <span class=\"hljs-number\">2</span>)\n\t<span class=\"hljs-keyword\">case</span> num &lt; <span class=\"hljs-number\">1</span>_373_653:\n\t\t<span class=\"hljs-comment\">// witnesses 2 and 3 can determine the primality</span>\n\t\t<span class=\"hljs-comment\">// of any number less than 1,373,653</span>\n\t\t<span class=\"hljs-keyword\">return</span> MillerTestMultiple(num, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n\t<span class=\"hljs-keyword\">case</span> num &lt; <span class=\"hljs-number\">9</span>_080_191:\n\t\t<span class=\"hljs-comment\">// witnesses 31 and 73 can determine the primality</span>\n\t\t<span class=\"hljs-comment\">// of any number less than 9,080,191</span>\n\t\t<span class=\"hljs-keyword\">return</span> MillerTestMultiple(num, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">73</span>)\n\t<span class=\"hljs-keyword\">case</span> num &lt; <span class=\"hljs-number\">25</span>_326_001:\n\t\t<span class=\"hljs-comment\">// witnesses 2, 3, and 5 can determine the</span>\n\t\t<span class=\"hljs-comment\">// primality of any number less than 25,326,001</span>\n\t\t<span class=\"hljs-keyword\">return</span> MillerTestMultiple(num, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>)\n\t<span class=\"hljs-keyword\">case</span> num &lt; <span class=\"hljs-number\">1</span>_122_004_669_633:\n\t\t<span class=\"hljs-comment\">// witnesses 2, 13, 23, and 1,662,803 can determine the</span>\n\t\t<span class=\"hljs-comment\">// primality of any number less than 1,122,004,669,633</span>\n\t\t<span class=\"hljs-keyword\">return</span> MillerTestMultiple(num, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">1</span>_662_803)\n\t<span class=\"hljs-keyword\">case</span> num &lt; <span class=\"hljs-number\">2</span>_152_302_898_747:\n\t\t<span class=\"hljs-comment\">// witnesses 2, 3, 5, 7, and 11 can determine the primality</span>\n\t\t<span class=\"hljs-comment\">// of any number less than 2,152,302,898,747</span>\n\t\t<span class=\"hljs-keyword\">return</span> MillerTestMultiple(num, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>)\n\t<span class=\"hljs-keyword\">case</span> num &lt; <span class=\"hljs-number\">341</span>_550_071_728_321:\n\t\t<span class=\"hljs-comment\">// witnesses 2, 3, 5, 7, 11, 13, and 17 can determine the</span>\n\t\t<span class=\"hljs-comment\">// primality of any number less than 341,550,071,728,321</span>\n\t\t<span class=\"hljs-keyword\">return</span> MillerTestMultiple(num, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">17</span>)\n\t<span class=\"hljs-keyword\">default</span>:\n\t\t<span class=\"hljs-comment\">// witnesses 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, and 37 can determine</span>\n\t\t<span class=\"hljs-comment\">// the primality of any number less than 318,665,857,834,031,151,167,461</span>\n\t\t<span class=\"hljs-comment\">// which is well above the max int64 9,223,372,036,854,775,807</span>\n\t\t<span class=\"hljs-keyword\">return</span> MillerTestMultiple(num, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">37</span>)\n\t}\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Lars Mueller",
      "email": "appgurulars@gmx.de",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}