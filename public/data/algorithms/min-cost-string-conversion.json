{
  "slug": "min-cost-string-conversion",
  "name": "Min Cost String Conversion",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings/min_cost_string_conversion.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings/min_cost_string_conversion.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nAlgorithm for calculating the most cost-efficient sequence for converting one string\ninto another.\nThe only allowed operations are\n--- Cost to copy a character is copy_cost\n--- Cost to replace a character is replace_cost\n--- Cost to delete a character is delete_cost\n--- Cost to insert a character is insert_cost\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">compute_transform_tables</span>(<span class=\"hljs-params\">\n    source_string: <span class=\"hljs-built_in\">str</span>,\n    destination_string: <span class=\"hljs-built_in\">str</span>,\n    copy_cost: <span class=\"hljs-built_in\">int</span>,\n    replace_cost: <span class=\"hljs-built_in\">int</span>,\n    delete_cost: <span class=\"hljs-built_in\">int</span>,\n    insert_cost: <span class=\"hljs-built_in\">int</span>,\n</span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]], <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]]]:\n    source_seq = <span class=\"hljs-built_in\">list</span>(source_string)\n    destination_seq = <span class=\"hljs-built_in\">list</span>(destination_string)\n    len_source_seq = <span class=\"hljs-built_in\">len</span>(source_seq)\n    len_destination_seq = <span class=\"hljs-built_in\">len</span>(destination_seq)\n\n    costs = [\n        [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(len_destination_seq + <span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(len_source_seq + <span class=\"hljs-number\">1</span>)\n    ]\n    ops = [\n        [<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(len_destination_seq + <span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(len_source_seq + <span class=\"hljs-number\">1</span>)\n    ]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, len_source_seq + <span class=\"hljs-number\">1</span>):\n        costs[i][<span class=\"hljs-number\">0</span>] = i * delete_cost\n        ops[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">f&quot;D<span class=\"hljs-subst\">{source_seq[i - <span class=\"hljs-number\">1</span>]:c}</span>&quot;</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, len_destination_seq + <span class=\"hljs-number\">1</span>):\n        costs[<span class=\"hljs-number\">0</span>][i] = i * insert_cost\n        ops[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-string\">f&quot;I<span class=\"hljs-subst\">{destination_seq[i - <span class=\"hljs-number\">1</span>]:c}</span>&quot;</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, len_source_seq + <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, len_destination_seq + <span class=\"hljs-number\">1</span>):\n            <span class=\"hljs-keyword\">if</span> source_seq[i - <span class=\"hljs-number\">1</span>] == destination_seq[j - <span class=\"hljs-number\">1</span>]:\n                costs[i][j] = costs[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] + copy_cost\n                ops[i][j] = <span class=\"hljs-string\">f&quot;C<span class=\"hljs-subst\">{source_seq[i - <span class=\"hljs-number\">1</span>]:c}</span>&quot;</span>\n            <span class=\"hljs-keyword\">else</span>:\n                costs[i][j] = costs[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] + replace_cost\n                ops[i][j] = <span class=\"hljs-string\">f&quot;R<span class=\"hljs-subst\">{source_seq[i - <span class=\"hljs-number\">1</span>]:c}</span>&quot;</span> + <span class=\"hljs-built_in\">str</span>(destination_seq[j - <span class=\"hljs-number\">1</span>])\n\n            <span class=\"hljs-keyword\">if</span> costs[i - <span class=\"hljs-number\">1</span>][j] + delete_cost &lt; costs[i][j]:\n                costs[i][j] = costs[i - <span class=\"hljs-number\">1</span>][j] + delete_cost\n                ops[i][j] = <span class=\"hljs-string\">f&quot;D<span class=\"hljs-subst\">{source_seq[i - <span class=\"hljs-number\">1</span>]:c}</span>&quot;</span>\n\n            <span class=\"hljs-keyword\">if</span> costs[i][j - <span class=\"hljs-number\">1</span>] + insert_cost &lt; costs[i][j]:\n                costs[i][j] = costs[i][j - <span class=\"hljs-number\">1</span>] + insert_cost\n                ops[i][j] = <span class=\"hljs-string\">f&quot;I<span class=\"hljs-subst\">{destination_seq[j - <span class=\"hljs-number\">1</span>]:c}</span>&quot;</span>\n\n    <span class=\"hljs-keyword\">return</span> costs, ops\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">assemble_transformation</span>(<span class=\"hljs-params\">ops: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]], i: <span class=\"hljs-built_in\">int</span>, j: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]:\n    <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> j == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> []\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">if</span> ops[i][j][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;C&quot;</span> <span class=\"hljs-keyword\">or</span> ops[i][j][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;R&quot;</span>:\n            seq = assemble_transformation(ops, i - <span class=\"hljs-number\">1</span>, j - <span class=\"hljs-number\">1</span>)\n            seq.append(ops[i][j])\n            <span class=\"hljs-keyword\">return</span> seq\n        <span class=\"hljs-keyword\">elif</span> ops[i][j][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;D&quot;</span>:\n            seq = assemble_transformation(ops, i - <span class=\"hljs-number\">1</span>, j)\n            seq.append(ops[i][j])\n            <span class=\"hljs-keyword\">return</span> seq\n        <span class=\"hljs-keyword\">else</span>:\n            seq = assemble_transformation(ops, i, j - <span class=\"hljs-number\">1</span>)\n            seq.append(ops[i][j])\n            <span class=\"hljs-keyword\">return</span> seq\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    _, operations = compute_transform_tables(<span class=\"hljs-string\">&quot;Python&quot;</span>, <span class=\"hljs-string\">&quot;Algorithms&quot;</span>, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)\n\n    m = <span class=\"hljs-built_in\">len</span>(operations)\n    n = <span class=\"hljs-built_in\">len</span>(operations[<span class=\"hljs-number\">0</span>])\n    sequence = assemble_transformation(operations, m - <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>)\n\n    string = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-string\">&quot;Python&quot;</span>)\n    i = <span class=\"hljs-number\">0</span>\n    cost = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;min_cost.txt&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>) <span class=\"hljs-keyword\">as</span> file:\n        <span class=\"hljs-keyword\">for</span> op <span class=\"hljs-keyword\">in</span> sequence:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;&quot;</span>.join(string))\n\n            <span class=\"hljs-keyword\">if</span> op[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;C&quot;</span>:\n                file.write(<span class=\"hljs-string\">&quot;%-16s&quot;</span> % <span class=\"hljs-string\">&quot;Copy %c&quot;</span> % op[<span class=\"hljs-number\">1</span>])\n                file.write(<span class=\"hljs-string\">&quot;\\t\\t\\t&quot;</span> + <span class=\"hljs-string\">&quot;&quot;</span>.join(string))\n                file.write(<span class=\"hljs-string\">&quot;\\r\\n&quot;</span>)\n\n                cost -= <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">elif</span> op[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;R&quot;</span>:\n                string[i] = op[<span class=\"hljs-number\">2</span>]\n\n                file.write(<span class=\"hljs-string\">&quot;%-16s&quot;</span> % (<span class=\"hljs-string\">&quot;Replace %c&quot;</span> % op[<span class=\"hljs-number\">1</span>] + <span class=\"hljs-string\">&quot; with &quot;</span> + <span class=\"hljs-built_in\">str</span>(op[<span class=\"hljs-number\">2</span>])))\n                file.write(<span class=\"hljs-string\">&quot;\\t\\t&quot;</span> + <span class=\"hljs-string\">&quot;&quot;</span>.join(string))\n                file.write(<span class=\"hljs-string\">&quot;\\r\\n&quot;</span>)\n\n                cost += <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">elif</span> op[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;D&quot;</span>:\n                string.pop(i)\n\n                file.write(<span class=\"hljs-string\">&quot;%-16s&quot;</span> % <span class=\"hljs-string\">&quot;Delete %c&quot;</span> % op[<span class=\"hljs-number\">1</span>])\n                file.write(<span class=\"hljs-string\">&quot;\\t\\t\\t&quot;</span> + <span class=\"hljs-string\">&quot;&quot;</span>.join(string))\n                file.write(<span class=\"hljs-string\">&quot;\\r\\n&quot;</span>)\n\n                cost += <span class=\"hljs-number\">2</span>\n            <span class=\"hljs-keyword\">else</span>:\n                string.insert(i, op[<span class=\"hljs-number\">1</span>])\n\n                file.write(<span class=\"hljs-string\">&quot;%-16s&quot;</span> % <span class=\"hljs-string\">&quot;Insert %c&quot;</span> % op[<span class=\"hljs-number\">1</span>])\n                file.write(<span class=\"hljs-string\">&quot;\\t\\t\\t&quot;</span> + <span class=\"hljs-string\">&quot;&quot;</span>.join(string))\n                file.write(<span class=\"hljs-string\">&quot;\\r\\n&quot;</span>)\n\n                cost += <span class=\"hljs-number\">2</span>\n\n            i += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;&quot;</span>.join(string))\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Cost: &quot;</span>, cost)\n\n        file.write(<span class=\"hljs-string\">&quot;\\r\\nMinimum cost: &quot;</span> + <span class=\"hljs-built_in\">str</span>(cost))\n"
    },
    "f-sharp": {
      "dir": "Algorithms/Strings/MinCostStringConversion.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms/Strings/MinCostStringConversion.fs",
      "code": "﻿<span class=\"hljs-comment\">/// Algorithm for calculating the most cost-efficient sequence for converting one string</span>\n<span class=\"hljs-comment\">/// into another.</span>\n<span class=\"hljs-comment\">/// The only allowed operations are</span>\n<span class=\"hljs-comment\">/// --- Cost to copy a character is copy_cost</span>\n<span class=\"hljs-comment\">/// --- Cost to replace a character is replace_cost</span>\n<span class=\"hljs-comment\">/// --- Cost to delete a character is delete_cost</span>\n<span class=\"hljs-comment\">/// --- Cost to insert a character is insert_cost</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-keyword\">namespace</span> Algorithms.Strings\n\n<span class=\"hljs-keyword\">module</span> MinCostStringConversion <span class=\"hljs-operator\">=</span>\n    <span class=\"hljs-keyword\">let</span> computeTransformTables\n        (\n            sourceString<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>,\n            destinationString<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>,\n            copyCost<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span>,\n            replaceCost<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span>,\n            deleteCost<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span>,\n            insertCost<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span>\n        )<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">list</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-type\">int</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-type\">list</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-type\">string</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">=</span>\n        <span class=\"hljs-keyword\">let</span> sourceSeq <span class=\"hljs-operator\">=</span> [ sourceString ]\n        <span class=\"hljs-keyword\">let</span> destinationSeq <span class=\"hljs-operator\">=</span> [ destinationString ]\n        <span class=\"hljs-keyword\">let</span> lenSourceSeq <span class=\"hljs-operator\">=</span> sourceSeq.Length\n        <span class=\"hljs-keyword\">let</span> lenDestinationSeq <span class=\"hljs-operator\">=</span> destinationSeq.Length\n\n        <span class=\"hljs-keyword\">let</span> costs <span class=\"hljs-operator\">=</span>\n            [<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..</span> (lenSourceSeq <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>) <span class=\"hljs-operator\">-&gt;</span> [<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..</span> lenDestinationSeq <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">-&gt;</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">|</span>] <span class=\"hljs-operator\">|</span>]\n\n        <span class=\"hljs-keyword\">let</span> ops <span class=\"hljs-operator\">=</span>\n            [<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..</span> lenSourceSeq <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">-&gt;</span> [<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..</span> lenDestinationSeq <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">-&gt;</span> <span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-operator\">|</span>] <span class=\"hljs-operator\">|</span>]\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">to</span> lenSourceSeq <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\n            costs.[i].[<span class=\"hljs-number\">0</span>] <span class=\"hljs-operator\">&lt;-</span> i <span class=\"hljs-operator\">*</span> deleteCost\n            ops.[i].[<span class=\"hljs-number\">0</span>] <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-built_in\">sprintf</span> <span class=\"hljs-string\">&quot;D%s&quot;</span> (sourceSeq.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>])\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">to</span> lenDestinationSeq <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\n            costs.[<span class=\"hljs-number\">0</span>].[i] <span class=\"hljs-operator\">&lt;-</span> i <span class=\"hljs-operator\">*</span> insertCost\n            ops.[<span class=\"hljs-number\">0</span>].[i] <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-built_in\">sprintf</span> <span class=\"hljs-string\">&quot;I%s&quot;</span> (destinationSeq.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>])\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">..</span> lenSourceSeq <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">..</span> lenDestinationSeq <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\n                <span class=\"hljs-keyword\">if</span> sourceSeq.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>] <span class=\"hljs-operator\">=</span> destinationSeq.[j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">then</span>\n                    costs.[i].[j] <span class=\"hljs-operator\">&lt;-</span> costs.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>].[j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>] <span class=\"hljs-operator\">+</span> copyCost\n                    ops.[i].[j] <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-built_in\">sprintf</span> <span class=\"hljs-string\">&quot;C%s&quot;</span> (sourceSeq.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>])\n                <span class=\"hljs-keyword\">else</span>\n                    costs.[i].[j] <span class=\"hljs-operator\">&lt;-</span> costs.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>].[j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>] <span class=\"hljs-operator\">+</span> replaceCost\n\n                    ops.[i].[j] <span class=\"hljs-operator\">&lt;-</span>\n                        <span class=\"hljs-built_in\">sprintf</span>\n                            <span class=\"hljs-string\">&quot;R%s&quot;</span>\n                            (sourceSeq.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>]\n                             <span class=\"hljs-operator\">+</span> (string) (destinationSeq.[j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>]))\n\n                <span class=\"hljs-keyword\">if</span> costs.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>].[j] <span class=\"hljs-operator\">+</span> deleteCost <span class=\"hljs-operator\">&lt;</span> costs.[i].[j] <span class=\"hljs-keyword\">then</span>\n                    costs.[i].[j] <span class=\"hljs-operator\">&lt;-</span> costs.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>].[j] <span class=\"hljs-operator\">+</span> deleteCost\n                    ops.[i].[j] <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-built_in\">sprintf</span> <span class=\"hljs-string\">&quot;D%s&quot;</span> (sourceSeq.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>])\n\n                <span class=\"hljs-keyword\">if</span> costs.[i].[j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>] <span class=\"hljs-operator\">+</span> insertCost <span class=\"hljs-operator\">&lt;</span> costs.[i].[j] <span class=\"hljs-keyword\">then</span>\n                    costs.[i].[j] <span class=\"hljs-operator\">&lt;-</span> costs.[i].[j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>] <span class=\"hljs-operator\">+</span> insertCost\n                    ops.[i].[j] <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-built_in\">sprintf</span> <span class=\"hljs-string\">&quot;I%s&quot;</span> (destinationSeq.[j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>])\n\n        costs <span class=\"hljs-operator\">|&gt;</span> Seq.cast<span class=\"hljs-operator\">&lt;</span>int<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">|&gt;</span> Seq.toList, ops <span class=\"hljs-operator\">|&gt;</span> Seq.cast<span class=\"hljs-operator\">&lt;</span>string<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">|&gt;</span> Seq.toList\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">rec</span> assembleTransformation (ops<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">list</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-type\">string</span><span class=\"hljs-operator\">&gt;</span>, i<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span>, j<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span>)<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">list</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-type\">string</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">=</span>\n        <span class=\"hljs-keyword\">if</span> i <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">&amp;&amp;</span> j <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span>\n            List.empty\n        <span class=\"hljs-keyword\">else</span>\n            <span class=\"hljs-keyword\">match</span> ops.[i].[j] <span class=\"hljs-keyword\">with</span>\n            <span class=\"hljs-operator\">|</span> o <span class=\"hljs-keyword\">when</span> o <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;C&#x27;</span> <span class=\"hljs-operator\">||</span> o <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;R&#x27;</span> <span class=\"hljs-operator\">-&gt;</span>\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> seq <span class=\"hljs-operator\">=</span>\n                    assembleTransformation (ops, i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>, j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>)\n                    <span class=\"hljs-operator\">|&gt;</span> List.toArray\n\n                <span class=\"hljs-keyword\">let</span> ch <span class=\"hljs-operator\">=</span>\n                    [ ((string) ops.[i].[j]) ] <span class=\"hljs-operator\">|&gt;</span> List.toArray\n\n                seq <span class=\"hljs-operator\">&lt;-</span> seq <span class=\"hljs-operator\">|&gt;</span> Array.append ch\n                seq <span class=\"hljs-operator\">|&gt;</span> List.ofArray\n            <span class=\"hljs-operator\">|</span> <span class=\"hljs-string\">&#x27;D&#x27;</span> <span class=\"hljs-operator\">-&gt;</span>\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> seq <span class=\"hljs-operator\">=</span>\n                    assembleTransformation (ops, i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>, j)\n                    <span class=\"hljs-operator\">|&gt;</span> List.toArray\n\n                <span class=\"hljs-keyword\">let</span> ch <span class=\"hljs-operator\">=</span>\n                    [ ((string) ops.[i].[j]) ] <span class=\"hljs-operator\">|&gt;</span> List.toArray\n\n                seq <span class=\"hljs-operator\">&lt;-</span> seq <span class=\"hljs-operator\">|&gt;</span> Array.append ch\n                seq <span class=\"hljs-operator\">|&gt;</span> List.ofArray\n            <span class=\"hljs-operator\">|</span> _ <span class=\"hljs-operator\">-&gt;</span>\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> seq <span class=\"hljs-operator\">=</span>\n                    assembleTransformation (ops, i, j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>)\n                    <span class=\"hljs-operator\">|&gt;</span> List.toArray\n\n                <span class=\"hljs-keyword\">let</span> ch <span class=\"hljs-operator\">=</span>\n                    [ ((string) ops.[i].[j]) ] <span class=\"hljs-operator\">|&gt;</span> List.toArray\n\n                seq <span class=\"hljs-operator\">&lt;-</span> seq <span class=\"hljs-operator\">|&gt;</span> Array.append ch\n                seq <span class=\"hljs-operator\">|&gt;</span> List.ofArray\n"
    }
  },
  "contributors": [
    {
      "name": "imp",
      "email": "imp07@qq.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "Vardhaman",
      "email": "83634399+cyai@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Eugeniy Orlov",
      "email": "sonic050288@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Mickaël Schoentgen",
      "email": "contact@tiger-222.fr",
      "commits": 1
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Daniel Ingram",
      "email": "ingramds@appstate.edu",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}