{
  "slug": "mini-max-algorithm",
  "name": "Mini Max Algorithm",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/others/MiniMaxAlgorithm.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/others/MiniMaxAlgorithm.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.others;\n\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n<span class=\"hljs-keyword\">import</span> java.util.Random;\n\n<span class=\"hljs-comment\">/**\n * MiniMax is an algorithm used int artificial intelligence and game theory for\n * minimizing the possible loss for the worst case scenario.\n *\n * See more (https://en.wikipedia.org/wiki/Minimax,\n * https://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-1-introduction/).\n *\n * <span class=\"hljs-doctag\">@author</span> aitofi (https://github.com/aitorfi)\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MiniMaxAlgorithm</span> {\n\n    <span class=\"hljs-comment\">/**\n     * Game tree represented as an int array containing scores. Each array\n     * element is a leaf node.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span>[] scores;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> height;\n\n    <span class=\"hljs-comment\">/**\n     * Initializes the scores with 8 random leaf nodes\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MiniMaxAlgorithm</span><span class=\"hljs-params\">()</span> {\n        scores = getRandomScores(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">99</span>);\n        height = log2(scores.length);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">MiniMaxAlgorithm</span> <span class=\"hljs-variable\">miniMaxAlgorith</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MiniMaxAlgorithm</span>();\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">isMaximizer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// Specifies the player that goes first.</span>\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">verbose</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// True to show each players choices.</span>\n        <span class=\"hljs-type\">int</span> bestScore;\n\n        bestScore = miniMaxAlgorith.miniMax(<span class=\"hljs-number\">0</span>, isMaximizer, <span class=\"hljs-number\">0</span>, verbose);\n\n        <span class=\"hljs-keyword\">if</span> (verbose) {\n            System.out.println();\n        }\n\n        System.out.println(Arrays.toString(miniMaxAlgorith.getScores()));\n        System.out.println(\n                <span class=\"hljs-string\">&quot;The best score for &quot;</span> + (isMaximizer ? <span class=\"hljs-string\">&quot;Maximizer&quot;</span> : <span class=\"hljs-string\">&quot;Minimizer&quot;</span>) + <span class=\"hljs-string\">&quot; is &quot;</span> + String.valueOf(bestScore));\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Returns the optimal score assuming that both players play their best.\n     *\n     * <span class=\"hljs-doctag\">@param</span> depth Indicates how deep we are into the game tree.\n     * <span class=\"hljs-doctag\">@param</span> isMaximizer True if it is maximizers turn; otherwise false.\n     * <span class=\"hljs-doctag\">@param</span> index Index of the leaf node that is being evaluated.\n     * <span class=\"hljs-doctag\">@param</span> verbose True to show each players choices.\n     * <span class=\"hljs-doctag\">@return</span> The optimal score for the player that made the first move.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">miniMax</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> depth, <span class=\"hljs-type\">boolean</span> isMaximizer, <span class=\"hljs-type\">int</span> index, <span class=\"hljs-type\">boolean</span> verbose)</span> {\n        <span class=\"hljs-type\">int</span> bestScore, score1, score2;\n\n        <span class=\"hljs-keyword\">if</span> (depth == height) { <span class=\"hljs-comment\">// Leaf node reached.</span>\n            <span class=\"hljs-keyword\">return</span> scores[index];\n        }\n\n        score1 = miniMax(depth + <span class=\"hljs-number\">1</span>, !isMaximizer, index * <span class=\"hljs-number\">2</span>, verbose);\n        score2 = miniMax(depth + <span class=\"hljs-number\">1</span>, !isMaximizer, (index * <span class=\"hljs-number\">2</span>) + <span class=\"hljs-number\">1</span>, verbose);\n\n        <span class=\"hljs-keyword\">if</span> (isMaximizer) {\n            <span class=\"hljs-comment\">// Maximizer player wants to get the maximum possible score.</span>\n            bestScore = Math.max(score1, score2);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// Minimizer player wants to get the minimum possible score.</span>\n            bestScore = Math.min(score1, score2);\n        }\n\n        <span class=\"hljs-comment\">// Leaf nodes can be sequentially inspected by</span>\n        <span class=\"hljs-comment\">// recurssively multiplying (0 * 2) and ((0 * 2) + 1):</span>\n        <span class=\"hljs-comment\">// (0 x 2) = 0; ((0 x 2) + 1) = 1</span>\n        <span class=\"hljs-comment\">// (1 x 2) = 2; ((1 x 2) + 1) = 3</span>\n        <span class=\"hljs-comment\">// (2 x 2) = 4; ((2 x 2) + 1) = 5 ...</span>\n        <span class=\"hljs-keyword\">if</span> (verbose) {\n            System.out.println(String.format(<span class=\"hljs-string\">&quot;From %02d and %02d, %s chooses %02d&quot;</span>, score1, score2,\n                    (isMaximizer ? <span class=\"hljs-string\">&quot;Maximizer&quot;</span> : <span class=\"hljs-string\">&quot;Minimizer&quot;</span>), bestScore));\n        }\n\n        <span class=\"hljs-keyword\">return</span> bestScore;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Returns an array of random numbers which lenght is a power of 2.\n     *\n     * <span class=\"hljs-doctag\">@param</span> size The power of 2 that will determine the lenght of the array.\n     * <span class=\"hljs-doctag\">@param</span> maxScore The maximum possible score.\n     * <span class=\"hljs-doctag\">@return</span> An array of random numbers.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] getRandomScores(<span class=\"hljs-type\">int</span> size, <span class=\"hljs-type\">int</span> maxScore) {\n        <span class=\"hljs-type\">int</span>[] randomScores = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[(<span class=\"hljs-type\">int</span>) Math.pow(<span class=\"hljs-number\">2</span>, size)];\n        <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">rand</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; randomScores.length; i++) {\n            randomScores[i] = rand.nextInt(maxScore) + <span class=\"hljs-number\">1</span>;\n        }\n\n        <span class=\"hljs-keyword\">return</span> randomScores;\n    }\n\n    <span class=\"hljs-comment\">// A utility function to find Log n in base 2</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">log2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> {\n        <span class=\"hljs-keyword\">return</span> (n == <span class=\"hljs-number\">1</span>) ? <span class=\"hljs-number\">0</span> : log2(n / <span class=\"hljs-number\">2</span>) + <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setScores</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] scores)</span> {\n        <span class=\"hljs-keyword\">if</span> (scores.length % <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-built_in\">this</span>.scores = scores;\n            height = log2(<span class=\"hljs-built_in\">this</span>.scores.length);\n        } <span class=\"hljs-keyword\">else</span> {\n            System.out.println(<span class=\"hljs-string\">&quot;The number of scores must be a power of 2.&quot;</span>);\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span>[] getScores() {\n        <span class=\"hljs-keyword\">return</span> scores;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getHeight</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> height;\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}