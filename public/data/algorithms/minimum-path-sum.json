{
  "slug": "minimum-path-sum",
  "name": "Minimum Path Sum",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs/minimum_path_sum.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs/minimum_path_sum.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">min_path_sum</span>(<span class=\"hljs-params\">grid: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Find the path from top left to bottom right of array of numbers\n    with the lowest possible sum and return the sum along this path.\n    &gt;&gt;&gt; min_path_sum([\n    ...     [1, 3, 1],\n    ...     [1, 5, 1],\n    ...     [4, 2, 1],\n    ... ])\n    7\n\n    &gt;&gt;&gt; min_path_sum([\n    ...     [1, 0, 5, 6, 7],\n    ...     [8, 9, 0, 4, 2],\n    ...     [4, 4, 4, 5, 1],\n    ...     [9, 6, 3, 1, 0],\n    ...     [8, 4, 3, 2, 7],\n    ... ])\n    20\n\n    &gt;&gt;&gt; min_path_sum(None)\n    Traceback (most recent call last):\n        ...\n    TypeError: The grid does not contain the appropriate information\n\n    &gt;&gt;&gt; min_path_sum([[]])\n    Traceback (most recent call last):\n        ...\n    TypeError: The grid does not contain the appropriate information\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> grid <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> grid[<span class=\"hljs-number\">0</span>]:\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;The grid does not contain the appropriate information&quot;</span>)\n\n    <span class=\"hljs-keyword\">for</span> cell_n <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(grid[<span class=\"hljs-number\">0</span>])):\n        grid[<span class=\"hljs-number\">0</span>][cell_n] += grid[<span class=\"hljs-number\">0</span>][cell_n - <span class=\"hljs-number\">1</span>]\n    row_above = grid[<span class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-keyword\">for</span> row_n <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(grid)):\n        current_row = grid[row_n]\n        grid[row_n] = fill_row(current_row, row_above)\n        row_above = grid[row_n]\n\n    <span class=\"hljs-keyword\">return</span> grid[-<span class=\"hljs-number\">1</span>][-<span class=\"hljs-number\">1</span>]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fill_row</span>(<span class=\"hljs-params\">current_row: <span class=\"hljs-built_in\">list</span>, row_above: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; fill_row([2, 2, 2], [1, 2, 3])\n    [3, 4, 5]\n    &quot;&quot;&quot;</span>\n\n    current_row[<span class=\"hljs-number\">0</span>] += row_above[<span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-keyword\">for</span> cell_n <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(current_row)):\n        current_row[cell_n] += <span class=\"hljs-built_in\">min</span>(current_row[cell_n - <span class=\"hljs-number\">1</span>], row_above[cell_n])\n\n    <span class=\"hljs-keyword\">return</span> current_row\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/dynamicprogramming/MinimumPathSum.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/dynamicprogramming/MinimumPathSum.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\n\n<span class=\"hljs-comment\">/*\nGiven the following grid with length m and width n:\n\\---\\---\\---\\ (n)\n\\ 1 \\ 3 \\ 1 \\\n\\---\\---\\---\\\n\\ 1 \\ 5 \\ 1 \\\n\\---\\---\\---\\\n\\ 4 \\ 2 \\ 1 \\\n\\---\\---\\---\\\n(m)\nFind the path where its sum is the smallest.\n\nAll numbers given are positive.\nThe Time Complexity of your algorithm should be smaller than or equal to O(mn).\nThe Space Complexity of your algorithm should be smaller than or equal to O(mn).\nYou can only move from the top left corner to the down right corner.\nYou can only move one step down or right.\n\nEXAMPLE:\nINPUT: grid = [[1,3,1],[1,5,1],[4,2,1]]\nOUTPUT: 7\nEXPLANATIONS: 1 + 3 + 1 + 1 + 1 = 7\n\nFor more information see https://www.geeksforgeeks.org/maximum-path-sum-matrix/\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MinimumPathSum</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testRegular</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">int</span>[][] grid = {\n            {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>},\n            {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>},\n            {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>}\n        };\n        System.out.println(minimumPathSum(grid));\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testLessColumns</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">int</span>[][] grid = {\n            {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>},\n            {<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>},\n            {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>}\n        };\n        System.out.println(minimumPathSum(grid));\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testLessRows</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">int</span>[][] grid = {\n            {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>},\n            {<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>}\n        };\n        System.out.println(minimumPathSum(grid));\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testOneRowOneColumn</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">int</span>[][] grid = {{<span class=\"hljs-number\">2</span>}};\n        System.out.println(minimumPathSum(grid));\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">minimumPathSum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] grid)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">m</span> <span class=\"hljs-operator\">=</span> grid.length, n = grid[<span class=\"hljs-number\">0</span>].length;\n        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        }\n        <span class=\"hljs-type\">int</span>[][] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[m][n];\n        dp[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = grid[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n - <span class=\"hljs-number\">1</span>; i++) {\n            dp[<span class=\"hljs-number\">0</span>][i + <span class=\"hljs-number\">1</span>] = dp[<span class=\"hljs-number\">0</span>][i] + grid[<span class=\"hljs-number\">0</span>][i + <span class=\"hljs-number\">1</span>];\n        }\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; m - <span class=\"hljs-number\">1</span>; i++) {\n            dp[i + <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] = dp[i][<span class=\"hljs-number\">0</span>] + grid[i + <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>];\n        }\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; m; i++) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt; n; j++) {\n                dp[i][j] = Math.min(dp[i - <span class=\"hljs-number\">1</span>][j], dp[i][j - <span class=\"hljs-number\">1</span>]) + grid[i][j];\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> dp[m - <span class=\"hljs-number\">1</span>][n - <span class=\"hljs-number\">1</span>];\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "EATONJIANGHAHAHA",
      "email": "pillow_103@yeah.net",
      "commits": 1
    },
    {
      "name": "Raine Legary",
      "email": "64663183+Rainethhh@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}