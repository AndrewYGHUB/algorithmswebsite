{
  "slug": "minimum-spanning-tree",
  "name": "Minimum Spanning Tree",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/graph/minimum_spanning_tree.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/graph/minimum_spanning_tree.rs",
      "code": "<span class=\"hljs-keyword\">use</span> super::DisjointSetUnion;\n\n<span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Edge</span> {\n    source: <span class=\"hljs-type\">i64</span>,\n    destination: <span class=\"hljs-type\">i64</span>,\n    cost: <span class=\"hljs-type\">i64</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">PartialEq</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Edge</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">eq</span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;<span class=\"hljs-keyword\">Self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">self</span>.source == other.source\n            &amp;&amp; <span class=\"hljs-keyword\">self</span>.destination == other.destination\n            &amp;&amp; <span class=\"hljs-keyword\">self</span>.cost == other.cost\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Eq</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Edge</span> {}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Edge</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>(source: <span class=\"hljs-type\">i64</span>, destination: <span class=\"hljs-type\">i64</span>, cost: <span class=\"hljs-type\">i64</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">Self</span> {\n            source,\n            destination,\n            cost,\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">kruskal</span>(<span class=\"hljs-keyword\">mut</span> edges: <span class=\"hljs-type\">Vec</span>&lt;Edge&gt;, number_of_vertices: <span class=\"hljs-type\">i64</span>) <span class=\"hljs-punctuation\">-&gt;</span> (<span class=\"hljs-type\">i64</span>, <span class=\"hljs-type\">Vec</span>&lt;Edge&gt;) {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">dsu</span> = DisjointSetUnion::<span class=\"hljs-title function_ invoke__\">new</span>(number_of_vertices <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>);\n\n    edges.<span class=\"hljs-title function_ invoke__\">sort_unstable_by</span>(|a, b| a.cost.<span class=\"hljs-title function_ invoke__\">cmp</span>(&amp;b.cost));\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">total_cost</span>: <span class=\"hljs-type\">i64</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">final_edges</span>: <span class=\"hljs-type\">Vec</span>&lt;Edge&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">merge_count</span>: <span class=\"hljs-type\">i64</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">edge</span> <span class=\"hljs-keyword\">in</span> edges.<span class=\"hljs-title function_ invoke__\">iter</span>() {\n        <span class=\"hljs-keyword\">if</span> merge_count &gt;= number_of_vertices - <span class=\"hljs-number\">1</span> {\n            <span class=\"hljs-keyword\">break</span>;\n        }\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">source</span>: <span class=\"hljs-type\">i64</span> = edge.source;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">destination</span>: <span class=\"hljs-type\">i64</span> = edge.destination;\n        <span class=\"hljs-keyword\">if</span> dsu.<span class=\"hljs-title function_ invoke__\">merge</span>(source <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>, destination <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>) &lt; std::usize::MAX {\n            merge_count += <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">cost</span>: <span class=\"hljs-type\">i64</span> = edge.cost;\n            total_cost += cost;\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">final_edge</span>: Edge = Edge::<span class=\"hljs-title function_ invoke__\">new</span>(source, destination, cost);\n            final_edges.<span class=\"hljs-title function_ invoke__\">push</span>(final_edge);\n        }\n    }\n    (total_cost, final_edges)\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_seven_vertices_eleven_edges</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">edges</span>: <span class=\"hljs-type\">Vec</span>&lt;Edge&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">15</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">11</span>));\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">number_of_vertices</span>: <span class=\"hljs-type\">i64</span> = <span class=\"hljs-number\">7</span>;\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">expected_total_cost</span> = <span class=\"hljs-number\">39</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">expected_used_edges</span>: <span class=\"hljs-type\">Vec</span>&lt;Edge&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n        expected_used_edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>));\n        expected_used_edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>));\n        expected_used_edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>));\n        expected_used_edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>));\n        expected_used_edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>));\n        expected_used_edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>));\n\n        <span class=\"hljs-keyword\">let</span> (actual_total_cost, actual_final_edges) = <span class=\"hljs-title function_ invoke__\">kruskal</span>(edges, number_of_vertices);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(actual_total_cost, expected_total_cost);\n        <span class=\"hljs-built_in\">assert_eq!</span>(actual_final_edges, expected_used_edges);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_ten_vertices_twenty_edges</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">edges</span>: <span class=\"hljs-type\">Vec</span>&lt;Edge&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">18</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">5</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">4</span>));\n        edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">3</span>));\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">number_of_vertices</span>: <span class=\"hljs-type\">i64</span> = <span class=\"hljs-number\">10</span>;\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">expected_total_cost</span> = <span class=\"hljs-number\">38</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">expected_used_edges</span> = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n        expected_used_edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>));\n        expected_used_edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>));\n        expected_used_edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>));\n        expected_used_edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>));\n        expected_used_edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">3</span>));\n        expected_used_edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>));\n        expected_used_edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>));\n        expected_used_edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>));\n        expected_used_edges.<span class=\"hljs-title function_ invoke__\">push</span>(Edge::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>));\n\n        <span class=\"hljs-keyword\">let</span> (actual_total_cost, actual_final_edges) = <span class=\"hljs-title function_ invoke__\">kruskal</span>(edges, number_of_vertices);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(actual_total_cost, expected_total_cost);\n        <span class=\"hljs-built_in\">assert_eq!</span>(actual_final_edges, expected_used_edges);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Giovanni Dejan",
      "email": "giovanni.dejan@binus.ac.id",
      "commits": 1
    },
    {
      "name": "Erfan Khadem",
      "email": "45465346+er888kh@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}