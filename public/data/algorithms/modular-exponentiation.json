{
  "slug": "modular-exponentiation",
  "name": "Modular Exponentiation",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/modular_exponentiation.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/modular_exponentiation.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief C++ Program for Modular Exponentiation Iteratively.\n * @details The task is to calculate the value of an integer a raised to an\n * integer exponent b under modulo c.\n * @note The time complexity of this approach is O(log b).\n *\n * Example:\n * (4^3) % 5 (where ^ stands for exponentiation and % for modulo)\n * (4*4*4) % 5\n * (4 % 5) * ( (4*4) % 5 )\n * 4 * (16 % 5)\n * 4 * 1\n * 4\n * We can also verify the result as 4^3 is 64 and 64 modulo 5 is 4\n *\n * @author [Shri2206](https://github.com/Shri2206)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for io operations</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace math\n * @brief Mathematical algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> math {\n<span class=\"hljs-comment\">/**\n * @brief This function calculates a raised to exponent b under modulo c using\n * modular exponentiation.\n * @param a integer base\n * @param b unsigned integer exponent\n * @param c integer modulo\n * @return a raised to power b modulo c\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">power</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> a, <span class=\"hljs-type\">uint64_t</span> b, <span class=\"hljs-type\">uint64_t</span> c)</span> </span>{\n    <span class=\"hljs-type\">uint64_t</span> ans = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">/// Initialize the answer to be returned</span>\n    a = a % c;         <span class=\"hljs-comment\">/// Update a if it is more than or equal to c</span>\n    <span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">/// In case a is divisible by c;</span>\n    }\n    <span class=\"hljs-keyword\">while</span> (b &gt; <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-comment\">/// If b is odd, multiply a with answer</span>\n        <span class=\"hljs-keyword\">if</span> (b &amp; <span class=\"hljs-number\">1</span>) {\n            ans = ((ans % c) * (a % c)) % c;\n        }\n        <span class=\"hljs-comment\">/// b must be even now</span>\n        b = b &gt;&gt; <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">/// b = b/2</span>\n        a = ((a % c) * (a % c)) % c;\n    }\n    <span class=\"hljs-keyword\">return</span> ans;\n}\n\n}  <span class=\"hljs-comment\">// namespace math</span>\n\n<span class=\"hljs-comment\">/**\n * Function for testing power function.\n * test cases and assert statement.\n * @returns `void`\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">uint32_t</span> test_case_1 = math::<span class=\"hljs-built_in\">power</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">13</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_1 == <span class=\"hljs-number\">6</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1 Passed!&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">uint32_t</span> test_case_2 = math::<span class=\"hljs-built_in\">power</span>(<span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">15</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_2 == <span class=\"hljs-number\">14</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2 Passed!&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">uint64_t</span> test_case_3 = math::<span class=\"hljs-built_in\">power</span>(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">41</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_3 == <span class=\"hljs-number\">32</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 3 Passed!&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">uint64_t</span> test_case_4 = math::<span class=\"hljs-built_in\">power</span>(<span class=\"hljs-number\">27</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_4 == <span class=\"hljs-number\">4</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 4 Passed!&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">uint16_t</span> test_case_5 = math::<span class=\"hljs-built_in\">power</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_5 == <span class=\"hljs-number\">1</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 5 Passed!&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// execute the tests</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Numeric/ModularExponentiation.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/Algorithms/Numeric/ModularExponentiation.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Numeric</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Modular exponentiation is a type of exponentiation performed over a modulus</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Modular exponentiation c is: c = b^e mod m where b is base, e is exponent, m is modulus</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     (Wiki: https://en.wikipedia.org/wiki/Modular_exponentiation).</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ModularExponentiation</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Performs Modular Exponentiation on b, e, m.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;b&quot;&gt;</span>Base.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;e&quot;&gt;</span>Exponent.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;m&quot;&gt;</span>Modulus.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Modular Exponential.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">ModularPow</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> b, <span class=\"hljs-built_in\">int</span> e, <span class=\"hljs-built_in\">int</span> m</span>)</span>\n        {\n            <span class=\"hljs-comment\">// initialize result in variable res</span>\n            <span class=\"hljs-built_in\">int</span> res = <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">if</span> (m == <span class=\"hljs-number\">1</span>)\n            {\n                <span class=\"hljs-comment\">// 1 divides every number</span>\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n            }\n\n            <span class=\"hljs-keyword\">if</span> (m &lt;= <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-comment\">// exponential not defined in this case</span>\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-built_in\">string</span>.Format(<span class=\"hljs-string\">&quot;{0} is not a positive integer&quot;</span>, m));\n            }\n\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; e; i++)\n            {\n                res = (res * b) % m;\n            }\n\n            <span class=\"hljs-keyword\">return</span> res;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Aayush Borkar",
      "email": "30978331+AbstractGhoul05@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}