{
  "slug": "modular-inverse-simple",
  "name": "Modular Inverse Simple",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/modular_inverse_simple.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/modular_inverse_simple.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Simple implementation of [modular multiplicative\n * inverse](https://en.wikipedia.org/wiki/Modular_multiplicative_inverse)\n *\n * @details\n * this algorithm calculates the modular inverse x^{-1} \\mod y iteratively\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief Function imod\n * Calculates the modular inverse of x with respect to y, x^{-1} \\mod y\n * @param x number\n * @param y number\n * @returns the modular inverse\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">imod</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> x, <span class=\"hljs-type\">uint64_t</span> y)</span> </span>{\n    <span class=\"hljs-type\">uint64_t</span> aux = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// auxiliary variable</span>\n    <span class=\"hljs-type\">uint64_t</span> itr = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// iteration counter</span>\n\n    <span class=\"hljs-keyword\">do</span> {  <span class=\"hljs-comment\">// run the algorithm while not find the inverse</span>\n        aux = y * itr + <span class=\"hljs-number\">1</span>;\n        itr++;\n    } <span class=\"hljs-keyword\">while</span> (aux % x);  <span class=\"hljs-comment\">// while module aux % x non-zero</span>\n\n    <span class=\"hljs-keyword\">return</span> aux / x;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief  self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;First case testing... \\n&quot;</span>;\n    <span class=\"hljs-comment\">// for a = 3 and b = 11 return 4</span>\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">imod</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>) == <span class=\"hljs-number\">4</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nPassed!\\n&quot;</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Second case testing... \\n&quot;</span>;\n    <span class=\"hljs-comment\">// for a = 3 and b = 26 return 9</span>\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">imod</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">26</span>) == <span class=\"hljs-number\">9</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nPassed!\\n&quot;</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Third case testing... \\n&quot;</span>;\n    <span class=\"hljs-comment\">// for a = 7 and b = 26 return 15</span>\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">imod</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">26</span>) == <span class=\"hljs-number\">15</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nPassed!\\n&quot;</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nAll test cases have successfully passed!\\n&quot;</span>;\n}\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n};\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}