{
  "slug": "mosaic-augmentation",
  "name": "Mosaic Augmentation",
  "categories": [
    "computervision"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "computer_vision/mosaic_augmentation.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/computer_vision/mosaic_augmentation.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;Source: https://github.com/jason9075/opencv-mosaic-data-aug&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">import</span> glob\n<span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">from</span> string <span class=\"hljs-keyword\">import</span> ascii_lowercase, digits\n\n<span class=\"hljs-keyword\">import</span> cv2\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-comment\"># Parrameters</span>\nOUTPUT_SIZE = (<span class=\"hljs-number\">720</span>, <span class=\"hljs-number\">1280</span>)  <span class=\"hljs-comment\"># Height, Width</span>\nSCALE_RANGE = (<span class=\"hljs-number\">0.4</span>, <span class=\"hljs-number\">0.6</span>)  <span class=\"hljs-comment\"># if height or width lower than this scale, drop it.</span>\nFILTER_TINY_SCALE = <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">100</span>\nLABEL_DIR = <span class=\"hljs-string\">&quot;&quot;</span>\nIMG_DIR = <span class=\"hljs-string\">&quot;&quot;</span>\nOUTPUT_DIR = <span class=\"hljs-string\">&quot;&quot;</span>\nNUMBER_IMAGES = <span class=\"hljs-number\">250</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Get images list and annotations list from input dir.\n    Update new images and annotations.\n    Save images and annotations in output dir.\n    &gt;&gt;&gt; pass  # A doctest is not possible for this function.\n    &quot;&quot;&quot;</span>\n    img_paths, annos = get_dataset(LABEL_DIR, IMG_DIR)\n    <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(NUMBER_IMAGES):\n        idxs = random.sample(<span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(annos)), <span class=\"hljs-number\">4</span>)\n        new_image, new_annos, path = update_image_and_anno(\n            img_paths,\n            annos,\n            idxs,\n            OUTPUT_SIZE,\n            SCALE_RANGE,\n            filter_scale=FILTER_TINY_SCALE,\n        )\n\n        <span class=\"hljs-comment\"># Get random string code: &#x27;7b7ad245cdff75241935e4dd860f3bad&#x27;</span>\n        letter_code = random_chars(<span class=\"hljs-number\">32</span>)\n        file_name = path.split(os.sep)[-<span class=\"hljs-number\">1</span>].rsplit(<span class=\"hljs-string\">&quot;.&quot;</span>, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>]\n        file_root = <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{OUTPUT_DIR}</span>/<span class=\"hljs-subst\">{file_name}</span>_MOSAIC_<span class=\"hljs-subst\">{letter_code}</span>&quot;</span>\n        cv2.imwrite(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{file_root}</span>.jpg&quot;</span>, new_image, [cv2.IMWRITE_JPEG_QUALITY, <span class=\"hljs-number\">85</span>])\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Succeeded <span class=\"hljs-subst\">{index+<span class=\"hljs-number\">1</span>}</span>/<span class=\"hljs-subst\">{NUMBER_IMAGES}</span> with <span class=\"hljs-subst\">{file_name}</span>&quot;</span>)\n        annos_list = []\n        <span class=\"hljs-keyword\">for</span> anno <span class=\"hljs-keyword\">in</span> new_annos:\n            width = anno[<span class=\"hljs-number\">3</span>] - anno[<span class=\"hljs-number\">1</span>]\n            height = anno[<span class=\"hljs-number\">4</span>] - anno[<span class=\"hljs-number\">2</span>]\n            x_center = anno[<span class=\"hljs-number\">1</span>] + width / <span class=\"hljs-number\">2</span>\n            y_center = anno[<span class=\"hljs-number\">2</span>] + height / <span class=\"hljs-number\">2</span>\n            obj = <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{anno[<span class=\"hljs-number\">0</span>]}</span> <span class=\"hljs-subst\">{x_center}</span> <span class=\"hljs-subst\">{y_center}</span> <span class=\"hljs-subst\">{width}</span> <span class=\"hljs-subst\">{height}</span>&quot;</span>\n            annos_list.append(obj)\n        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{file_root}</span>.txt&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>) <span class=\"hljs-keyword\">as</span> outfile:\n            outfile.write(<span class=\"hljs-string\">&quot;\\n&quot;</span>.join(line <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> annos_list))\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_dataset</span>(<span class=\"hljs-params\">label_dir: <span class=\"hljs-built_in\">str</span>, img_dir: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">list</span>, <span class=\"hljs-built_in\">list</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    - label_dir &lt;type: str&gt;: Path to label include annotation of images\n    - img_dir &lt;type: str&gt;: Path to folder contain images\n    Return &lt;type: list&gt;: List of images path and labels\n    &gt;&gt;&gt; pass  # A doctest is not possible for this function.\n    &quot;&quot;&quot;</span>\n    img_paths = []\n    labels = []\n    <span class=\"hljs-keyword\">for</span> label_file <span class=\"hljs-keyword\">in</span> glob.glob(os.path.join(label_dir, <span class=\"hljs-string\">&quot;*.txt&quot;</span>)):\n        label_name = label_file.split(os.sep)[-<span class=\"hljs-number\">1</span>].rsplit(<span class=\"hljs-string\">&quot;.&quot;</span>, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>]\n        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(label_file) <span class=\"hljs-keyword\">as</span> in_file:\n            obj_lists = in_file.readlines()\n        img_path = os.path.join(img_dir, <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{label_name}</span>.jpg&quot;</span>)\n\n        boxes = []\n        <span class=\"hljs-keyword\">for</span> obj_list <span class=\"hljs-keyword\">in</span> obj_lists:\n            obj = obj_list.rstrip(<span class=\"hljs-string\">&quot;\\n&quot;</span>).split(<span class=\"hljs-string\">&quot; &quot;</span>)\n            xmin = <span class=\"hljs-built_in\">float</span>(obj[<span class=\"hljs-number\">1</span>]) - <span class=\"hljs-built_in\">float</span>(obj[<span class=\"hljs-number\">3</span>]) / <span class=\"hljs-number\">2</span>\n            ymin = <span class=\"hljs-built_in\">float</span>(obj[<span class=\"hljs-number\">2</span>]) - <span class=\"hljs-built_in\">float</span>(obj[<span class=\"hljs-number\">4</span>]) / <span class=\"hljs-number\">2</span>\n            xmax = <span class=\"hljs-built_in\">float</span>(obj[<span class=\"hljs-number\">1</span>]) + <span class=\"hljs-built_in\">float</span>(obj[<span class=\"hljs-number\">3</span>]) / <span class=\"hljs-number\">2</span>\n            ymax = <span class=\"hljs-built_in\">float</span>(obj[<span class=\"hljs-number\">2</span>]) + <span class=\"hljs-built_in\">float</span>(obj[<span class=\"hljs-number\">4</span>]) / <span class=\"hljs-number\">2</span>\n\n            boxes.append([<span class=\"hljs-built_in\">int</span>(obj[<span class=\"hljs-number\">0</span>]), xmin, ymin, xmax, ymax])\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> boxes:\n            <span class=\"hljs-keyword\">continue</span>\n        img_paths.append(img_path)\n        labels.append(boxes)\n    <span class=\"hljs-keyword\">return</span> img_paths, labels\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update_image_and_anno</span>(<span class=\"hljs-params\">\n    all_img_list: <span class=\"hljs-built_in\">list</span>,\n    all_annos: <span class=\"hljs-built_in\">list</span>,\n    idxs: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>],\n    output_size: <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>],\n    scale_range: <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">float</span>],\n    filter_scale: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">0.0</span>,\n</span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">list</span>, <span class=\"hljs-built_in\">list</span>, <span class=\"hljs-built_in\">str</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    - all_img_list &lt;type: list&gt;: list of all images\n    - all_annos &lt;type: list&gt;: list of all annotations of specific image\n    - idxs &lt;type: list&gt;: index of image in list\n    - output_size &lt;type: tuple&gt;: size of output image (Height, Width)\n    - scale_range &lt;type: tuple&gt;: range of scale image\n    - filter_scale &lt;type: float&gt;: the condition of downscale image and bounding box\n    Return:\n        - output_img &lt;type: narray&gt;: image after resize\n        - new_anno &lt;type: list&gt;: list of new annotation after scale\n        - path[0] &lt;type: string&gt;: get the name of image file\n    &gt;&gt;&gt; pass  # A doctest is not possible for this function.\n    &quot;&quot;&quot;</span>\n    output_img = np.zeros([output_size[<span class=\"hljs-number\">0</span>], output_size[<span class=\"hljs-number\">1</span>], <span class=\"hljs-number\">3</span>], dtype=np.uint8)\n    scale_x = scale_range[<span class=\"hljs-number\">0</span>] + random.random() * (scale_range[<span class=\"hljs-number\">1</span>] - scale_range[<span class=\"hljs-number\">0</span>])\n    scale_y = scale_range[<span class=\"hljs-number\">0</span>] + random.random() * (scale_range[<span class=\"hljs-number\">1</span>] - scale_range[<span class=\"hljs-number\">0</span>])\n    divid_point_x = <span class=\"hljs-built_in\">int</span>(scale_x * output_size[<span class=\"hljs-number\">1</span>])\n    divid_point_y = <span class=\"hljs-built_in\">int</span>(scale_y * output_size[<span class=\"hljs-number\">0</span>])\n\n    new_anno = []\n    path_list = []\n    <span class=\"hljs-keyword\">for</span> i, index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(idxs):\n        path = all_img_list[index]\n        path_list.append(path)\n        img_annos = all_annos[index]\n        img = cv2.imread(path)\n        <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span>:  <span class=\"hljs-comment\"># top-left</span>\n            img = cv2.resize(img, (divid_point_x, divid_point_y))\n            output_img[:divid_point_y, :divid_point_x, :] = img\n            <span class=\"hljs-keyword\">for</span> bbox <span class=\"hljs-keyword\">in</span> img_annos:\n                xmin = bbox[<span class=\"hljs-number\">1</span>] * scale_x\n                ymin = bbox[<span class=\"hljs-number\">2</span>] * scale_y\n                xmax = bbox[<span class=\"hljs-number\">3</span>] * scale_x\n                ymax = bbox[<span class=\"hljs-number\">4</span>] * scale_y\n                new_anno.append([bbox[<span class=\"hljs-number\">0</span>], xmin, ymin, xmax, ymax])\n        <span class=\"hljs-keyword\">elif</span> i == <span class=\"hljs-number\">1</span>:  <span class=\"hljs-comment\"># top-right</span>\n            img = cv2.resize(img, (output_size[<span class=\"hljs-number\">1</span>] - divid_point_x, divid_point_y))\n            output_img[:divid_point_y, divid_point_x : output_size[<span class=\"hljs-number\">1</span>], :] = img\n            <span class=\"hljs-keyword\">for</span> bbox <span class=\"hljs-keyword\">in</span> img_annos:\n                xmin = scale_x + bbox[<span class=\"hljs-number\">1</span>] * (<span class=\"hljs-number\">1</span> - scale_x)\n                ymin = bbox[<span class=\"hljs-number\">2</span>] * scale_y\n                xmax = scale_x + bbox[<span class=\"hljs-number\">3</span>] * (<span class=\"hljs-number\">1</span> - scale_x)\n                ymax = bbox[<span class=\"hljs-number\">4</span>] * scale_y\n                new_anno.append([bbox[<span class=\"hljs-number\">0</span>], xmin, ymin, xmax, ymax])\n        <span class=\"hljs-keyword\">elif</span> i == <span class=\"hljs-number\">2</span>:  <span class=\"hljs-comment\"># bottom-left</span>\n            img = cv2.resize(img, (divid_point_x, output_size[<span class=\"hljs-number\">0</span>] - divid_point_y))\n            output_img[divid_point_y : output_size[<span class=\"hljs-number\">0</span>], :divid_point_x, :] = img\n            <span class=\"hljs-keyword\">for</span> bbox <span class=\"hljs-keyword\">in</span> img_annos:\n                xmin = bbox[<span class=\"hljs-number\">1</span>] * scale_x\n                ymin = scale_y + bbox[<span class=\"hljs-number\">2</span>] * (<span class=\"hljs-number\">1</span> - scale_y)\n                xmax = bbox[<span class=\"hljs-number\">3</span>] * scale_x\n                ymax = scale_y + bbox[<span class=\"hljs-number\">4</span>] * (<span class=\"hljs-number\">1</span> - scale_y)\n                new_anno.append([bbox[<span class=\"hljs-number\">0</span>], xmin, ymin, xmax, ymax])\n        <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># bottom-right</span>\n            img = cv2.resize(\n                img, (output_size[<span class=\"hljs-number\">1</span>] - divid_point_x, output_size[<span class=\"hljs-number\">0</span>] - divid_point_y)\n            )\n            output_img[\n                divid_point_y : output_size[<span class=\"hljs-number\">0</span>], divid_point_x : output_size[<span class=\"hljs-number\">1</span>], :\n            ] = img\n            <span class=\"hljs-keyword\">for</span> bbox <span class=\"hljs-keyword\">in</span> img_annos:\n                xmin = scale_x + bbox[<span class=\"hljs-number\">1</span>] * (<span class=\"hljs-number\">1</span> - scale_x)\n                ymin = scale_y + bbox[<span class=\"hljs-number\">2</span>] * (<span class=\"hljs-number\">1</span> - scale_y)\n                xmax = scale_x + bbox[<span class=\"hljs-number\">3</span>] * (<span class=\"hljs-number\">1</span> - scale_x)\n                ymax = scale_y + bbox[<span class=\"hljs-number\">4</span>] * (<span class=\"hljs-number\">1</span> - scale_y)\n                new_anno.append([bbox[<span class=\"hljs-number\">0</span>], xmin, ymin, xmax, ymax])\n\n    <span class=\"hljs-comment\"># Remove bounding box small than scale of filter</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">0</span> &lt; filter_scale:\n        new_anno = [\n            anno\n            <span class=\"hljs-keyword\">for</span> anno <span class=\"hljs-keyword\">in</span> new_anno\n            <span class=\"hljs-keyword\">if</span> filter_scale &lt; (anno[<span class=\"hljs-number\">3</span>] - anno[<span class=\"hljs-number\">1</span>]) <span class=\"hljs-keyword\">and</span> filter_scale &lt; (anno[<span class=\"hljs-number\">4</span>] - anno[<span class=\"hljs-number\">2</span>])\n        ]\n\n    <span class=\"hljs-keyword\">return</span> output_img, new_anno, path_list[<span class=\"hljs-number\">0</span>]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">random_chars</span>(<span class=\"hljs-params\">number_char: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Automatic generate random 32 characters.\n    Get random string code: &#x27;7b7ad245cdff75241935e4dd860f3bad&#x27;\n    &gt;&gt;&gt; len(random_chars(32))\n    32\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">assert</span> number_char &gt; <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;The number of character should greater than 1&quot;</span>\n    letter_code = ascii_lowercase + digits\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(random.choice(letter_code) <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(number_char))\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;DONE ✅&quot;</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "Khoi Vo",
      "email": "nguyenkhoi8071@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}