{
  "slug": "non-preemptive-shortest-job-first",
  "name": "Non Preemptive Shortest Job First",
  "categories": [
    "scheduling"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "scheduling/non_preemptive_shortest_job_first.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/scheduling/non_preemptive_shortest_job_first.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nNon-preemptive Shortest Job First\nShortest execution time process is chosen for the next execution.\nhttps://www.guru99.com/shortest-job-first-sjf-scheduling.html\nhttps://en.wikipedia.org/wiki/Shortest_job_next\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">from</span> statistics <span class=\"hljs-keyword\">import</span> mean\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calculate_waitingtime</span>(<span class=\"hljs-params\">\n    arrival_time: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], burst_time: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], no_of_processes: <span class=\"hljs-built_in\">int</span>\n</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculate the waiting time of each processes\n\n    Return: The waiting time for each process.\n    &gt;&gt;&gt; calculate_waitingtime([0,1,2], [10, 5, 8], 3)\n    [0, 9, 13]\n    &gt;&gt;&gt; calculate_waitingtime([1,2,2,4], [4, 6, 3, 1], 4)\n    [0, 7, 4, 1]\n    &gt;&gt;&gt; calculate_waitingtime([0,0,0], [12, 2, 10],3)\n    [12, 0, 2]\n    &quot;&quot;&quot;</span>\n\n    waiting_time = [<span class=\"hljs-number\">0</span>] * no_of_processes\n    remaining_time = [<span class=\"hljs-number\">0</span>] * no_of_processes\n\n    <span class=\"hljs-comment\"># Initialize remaining_time to waiting_time.</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(no_of_processes):\n        remaining_time[i] = burst_time[i]\n    ready_process: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>] = []\n\n    completed = <span class=\"hljs-number\">0</span>\n    total_time = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\"># When processes are not completed,</span>\n    <span class=\"hljs-comment\"># A process whose arrival time has passed \\</span>\n    <span class=\"hljs-comment\"># and has remaining execution time is put into the ready_process.</span>\n    <span class=\"hljs-comment\"># The shortest process in the ready_process, target_process is executed.</span>\n\n    <span class=\"hljs-keyword\">while</span> completed != no_of_processes:\n        ready_process = []\n        target_process = -<span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(no_of_processes):\n            <span class=\"hljs-keyword\">if</span> (arrival_time[i] &lt;= total_time) <span class=\"hljs-keyword\">and</span> (remaining_time[i] &gt; <span class=\"hljs-number\">0</span>):\n                ready_process.append(i)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ready_process) &gt; <span class=\"hljs-number\">0</span>:\n            target_process = ready_process[<span class=\"hljs-number\">0</span>]\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> ready_process:\n                <span class=\"hljs-keyword\">if</span> remaining_time[i] &lt; remaining_time[target_process]:\n                    target_process = i\n            total_time += burst_time[target_process]\n            completed += <span class=\"hljs-number\">1</span>\n            remaining_time[target_process] = <span class=\"hljs-number\">0</span>\n            waiting_time[target_process] = (\n                total_time - arrival_time[target_process] - burst_time[target_process]\n            )\n        <span class=\"hljs-keyword\">else</span>:\n            total_time += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> waiting_time\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calculate_turnaroundtime</span>(<span class=\"hljs-params\">\n    burst_time: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], no_of_processes: <span class=\"hljs-built_in\">int</span>, waiting_time: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]\n</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculate the turnaround time of each process.\n\n    Return: The turnaround time for each process.\n    &gt;&gt;&gt; calculate_turnaroundtime([0,1,2], 3, [0, 10, 15])\n    [0, 11, 17]\n    &gt;&gt;&gt; calculate_turnaroundtime([1,2,2,4], 4, [1, 8, 5, 4])\n    [2, 10, 7, 8]\n    &gt;&gt;&gt; calculate_turnaroundtime([0,0,0], 3, [12, 0, 2])\n    [12, 0, 2]\n    &quot;&quot;&quot;</span>\n\n    turn_around_time = [<span class=\"hljs-number\">0</span>] * no_of_processes\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(no_of_processes):\n        turn_around_time[i] = burst_time[i] + waiting_time[i]\n    <span class=\"hljs-keyword\">return</span> turn_around_time\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;[TEST CASE 01]&quot;</span>)\n\n    no_of_processes = <span class=\"hljs-number\">4</span>\n    burst_time = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>]\n    arrival_time = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]\n    waiting_time = calculate_waitingtime(arrival_time, burst_time, no_of_processes)\n    turn_around_time = calculate_turnaroundtime(\n        burst_time, no_of_processes, waiting_time\n    )\n\n    <span class=\"hljs-comment\"># Printing the Result</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;PID\\tBurst Time\\tArrival Time\\tWaiting Time\\tTurnaround Time&quot;</span>)\n    <span class=\"hljs-keyword\">for</span> i, process_ID <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(<span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>))):\n        <span class=\"hljs-built_in\">print</span>(\n            <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{process_ID}</span>\\t<span class=\"hljs-subst\">{burst_time[i]}</span>\\t\\t\\t<span class=\"hljs-subst\">{arrival_time[i]}</span>\\t\\t\\t\\t&quot;</span>\n            <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{waiting_time[i]}</span>\\t\\t\\t\\t<span class=\"hljs-subst\">{turn_around_time[i]}</span>&quot;</span>\n        )\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;\\nAverage waiting time = <span class=\"hljs-subst\">{mean(waiting_time):<span class=\"hljs-number\">.5</span>f}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Average turnaround time = <span class=\"hljs-subst\">{mean(turn_around_time):<span class=\"hljs-number\">.5</span>f}</span>&quot;</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "이빈",
      "email": "76545238+Bynnn@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}