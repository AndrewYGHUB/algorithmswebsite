{
  "slug": "nthprime",
  "name": "Nthprime",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/math/nthprime.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/math/nthprime.rs",
      "code": "<span class=\"hljs-comment\">// Generate the nth prime number.</span>\n<span class=\"hljs-comment\">// Algorithm is inspired by the the optimized version of the Sieve of Eratosthenes.</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">nthprime</span>(nth: <span class=\"hljs-type\">u64</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u64</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">total_prime</span>: <span class=\"hljs-type\">u64</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">size_factor</span>: <span class=\"hljs-type\">u64</span> = <span class=\"hljs-number\">2</span>;\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">s</span>: <span class=\"hljs-type\">u64</span> = nth * size_factor;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">primes</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u64</span>&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">n</span>: <span class=\"hljs-type\">u64</span> = nth;\n\n    <span class=\"hljs-keyword\">while</span> total_prime &lt; n {\n        primes = <span class=\"hljs-title function_ invoke__\">get_primes</span>(s).<span class=\"hljs-title function_ invoke__\">to_vec</span>();\n\n        total_prime = primes[<span class=\"hljs-number\">2</span>..].<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">sum</span>();\n        size_factor += <span class=\"hljs-number\">1</span>;\n        s = n * size_factor;\n    }\n\n    <span class=\"hljs-title function_ invoke__\">count_prime</span>(primes, n).<span class=\"hljs-title function_ invoke__\">unwrap</span>()\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_primes</span>(s: <span class=\"hljs-type\">u64</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u64</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">v</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u64</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>; s <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>];\n\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">2</span>..s {\n        <span class=\"hljs-keyword\">if</span> v[index <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>] == <span class=\"hljs-number\">1</span> {\n            <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-keyword\">in</span> index..s {\n                <span class=\"hljs-keyword\">if</span> index * j &lt; s {\n                    v[(index * j) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>] = <span class=\"hljs-number\">0</span>;\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n            }\n        }\n    }\n    v\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">count_prime</span>(primes: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u64</span>&gt;, n: <span class=\"hljs-type\">u64</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">u64</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">counter</span>: <span class=\"hljs-type\">u64</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">2</span>..primes.<span class=\"hljs-title function_ invoke__\">len</span>() {\n        counter += primes.<span class=\"hljs-title function_ invoke__\">get</span>(i).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n        <span class=\"hljs-keyword\">if</span> counter == n {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Some</span>(i <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span>);\n        }\n    }\n    <span class=\"hljs-literal\">None</span>\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">my_test</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">nthprime</span>(<span class=\"hljs-number\">100</span>), <span class=\"hljs-number\">541u64</span>);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Saksham Madan",
      "email": "43085346+Hawk453@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}