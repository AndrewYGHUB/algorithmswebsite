{
  "slug": "optimal-merge-pattern",
  "name": "Optimal Merge Pattern",
  "categories": [
    "greedymethods"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "greedy_methods/optimal_merge_pattern.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/greedy_methods/optimal_merge_pattern.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nThis is a pure Python implementation of the greedy-merge-sort algorithm\nreference: https://www.geeksforgeeks.org/optimal-file-merge-patterns/\n\nFor doctests run following command:\npython3 -m doctest -v greedy_merge_sort.py\n\nObjective\nMerge a set of sorted files of different length into a single sorted file.\nWe need to find an optimal solution, where the resultant file\nwill be generated in minimum time.\n\nApproach\nIf the number of sorted files are given, there are many ways\nto merge them into a single sorted file.\nThis merge can be performed pair wise.\nTo merge a m-record file and a n-record file requires possibly m+n record moves\nthe optimal choice being,\nmerge the two smallest files together at each step (greedy approach).\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">optimal_merge_pattern</span>(<span class=\"hljs-params\">files: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;Function to merge all the files with optimum cost\n\n    Args:\n        files [list]: A list of sizes of different files to be merged\n\n    Returns:\n        optimal_merge_cost [int]: Optimal cost to merge all those files\n\n    Examples:\n    &gt;&gt;&gt; optimal_merge_pattern([2, 3, 4])\n    14\n    &gt;&gt;&gt; optimal_merge_pattern([5, 10, 20, 30, 30])\n    205\n    &gt;&gt;&gt; optimal_merge_pattern([8, 8, 8, 8, 8])\n    96\n    &quot;&quot;&quot;</span>\n    optimal_merge_cost = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">len</span>(files) &gt; <span class=\"hljs-number\">1</span>:\n        temp = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-comment\"># Consider two files with minimum cost to be merged</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>):\n            min_index = files.index(<span class=\"hljs-built_in\">min</span>(files))\n            temp += files[min_index]\n            files.pop(min_index)\n        files.append(temp)\n        optimal_merge_cost += temp\n    <span class=\"hljs-keyword\">return</span> optimal_merge_cost\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "Raj-Pansuriya",
      "email": "72313592+Raj-Pansuriya@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}