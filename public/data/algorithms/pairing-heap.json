{
  "slug": "pairing-heap",
  "name": "Pairing Heap",
  "categories": [
    "datastructures",
    "heap"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./DataStructures/Heap/PairingHeap/PairingHeap.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/DataStructures/Heap/PairingHeap/PairingHeap.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n<span class=\"hljs-keyword\">using</span> System.Linq;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">DataStructures.Heap.PairingHeap</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> A pairing minMax heap implementation.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Base type.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PairingHeap</span>&lt;<span class=\"hljs-title\">T</span>&gt; : <span class=\"hljs-title\">IEnumerable</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-title\">T</span> : <span class=\"hljs-title\">IComparable</span>\n    {\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> Sorting sorting;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> IComparer&lt;T&gt; comparer;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> Dictionary&lt;T, List&lt;PairingHeapNode&lt;T&gt;&gt;&gt; mapping = <span class=\"hljs-keyword\">new</span>();\n\n        <span class=\"hljs-keyword\">private</span> PairingHeapNode&lt;T&gt; root = <span class=\"hljs-literal\">null</span>!;\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> Count { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">set</span>; }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">PairingHeap</span>(<span class=\"hljs-params\">Sorting sortDirection = Sorting.Ascending</span>)</span>\n        {\n            sorting = sortDirection;\n            comparer = <span class=\"hljs-keyword\">new</span> PairingNodeComparer&lt;T&gt;(sortDirection, Comparer&lt;T&gt;.Default);\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Insert a new Node [O(1)].</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Insert</span>(<span class=\"hljs-params\">T newItem</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> newNode = <span class=\"hljs-keyword\">new</span> PairingHeapNode&lt;T&gt;(newItem);\n\n            root = RebuildHeap(root, newNode);\n            Map(newItem, newNode);\n\n            Count++;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Get the element from heap [O(log(n))].</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title\">Extract</span>()</span>\n        {\n            <span class=\"hljs-keyword\">var</span> minMax = root;\n\n            RemoveMapping(minMax.Value, minMax);\n            RebuildHeap(root.ChildrenHead);\n\n            Count--;\n            <span class=\"hljs-keyword\">return</span> minMax.Value;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Update heap key [O(log(n))].</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">UpdateKey</span>(<span class=\"hljs-params\">T currentValue, T newValue</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span>(!mapping.ContainsKey(currentValue))\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">&quot;Current value is not present in this heap.&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">var</span> node = mapping[currentValue]?.Where(x =&gt; x.Value.Equals(currentValue)).FirstOrDefault();\n\n            <span class=\"hljs-keyword\">if</span> (comparer.Compare(newValue, node!.Value) &gt; <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">$&quot;New value is not <span class=\"hljs-subst\">{(sorting != Sorting.Descending ? <span class=\"hljs-string\">&quot;less&quot;</span> : <span class=\"hljs-string\">&quot;greater&quot;</span>)}</span> than old value.&quot;</span>);\n            }\n\n            UpdateNodeValue(currentValue, newValue, node);\n\n            <span class=\"hljs-keyword\">if</span> (node == root)\n            {\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\n            DeleteChild(node);\n\n            root = RebuildHeap(root, node);\n        }\n\n        IEnumerator IEnumerable.GetEnumerator()\n        {\n            <span class=\"hljs-keyword\">return</span> GetEnumerator();\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> IEnumerator&lt;T&gt; <span class=\"hljs-title\">GetEnumerator</span>()</span>\n        {\n            <span class=\"hljs-keyword\">return</span> mapping.SelectMany(x =&gt; x.Value).Select(x =&gt; x.Value).GetEnumerator();\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Rebuild heap on action [O(log(n))].</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">RebuildHeap</span>(<span class=\"hljs-params\">PairingHeapNode&lt;T&gt; headNode</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (headNode == <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\n            <span class=\"hljs-keyword\">var</span> passOneResult = <span class=\"hljs-keyword\">new</span> List&lt;PairingHeapNode&lt;T&gt;&gt;();\n            <span class=\"hljs-keyword\">var</span> current = headNode;\n\n            <span class=\"hljs-keyword\">if</span> (current.Next == <span class=\"hljs-literal\">null</span>)\n            {\n                headNode.Next = <span class=\"hljs-literal\">null</span>!;\n                headNode.Previous = <span class=\"hljs-literal\">null</span>!;\n                passOneResult.Add(headNode);\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\n                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)\n                {\n                    <span class=\"hljs-keyword\">if</span> (current == <span class=\"hljs-literal\">null</span>)\n                    {\n                        <span class=\"hljs-keyword\">break</span>;\n                    }\n\n                    <span class=\"hljs-keyword\">if</span> (current.Next != <span class=\"hljs-literal\">null</span>)\n                    {\n                        <span class=\"hljs-keyword\">var</span> next = current.Next;\n                        <span class=\"hljs-keyword\">var</span> nextNext = next.Next;\n                        passOneResult.Add(RebuildHeap(current, next));\n                        current = nextNext;\n                    }\n                    <span class=\"hljs-keyword\">else</span>\n                    {\n                        <span class=\"hljs-keyword\">var</span> lastInserted = passOneResult[^<span class=\"hljs-number\">1</span>];\n                        passOneResult[^<span class=\"hljs-number\">1</span>] = RebuildHeap(lastInserted, current);\n                        <span class=\"hljs-keyword\">break</span>;\n                    }\n                }\n            }\n\n            <span class=\"hljs-keyword\">var</span> passTwoResult = passOneResult[^<span class=\"hljs-number\">1</span>];\n\n            <span class=\"hljs-keyword\">if</span> (passOneResult.Count == <span class=\"hljs-number\">1</span>)\n            {\n                root = passTwoResult;\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = passOneResult.Count - <span class=\"hljs-number\">2</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--)\n            {\n                current = passOneResult[i];\n                passTwoResult = RebuildHeap(passTwoResult, current);\n            }\n\n            root = passTwoResult;\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> PairingHeapNode&lt;T&gt; <span class=\"hljs-title\">RebuildHeap</span>(<span class=\"hljs-params\">PairingHeapNode&lt;T&gt; node1, PairingHeapNode&lt;T&gt; node2</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (node2 != <span class=\"hljs-literal\">null</span>)\n            {\n                node2.Previous = <span class=\"hljs-literal\">null</span>!;\n                node2.Next = <span class=\"hljs-literal\">null</span>!;\n            }\n\n            <span class=\"hljs-keyword\">if</span> (node1 == <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> node2!;\n            }\n\n            node1.Previous = <span class=\"hljs-literal\">null</span>!;\n            node1.Next = <span class=\"hljs-literal\">null</span>!;\n\n            <span class=\"hljs-keyword\">if</span> (node2 != <span class=\"hljs-literal\">null</span> &amp;&amp; comparer.Compare(node1.Value, node2.Value) &lt;= <span class=\"hljs-number\">0</span>)\n            {\n                AddChild(<span class=\"hljs-keyword\">ref</span> node1, node2);\n                <span class=\"hljs-keyword\">return</span> node1;\n            }\n\n            AddChild(<span class=\"hljs-keyword\">ref</span> node2!, node1);\n            <span class=\"hljs-keyword\">return</span> node2;\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddChild</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">ref</span> PairingHeapNode&lt;T&gt; parent, PairingHeapNode&lt;T&gt; child</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (parent.ChildrenHead == <span class=\"hljs-literal\">null</span>)\n            {\n                parent.ChildrenHead = child;\n                child.Previous = parent;\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\n            <span class=\"hljs-keyword\">var</span> head = parent.ChildrenHead;\n\n            child.Previous = head;\n            child.Next = head.Next;\n\n            <span class=\"hljs-keyword\">if</span> (head.Next != <span class=\"hljs-literal\">null</span>)\n            {\n                head.Next.Previous = child;\n            }\n\n            head.Next = child;\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DeleteChild</span>(<span class=\"hljs-params\">PairingHeapNode&lt;T&gt; node</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (node.IsHeadChild)\n            {\n                <span class=\"hljs-keyword\">var</span> parent = node.Previous;\n\n                <span class=\"hljs-keyword\">if</span> (node.Next != <span class=\"hljs-literal\">null</span>)\n                {\n                    node.Next.Previous = parent;\n                }\n\n                parent.ChildrenHead = node.Next!;\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\n                node.Previous.Next = node.Next;\n\n                <span class=\"hljs-keyword\">if</span> (node.Next != <span class=\"hljs-literal\">null</span>)\n                {\n                    node.Next.Previous = node.Previous;\n                }\n            }\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Map</span>(<span class=\"hljs-params\">T newItem, PairingHeapNode&lt;T&gt; newNode</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (mapping.ContainsKey(newItem))\n            {\n                mapping[newItem].Add(newNode);\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\n                mapping[newItem] = <span class=\"hljs-keyword\">new</span> List&lt;PairingHeapNode&lt;T&gt;&gt;(<span class=\"hljs-keyword\">new</span>[] { newNode });\n            }\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">UpdateNodeValue</span>(<span class=\"hljs-params\">T currentValue, T newValue, PairingHeapNode&lt;T&gt; node</span>)</span>\n        {\n            RemoveMapping(currentValue, node);\n            node.Value = newValue;\n            Map(newValue, node);\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">RemoveMapping</span>(<span class=\"hljs-params\">T currentValue, PairingHeapNode&lt;T&gt; node</span>)</span>\n        {\n            mapping[currentValue].Remove(node);\n            <span class=\"hljs-keyword\">if</span> (mapping[currentValue].Count == <span class=\"hljs-number\">0</span>)\n            {\n                mapping.Remove(currentValue);\n            }\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Sergii Lischuk",
      "email": "evertodante@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}