{
  "slug": "palindrome-singly-linked-list",
  "name": "Palindrome Singly Linked List",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/misc/PalindromeSinglyLinkedList.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/misc/PalindromeSinglyLinkedList.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.misc;\n\n<span class=\"hljs-keyword\">import</span> java.util.Stack;\n<span class=\"hljs-keyword\">import</span> com.thealgorithms.datastructures.lists.SinglyLinkedList;\n\n<span class=\"hljs-comment\">/**\n * A simple way of knowing if a singly linked list is palindrome is to push all\n * the values into a Stack and then compare the list to popped vales from the\n * Stack.\n *\n * See more:\n * https://www.geeksforgeeks.org/function-to-check-if-a-singly-linked-list-is-palindrome/\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PalindromeSinglyLinkedList</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">SinglyLinkedList</span> <span class=\"hljs-variable\">linkedList</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SinglyLinkedList</span>();\n\n        linkedList.insertHead(<span class=\"hljs-number\">3</span>);\n        linkedList.insertNth(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>);\n        linkedList.insertNth(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n        linkedList.insertNth(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\n        linkedList.insertNth(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\n\n        <span class=\"hljs-keyword\">if</span> (isPalindrome(linkedList)) {\n            System.out.println(<span class=\"hljs-string\">&quot;It&#x27;s a palindrome list&quot;</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            System.out.println(<span class=\"hljs-string\">&quot;It&#x27;s NOT a palindrome list&quot;</span>);\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isPalindrome</span><span class=\"hljs-params\">(SinglyLinkedList linkedList)</span> {\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">ret</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>;\n        Stack&lt;Integer&gt; linkedListValues = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>&lt;&gt;();\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; linkedList.size(); i++) {\n            linkedListValues.push(linkedList.getNth(i));\n        }\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; linkedList.size(); i++) {\n            <span class=\"hljs-keyword\">if</span> (linkedList.getNth(i) != linkedListValues.pop()) {\n                ret = <span class=\"hljs-literal\">false</span>;\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> ret;\n    }\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}