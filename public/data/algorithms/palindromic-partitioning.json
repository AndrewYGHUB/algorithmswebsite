{
  "slug": "palindromic-partitioning",
  "name": "Palindromic Partitioning",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/dynamicprogramming/PalindromicPartitioning.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/dynamicprogramming/PalindromicPartitioning.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\n\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@file</span> <span class=\"hljs-doctag\">@brief</span> Implements [Palindrome\n * Partitioning](https://leetcode.com/problems/palindrome-partitioning-ii/)\n * algorithm, giving you the minimum number of partitions you need to make\n *\n * <span class=\"hljs-doctag\">@details</span> palindrome partitioning uses dynamic programming and goes to all the\n * possible partitions to find the minimum you are given a string and you need\n * to give minimum number of partitions needed to divide it into a number of\n * palindromes [Palindrome Partitioning]\n * (https://www.geeksforgeeks.org/palindrome-partitioning-dp-17/) overall time\n * complexity O(n^2) For example: example 1:- String : &quot;nitik&quot; Output : 2 =&gt; &quot;n\n * | iti | k&quot; For example: example 2:- String : &quot;ababbbabbababa&quot; Output : 3 =&gt;\n * &quot;aba | b | bbabb | ababa&quot;\n * <span class=\"hljs-doctag\">@author</span> [Syed] (https://github.com/roeticvampire)\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PalindromicPartitioning</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">minimalpartitions</span><span class=\"hljs-params\">(String word)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> word.length();\n        <span class=\"hljs-comment\">/* We Make two arrays to create a bottom-up solution.\n           minCuts[i] = Minimum number of cuts needed for palindrome partitioning of substring word[0..i]\n           isPalindrome[i][j] = true if substring str[i..j] is palindrome\n           Base Condition: C[i] is 0 if P[0][i]= true\n         */</span>\n        <span class=\"hljs-type\">int</span>[] minCuts = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[len];\n        <span class=\"hljs-type\">boolean</span>[][] isPalindrome = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">boolean</span>[len][len];\n\n        <span class=\"hljs-type\">int</span> i, j, L; <span class=\"hljs-comment\">// different looping variables</span>\n\n        <span class=\"hljs-comment\">// Every substring of length 1 is a palindrome</span>\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n            isPalindrome[i][i] = <span class=\"hljs-literal\">true</span>;\n        }\n\n        <span class=\"hljs-comment\">/* L is substring length. Build the solution in bottom up manner by considering all substrings of length starting from 2 to n. */</span>\n        <span class=\"hljs-keyword\">for</span> (L = <span class=\"hljs-number\">2</span>; L &lt;= len; L++) {\n            <span class=\"hljs-comment\">// For substring of length L, set different possible starting indexes</span>\n            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len - L + <span class=\"hljs-number\">1</span>; i++) {\n                j = i + L - <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// Ending index</span>\n                <span class=\"hljs-comment\">// If L is 2, then we just need to</span>\n                <span class=\"hljs-comment\">// compare two characters. Else need to</span>\n                <span class=\"hljs-comment\">// check two corner characters and value</span>\n                <span class=\"hljs-comment\">// of P[i+1][j-1]</span>\n                <span class=\"hljs-keyword\">if</span> (L == <span class=\"hljs-number\">2</span>) {\n                    isPalindrome[i][j] = (word.charAt(i) == word.charAt(j));\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-keyword\">if</span> ((word.charAt(i) == word.charAt(j)) &amp;&amp; isPalindrome[i + <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>]) {\n                        isPalindrome[i][j] = <span class=\"hljs-literal\">true</span>;\n                    } <span class=\"hljs-keyword\">else</span> {\n                        isPalindrome[i][j] = <span class=\"hljs-literal\">false</span>;\n                    }\n\n                }\n            }\n        }\n\n        <span class=\"hljs-comment\">//We find the minimum for each index</span>\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n            <span class=\"hljs-keyword\">if</span> (isPalindrome[<span class=\"hljs-number\">0</span>][i] == <span class=\"hljs-literal\">true</span>) {\n                minCuts[i] = <span class=\"hljs-number\">0</span>;\n            } <span class=\"hljs-keyword\">else</span> {\n                minCuts[i] = Integer.MAX_VALUE;\n                <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; i; j++) {\n                    <span class=\"hljs-keyword\">if</span> (isPalindrome[j + <span class=\"hljs-number\">1</span>][i] == <span class=\"hljs-literal\">true</span> &amp;&amp; <span class=\"hljs-number\">1</span> + minCuts[j] &lt; minCuts[i]) {\n                        minCuts[i] = <span class=\"hljs-number\">1</span> + minCuts[j];\n                    }\n                }\n            }\n        }\n\n        <span class=\"hljs-comment\">// Return the min cut value for complete</span>\n        <span class=\"hljs-comment\">// string. i.e., str[0..n-1]</span>\n        <span class=\"hljs-keyword\">return</span> minCuts[len - <span class=\"hljs-number\">1</span>];\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">input</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n        String word;\n        System.out.println(<span class=\"hljs-string\">&quot;Enter the First String&quot;</span>);\n        word = input.nextLine();\n        <span class=\"hljs-comment\">// ans stores the final minimal cut count needed for partitioning</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ans</span> <span class=\"hljs-operator\">=</span> minimalpartitions(word);\n        System.out.println(\n                <span class=\"hljs-string\">&quot;The minimum cuts needed to partition \\&quot;&quot;</span> + word + <span class=\"hljs-string\">&quot;\\&quot; into palindromes is &quot;</span> + ans);\n        input.close();\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Syed A. Haider",
      "email": "56455410+roeticvampire@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}