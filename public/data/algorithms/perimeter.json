{
  "slug": "perimeter",
  "name": "Perimeter",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/perimeter.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/perimeter.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementations for the\n * [perimeter](https://en.wikipedia.org/wiki/Perimeter) of various shapes\n * @details The  of a shape is the amount of 2D space it takes up.\n * All shapes have a formula for their perimeter.\n * These implementations support multiple return types.\n *\n * @author [OGscorpion](https://github.com/OGscorpion)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> _USE_MATH_DEFINES</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span>     <span class=\"hljs-comment\">/// for M_PI definition and pow()</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdint&gt;</span>   <span class=\"hljs-comment\">/// for uint16_t datatype</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace math\n * @brief Mathematical algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> math {\n<span class=\"hljs-comment\">/**\n * @brief perimeter of a [square](https://en.wikipedia.org/wiki/Square) (4 * l)\n * @param length is the length of the square\n * @returns perimeter of square\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">square_perimeter</span><span class=\"hljs-params\">(T length)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span> * length;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief perimeter of a [rectangle](https://en.wikipedia.org/wiki/Rectangle) (\n * 2(l + w) )\n * @param length is the length of the rectangle\n * @param width is the width of the rectangle\n * @returns perimeter of the rectangle\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">rect_perimeter</span><span class=\"hljs-params\">(T length, T width)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * (length + width);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief perimeter of a [triangle](https://en.wikipedia.org/wiki/Triangle) (a +\n * b + c)\n * @param base is the length of the bottom side of the triangle\n * @param height is the length of the tallest point in the triangle\n * @returns perimeter of the triangle\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">triangle_perimeter</span><span class=\"hljs-params\">(T base, T height, T hypotenuse)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> base + height + hypotenuse;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief perimeter of a\n * [circle](https://en.wikipedia.org/wiki/perimeter_of_a_circle) (2 * pi * r)\n * @param radius is the radius of the circle\n * @returns perimeter of the circle\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">circle_perimeter</span><span class=\"hljs-params\">(T radius)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * M_PI * radius;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief perimeter of a\n * [parallelogram](https://en.wikipedia.org/wiki/Parallelogram) 2(b + h)\n * @param base is the length of the bottom side of the parallelogram\n * @param height is the length of the tallest point in the parallelogram\n * @returns perimeter of the parallelogram\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">parallelogram_perimeter</span><span class=\"hljs-params\">(T base, T height)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * (base + height);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief surface perimeter of a [cube](https://en.wikipedia.org/wiki/Cube) ( 12\n * * l)\n * @param length is the length of the cube\n * @returns surface perimeter of the cube\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">cube_surface_perimeter</span><span class=\"hljs-params\">(T length)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">12</span> * length;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief surface perimeter of a\n * [n-polygon](https://www.cuemath.com/measurement/perimeter-of-polygon/) ( n *\n * l)\n * @param length is the length of the polygon\n * @param sides is the number of sides of the polygon\n * @returns surface perimeter of the polygon\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">n_polygon_surface_perimeter</span><span class=\"hljs-params\">(T sides, T length)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> sides * length;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief surface perimeter of a\n * [cylinder](https://en.wikipedia.org/wiki/Cylinder) (2 * radius + 2 * height)\n * @param radius is the radius of the cylinder\n * @param height is the height of the cylinder\n * @returns surface perimeter of the cylinder\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">cylinder_surface_perimeter</span><span class=\"hljs-params\">(T radius, T height)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">2</span> * radius) + (<span class=\"hljs-number\">2</span> * height);\n}\n}  <span class=\"hljs-comment\">// namespace math</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// I/O variables for testing</span>\n    <span class=\"hljs-type\">uint16_t</span> int_length = <span class=\"hljs-number\">0</span>;      <span class=\"hljs-comment\">// 16 bit integer length input</span>\n    <span class=\"hljs-type\">uint16_t</span> int_width = <span class=\"hljs-number\">0</span>;       <span class=\"hljs-comment\">// 16 bit integer width input</span>\n    <span class=\"hljs-type\">uint16_t</span> int_base = <span class=\"hljs-number\">0</span>;        <span class=\"hljs-comment\">// 16 bit integer base input</span>\n    <span class=\"hljs-type\">uint16_t</span> int_height = <span class=\"hljs-number\">0</span>;      <span class=\"hljs-comment\">// 16 bit integer height input</span>\n    <span class=\"hljs-type\">uint16_t</span> int_hypotenuse = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// 16 bit integer hypotenuse input</span>\n    <span class=\"hljs-type\">uint16_t</span> int_sides = <span class=\"hljs-number\">0</span>;       <span class=\"hljs-comment\">// 16 bit integer sides input</span>\n    <span class=\"hljs-type\">uint16_t</span> int_expected = <span class=\"hljs-number\">0</span>;    <span class=\"hljs-comment\">// 16 bit integer expected output</span>\n    <span class=\"hljs-type\">uint16_t</span> int_perimeter = <span class=\"hljs-number\">0</span>;   <span class=\"hljs-comment\">// 16 bit integer output</span>\n\n    <span class=\"hljs-type\">float</span> float_length = NAN;     <span class=\"hljs-comment\">// float length input</span>\n    <span class=\"hljs-type\">float</span> float_expected = NAN;   <span class=\"hljs-comment\">// float expected output</span>\n    <span class=\"hljs-type\">float</span> float_perimeter = NAN;  <span class=\"hljs-comment\">// float output</span>\n\n    <span class=\"hljs-type\">double</span> double_length = NAN;     <span class=\"hljs-comment\">// double length input</span>\n    <span class=\"hljs-type\">double</span> double_width = NAN;      <span class=\"hljs-comment\">// double width input</span>\n    <span class=\"hljs-type\">double</span> double_radius = NAN;     <span class=\"hljs-comment\">// double radius input</span>\n    <span class=\"hljs-type\">double</span> double_height = NAN;     <span class=\"hljs-comment\">// double height input</span>\n    <span class=\"hljs-type\">double</span> double_expected = NAN;   <span class=\"hljs-comment\">// double expected output</span>\n    <span class=\"hljs-type\">double</span> double_perimeter = NAN;  <span class=\"hljs-comment\">// double output</span>\n\n    <span class=\"hljs-comment\">// 1st test</span>\n    int_length = <span class=\"hljs-number\">5</span>;\n    int_expected = <span class=\"hljs-number\">20</span>;\n    int_perimeter = math::<span class=\"hljs-built_in\">square_perimeter</span>(int_length);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;perimeter OF A SQUARE (int)&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Length: &quot;</span> &lt;&lt; int_length &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; int_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; int_perimeter &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(int_perimeter == int_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 2nd test</span>\n    float_length = <span class=\"hljs-number\">2.5</span>;\n    float_expected = <span class=\"hljs-number\">10</span>;\n    float_perimeter = math::<span class=\"hljs-built_in\">square_perimeter</span>(float_length);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;perimeter OF A SQUARE (float)&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Length: &quot;</span> &lt;&lt; float_length &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; float_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; float_perimeter &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(float_perimeter == float_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 3rd test</span>\n    int_length = <span class=\"hljs-number\">4</span>;\n    int_width = <span class=\"hljs-number\">7</span>;\n    int_expected = <span class=\"hljs-number\">22</span>;\n    int_perimeter = math::<span class=\"hljs-built_in\">rect_perimeter</span>(int_length, int_width);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;perimeter OF A RECTANGLE (int)&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Length: &quot;</span> &lt;&lt; int_length &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Width: &quot;</span> &lt;&lt; int_width &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; int_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; int_perimeter &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(int_perimeter == int_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 4th test</span>\n    double_length = <span class=\"hljs-number\">2.5</span>;\n    double_width = <span class=\"hljs-number\">5.7</span>;\n    double_expected = <span class=\"hljs-number\">16.4</span>;\n    double_perimeter = math::<span class=\"hljs-built_in\">rect_perimeter</span>(double_length, double_width);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;perimeter OF A RECTANGLE (double)&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Length: &quot;</span> &lt;&lt; double_length &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Width: &quot;</span> &lt;&lt; double_width &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; double_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; double_perimeter &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(double_perimeter == double_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 5th test</span>\n    int_base = <span class=\"hljs-number\">10</span>;\n    int_height = <span class=\"hljs-number\">3</span>;\n    int_hypotenuse = <span class=\"hljs-number\">5</span>;\n    int_expected = <span class=\"hljs-number\">18</span>;\n    int_perimeter =\n        math::<span class=\"hljs-built_in\">triangle_perimeter</span>(int_base, int_height, int_hypotenuse);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;perimeter OF A TRIANGLE&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Base: &quot;</span> &lt;&lt; int_base &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Height: &quot;</span> &lt;&lt; int_height &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; int_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; int_perimeter &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(int_perimeter == int_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 6th test</span>\n    double_radius = <span class=\"hljs-number\">6</span>;\n    double_expected =\n        <span class=\"hljs-number\">37.69911184307752</span>;  <span class=\"hljs-comment\">// rounded down because the double datatype</span>\n                            <span class=\"hljs-comment\">// truncates after 14 decimal places</span>\n    double_perimeter = math::<span class=\"hljs-built_in\">circle_perimeter</span>(double_radius);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;perimeter OF A CIRCLE&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Radius: &quot;</span> &lt;&lt; double_radius &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; double_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; double_perimeter &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(double_perimeter == double_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 7th test</span>\n    int_base = <span class=\"hljs-number\">6</span>;\n    int_height = <span class=\"hljs-number\">7</span>;\n    int_expected = <span class=\"hljs-number\">26</span>;\n    int_perimeter = math::<span class=\"hljs-built_in\">parallelogram_perimeter</span>(int_base, int_height);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;perimeter OF A PARALLELOGRAM&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Base: &quot;</span> &lt;&lt; int_base &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Height: &quot;</span> &lt;&lt; int_height &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; int_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; int_perimeter &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(int_perimeter == int_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 8th test</span>\n    double_length = <span class=\"hljs-number\">5.5</span>;\n    double_expected = <span class=\"hljs-number\">66.0</span>;\n    double_perimeter = math::<span class=\"hljs-built_in\">cube_surface_perimeter</span>(double_length);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;SURFACE perimeter OF A CUBE&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Length: &quot;</span> &lt;&lt; double_length &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; double_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; double_perimeter &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(double_perimeter == double_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 9th test</span>\n    int_sides = <span class=\"hljs-number\">7</span>;\n    int_length = <span class=\"hljs-number\">10</span>;\n    int_expected = <span class=\"hljs-number\">70</span>;\n    int_perimeter = math::<span class=\"hljs-built_in\">n_polygon_surface_perimeter</span>(int_sides, int_length);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;SURFACE perimeter OF A N-POLYGON&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Sides: &quot;</span> &lt;&lt; int_sides &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Length: &quot;</span> &lt;&lt; int_length &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; int_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; int_perimeter &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(int_perimeter == int_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 10th test</span>\n    double_radius = <span class=\"hljs-number\">4.0</span>;\n    double_height = <span class=\"hljs-number\">7.0</span>;\n    double_expected = <span class=\"hljs-number\">22.0</span>;\n    double_perimeter =\n        math::<span class=\"hljs-built_in\">cylinder_surface_perimeter</span>(double_radius, double_height);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;SURFACE perimeter OF A CYLINDER&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Radius: &quot;</span> &lt;&lt; double_radius &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Height: &quot;</span> &lt;&lt; double_height &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; double_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; double_perimeter &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(double_perimeter == double_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}