{
  "slug": "playfair-cipher",
  "name": "Playfair Cipher",
  "categories": [
    "ciphers"
  ],
  "body": {
    "en": "<p>The Playfair cipher was invented in 1854 by <a href=\"https://en.wikipedia.org/wiki/Charles_Wheatstone\">Charles Wheatstone</a> but was named after Lord Playfair who promoted the use of the cipher.</p>\n<p>The Playfair cipher was the first practical digraph substitution cipher. In Playfair cipher unlike traditional cipher, we encrypt a pair of alphabets(digraphs) instead of a single alphabet. A <code>5 × 5</code> grid of alphabets was used as the key-square. Each of the 25 alphabets is unique and one letter of the alphabet (usually J) is omitted from the table. If the plaintext contains J, then it is replaced by I. The initial alphabets in the key square are the unique alphabets of the key in the order in which they appear followed by the remaining letters of the alphabet in order.</p>\n<h2>Example</h2>\n<p>Suppose we take an example as:</p>\n<p>Plain Text (PT): instruments, key: <code>monarchy</code></p>\n<h2>Rules</h2>\n<ol>\n<li>If both the letters are in the same column, take the letter below each one (going back to the top if at the bottom).</li>\n</ol>\n<pre><code class=\"hljs language-pgsql\">    Diagraph: \"me\"\n    <span class=\"hljs-keyword\">Encrypted</span> <span class=\"hljs-type\">Text</span>: cl\n    Encryption: \n      m -> c\n      e -> l\n</code></pre>\n<ol start=\"2\">\n<li>If both the letters are in the same row, take the letter to the right of each one (going back to the leftmost only if it's at the rightmost position).</li>\n</ol>\n<pre><code class=\"hljs language-pgsql\">    Diagraph: \"st\"\n    <span class=\"hljs-keyword\">Encrypted</span> <span class=\"hljs-type\">Text</span>: tl\n    Encryption: \n      s -> t\n      t -> l\n</code></pre>\n<ol start=\"3\">\n<li>If neither of the above rules is true, form a rectangle with the two letters, and take the letters on the horizontal opposite corner of the rectangle.</li>\n</ol>\n<pre><code class=\"hljs language-pgsql\">    Diagraph: \"nt\"\n    <span class=\"hljs-keyword\">Encrypted</span> <span class=\"hljs-type\">Text</span>: rq\n    Encryption: \n      n -> r\n      t -> q\n</code></pre>\n<p>The rules above are used for Encryption. Can be applied vice-versa for Decryption.</p>\n<h2>Steps</h2>\n<h3>Encryption</h3>\n<ol>\n<li>We have to generate a <code>5 × 5</code> matrix from the key as</li>\n</ol>\n<pre><code class=\"hljs language-json\">   [m o n a r]\n   [c h y b d]\n   [e f g k i]\n   [l p q s t]\n   [u v w x z]\n</code></pre>\n<ol start=\"2\">\n<li>Split the plaintext in digraphs(pair of two). If there is an odd number of letters, a Z is added to the last letter.  Pair cannot be made with same letter. Break the letter in single and add a bogus letter to the previous letter.</li>\n</ol>\n<pre><code class=\"hljs language-scheme\">   <span class=\"hljs-symbol\">'in</span>' <span class=\"hljs-symbol\">'st</span>' <span class=\"hljs-symbol\">'ru</span>' <span class=\"hljs-symbol\">'me</span>' <span class=\"hljs-symbol\">'nt</span>' <span class=\"hljs-symbol\">'sz</span>'\n</code></pre>\n<ol start=\"3\">\n<li>Now, we need to follow the rules for encrypting and do as follows:</li>\n</ol>\n<pre><code class=\"hljs language-xl\">    Plain Text: instrumentsz\n    key: monarchy\n    Encryption: \n      <span class=\"hljs-function\"><span class=\"hljs-title\">i</span> -></span> g\n      <span class=\"hljs-function\"><span class=\"hljs-title\">n</span> -></span> a\n      <span class=\"hljs-function\"><span class=\"hljs-title\">s</span> -></span> t\n      <span class=\"hljs-function\"><span class=\"hljs-title\">t</span> -></span> l\n      <span class=\"hljs-function\"><span class=\"hljs-title\">r</span> -></span> m\n      <span class=\"hljs-function\"><span class=\"hljs-title\">u</span> -></span> z\n      <span class=\"hljs-function\"><span class=\"hljs-title\">m</span> -></span> c\n      <span class=\"hljs-function\"><span class=\"hljs-title\">e</span> -></span> l\n      <span class=\"hljs-function\"><span class=\"hljs-title\">n</span> -></span> r\n      <span class=\"hljs-function\"><span class=\"hljs-title\">t</span> -></span> q\n      <span class=\"hljs-function\"><span class=\"hljs-title\">s</span> -></span> t\n      <span class=\"hljs-function\"><span class=\"hljs-title\">z</span> -></span> x\n</code></pre>\n<p>So we will get the encrypted text as <strong>gatlmzclrqtx</strong>.</p>\n<h3>Decryption</h3>\n<ol>\n<li>We have to generate a <code>5 × 5</code> matrix from the key as</li>\n</ol>\n<pre><code class=\"hljs language-json\">   [m o n a r]\n   [c h y b d]\n   [e f g k i]\n   [l p q s t]\n   [u v w x z]\n</code></pre>\n<ol start=\"2\">\n<li>We need to split the ciphertext as done for plaintext while encrypting</li>\n</ol>\n<pre><code class=\"hljs language-scheme\">   <span class=\"hljs-symbol\">'ga</span>' <span class=\"hljs-symbol\">'tl</span>' <span class=\"hljs-symbol\">'mz</span>' <span class=\"hljs-symbol\">'cl</span>' <span class=\"hljs-symbol\">'rq</span>' <span class=\"hljs-symbol\">'tx</span>'\n</code></pre>\n<ol start=\"3\">\n<li>For the previous Cipher Text <strong>gatlmzclrqtx</strong>, by following the rules we get:</li>\n</ol>\n<pre><code class=\"hljs language-xl\">    Plain Text: gatlmzclrqtx\n    key: monarchy\n    Decryption:\n      <span class=\"hljs-function\"><span class=\"hljs-title\">ga</span> -></span> <span class=\"hljs-built_in\">in</span>\n      <span class=\"hljs-function\"><span class=\"hljs-title\">tl</span> -></span> st\n      <span class=\"hljs-function\"><span class=\"hljs-title\">mz</span> -></span> ru\n      <span class=\"hljs-function\"><span class=\"hljs-title\">cl</span> -></span> me\n      <span class=\"hljs-function\"><span class=\"hljs-title\">rq</span> -></span> nt\n      <span class=\"hljs-function\"><span class=\"hljs-title\">tx</span> -></span> sz\n</code></pre>\n<p>So we will get the encrypted text as <strong>instrumentsz</strong>.</p>\n<h2>Implementations</h2>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/ciphers/playfair_cipher.py\"><strong>Python</strong></a></li>\n</ul>\n<h2>Video Explanation</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=UURjVI5cw4g\"><strong>Video explanation of the Playfair Cipher algorithm</strong></a></li>\n</ul>"
  },
  "implementations": {
    "python": {
      "dir": "ciphers/playfair_cipher.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/ciphers/playfair_cipher.py",
      "code": "<span class=\"hljs-keyword\">import</span> itertools\n<span class=\"hljs-keyword\">import</span> string\n<span class=\"hljs-keyword\">from</span> collections.abc <span class=\"hljs-keyword\">import</span> Generator, Iterable\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">chunker</span>(<span class=\"hljs-params\">seq: Iterable[<span class=\"hljs-built_in\">str</span>], size: <span class=\"hljs-built_in\">int</span></span>) -&gt; Generator[<span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">str</span>, ...], <span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>]:\n    it = <span class=\"hljs-built_in\">iter</span>(seq)\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n        chunk = <span class=\"hljs-built_in\">tuple</span>(itertools.islice(it, size))\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> chunk:\n            <span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">yield</span> chunk\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">prepare_input</span>(<span class=\"hljs-params\">dirty: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Prepare the plaintext by up-casing it\n    and separating repeated letters with X&#x27;s\n    &quot;&quot;&quot;</span>\n\n    dirty = <span class=\"hljs-string\">&quot;&quot;</span>.join([c.upper() <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> dirty <span class=\"hljs-keyword\">if</span> c <span class=\"hljs-keyword\">in</span> string.ascii_letters])\n    clean = <span class=\"hljs-string\">&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(dirty) &lt; <span class=\"hljs-number\">2</span>:\n        <span class=\"hljs-keyword\">return</span> dirty\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(dirty) - <span class=\"hljs-number\">1</span>):\n        clean += dirty[i]\n\n        <span class=\"hljs-keyword\">if</span> dirty[i] == dirty[i + <span class=\"hljs-number\">1</span>]:\n            clean += <span class=\"hljs-string\">&quot;X&quot;</span>\n\n    clean += dirty[-<span class=\"hljs-number\">1</span>]\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(clean) &amp; <span class=\"hljs-number\">1</span>:\n        clean += <span class=\"hljs-string\">&quot;X&quot;</span>\n\n    <span class=\"hljs-keyword\">return</span> clean\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">generate_table</span>(<span class=\"hljs-params\">key: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]:\n\n    <span class=\"hljs-comment\"># I and J are used interchangeably to allow</span>\n    <span class=\"hljs-comment\"># us to use a 5x5 table (25 letters)</span>\n    alphabet = <span class=\"hljs-string\">&quot;ABCDEFGHIKLMNOPQRSTUVWXYZ&quot;</span>\n    <span class=\"hljs-comment\"># we&#x27;re using a list instead of a &#x27;2d&#x27; array because it makes the math</span>\n    <span class=\"hljs-comment\"># for setting up the table and doing the actual encoding/decoding simpler</span>\n    table = []\n\n    <span class=\"hljs-comment\"># copy key chars into the table if they are in `alphabet` ignoring duplicates</span>\n    <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> key.upper():\n        <span class=\"hljs-keyword\">if</span> char <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> table <span class=\"hljs-keyword\">and</span> char <span class=\"hljs-keyword\">in</span> alphabet:\n            table.append(char)\n\n    <span class=\"hljs-comment\"># fill the rest of the table in with the remaining alphabet chars</span>\n    <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> alphabet:\n        <span class=\"hljs-keyword\">if</span> char <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> table:\n            table.append(char)\n\n    <span class=\"hljs-keyword\">return</span> table\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encode</span>(<span class=\"hljs-params\">plaintext: <span class=\"hljs-built_in\">str</span>, key: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    table = generate_table(key)\n    plaintext = prepare_input(plaintext)\n    ciphertext = <span class=\"hljs-string\">&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># https://en.wikipedia.org/wiki/Playfair_cipher#Description</span>\n    <span class=\"hljs-keyword\">for</span> char1, char2 <span class=\"hljs-keyword\">in</span> chunker(plaintext, <span class=\"hljs-number\">2</span>):\n        row1, col1 = <span class=\"hljs-built_in\">divmod</span>(table.index(char1), <span class=\"hljs-number\">5</span>)\n        row2, col2 = <span class=\"hljs-built_in\">divmod</span>(table.index(char2), <span class=\"hljs-number\">5</span>)\n\n        <span class=\"hljs-keyword\">if</span> row1 == row2:\n            ciphertext += table[row1 * <span class=\"hljs-number\">5</span> + (col1 + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">5</span>]\n            ciphertext += table[row2 * <span class=\"hljs-number\">5</span> + (col2 + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">5</span>]\n        <span class=\"hljs-keyword\">elif</span> col1 == col2:\n            ciphertext += table[((row1 + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">5</span>) * <span class=\"hljs-number\">5</span> + col1]\n            ciphertext += table[((row2 + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">5</span>) * <span class=\"hljs-number\">5</span> + col2]\n        <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># rectangle</span>\n            ciphertext += table[row1 * <span class=\"hljs-number\">5</span> + col2]\n            ciphertext += table[row2 * <span class=\"hljs-number\">5</span> + col1]\n\n    <span class=\"hljs-keyword\">return</span> ciphertext\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decode</span>(<span class=\"hljs-params\">ciphertext: <span class=\"hljs-built_in\">str</span>, key: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    table = generate_table(key)\n    plaintext = <span class=\"hljs-string\">&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># https://en.wikipedia.org/wiki/Playfair_cipher#Description</span>\n    <span class=\"hljs-keyword\">for</span> char1, char2 <span class=\"hljs-keyword\">in</span> chunker(ciphertext, <span class=\"hljs-number\">2</span>):\n        row1, col1 = <span class=\"hljs-built_in\">divmod</span>(table.index(char1), <span class=\"hljs-number\">5</span>)\n        row2, col2 = <span class=\"hljs-built_in\">divmod</span>(table.index(char2), <span class=\"hljs-number\">5</span>)\n\n        <span class=\"hljs-keyword\">if</span> row1 == row2:\n            plaintext += table[row1 * <span class=\"hljs-number\">5</span> + (col1 - <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">5</span>]\n            plaintext += table[row2 * <span class=\"hljs-number\">5</span> + (col2 - <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">5</span>]\n        <span class=\"hljs-keyword\">elif</span> col1 == col2:\n            plaintext += table[((row1 - <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">5</span>) * <span class=\"hljs-number\">5</span> + col1]\n            plaintext += table[((row2 - <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">5</span>) * <span class=\"hljs-number\">5</span> + col2]\n        <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># rectangle</span>\n            plaintext += table[row1 * <span class=\"hljs-number\">5</span> + col2]\n            plaintext += table[row2 * <span class=\"hljs-number\">5</span> + col1]\n\n    <span class=\"hljs-keyword\">return</span> plaintext\n"
    }
  },
  "contributors": [
    {
      "name": "Riot",
      "email": "misike1111@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Jenia Dysin",
      "email": "jenia90@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ashu01",
      "email": "as01hu@gmail.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "eevee",
      "email": "quine.618033988@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 2
    }
  ],
  "explanationUrl": {
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en/Ciphers/playfair-cipher.md"
  }
}