{
  "slug": "points-are-collinear-3d",
  "name": "Points Are Collinear 3d",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/points_are_collinear_3d.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/points_are_collinear_3d.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nCheck if three points are collinear in 3D.\n\nIn short, the idea is that we are able to create a triangle using three points,\nand the area of that triangle can determine if the three points are collinear or not.\n\n\nFirst, we create two vectors with the same initial point from the three points,\nthen we will calculate the cross-product of them.\n\nThe length of the cross vector is numerically equal to the area of a parallelogram.\n\nFinally, the area of the triangle is equal to half of the area of the parallelogram.\n\nSince we are only differentiating between zero and anything else,\nwe can get rid of the square root when calculating the length of the vector,\nand also the division by two at the end.\n\nFrom a second perspective, if the two vectors are parallel and overlapping,\nwe can&#x27;t get a nonzero perpendicular vector,\nsince there will be an infinite number of orthogonal vectors.\n\nTo simplify the solution we will not calculate the length,\nbut we will decide directly from the vector whether it is equal to (0, 0, 0) or not.\n\n\nRead More:\n    https://math.stackexchange.com/a/1951650\n&quot;&quot;&quot;</span>\n\nVector3d = <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">float</span>]\nPoint3d = <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">float</span>]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_vector</span>(<span class=\"hljs-params\">end_point1: Point3d, end_point2: Point3d</span>) -&gt; Vector3d:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Pass two points to get the vector from them in the form (x, y, z).\n\n    &gt;&gt;&gt; create_vector((0, 0, 0), (1, 1, 1))\n    (1, 1, 1)\n    &gt;&gt;&gt; create_vector((45, 70, 24), (47, 32, 1))\n    (2, -38, -23)\n    &gt;&gt;&gt; create_vector((-14, -1, -8), (-7, 6, 4))\n    (7, 7, 12)\n    &quot;&quot;&quot;</span>\n    x = end_point2[<span class=\"hljs-number\">0</span>] - end_point1[<span class=\"hljs-number\">0</span>]\n    y = end_point2[<span class=\"hljs-number\">1</span>] - end_point1[<span class=\"hljs-number\">1</span>]\n    z = end_point2[<span class=\"hljs-number\">2</span>] - end_point1[<span class=\"hljs-number\">2</span>]\n    <span class=\"hljs-keyword\">return</span> (x, y, z)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_3d_vectors_cross</span>(<span class=\"hljs-params\">ab: Vector3d, ac: Vector3d</span>) -&gt; Vector3d:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Get the cross of the two vectors AB and AC.\n\n    I used determinant of 2x2 to get the determinant of the 3x3 matrix in the process.\n\n    Read More:\n        https://en.wikipedia.org/wiki/Cross_product\n        https://en.wikipedia.org/wiki/Determinant\n\n    &gt;&gt;&gt; get_3d_vectors_cross((3, 4, 7), (4, 9, 2))\n    (-55, 22, 11)\n    &gt;&gt;&gt; get_3d_vectors_cross((1, 1, 1), (1, 1, 1))\n    (0, 0, 0)\n    &gt;&gt;&gt; get_3d_vectors_cross((-4, 3, 0), (3, -9, -12))\n    (-36, -48, 27)\n    &gt;&gt;&gt; get_3d_vectors_cross((17.67, 4.7, 6.78), (-9.5, 4.78, -19.33))\n    (-123.2594, 277.15110000000004, 129.11260000000001)\n    &quot;&quot;&quot;</span>\n    x = ab[<span class=\"hljs-number\">1</span>] * ac[<span class=\"hljs-number\">2</span>] - ab[<span class=\"hljs-number\">2</span>] * ac[<span class=\"hljs-number\">1</span>]  <span class=\"hljs-comment\"># *i</span>\n    y = (ab[<span class=\"hljs-number\">0</span>] * ac[<span class=\"hljs-number\">2</span>] - ab[<span class=\"hljs-number\">2</span>] * ac[<span class=\"hljs-number\">0</span>]) * -<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># *j</span>\n    z = ab[<span class=\"hljs-number\">0</span>] * ac[<span class=\"hljs-number\">1</span>] - ab[<span class=\"hljs-number\">1</span>] * ac[<span class=\"hljs-number\">0</span>]  <span class=\"hljs-comment\"># *k</span>\n    <span class=\"hljs-keyword\">return</span> (x, y, z)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_zero_vector</span>(<span class=\"hljs-params\">vector: Vector3d, accuracy: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Check if vector is equal to (0, 0, 0) of not.\n\n    Sine the algorithm is very accurate, we will never get a zero vector,\n    so we need to round the vector axis,\n    because we want a result that is either True or False.\n    In other applications, we can return a float that represents the collinearity ratio.\n\n    &gt;&gt;&gt; is_zero_vector((0, 0, 0), accuracy=10)\n    True\n    &gt;&gt;&gt; is_zero_vector((15, 74, 32), accuracy=10)\n    False\n    &gt;&gt;&gt; is_zero_vector((-15, -74, -32), accuracy=10)\n    False\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">tuple</span>(<span class=\"hljs-built_in\">round</span>(x, accuracy) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> vector) == (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">are_collinear</span>(<span class=\"hljs-params\">a: Point3d, b: Point3d, c: Point3d, accuracy: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">10</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Check if three points are collinear or not.\n\n    1- Create tow vectors AB and AC.\n    2- Get the cross vector of the tow vectors.\n    3- Calcolate the length of the cross vector.\n    4- If the length is zero then the points are collinear, else they are not.\n\n    The use of the accuracy parameter is explained in is_zero_vector docstring.\n\n    &gt;&gt;&gt; are_collinear((4.802293498137402, 3.536233125455244, 0),\n    ...               (-2.186788107953106, -9.24561398001649, 7.141509524846482),\n    ...               (1.530169574640268, -2.447927606600034, 3.343487096469054))\n    True\n    &gt;&gt;&gt; are_collinear((-6, -2, 6),\n    ...               (6.200213806439997, -4.930157614926678, -4.482371908289856),\n    ...               (-4.085171149525941, -2.459889509029438, 4.354787180795383))\n    True\n    &gt;&gt;&gt; are_collinear((2.399001826862445, -2.452009976680793, 4.464656666157666),\n    ...               (-3.682816335934376, 5.753788986533145, 9.490993909044244),\n    ...               (1.962903518985307, 3.741415730125627, 7))\n    False\n    &gt;&gt;&gt; are_collinear((1.875375340689544, -7.268426006071538, 7.358196269835993),\n    ...               (-3.546599383667157, -4.630005261513976, 3.208784032924246),\n    ...               (-2.564606140206386, 3.937845170672183, 7))\n    False\n    &quot;&quot;&quot;</span>\n    ab = create_vector(a, b)\n    ac = create_vector(a, c)\n    <span class=\"hljs-keyword\">return</span> is_zero_vector(get_3d_vectors_cross(ab, ac), accuracy)\n"
    }
  },
  "contributors": [
    {
      "name": "zer0-x",
      "email": "65136727+zer0-x@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}