{
  "slug": "polybius",
  "name": "Polybius",
  "categories": [
    "ciphers"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "ciphers/polybius.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/ciphers/polybius.py",
      "code": "<span class=\"hljs-comment\">#!/usr/bin/env python3</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\nA Polybius Square is a table that allows someone to translate letters into numbers.\n\nhttps://www.braingle.com/brainteasers/codes/polybius.php\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PolybiusCipher</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        SQUARE = [\n            [<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>],\n            [<span class=\"hljs-string\">&quot;f&quot;</span>, <span class=\"hljs-string\">&quot;g&quot;</span>, <span class=\"hljs-string\">&quot;h&quot;</span>, <span class=\"hljs-string\">&quot;i&quot;</span>, <span class=\"hljs-string\">&quot;k&quot;</span>],\n            [<span class=\"hljs-string\">&quot;l&quot;</span>, <span class=\"hljs-string\">&quot;m&quot;</span>, <span class=\"hljs-string\">&quot;n&quot;</span>, <span class=\"hljs-string\">&quot;o&quot;</span>, <span class=\"hljs-string\">&quot;p&quot;</span>],\n            [<span class=\"hljs-string\">&quot;q&quot;</span>, <span class=\"hljs-string\">&quot;r&quot;</span>, <span class=\"hljs-string\">&quot;s&quot;</span>, <span class=\"hljs-string\">&quot;t&quot;</span>, <span class=\"hljs-string\">&quot;u&quot;</span>],\n            [<span class=\"hljs-string\">&quot;v&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>, <span class=\"hljs-string\">&quot;x&quot;</span>, <span class=\"hljs-string\">&quot;y&quot;</span>, <span class=\"hljs-string\">&quot;z&quot;</span>],\n        ]\n        self.SQUARE = np.array(SQUARE)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">letter_to_numbers</span>(<span class=\"hljs-params\">self, letter: <span class=\"hljs-built_in\">str</span></span>) -&gt; np.ndarray:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Return the pair of numbers that represents the given letter in the\n        polybius square\n        &gt;&gt;&gt; np.array_equal(PolybiusCipher().letter_to_numbers(&#x27;a&#x27;), [1,1])\n        True\n\n        &gt;&gt;&gt; np.array_equal(PolybiusCipher().letter_to_numbers(&#x27;u&#x27;), [4,5])\n        True\n        &quot;&quot;&quot;</span>\n        index1, index2 = np.where(self.SQUARE == letter)\n        indexes = np.concatenate([index1 + <span class=\"hljs-number\">1</span>, index2 + <span class=\"hljs-number\">1</span>])\n        <span class=\"hljs-keyword\">return</span> indexes\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">numbers_to_letter</span>(<span class=\"hljs-params\">self, index1: <span class=\"hljs-built_in\">int</span>, index2: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Return the letter corresponding to the position [index1, index2] in\n        the polybius square\n\n        &gt;&gt;&gt; PolybiusCipher().numbers_to_letter(4, 5) == &quot;u&quot;\n        True\n\n        &gt;&gt;&gt; PolybiusCipher().numbers_to_letter(1, 1) == &quot;a&quot;\n        True\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> self.SQUARE[index1 - <span class=\"hljs-number\">1</span>, index2 - <span class=\"hljs-number\">1</span>]\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encode</span>(<span class=\"hljs-params\">self, message: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Return the encoded version of message according to the polybius cipher\n\n        &gt;&gt;&gt; PolybiusCipher().encode(&quot;test message&quot;) == &quot;44154344 32154343112215&quot;\n        True\n\n        &gt;&gt;&gt; PolybiusCipher().encode(&quot;Test Message&quot;) == &quot;44154344 32154343112215&quot;\n        True\n        &quot;&quot;&quot;</span>\n        message = message.lower()\n        message = message.replace(<span class=\"hljs-string\">&quot;j&quot;</span>, <span class=\"hljs-string\">&quot;i&quot;</span>)\n\n        encoded_message = <span class=\"hljs-string\">&quot;&quot;</span>\n        <span class=\"hljs-keyword\">for</span> letter_index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(message)):\n            <span class=\"hljs-keyword\">if</span> message[letter_index] != <span class=\"hljs-string\">&quot; &quot;</span>:\n                numbers = self.letter_to_numbers(message[letter_index])\n                encoded_message = encoded_message + <span class=\"hljs-built_in\">str</span>(numbers[<span class=\"hljs-number\">0</span>]) + <span class=\"hljs-built_in\">str</span>(numbers[<span class=\"hljs-number\">1</span>])\n            <span class=\"hljs-keyword\">elif</span> message[letter_index] == <span class=\"hljs-string\">&quot; &quot;</span>:\n                encoded_message = encoded_message + <span class=\"hljs-string\">&quot; &quot;</span>\n\n        <span class=\"hljs-keyword\">return</span> encoded_message\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decode</span>(<span class=\"hljs-params\">self, message: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Return the decoded version of message according to the polybius cipher\n\n        &gt;&gt;&gt; PolybiusCipher().decode(&quot;44154344 32154343112215&quot;) == &quot;test message&quot;\n        True\n\n        &gt;&gt;&gt; PolybiusCipher().decode(&quot;4415434432154343112215&quot;) == &quot;testmessage&quot;\n        True\n        &quot;&quot;&quot;</span>\n        message = message.replace(<span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-string\">&quot;  &quot;</span>)\n        decoded_message = <span class=\"hljs-string\">&quot;&quot;</span>\n        <span class=\"hljs-keyword\">for</span> numbers_index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">len</span>(message) / <span class=\"hljs-number\">2</span>)):\n            <span class=\"hljs-keyword\">if</span> message[numbers_index * <span class=\"hljs-number\">2</span>] != <span class=\"hljs-string\">&quot; &quot;</span>:\n                index1 = message[numbers_index * <span class=\"hljs-number\">2</span>]\n                index2 = message[numbers_index * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>]\n\n                letter = self.numbers_to_letter(<span class=\"hljs-built_in\">int</span>(index1), <span class=\"hljs-built_in\">int</span>(index2))\n                decoded_message = decoded_message + letter\n            <span class=\"hljs-keyword\">elif</span> message[numbers_index * <span class=\"hljs-number\">2</span>] == <span class=\"hljs-string\">&quot; &quot;</span>:\n                decoded_message = decoded_message + <span class=\"hljs-string\">&quot; &quot;</span>\n\n        <span class=\"hljs-keyword\">return</span> decoded_message\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/ciphers/Polybius.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/ciphers/Polybius.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.ciphers;\n\n<span class=\"hljs-comment\">/**\n * A Java implementation of Polybius Cipher\n * Polybius is a substitution cipher method\n * It was invented by a greek philosopher that name is Polybius\n * Letters in alphabet takes place to two dimension table.\n * Encrypted text is created according to row and column in two dimension table\n * Decrypted text is generated by looking at the row and column respectively\n * Additionally, some letters in english alphabet deliberately throws such as U because U is very similar with V\n *\n * <span class=\"hljs-doctag\">@author</span> Hikmet Ã‡AKIR\n * <span class=\"hljs-doctag\">@since</span> 08-07-2022+03:00\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Polybius</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">char</span>[][] key = {\n          <span class=\"hljs-comment\">//         0    1    2    3    4</span>\n          <span class=\"hljs-comment\">/* 0 */</span>  {<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;B&#x27;</span>, <span class=\"hljs-string\">&#x27;C&#x27;</span>, <span class=\"hljs-string\">&#x27;D&#x27;</span>, <span class=\"hljs-string\">&#x27;E&#x27;</span>},\n          <span class=\"hljs-comment\">/* 1 */</span>  {<span class=\"hljs-string\">&#x27;F&#x27;</span>, <span class=\"hljs-string\">&#x27;G&#x27;</span>, <span class=\"hljs-string\">&#x27;H&#x27;</span>, <span class=\"hljs-string\">&#x27;I&#x27;</span>, <span class=\"hljs-string\">&#x27;J&#x27;</span>},\n          <span class=\"hljs-comment\">/* 2 */</span>  {<span class=\"hljs-string\">&#x27;K&#x27;</span>, <span class=\"hljs-string\">&#x27;L&#x27;</span>, <span class=\"hljs-string\">&#x27;M&#x27;</span>, <span class=\"hljs-string\">&#x27;N&#x27;</span>, <span class=\"hljs-string\">&#x27;O&#x27;</span>},\n          <span class=\"hljs-comment\">/* 3 */</span>  {<span class=\"hljs-string\">&#x27;P&#x27;</span>, <span class=\"hljs-string\">&#x27;Q&#x27;</span>, <span class=\"hljs-string\">&#x27;R&#x27;</span>, <span class=\"hljs-string\">&#x27;S&#x27;</span>, <span class=\"hljs-string\">&#x27;T&#x27;</span>},\n          <span class=\"hljs-comment\">/* 4 */</span>  {<span class=\"hljs-string\">&#x27;V&#x27;</span>, <span class=\"hljs-string\">&#x27;W&#x27;</span>, <span class=\"hljs-string\">&#x27;X&#x27;</span>, <span class=\"hljs-string\">&#x27;Y&#x27;</span>, <span class=\"hljs-string\">&#x27;Z&#x27;</span>}\n    };\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">findLocationByCharacter</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">char</span> character)</span> {\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">location</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; key.length; i++) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; key[i].length; j++) {\n                <span class=\"hljs-keyword\">if</span> (character == key[i][j]) {\n                    location.append(i).append(j);\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> location.toString();\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">encrypt</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String plaintext)</span> {\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">char</span>[] chars = plaintext.toUpperCase().toCharArray();\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">ciphertext</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> aChar : chars) {\n            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">location</span> <span class=\"hljs-operator\">=</span> findLocationByCharacter(aChar);\n            ciphertext.append(location);\n        }\n        <span class=\"hljs-keyword\">return</span> ciphertext.toString();\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">decrypt</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String ciphertext)</span> {\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">char</span>[] chars = ciphertext.toCharArray();\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">plaintext</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; chars.length; i+=<span class=\"hljs-number\">2</span>) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pozitionX</span> <span class=\"hljs-operator\">=</span> Character.getNumericValue(chars[i]);\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pozitionY</span> <span class=\"hljs-operator\">=</span> Character.getNumericValue(chars[i + <span class=\"hljs-number\">1</span>]);\n            plaintext.append(key[pozitionX][pozitionY]);\n        }\n        <span class=\"hljs-keyword\">return</span> plaintext.toString();\n    }\n}"
    },
    "go": {
      "dir": "cipher/polybius/polybius.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/cipher/polybius/polybius.go",
      "code": "<span class=\"hljs-comment\">// Package polybius is encrypting method with polybius square</span>\n<span class=\"hljs-comment\">// ref: https://en.wikipedia.org/wiki/Polybius_square#Hybrid_Polybius_Playfair_Cipher</span>\n<span class=\"hljs-keyword\">package</span> polybius\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;fmt&quot;</span>\n\t<span class=\"hljs-string\">&quot;math&quot;</span>\n\t<span class=\"hljs-string\">&quot;strings&quot;</span>\n)\n\n<span class=\"hljs-comment\">// Polybius is struct having size, characters, and key</span>\n<span class=\"hljs-keyword\">type</span> Polybius <span class=\"hljs-keyword\">struct</span> {\n\tsize       <span class=\"hljs-type\">int</span>\n\tcharacters <span class=\"hljs-type\">string</span>\n\tkey        <span class=\"hljs-type\">string</span>\n}\n\n<span class=\"hljs-comment\">// NewPolybius returns a pointer to object of Polybius.</span>\n<span class=\"hljs-comment\">// If the size of &quot;chars&quot; is longer than &quot;size&quot;,</span>\n<span class=\"hljs-comment\">// &quot;chars&quot; are truncated to &quot;size&quot;.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewPolybius</span><span class=\"hljs-params\">(key <span class=\"hljs-type\">string</span>, size <span class=\"hljs-type\">int</span>, chars <span class=\"hljs-type\">string</span>)</span></span> (*Polybius, <span class=\"hljs-type\">error</span>) {\n\tkey = strings.ToUpper(key)\n\tchars = strings.ToUpper(chars)[:size]\n\t<span class=\"hljs-keyword\">for</span> idx, ch := <span class=\"hljs-keyword\">range</span> chars {\n\t\t<span class=\"hljs-keyword\">if</span> strings.Contains(chars[idx+<span class=\"hljs-number\">1</span>:], <span class=\"hljs-type\">string</span>(ch)) {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;\\&quot;chars\\&quot; contains same character: %c&quot;</span>, ch)\n\t\t}\n\t}\n\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(key) != size*size {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;len(key): %d must be as long as size squared: %d&quot;</span>, <span class=\"hljs-built_in\">len</span>(key), size*size)\n\t}\n\t<span class=\"hljs-keyword\">return</span> &amp;Polybius{size, chars, key}, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">// Encrypt encrypts with polybius encryption</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *Polybius)</span></span> Encrypt(text <span class=\"hljs-type\">string</span>) (<span class=\"hljs-type\">string</span>, <span class=\"hljs-type\">error</span>) {\n\tencryptedText := <span class=\"hljs-string\">&quot;&quot;</span>\n\t<span class=\"hljs-keyword\">for</span> _, char := <span class=\"hljs-keyword\">range</span> strings.ToUpper(text) {\n\t\tencryptedChar, err := p.encipher(char)\n\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;failed encipher: %w&quot;</span>, err)\n\t\t}\n\t\tencryptedText += encryptedChar\n\t}\n\t<span class=\"hljs-keyword\">return</span> encryptedText, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">// Decrypt decrypts with polybius encryption</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *Polybius)</span></span> Decrypt(text <span class=\"hljs-type\">string</span>) (<span class=\"hljs-type\">string</span>, <span class=\"hljs-type\">error</span>) {\n\tchars := []<span class=\"hljs-type\">rune</span>(strings.ToUpper(text))\n\tdecryptedText := <span class=\"hljs-string\">&quot;&quot;</span>\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(chars); i += <span class=\"hljs-number\">2</span> {\n\t\tdecryptedChar, err := p.decipher(chars[i:<span class=\"hljs-type\">int</span>(math.Min(<span class=\"hljs-type\">float64</span>(i+<span class=\"hljs-number\">2</span>), <span class=\"hljs-type\">float64</span>(<span class=\"hljs-built_in\">len</span>(chars))))])\n\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;failed decipher: %w&quot;</span>, err)\n\t\t}\n\t\tdecryptedText += decryptedChar\n\t}\n\t<span class=\"hljs-keyword\">return</span> decryptedText, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *Polybius)</span></span> encipher(char <span class=\"hljs-type\">rune</span>) (<span class=\"hljs-type\">string</span>, <span class=\"hljs-type\">error</span>) {\n\tindex := strings.IndexRune(p.key, char)\n\t<span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;%c does not exist in keys&quot;</span>, char)\n\t}\n\trow := index / p.size\n\tcol := index % p.size\n\tchars := []<span class=\"hljs-type\">rune</span>(p.characters)\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>([]<span class=\"hljs-type\">rune</span>{chars[row], chars[col]}), <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *Polybius)</span></span> decipher(chars []<span class=\"hljs-type\">rune</span>) (<span class=\"hljs-type\">string</span>, <span class=\"hljs-type\">error</span>) {\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(chars) != <span class=\"hljs-number\">2</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;the size of \\&quot;chars\\&quot; must be even&quot;</span>)\n\t}\n\trow := strings.IndexRune(p.characters, chars[<span class=\"hljs-number\">0</span>])\n\t<span class=\"hljs-keyword\">if</span> row &lt; <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;%c does not exist in characters&quot;</span>, chars[<span class=\"hljs-number\">0</span>])\n\t}\n\tcol := strings.IndexRune(p.characters, chars[<span class=\"hljs-number\">1</span>])\n\t<span class=\"hljs-keyword\">if</span> col &lt; <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;%c does not exist in characters&quot;</span>, chars[<span class=\"hljs-number\">1</span>])\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>([]<span class=\"hljs-type\">rune</span>(p.key)[row*p.size+col]), <span class=\"hljs-literal\">nil</span>\n}\n"
    },
    "rust": {
      "dir": "src/ciphers/polybius.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/ciphers/polybius.rs",
      "code": "<span class=\"hljs-comment\">/// Encode an ASCII string into its location in a Polybius square.</span>\n<span class=\"hljs-comment\">/// Only alphabetical characters are encoded.</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">encode_ascii</span>(string: &amp;<span class=\"hljs-type\">str</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">String</span> {\n    string\n        .<span class=\"hljs-title function_ invoke__\">chars</span>()\n        .<span class=\"hljs-title function_ invoke__\">map</span>(|c| <span class=\"hljs-keyword\">match</span> c {\n            <span class=\"hljs-string\">&#x27;a&#x27;</span> | <span class=\"hljs-string\">&#x27;A&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;11&quot;</span>,\n            <span class=\"hljs-string\">&#x27;b&#x27;</span> | <span class=\"hljs-string\">&#x27;B&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;12&quot;</span>,\n            <span class=\"hljs-string\">&#x27;c&#x27;</span> | <span class=\"hljs-string\">&#x27;C&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;13&quot;</span>,\n            <span class=\"hljs-string\">&#x27;d&#x27;</span> | <span class=\"hljs-string\">&#x27;D&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;14&quot;</span>,\n            <span class=\"hljs-string\">&#x27;e&#x27;</span> | <span class=\"hljs-string\">&#x27;E&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;15&quot;</span>,\n            <span class=\"hljs-string\">&#x27;f&#x27;</span> | <span class=\"hljs-string\">&#x27;F&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;21&quot;</span>,\n            <span class=\"hljs-string\">&#x27;g&#x27;</span> | <span class=\"hljs-string\">&#x27;G&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;22&quot;</span>,\n            <span class=\"hljs-string\">&#x27;h&#x27;</span> | <span class=\"hljs-string\">&#x27;H&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;23&quot;</span>,\n            <span class=\"hljs-string\">&#x27;i&#x27;</span> | <span class=\"hljs-string\">&#x27;I&#x27;</span> | <span class=\"hljs-string\">&#x27;j&#x27;</span> | <span class=\"hljs-string\">&#x27;J&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;24&quot;</span>,\n            <span class=\"hljs-string\">&#x27;k&#x27;</span> | <span class=\"hljs-string\">&#x27;K&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;25&quot;</span>,\n            <span class=\"hljs-string\">&#x27;l&#x27;</span> | <span class=\"hljs-string\">&#x27;L&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;31&quot;</span>,\n            <span class=\"hljs-string\">&#x27;m&#x27;</span> | <span class=\"hljs-string\">&#x27;M&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;32&quot;</span>,\n            <span class=\"hljs-string\">&#x27;n&#x27;</span> | <span class=\"hljs-string\">&#x27;N&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;33&quot;</span>,\n            <span class=\"hljs-string\">&#x27;o&#x27;</span> | <span class=\"hljs-string\">&#x27;O&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;34&quot;</span>,\n            <span class=\"hljs-string\">&#x27;p&#x27;</span> | <span class=\"hljs-string\">&#x27;P&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;35&quot;</span>,\n            <span class=\"hljs-string\">&#x27;q&#x27;</span> | <span class=\"hljs-string\">&#x27;Q&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;41&quot;</span>,\n            <span class=\"hljs-string\">&#x27;r&#x27;</span> | <span class=\"hljs-string\">&#x27;R&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;42&quot;</span>,\n            <span class=\"hljs-string\">&#x27;s&#x27;</span> | <span class=\"hljs-string\">&#x27;S&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;43&quot;</span>,\n            <span class=\"hljs-string\">&#x27;t&#x27;</span> | <span class=\"hljs-string\">&#x27;T&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;44&quot;</span>,\n            <span class=\"hljs-string\">&#x27;u&#x27;</span> | <span class=\"hljs-string\">&#x27;U&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;45&quot;</span>,\n            <span class=\"hljs-string\">&#x27;v&#x27;</span> | <span class=\"hljs-string\">&#x27;V&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;51&quot;</span>,\n            <span class=\"hljs-string\">&#x27;w&#x27;</span> | <span class=\"hljs-string\">&#x27;W&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;52&quot;</span>,\n            <span class=\"hljs-string\">&#x27;x&#x27;</span> | <span class=\"hljs-string\">&#x27;X&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;53&quot;</span>,\n            <span class=\"hljs-string\">&#x27;y&#x27;</span> | <span class=\"hljs-string\">&#x27;Y&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;54&quot;</span>,\n            <span class=\"hljs-string\">&#x27;z&#x27;</span> | <span class=\"hljs-string\">&#x27;Z&#x27;</span> =&gt; <span class=\"hljs-string\">&quot;55&quot;</span>,\n            _ =&gt; <span class=\"hljs-string\">&quot;&quot;</span>,\n        })\n        .<span class=\"hljs-title function_ invoke__\">collect</span>()\n}\n\n<span class=\"hljs-comment\">/// Decode a string of ints into their corresponding</span>\n<span class=\"hljs-comment\">/// letters in a Polybius square.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Any invalid characters, or whitespace will be ignored.</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">decode_ascii</span>(string: &amp;<span class=\"hljs-type\">str</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">String</span> {\n    string\n        .<span class=\"hljs-title function_ invoke__\">chars</span>()\n        .<span class=\"hljs-title function_ invoke__\">filter</span>(|c| !c.<span class=\"hljs-title function_ invoke__\">is_whitespace</span>())\n        .collect::&lt;<span class=\"hljs-type\">String</span>&gt;()\n        .<span class=\"hljs-title function_ invoke__\">as_bytes</span>()\n        .<span class=\"hljs-title function_ invoke__\">chunks</span>(<span class=\"hljs-number\">2</span>)\n        .<span class=\"hljs-title function_ invoke__\">map</span>(|s| <span class=\"hljs-keyword\">match</span> std::str::<span class=\"hljs-title function_ invoke__\">from_utf8</span>(s) {\n            <span class=\"hljs-title function_ invoke__\">Ok</span>(v) =&gt; v.parse::&lt;<span class=\"hljs-type\">i32</span>&gt;().<span class=\"hljs-title function_ invoke__\">unwrap_or</span>(<span class=\"hljs-number\">0</span>),\n            <span class=\"hljs-title function_ invoke__\">Err</span>(_) =&gt; <span class=\"hljs-number\">0</span>,\n        })\n        .<span class=\"hljs-title function_ invoke__\">map</span>(|i| <span class=\"hljs-keyword\">match</span> i {\n            <span class=\"hljs-number\">11</span> =&gt; <span class=\"hljs-string\">&#x27;A&#x27;</span>,\n            <span class=\"hljs-number\">12</span> =&gt; <span class=\"hljs-string\">&#x27;B&#x27;</span>,\n            <span class=\"hljs-number\">13</span> =&gt; <span class=\"hljs-string\">&#x27;C&#x27;</span>,\n            <span class=\"hljs-number\">14</span> =&gt; <span class=\"hljs-string\">&#x27;D&#x27;</span>,\n            <span class=\"hljs-number\">15</span> =&gt; <span class=\"hljs-string\">&#x27;E&#x27;</span>,\n            <span class=\"hljs-number\">21</span> =&gt; <span class=\"hljs-string\">&#x27;F&#x27;</span>,\n            <span class=\"hljs-number\">22</span> =&gt; <span class=\"hljs-string\">&#x27;G&#x27;</span>,\n            <span class=\"hljs-number\">23</span> =&gt; <span class=\"hljs-string\">&#x27;H&#x27;</span>,\n            <span class=\"hljs-number\">24</span> =&gt; <span class=\"hljs-string\">&#x27;I&#x27;</span>,\n            <span class=\"hljs-number\">25</span> =&gt; <span class=\"hljs-string\">&#x27;K&#x27;</span>,\n            <span class=\"hljs-number\">31</span> =&gt; <span class=\"hljs-string\">&#x27;L&#x27;</span>,\n            <span class=\"hljs-number\">32</span> =&gt; <span class=\"hljs-string\">&#x27;M&#x27;</span>,\n            <span class=\"hljs-number\">33</span> =&gt; <span class=\"hljs-string\">&#x27;N&#x27;</span>,\n            <span class=\"hljs-number\">34</span> =&gt; <span class=\"hljs-string\">&#x27;O&#x27;</span>,\n            <span class=\"hljs-number\">35</span> =&gt; <span class=\"hljs-string\">&#x27;P&#x27;</span>,\n            <span class=\"hljs-number\">41</span> =&gt; <span class=\"hljs-string\">&#x27;Q&#x27;</span>,\n            <span class=\"hljs-number\">42</span> =&gt; <span class=\"hljs-string\">&#x27;R&#x27;</span>,\n            <span class=\"hljs-number\">43</span> =&gt; <span class=\"hljs-string\">&#x27;S&#x27;</span>,\n            <span class=\"hljs-number\">44</span> =&gt; <span class=\"hljs-string\">&#x27;T&#x27;</span>,\n            <span class=\"hljs-number\">45</span> =&gt; <span class=\"hljs-string\">&#x27;U&#x27;</span>,\n            <span class=\"hljs-number\">51</span> =&gt; <span class=\"hljs-string\">&#x27;V&#x27;</span>,\n            <span class=\"hljs-number\">52</span> =&gt; <span class=\"hljs-string\">&#x27;W&#x27;</span>,\n            <span class=\"hljs-number\">53</span> =&gt; <span class=\"hljs-string\">&#x27;X&#x27;</span>,\n            <span class=\"hljs-number\">54</span> =&gt; <span class=\"hljs-string\">&#x27;Y&#x27;</span>,\n            <span class=\"hljs-number\">55</span> =&gt; <span class=\"hljs-string\">&#x27;Z&#x27;</span>,\n            _ =&gt; <span class=\"hljs-string\">&#x27; &#x27;</span>,\n        })\n        .collect::&lt;<span class=\"hljs-type\">String</span>&gt;()\n        .<span class=\"hljs-title function_ invoke__\">replace</span>(<span class=\"hljs-string\">&#x27; &#x27;</span>, <span class=\"hljs-string\">&quot;&quot;</span>)\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::{decode_ascii, encode_ascii};\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">encode_empty</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">encode_ascii</span>(<span class=\"hljs-string\">&quot;&quot;</span>), <span class=\"hljs-string\">&quot;&quot;</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">encode_valid_string</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">encode_ascii</span>(<span class=\"hljs-string\">&quot;This is a test&quot;</span>), <span class=\"hljs-string\">&quot;4423244324431144154344&quot;</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">encode_emoji</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">encode_ascii</span>(<span class=\"hljs-string\">&quot;ðŸ™‚&quot;</span>), <span class=\"hljs-string\">&quot;&quot;</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">decode_empty</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">decode_ascii</span>(<span class=\"hljs-string\">&quot;&quot;</span>), <span class=\"hljs-string\">&quot;&quot;</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">decode_valid_string</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">decode_ascii</span>(<span class=\"hljs-string\">&quot;44 23 24 43 24 43 11 44 15 43 44 &quot;</span>),\n            <span class=\"hljs-string\">&quot;THISISATEST&quot;</span>\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">decode_emoji</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">decode_ascii</span>(<span class=\"hljs-string\">&quot;ðŸ™‚&quot;</span>), <span class=\"hljs-string\">&quot;&quot;</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">decode_string_with_whitespace</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">decode_ascii</span>(<span class=\"hljs-string\">&quot;44\\n23\\t\\r24\\r\\n43   2443\\n 11 \\t 44\\r \\r15 \\n43 44&quot;</span>),\n            <span class=\"hljs-string\">&quot;THISISATEST&quot;</span>\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">decode_unknown_string</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">decode_ascii</span>(<span class=\"hljs-string\">&quot;94 63 64 83 64 48 77 00 05 47 48 &quot;</span>), <span class=\"hljs-string\">&quot;&quot;</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">decode_odd_length</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">decode_ascii</span>(<span class=\"hljs-string\">&quot;11 22 33 4&quot;</span>), <span class=\"hljs-string\">&quot;AGN&quot;</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">encode_and_decode</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">string</span> = <span class=\"hljs-string\">&quot;Do you ever wonder why we&#x27;re here?&quot;</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">encode</span> = <span class=\"hljs-title function_ invoke__\">encode_ascii</span>(string);\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-string\">&quot;1434543445155115425234331415425223545215421523154215&quot;</span>,\n            encode,\n        );\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">&quot;DOYOUEVERWONDERWHYWEREHERE&quot;</span>, <span class=\"hljs-title function_ invoke__\">decode_ascii</span>(&amp;encode));\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Erfan Khadem",
      "email": "45465346+er888kh@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "GeistInDerSH",
      "email": "39086811+GeistInDerSH@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Carlo Federico Vescovo",
      "email": "vescovocarlofederico@gmail.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "task4233",
      "email": "tks.m1205@gmail.com",
      "commits": 1
    },
    {
      "name": "Hikmet Ã‡akÄ±r",
      "email": "hikmet_cakir@outlook.com",
      "commits": 1
    },
    {
      "name": "Erwin Junge",
      "email": "erwin@junge.nl",
      "commits": 1
    },
    {
      "name": "Vinicius Cordeiro",
      "email": "78505368+cordeirossauro@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}