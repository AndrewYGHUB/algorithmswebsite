{
  "slug": "pooling-functions",
  "name": "Pooling Functions",
  "categories": [
    "computervision"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "computer_vision/pooling_functions.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/computer_vision/pooling_functions.py",
      "code": "<span class=\"hljs-comment\"># Source : https://computersciencewiki.org/index.php/Max-pooling_/_Pooling</span>\n<span class=\"hljs-comment\"># Importing the libraries</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">from</span> PIL <span class=\"hljs-keyword\">import</span> Image\n\n\n<span class=\"hljs-comment\"># Maxpooling Function</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">maxpooling</span>(<span class=\"hljs-params\">arr: np.ndarray, size: <span class=\"hljs-built_in\">int</span>, stride: <span class=\"hljs-built_in\">int</span></span>) -&gt; np.ndarray:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    This function is used to perform maxpooling on the input array of 2D matrix(image)\n    Args:\n        arr: numpy array\n        size: size of pooling matrix\n        stride: the number of pixels shifts over the input matrix\n    Returns:\n        numpy array of maxpooled matrix\n    Sample Input Output:\n    &gt;&gt;&gt; maxpooling([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 2, 2)\n    array([[ 6.,  8.],\n           [14., 16.]])\n    &gt;&gt;&gt; maxpooling([[147, 180, 122],[241, 76, 32],[126, 13, 157]], 2, 1)\n    array([[241., 180.],\n           [241., 157.]])\n    &quot;&quot;&quot;</span>\n    arr = np.array(arr)\n    <span class=\"hljs-keyword\">if</span> arr.shape[<span class=\"hljs-number\">0</span>] != arr.shape[<span class=\"hljs-number\">1</span>]:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;The input array is not a square matrix&quot;</span>)\n    i = <span class=\"hljs-number\">0</span>\n    j = <span class=\"hljs-number\">0</span>\n    mat_i = <span class=\"hljs-number\">0</span>\n    mat_j = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\"># compute the shape of the output matrix</span>\n    maxpool_shape = (arr.shape[<span class=\"hljs-number\">0</span>] - size) // stride + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-comment\"># initialize the output matrix with zeros of shape maxpool_shape</span>\n    updated_arr = np.zeros((maxpool_shape, maxpool_shape))\n\n    <span class=\"hljs-keyword\">while</span> i &lt; arr.shape[<span class=\"hljs-number\">0</span>]:\n        <span class=\"hljs-keyword\">if</span> i + size &gt; arr.shape[<span class=\"hljs-number\">0</span>]:\n            <span class=\"hljs-comment\"># if the end of the matrix is reached, break</span>\n            <span class=\"hljs-keyword\">break</span>\n        <span class=\"hljs-keyword\">while</span> j &lt; arr.shape[<span class=\"hljs-number\">1</span>]:\n            <span class=\"hljs-comment\"># if the end of the matrix is reached, break</span>\n            <span class=\"hljs-keyword\">if</span> j + size &gt; arr.shape[<span class=\"hljs-number\">1</span>]:\n                <span class=\"hljs-keyword\">break</span>\n            <span class=\"hljs-comment\"># compute the maximum of the pooling matrix</span>\n            updated_arr[mat_i][mat_j] = np.<span class=\"hljs-built_in\">max</span>(arr[i : i + size, j : j + size])\n            <span class=\"hljs-comment\"># shift the pooling matrix by stride of column pixels</span>\n            j += stride\n            mat_j += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># shift the pooling matrix by stride of row pixels</span>\n        i += stride\n        mat_i += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># reset the column index to 0</span>\n        j = <span class=\"hljs-number\">0</span>\n        mat_j = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">return</span> updated_arr\n\n\n<span class=\"hljs-comment\"># Averagepooling Function</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">avgpooling</span>(<span class=\"hljs-params\">arr: np.ndarray, size: <span class=\"hljs-built_in\">int</span>, stride: <span class=\"hljs-built_in\">int</span></span>) -&gt; np.ndarray:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    This function is used to perform avgpooling on the input array of 2D matrix(image)\n    Args:\n        arr: numpy array\n        size: size of pooling matrix\n        stride: the number of pixels shifts over the input matrix\n    Returns:\n        numpy array of avgpooled matrix\n    Sample Input Output:\n    &gt;&gt;&gt; avgpooling([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 2, 2)\n    array([[ 3.,  5.],\n           [11., 13.]])\n    &gt;&gt;&gt; avgpooling([[147, 180, 122],[241, 76, 32],[126, 13, 157]], 2, 1)\n    array([[161., 102.],\n           [114.,  69.]])\n    &quot;&quot;&quot;</span>\n    arr = np.array(arr)\n    <span class=\"hljs-keyword\">if</span> arr.shape[<span class=\"hljs-number\">0</span>] != arr.shape[<span class=\"hljs-number\">1</span>]:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;The input array is not a square matrix&quot;</span>)\n    i = <span class=\"hljs-number\">0</span>\n    j = <span class=\"hljs-number\">0</span>\n    mat_i = <span class=\"hljs-number\">0</span>\n    mat_j = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\"># compute the shape of the output matrix</span>\n    avgpool_shape = (arr.shape[<span class=\"hljs-number\">0</span>] - size) // stride + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-comment\"># initialize the output matrix with zeros of shape avgpool_shape</span>\n    updated_arr = np.zeros((avgpool_shape, avgpool_shape))\n\n    <span class=\"hljs-keyword\">while</span> i &lt; arr.shape[<span class=\"hljs-number\">0</span>]:\n        <span class=\"hljs-comment\"># if the end of the matrix is reached, break</span>\n        <span class=\"hljs-keyword\">if</span> i + size &gt; arr.shape[<span class=\"hljs-number\">0</span>]:\n            <span class=\"hljs-keyword\">break</span>\n        <span class=\"hljs-keyword\">while</span> j &lt; arr.shape[<span class=\"hljs-number\">1</span>]:\n            <span class=\"hljs-comment\"># if the end of the matrix is reached, break</span>\n            <span class=\"hljs-keyword\">if</span> j + size &gt; arr.shape[<span class=\"hljs-number\">1</span>]:\n                <span class=\"hljs-keyword\">break</span>\n            <span class=\"hljs-comment\"># compute the average of the pooling matrix</span>\n            updated_arr[mat_i][mat_j] = <span class=\"hljs-built_in\">int</span>(np.average(arr[i : i + size, j : j + size]))\n            <span class=\"hljs-comment\"># shift the pooling matrix by stride of column pixels</span>\n            j += stride\n            mat_j += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># shift the pooling matrix by stride of row pixels</span>\n        i += stride\n        mat_i += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-comment\"># reset the column index to 0</span>\n        j = <span class=\"hljs-number\">0</span>\n        mat_j = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">return</span> updated_arr\n\n\n<span class=\"hljs-comment\"># Main Function</span>\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\n\n    testmod(name=<span class=\"hljs-string\">&quot;avgpooling&quot;</span>, verbose=<span class=\"hljs-literal\">True</span>)\n\n    <span class=\"hljs-comment\"># Loading the image</span>\n    image = Image.<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;path_to_image&quot;</span>)\n\n    <span class=\"hljs-comment\"># Converting the image to numpy array and maxpooling, displaying the result</span>\n    <span class=\"hljs-comment\"># Ensure that the image is a square matrix</span>\n\n    Image.fromarray(maxpooling(np.array(image), size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>)).show()\n\n    <span class=\"hljs-comment\"># Converting the image to numpy array and averagepooling, displaying the result</span>\n    <span class=\"hljs-comment\"># Ensure that the image is a square matrix</span>\n\n    Image.fromarray(avgpooling(np.array(image), size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>)).show()\n"
    }
  },
  "contributors": [
    {
      "name": "Navaneeth Sharma",
      "email": "63489382+Navaneeth-Sharma@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}