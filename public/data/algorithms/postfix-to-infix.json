{
  "slug": "postfix-to-infix",
  "name": "Postfix To Infix",
  "categories": [
    "datastructures",
    "stacks"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/stacks/PostfixToInfix.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/stacks/PostfixToInfix.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.stacks;\n\n<span class=\"hljs-keyword\">import</span> java.util.Stack;\n\n<span class=\"hljs-comment\">/**\n * Postfix to Infix implementation via Stack\n *\n * Function: String getPostfixToInfix(String postfix)\n * Returns the Infix Expression for the given postfix parameter.\n *\n * Avoid using parentheses/brackets/braces for the postfix string.\n * Postfix Expressions don&#x27;t require these.\n *\n *\n * <span class=\"hljs-doctag\">@author</span> nikslyon19 (Nikhil Bisht)\n *\n */</span>\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PostfixToInfix</span> {\n\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isOperator</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> token)</span>\n    {\n        <span class=\"hljs-keyword\">switch</span>(token)\n        {\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;+&#x27;</span>:\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;-&#x27;</span>:\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;/&#x27;</span>:\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;*&#x27;</span>:\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;^&#x27;</span>:\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isValidPostfixExpression</span><span class=\"hljs-params\">(String postfix)</span>\n    {\n        <span class=\"hljs-comment\">/* Postfix expression length should NOT be less than 3 */</span>\n        <span class=\"hljs-keyword\">if</span>(postfix.length() &lt; <span class=\"hljs-number\">3</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n\n\n        <span class=\"hljs-comment\">/* First two characters should NOT be operators */</span>\n        <span class=\"hljs-keyword\">if</span>(isOperator(postfix.charAt(<span class=\"hljs-number\">0</span>))) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        <span class=\"hljs-keyword\">if</span>(isOperator(postfix.charAt(<span class=\"hljs-number\">1</span>))) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n\n\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">operandCount</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">operatorCount</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n\n\n        <span class=\"hljs-comment\">/* Traverse the postfix string to check if --&gt; Number of operands = Number of operators + 1 */</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; postfix.length(); i++)\n        {\n            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> postfix.charAt(i);\n\n            <span class=\"hljs-keyword\">if</span>(isOperator(token))\n            {\n                operatorCount++;\n                <span class=\"hljs-keyword\">if</span>(operatorCount &gt;= operandCount) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n\n            <span class=\"hljs-keyword\">else</span>\n            {\n                <span class=\"hljs-keyword\">if</span>(operatorCount == <span class=\"hljs-number\">0</span>)\n                {\n                    operandCount++;\n                    <span class=\"hljs-keyword\">continue</span>;\n                }\n\n                <span class=\"hljs-keyword\">if</span>(operandCount != operatorCount + <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n\n\n                <span class=\"hljs-comment\">/* Operand count is set to 2 because:-\n                 *\n                 * 1) the previous set of operands &amp; operators combined have become a single valid expression,\n                 * which could be considered/assigned as a single operand.\n                 *\n                 * 2) the operand in the current iteration.\n                 */</span>\n                operandCount = <span class=\"hljs-number\">2</span>;\n\n\n                <span class=\"hljs-comment\">/* Reset operator count */</span>\n                operatorCount = <span class=\"hljs-number\">0</span>;\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> (operandCount == operatorCount + <span class=\"hljs-number\">1</span>);\n    }\n\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">getPostfixToInfix</span><span class=\"hljs-params\">(String postfix)</span>\n    {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">infix</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n\n        <span class=\"hljs-keyword\">if</span>(postfix.isEmpty()) <span class=\"hljs-keyword\">return</span> infix;\n\n\n        <span class=\"hljs-comment\">/* Validate Postfix expression before proceeding with the Infix conversion */</span>\n        <span class=\"hljs-keyword\">if</span>(!isValidPostfixExpression(postfix))\n        {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid Postfix Expression&quot;</span>);\n        }\n\n        Stack&lt;String&gt; stack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>&lt;&gt;();\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">valueString</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\n\n        String operandA, operandB;\n        <span class=\"hljs-type\">char</span> operator;\n\n\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; index &lt; postfix.length(); index++)\n        {\n            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> postfix.charAt(index);\n\n            <span class=\"hljs-keyword\">if</span>(!isOperator(token))\n            {\n                stack.push(Character.toString(token));\n                <span class=\"hljs-keyword\">continue</span>;\n            }\n\n            operator = token;\n            operandB = stack.pop();\n            operandA = stack.pop();\n\n            valueString.append(<span class=\"hljs-string\">&#x27;(&#x27;</span>);\n\n            valueString.append(operandA);\n            valueString.append(operator);\n            valueString.append(operandB);\n\n            valueString.append(<span class=\"hljs-string\">&#x27;)&#x27;</span>);\n\n            stack.push(valueString.toString());\n            valueString.setLength(<span class=\"hljs-number\">0</span>);\n        }\n\n        infix = stack.pop();\n        <span class=\"hljs-keyword\">return</span> infix;\n    }\n\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span>\n    {\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">getPostfixToInfix</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;ABC+/&quot;</span>)</span>.equals(<span class=\"hljs-string\">&quot;(A/(B+C))&quot;</span>);\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">getPostfixToInfix</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;AB+CD+*&quot;</span>)</span>.equals(<span class=\"hljs-string\">&quot;((A+B)*(C+D))&quot;</span>);\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">getPostfixToInfix</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;AB+C+D+&quot;</span>)</span>.equals(<span class=\"hljs-string\">&quot;(((A+B)+C)+D)&quot;</span>);\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">getPostfixToInfix</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;ABCDE^*/-&quot;</span>)</span>.equals(<span class=\"hljs-string\">&quot;(A-(B/(C*(D^E))))&quot;</span>);\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">getPostfixToInfix</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;AB+CD^/E*FGH+-^&quot;</span>)</span>.equals(<span class=\"hljs-string\">&quot;((((A+B)/(C^D))*E)^(F-(G+H)))&quot;</span>);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Nikhil Bisht",
      "email": "90137914+nikslyon19@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}