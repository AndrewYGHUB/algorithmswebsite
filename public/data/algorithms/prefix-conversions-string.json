{
  "slug": "prefix-conversions-string",
  "name": "Prefix Conversions String",
  "categories": [
    "conversions"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "conversions/prefix_conversions_string.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/conversions/prefix_conversions_string.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n* Author: Manuel Di Lullo (https://github.com/manueldilullo)\n* Description: Convert a number to use the correct SI or Binary unit prefix.\n\nInspired by prefix_conversion.py file in this repository by lance-pyles\n\nURL: https://en.wikipedia.org/wiki/Metric_prefix#List_of_SI_prefixes\nURL: https://en.wikipedia.org/wiki/Binary_prefix\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">from</span> enum <span class=\"hljs-keyword\">import</span> Enum, unique\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> TypeVar\n\n<span class=\"hljs-comment\"># Create a generic variable that can be &#x27;Enum&#x27;, or any subclass.</span>\nT = TypeVar(<span class=\"hljs-string\">&quot;T&quot;</span>, bound=<span class=\"hljs-string\">&quot;Enum&quot;</span>)\n\n\n<span class=\"hljs-meta\">@unique</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BinaryUnit</span>(<span class=\"hljs-title class_ inherited__\">Enum</span>):\n    yotta = <span class=\"hljs-number\">80</span>\n    zetta = <span class=\"hljs-number\">70</span>\n    exa = <span class=\"hljs-number\">60</span>\n    peta = <span class=\"hljs-number\">50</span>\n    tera = <span class=\"hljs-number\">40</span>\n    giga = <span class=\"hljs-number\">30</span>\n    mega = <span class=\"hljs-number\">20</span>\n    kilo = <span class=\"hljs-number\">10</span>\n\n\n<span class=\"hljs-meta\">@unique</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SIUnit</span>(<span class=\"hljs-title class_ inherited__\">Enum</span>):\n    yotta = <span class=\"hljs-number\">24</span>\n    zetta = <span class=\"hljs-number\">21</span>\n    exa = <span class=\"hljs-number\">18</span>\n    peta = <span class=\"hljs-number\">15</span>\n    tera = <span class=\"hljs-number\">12</span>\n    giga = <span class=\"hljs-number\">9</span>\n    mega = <span class=\"hljs-number\">6</span>\n    kilo = <span class=\"hljs-number\">3</span>\n    hecto = <span class=\"hljs-number\">2</span>\n    deca = <span class=\"hljs-number\">1</span>\n    deci = -<span class=\"hljs-number\">1</span>\n    centi = -<span class=\"hljs-number\">2</span>\n    milli = -<span class=\"hljs-number\">3</span>\n    micro = -<span class=\"hljs-number\">6</span>\n    nano = -<span class=\"hljs-number\">9</span>\n    pico = -<span class=\"hljs-number\">12</span>\n    femto = -<span class=\"hljs-number\">15</span>\n    atto = -<span class=\"hljs-number\">18</span>\n    zepto = -<span class=\"hljs-number\">21</span>\n    yocto = -<span class=\"hljs-number\">24</span>\n\n<span class=\"hljs-meta\">    @classmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_positive</span>(<span class=\"hljs-params\">cls: <span class=\"hljs-built_in\">type</span>[T]</span>) -&gt; <span class=\"hljs-built_in\">dict</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Returns a dictionary with only the elements of this enum\n        that has a positive value\n        &gt;&gt;&gt; from itertools import islice\n        &gt;&gt;&gt; positive = SIUnit.get_positive()\n        &gt;&gt;&gt; inc = iter(positive.items())\n        &gt;&gt;&gt; dict(islice(inc, len(positive) // 2))\n        {&#x27;yotta&#x27;: 24, &#x27;zetta&#x27;: 21, &#x27;exa&#x27;: 18, &#x27;peta&#x27;: 15, &#x27;tera&#x27;: 12}\n        &gt;&gt;&gt; dict(inc)\n        {&#x27;giga&#x27;: 9, &#x27;mega&#x27;: 6, &#x27;kilo&#x27;: 3, &#x27;hecto&#x27;: 2, &#x27;deca&#x27;: 1}\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> {unit.name: unit.value <span class=\"hljs-keyword\">for</span> unit <span class=\"hljs-keyword\">in</span> cls <span class=\"hljs-keyword\">if</span> unit.value &gt; <span class=\"hljs-number\">0</span>}\n\n<span class=\"hljs-meta\">    @classmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_negative</span>(<span class=\"hljs-params\">cls: <span class=\"hljs-built_in\">type</span>[T]</span>) -&gt; <span class=\"hljs-built_in\">dict</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Returns a dictionary with only the elements of this enum\n        that has a negative value\n        @example\n        &gt;&gt;&gt; from itertools import islice\n        &gt;&gt;&gt; negative = SIUnit.get_negative()\n        &gt;&gt;&gt; inc = iter(negative.items())\n        &gt;&gt;&gt; dict(islice(inc, len(negative) // 2))\n        {&#x27;deci&#x27;: -1, &#x27;centi&#x27;: -2, &#x27;milli&#x27;: -3, &#x27;micro&#x27;: -6, &#x27;nano&#x27;: -9}\n        &gt;&gt;&gt; dict(inc)\n        {&#x27;pico&#x27;: -12, &#x27;femto&#x27;: -15, &#x27;atto&#x27;: -18, &#x27;zepto&#x27;: -21, &#x27;yocto&#x27;: -24}\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> {unit.name: unit.value <span class=\"hljs-keyword\">for</span> unit <span class=\"hljs-keyword\">in</span> cls <span class=\"hljs-keyword\">if</span> unit.value &lt; <span class=\"hljs-number\">0</span>}\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_si_prefix</span>(<span class=\"hljs-params\">value: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Function that converts a number to his version with SI prefix\n    @input value (an integer)\n    @example:\n    &gt;&gt;&gt; add_si_prefix(10000)\n    &#x27;10.0 kilo&#x27;\n    &quot;&quot;&quot;</span>\n    prefixes = SIUnit.get_positive() <span class=\"hljs-keyword\">if</span> value &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">else</span> SIUnit.get_negative()\n    <span class=\"hljs-keyword\">for</span> name_prefix, value_prefix <span class=\"hljs-keyword\">in</span> prefixes.items():\n        numerical_part = value / (<span class=\"hljs-number\">10</span>**value_prefix)\n        <span class=\"hljs-keyword\">if</span> numerical_part &gt; <span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{<span class=\"hljs-built_in\">str</span>(numerical_part)}</span> <span class=\"hljs-subst\">{name_prefix}</span>&quot;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">str</span>(value)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_binary_prefix</span>(<span class=\"hljs-params\">value: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Function that converts a number to his version with Binary prefix\n    @input value (an integer)\n    @example:\n    &gt;&gt;&gt; add_binary_prefix(65536)\n    &#x27;64.0 kilo&#x27;\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">for</span> prefix <span class=\"hljs-keyword\">in</span> BinaryUnit:\n        numerical_part = value / (<span class=\"hljs-number\">2</span>**prefix.value)\n        <span class=\"hljs-keyword\">if</span> numerical_part &gt; <span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{<span class=\"hljs-built_in\">str</span>(numerical_part)}</span> <span class=\"hljs-subst\">{prefix.name}</span>&quot;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">str</span>(value)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "John Law",
      "email": "johnlaw.po@gmail.com",
      "commits": 1
    },
    {
      "name": "Manuel Di Lullo",
      "email": "39048927+manueldilullo@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}