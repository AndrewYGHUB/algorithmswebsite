{
  "slug": "prime-numbers",
  "name": "Prime Numbers",
  "categories": [
    "datastructures",
    "hashing",
    "numbertheory"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/prime_numbers.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/prime_numbers.py",
      "code": "<span class=\"hljs-keyword\">import</span> math\n<span class=\"hljs-keyword\">from</span> collections.abc <span class=\"hljs-keyword\">import</span> Generator\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">slow_primes</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">max</span>: <span class=\"hljs-built_in\">int</span></span>) -&gt; Generator[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Return a list of all primes numbers up to max.\n    &gt;&gt;&gt; list(slow_primes(0))\n    []\n    &gt;&gt;&gt; list(slow_primes(-1))\n    []\n    &gt;&gt;&gt; list(slow_primes(-10))\n    []\n    &gt;&gt;&gt; list(slow_primes(25))\n    [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    &gt;&gt;&gt; list(slow_primes(11))\n    [2, 3, 5, 7, 11]\n    &gt;&gt;&gt; list(slow_primes(33))\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n    &gt;&gt;&gt; list(slow_primes(10000))[-1]\n    9973\n    &quot;&quot;&quot;</span>\n    numbers: Generator = (i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, (<span class=\"hljs-built_in\">max</span> + <span class=\"hljs-number\">1</span>)))\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> (n <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> numbers <span class=\"hljs-keyword\">if</span> n &gt; <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>, i):\n            <span class=\"hljs-keyword\">if</span> (i % j) == <span class=\"hljs-number\">0</span>:\n                <span class=\"hljs-keyword\">break</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">yield</span> i\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">primes</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">max</span>: <span class=\"hljs-built_in\">int</span></span>) -&gt; Generator[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Return a list of all primes numbers up to max.\n    &gt;&gt;&gt; list(primes(0))\n    []\n    &gt;&gt;&gt; list(primes(-1))\n    []\n    &gt;&gt;&gt; list(primes(-10))\n    []\n    &gt;&gt;&gt; list(primes(25))\n    [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    &gt;&gt;&gt; list(primes(11))\n    [2, 3, 5, 7, 11]\n    &gt;&gt;&gt; list(primes(33))\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n    &gt;&gt;&gt; list(primes(10000))[-1]\n    9973\n    &quot;&quot;&quot;</span>\n    numbers: Generator = (i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, (<span class=\"hljs-built_in\">max</span> + <span class=\"hljs-number\">1</span>)))\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> (n <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> numbers <span class=\"hljs-keyword\">if</span> n &gt; <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-comment\"># only need to check for factors up to sqrt(i)</span>\n        bound = <span class=\"hljs-built_in\">int</span>(math.sqrt(i)) + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>, bound):\n            <span class=\"hljs-keyword\">if</span> (i % j) == <span class=\"hljs-number\">0</span>:\n                <span class=\"hljs-keyword\">break</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">yield</span> i\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fast_primes</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">max</span>: <span class=\"hljs-built_in\">int</span></span>) -&gt; Generator[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Return a list of all primes numbers up to max.\n    &gt;&gt;&gt; list(fast_primes(0))\n    []\n    &gt;&gt;&gt; list(fast_primes(-1))\n    []\n    &gt;&gt;&gt; list(fast_primes(-10))\n    []\n    &gt;&gt;&gt; list(fast_primes(25))\n    [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    &gt;&gt;&gt; list(fast_primes(11))\n    [2, 3, 5, 7, 11]\n    &gt;&gt;&gt; list(fast_primes(33))\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n    &gt;&gt;&gt; list(fast_primes(10000))[-1]\n    9973\n    &quot;&quot;&quot;</span>\n    numbers: Generator = (i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, (<span class=\"hljs-built_in\">max</span> + <span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">2</span>))\n    <span class=\"hljs-comment\"># It&#x27;s useless to test even numbers as they will not be prime</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">max</span> &gt; <span class=\"hljs-number\">2</span>:\n        <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">2</span>  <span class=\"hljs-comment\"># Because 2 will not be tested, it&#x27;s necessary to yield it now</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> (n <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> numbers <span class=\"hljs-keyword\">if</span> n &gt; <span class=\"hljs-number\">1</span>):\n        bound = <span class=\"hljs-built_in\">int</span>(math.sqrt(i)) + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">3</span>, bound, <span class=\"hljs-number\">2</span>):\n            <span class=\"hljs-comment\"># As we removed the even numbers, we don&#x27;t need them now</span>\n            <span class=\"hljs-keyword\">if</span> (i % j) == <span class=\"hljs-number\">0</span>:\n                <span class=\"hljs-keyword\">break</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">yield</span> i\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    number = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Calculate primes up to:\\n&gt;&gt; &quot;</span>).strip())\n    <span class=\"hljs-keyword\">for</span> ret <span class=\"hljs-keyword\">in</span> primes(number):\n        <span class=\"hljs-built_in\">print</span>(ret)\n\n    <span class=\"hljs-comment\"># Let&#x27;s benchmark them side-by-side...</span>\n    <span class=\"hljs-keyword\">from</span> timeit <span class=\"hljs-keyword\">import</span> timeit\n\n    <span class=\"hljs-built_in\">print</span>(\n        timeit(\n            <span class=\"hljs-string\">&quot;slow_primes(1_000_000_000_000)&quot;</span>,\n            setup=<span class=\"hljs-string\">&quot;from __main__ import slow_primes&quot;</span>,\n            number=<span class=\"hljs-number\">1_000_000</span>,\n        )\n    )\n    <span class=\"hljs-built_in\">print</span>(\n        timeit(\n            <span class=\"hljs-string\">&quot;primes(1_000_000_000_000)&quot;</span>,\n            setup=<span class=\"hljs-string\">&quot;from __main__ import primes&quot;</span>,\n            number=<span class=\"hljs-number\">1_000_000</span>,\n        )\n    )\n    <span class=\"hljs-built_in\">print</span>(\n        timeit(\n            <span class=\"hljs-string\">&quot;fast_primes(1_000_000_000_000)&quot;</span>,\n            setup=<span class=\"hljs-string\">&quot;from __main__ import fast_primes&quot;</span>,\n            number=<span class=\"hljs-number\">1_000_000</span>,\n        )\n    )\n"
    },
    "c-plus-plus": {
      "dir": "math/prime_numbers.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/prime_numbers.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Get list of prime numbers\n * @see primes_up_to_billion.cpp sieve_of_eratosthenes.cpp\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-comment\">/** Generate an increasingly large number of primes\n * and store in a list\n */</span>\n<span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">primes</span><span class=\"hljs-params\">(<span class=\"hljs-type\">size_t</span> max)</span> </span>{\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; res;\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; <span class=\"hljs-title\">is_not_prime</span><span class=\"hljs-params\">(max + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">false</span>)</span></span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">2</span>; i &lt;= max; i++) {\n        <span class=\"hljs-keyword\">if</span> (!is_not_prime[i]) {\n            res.<span class=\"hljs-built_in\">emplace_back</span>(i);\n        }\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> p : res) {\n            <span class=\"hljs-type\">size_t</span> k = i * p;\n            <span class=\"hljs-keyword\">if</span> (k &gt; max) {\n                <span class=\"hljs-keyword\">break</span>;\n            }\n            is_not_prime[k] = <span class=\"hljs-literal\">true</span>;\n            <span class=\"hljs-keyword\">if</span> (i % p == <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> res;\n}\n\n<span class=\"hljs-comment\">/** main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Calculate primes up to:\\n&gt;&gt; &quot;</span>;\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">0</span>;\n    std::cin &gt;&gt; n;\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; ans = <span class=\"hljs-built_in\">primes</span>(n);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> p : ans) std::cout &lt;&lt; p &lt;&lt; <span class=\"hljs-string\">&#x27; &#x27;</span>;\n    std::cout &lt;&lt; std::endl;\n}\n"
    },
    "rust": {
      "dir": "src/math/prime_numbers.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/math/prime_numbers.rs",
      "code": "<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">prime_numbers</span>(max: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n\n    <span class=\"hljs-keyword\">if</span> max &gt;= <span class=\"hljs-number\">2</span> {\n        result.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">2</span>)\n    }\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">3</span>..max + <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">step_by</span>(<span class=\"hljs-number\">2</span>) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">stop</span>: <span class=\"hljs-type\">usize</span> = (i <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f64</span>).<span class=\"hljs-title function_ invoke__\">sqrt</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span> + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">status</span>: <span class=\"hljs-type\">bool</span> = <span class=\"hljs-literal\">true</span>;\n\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">3</span>..stop).<span class=\"hljs-title function_ invoke__\">step_by</span>(<span class=\"hljs-number\">2</span>) {\n            <span class=\"hljs-keyword\">if</span> i % j == <span class=\"hljs-number\">0</span> {\n                status = <span class=\"hljs-literal\">false</span>\n            }\n        }\n        <span class=\"hljs-keyword\">if</span> status {\n            result.<span class=\"hljs-title function_ invoke__\">push</span>(i)\n        }\n    }\n\n    result\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">basic</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">prime_numbers</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-built_in\">vec!</span>[]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">prime_numbers</span>(<span class=\"hljs-number\">11</span>), <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">prime_numbers</span>(<span class=\"hljs-number\">25</span>), <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">23</span>]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">prime_numbers</span>(<span class=\"hljs-number\">33</span>),\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">29</span>, <span class=\"hljs-number\">31</span>]\n        );\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "DONSIMON92",
      "email": "47272787+DONSIMON92@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "5ur3",
      "email": "43802815+5ur3@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Nikos Giachoudis",
      "email": "ngiachou@gmail.com",
      "commits": 1
    },
    {
      "name": "Omkaar",
      "email": "79257339+Pysics@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Leoriem-code",
      "email": "73761711+Leoriem-code@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Steven Qu",
      "email": "stevenqu2001@gmail.com",
      "commits": 1
    },
    {
      "name": "Níkolas Vargas",
      "email": "vargasnikolass@gmail.com",
      "commits": 1
    },
    {
      "name": "himanshujain171",
      "email": "43314193+himanshujain171@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "gabriel",
      "email": "gabriel.goncalves@trilogo.com.br",
      "commits": 1
    },
    {
      "name": "Brayo",
      "email": "vukubrian@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}