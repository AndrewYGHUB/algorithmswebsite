{
  "slug": "product-cipher",
  "name": "Product Cipher",
  "categories": [
    "ciphers"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/ciphers/ProductCipher.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/ciphers/ProductCipher.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.ciphers;\n\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ProductCipher</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n        System.out.println(<span class=\"hljs-string\">&quot;Enter the input to be encrypted: &quot;</span>);\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">substitutionInput</span> <span class=\"hljs-operator\">=</span> sc.nextLine();\n        System.out.println(<span class=\"hljs-string\">&quot; &quot;</span>);\n        System.out.println(<span class=\"hljs-string\">&quot;Enter a number: &quot;</span>);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> sc.nextInt();\n\n        <span class=\"hljs-comment\">// Substitution encryption</span>\n        <span class=\"hljs-type\">StringBuffer</span> <span class=\"hljs-variable\">substitutionOutput</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuffer</span>();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; substitutionInput.length(); i++) {\n            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> substitutionInput.charAt(i);\n            substitutionOutput.append((<span class=\"hljs-type\">char</span>) (c + <span class=\"hljs-number\">5</span>));\n        }\n        System.out.println(<span class=\"hljs-string\">&quot; &quot;</span>);\n        System.out.println(<span class=\"hljs-string\">&quot;Substituted text: &quot;</span>);\n        System.out.println(substitutionOutput);\n\n        <span class=\"hljs-comment\">// Transposition encryption</span>\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">transpositionInput</span> <span class=\"hljs-operator\">=</span> substitutionOutput.toString();\n        <span class=\"hljs-type\">int</span> modulus;\n        <span class=\"hljs-keyword\">if</span> ((modulus = transpositionInput.length() % n) != <span class=\"hljs-number\">0</span>) {\n            modulus = n - modulus;\n\n            <span class=\"hljs-keyword\">for</span> (; modulus != <span class=\"hljs-number\">0</span>; modulus--) {\n                transpositionInput += <span class=\"hljs-string\">&quot;/&quot;</span>;\n            }\n        }\n        <span class=\"hljs-type\">StringBuffer</span> <span class=\"hljs-variable\">transpositionOutput</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuffer</span>();\n        System.out.println(<span class=\"hljs-string\">&quot; &quot;</span>);\n        System.out.println(<span class=\"hljs-string\">&quot;Transposition Matrix: &quot;</span>);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; transpositionInput.length() / n; j++) {\n                <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> transpositionInput.charAt(i + (j * n));\n                System.out.print(c);\n                transpositionOutput.append(c);\n            }\n            System.out.println();\n        }\n        System.out.println(<span class=\"hljs-string\">&quot; &quot;</span>);\n        System.out.println(<span class=\"hljs-string\">&quot;Final encrypted text: &quot;</span>);\n        System.out.println(transpositionOutput);\n\n        <span class=\"hljs-comment\">// Transposition decryption</span>\n        n = transpositionOutput.length() / n;\n        <span class=\"hljs-type\">StringBuffer</span> <span class=\"hljs-variable\">transpositionPlaintext</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuffer</span>();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; transpositionOutput.length() / n; j++) {\n                <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> transpositionOutput.charAt(i + (j * n));\n                transpositionPlaintext.append(c);\n            }\n        }\n\n        <span class=\"hljs-comment\">// Substitution decryption</span>\n        <span class=\"hljs-type\">StringBuffer</span> <span class=\"hljs-variable\">plaintext</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuffer</span>();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; transpositionPlaintext.length(); i++) {\n            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> transpositionPlaintext.charAt(i);\n            plaintext.append((<span class=\"hljs-type\">char</span>) (c - <span class=\"hljs-number\">5</span>));\n        }\n\n        System.out.println(<span class=\"hljs-string\">&quot;Plaintext: &quot;</span>);\n        System.out.println(plaintext);\n        sc.close();\n    }\n\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Dilrose Reji",
      "email": "70878223+dilroseR@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}