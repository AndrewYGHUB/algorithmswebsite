{
  "slug": "prufer-code",
  "name": "Prufer Code",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/graph/prufer_code.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/graph/prufer_code.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::collections::{BTreeMap, BTreeSet, BinaryHeap};\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Graph</span>&lt;V&gt; = BTreeMap&lt;V, <span class=\"hljs-type\">Vec</span>&lt;V&gt;&gt;;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">prufer_encode</span>&lt;V: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Copy</span>&gt;(tree: &amp;Graph&lt;V&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;V&gt; {\n    <span class=\"hljs-keyword\">if</span> tree.<span class=\"hljs-title function_ invoke__\">len</span>() &lt;= <span class=\"hljs-number\">2</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">vec!</span>[];\n    }\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span>: <span class=\"hljs-type\">Vec</span>&lt;V&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n    result.<span class=\"hljs-title function_ invoke__\">reserve</span>(tree.<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">queue</span> = BinaryHeap::<span class=\"hljs-title function_ invoke__\">new</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">in_tree</span> = BTreeSet::<span class=\"hljs-title function_ invoke__\">new</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">degree</span> = BTreeMap::<span class=\"hljs-title function_ invoke__\">new</span>();\n    <span class=\"hljs-title function_ invoke__\">for</span> (vertex, adj) <span class=\"hljs-keyword\">in</span> tree {\n        in_tree.<span class=\"hljs-title function_ invoke__\">insert</span>(*vertex);\n        degree.<span class=\"hljs-title function_ invoke__\">insert</span>(*vertex, adj.<span class=\"hljs-title function_ invoke__\">len</span>());\n        <span class=\"hljs-keyword\">if</span> adj.<span class=\"hljs-title function_ invoke__\">len</span>() == <span class=\"hljs-number\">1</span> {\n            queue.<span class=\"hljs-title function_ invoke__\">push</span>(*vertex);\n        }\n    }\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">_</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">2</span>..tree.<span class=\"hljs-title function_ invoke__\">len</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">v</span> = queue.<span class=\"hljs-title function_ invoke__\">pop</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n        in_tree.<span class=\"hljs-title function_ invoke__\">remove</span>(&amp;v);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">u</span> = tree[&amp;v].<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">find</span>(|u| in_tree.<span class=\"hljs-title function_ invoke__\">contains</span>(u)).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n        result.<span class=\"hljs-title function_ invoke__\">push</span>(*u);\n        *degree.<span class=\"hljs-title function_ invoke__\">get_mut</span>(u).<span class=\"hljs-title function_ invoke__\">unwrap</span>() -= <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">if</span> degree[u] == <span class=\"hljs-number\">1</span> {\n            queue.<span class=\"hljs-title function_ invoke__\">push</span>(*u);\n        }\n    }\n    result\n}\n\n<span class=\"hljs-meta\">#[inline]</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">add_directed_edge</span>&lt;V: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Copy</span>&gt;(tree: &amp;<span class=\"hljs-keyword\">mut</span> Graph&lt;V&gt;, a: V, b: V) {\n    tree.<span class=\"hljs-title function_ invoke__\">entry</span>(a).<span class=\"hljs-title function_ invoke__\">or_insert</span>(<span class=\"hljs-built_in\">vec!</span>[]).<span class=\"hljs-title function_ invoke__\">push</span>(b);\n}\n\n<span class=\"hljs-meta\">#[inline]</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">add_edge</span>&lt;V: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Copy</span>&gt;(tree: &amp;<span class=\"hljs-keyword\">mut</span> Graph&lt;V&gt;, a: V, b: V) {\n    <span class=\"hljs-title function_ invoke__\">add_directed_edge</span>(tree, a, b);\n    <span class=\"hljs-title function_ invoke__\">add_directed_edge</span>(tree, b, a);\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">prufer_decode</span>&lt;V: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Copy</span>&gt;(code: &amp;[V], vertex_list: &amp;[V]) <span class=\"hljs-punctuation\">-&gt;</span> Graph&lt;V&gt; {\n    <span class=\"hljs-comment\">// For many cases, this function won&#x27;t fail even if given unsuitable code</span>\n    <span class=\"hljs-comment\">// array. As such, returning really unlikely errors doesn&#x27;t make much sense.</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span> = BTreeMap::<span class=\"hljs-title function_ invoke__\">new</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list_count</span>: BTreeMap&lt;V, <span class=\"hljs-type\">usize</span>&gt; = BTreeMap::<span class=\"hljs-title function_ invoke__\">new</span>();\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">vertex</span> <span class=\"hljs-keyword\">in</span> code {\n        *list_count.<span class=\"hljs-title function_ invoke__\">entry</span>(*vertex).<span class=\"hljs-title function_ invoke__\">or_insert</span>(<span class=\"hljs-number\">0</span>) += <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">queue</span> = BinaryHeap::<span class=\"hljs-title function_ invoke__\">from</span>(\n        vertex_list\n            .<span class=\"hljs-title function_ invoke__\">iter</span>()\n            .<span class=\"hljs-title function_ invoke__\">filter</span>(|v| !list_count.<span class=\"hljs-title function_ invoke__\">contains_key</span>(v))\n            .<span class=\"hljs-title function_ invoke__\">cloned</span>()\n            .collect::&lt;<span class=\"hljs-type\">Vec</span>&lt;V&gt;&gt;(),\n    );\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">vertex</span> <span class=\"hljs-keyword\">in</span> code {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">child</span> = queue.<span class=\"hljs-title function_ invoke__\">pop</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n        <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> result, child, *vertex);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">cnt</span> = list_count.<span class=\"hljs-title function_ invoke__\">get_mut</span>(vertex).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n        *cnt -= <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">if</span> *cnt == <span class=\"hljs-number\">0</span> {\n            queue.<span class=\"hljs-title function_ invoke__\">push</span>(*vertex);\n        }\n    }\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">u</span> = queue.<span class=\"hljs-title function_ invoke__\">pop</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">v</span> = queue.<span class=\"hljs-title function_ invoke__\">pop</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n    <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> result, u, v);\n    result\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::{add_edge, prufer_decode, prufer_encode, Graph};\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">equal_graphs</span>&lt;V: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Copy</span>&gt;(g1: &amp;<span class=\"hljs-keyword\">mut</span> Graph&lt;V&gt;, g2: &amp;<span class=\"hljs-keyword\">mut</span> Graph&lt;V&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">adj</span> <span class=\"hljs-keyword\">in</span> g1.<span class=\"hljs-title function_ invoke__\">values_mut</span>() {\n            adj.<span class=\"hljs-title function_ invoke__\">sort</span>();\n        }\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">adj</span> <span class=\"hljs-keyword\">in</span> g2.<span class=\"hljs-title function_ invoke__\">values_mut</span>() {\n            adj.<span class=\"hljs-title function_ invoke__\">sort</span>();\n        }\n        <span class=\"hljs-keyword\">return</span> g1 == g2;\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">small_trees</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">g</span>: Graph&lt;<span class=\"hljs-type\">u32</span>&gt; = Graph::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-comment\">// Binary tree with 7 vertices</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">edges</span> = <span class=\"hljs-built_in\">vec!</span>[(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>), (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>), (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>), (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>), (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>)];\n        <span class=\"hljs-title function_ invoke__\">for</span> (u, v) <span class=\"hljs-keyword\">in</span> edges {\n            <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> g, u, v);\n        }\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">code</span> = <span class=\"hljs-title function_ invoke__\">prufer_encode</span>(&amp;g);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">vertices</span> = g.<span class=\"hljs-title function_ invoke__\">keys</span>().<span class=\"hljs-title function_ invoke__\">cloned</span>().collect::&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u32</span>&gt;&gt;();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">decoded</span> = <span class=\"hljs-title function_ invoke__\">prufer_decode</span>(&amp;code, &amp;vertices);\n        <span class=\"hljs-built_in\">assert_eq!</span>(code, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]);\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">equal_graphs</span>(&amp;<span class=\"hljs-keyword\">mut</span> g, &amp;<span class=\"hljs-keyword\">mut</span> decoded));\n\n        g.<span class=\"hljs-title function_ invoke__\">clear</span>();\n        <span class=\"hljs-comment\">// A path of length 10</span>\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">v</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">2</span>..=<span class=\"hljs-number\">9</span> {\n            g.<span class=\"hljs-title function_ invoke__\">insert</span>(v, <span class=\"hljs-built_in\">vec!</span>[v - <span class=\"hljs-number\">1</span>, v + <span class=\"hljs-number\">1</span>]);\n        }\n        g.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>]);\n        g.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">9</span>]);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">code</span> = <span class=\"hljs-title function_ invoke__\">prufer_encode</span>(&amp;g);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">vertices</span> = g.<span class=\"hljs-title function_ invoke__\">keys</span>().<span class=\"hljs-title function_ invoke__\">cloned</span>().collect::&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u32</span>&gt;&gt;();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">decoded</span> = <span class=\"hljs-title function_ invoke__\">prufer_decode</span>(&amp;code, &amp;vertices);\n        <span class=\"hljs-built_in\">assert_eq!</span>(code, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>]);\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">equal_graphs</span>(&amp;<span class=\"hljs-keyword\">mut</span> g, &amp;<span class=\"hljs-keyword\">mut</span> decoded));\n\n        g.<span class=\"hljs-title function_ invoke__\">clear</span>();\n        <span class=\"hljs-comment\">// 7-5-3-1-2-4-6</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">edges</span> = <span class=\"hljs-built_in\">vec!</span>[(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>), (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>), (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>), (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>), (<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>)];\n        <span class=\"hljs-title function_ invoke__\">for</span> (u, v) <span class=\"hljs-keyword\">in</span> edges {\n            <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> g, u, v);\n        }\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">code</span> = <span class=\"hljs-title function_ invoke__\">prufer_encode</span>(&amp;g);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">vertices</span> = g.<span class=\"hljs-title function_ invoke__\">keys</span>().<span class=\"hljs-title function_ invoke__\">cloned</span>().collect::&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u32</span>&gt;&gt;();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">decoded</span> = <span class=\"hljs-title function_ invoke__\">prufer_decode</span>(&amp;code, &amp;vertices);\n        <span class=\"hljs-built_in\">assert_eq!</span>(code, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]);\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">equal_graphs</span>(&amp;<span class=\"hljs-keyword\">mut</span> g, &amp;<span class=\"hljs-keyword\">mut</span> decoded));\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Erfan Khadem",
      "email": "45465346+er888kh@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}