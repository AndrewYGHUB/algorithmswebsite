{
  "slug": "qlearning",
  "name": "Qlearning",
  "categories": [
    "neuralnetwork"
  ],
  "body": {
    "all": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"2\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> pickle</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">GAMMA = <span class=\"hljs-number\">0.9</span>\nLEARNING_RATE = <span class=\"hljs-number\">0.6</span></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"4\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"Qtable.txt\"</span>, <span class=\"hljs-string\">\"rb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n        <span class=\"hljs-string\">\"\"\"\n        This code is responsible for loading Qtable.txt if already present\n        \"\"\"</span>\n        Q_table = pickle.load(f)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"5\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">next_best_action</span>(<span class=\"hljs-params\">state: <span class=\"hljs-built_in\">int</span>, Q_table: np.ndarray</span>) -&amp;gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">\"\"\"\n    Return the most suitable action value from Q_table or a random action\n    if there is no np.argmax(Q_table[state]).\n    &amp;gt;&amp;gt;&amp;gt; next_best_action(1, []) in [0, 1, 2, 3]\n    True\n    \"\"\"</span>\n    action = np.argmax(Q_table[state])\n    <span class=\"hljs-keyword\">return</span> action <span class=\"hljs-keyword\">if</span> action <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">else</span> np.random.choice([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"6\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">state_action_reward</span>(<span class=\"hljs-params\">player: <span class=\"hljs-built_in\">object</span>, x_food: <span class=\"hljs-built_in\">int</span>, y_food: <span class=\"hljs-built_in\">int</span></span>) -&amp;gt; <span class=\"hljs-built_in\">tuple</span>:\n    <span class=\"hljs-string\">\"\"\"\n    This function returns state, action and reward to update the Qtable.\n    \"\"\"</span>\n    x_agent, y_agent = player.body[<span class=\"hljs-number\">0</span>].pos\n    current_state = state(player, x_food, y_food)\n    current_action = next_best_action(state, Q_table)\n    current_reward = reward(player, x_food, y_food)\n    <span class=\"hljs-keyword\">return</span> (current_state, current_action, current_reward)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"7\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># States to consider:</span>\n<span class=\"hljs-comment\">#   * Food's relative positioning wrt the head</span>\n<span class=\"hljs-comment\"># Checking for food in nine directions</span>\n<span class=\"hljs-comment\">###</span>\n<span class=\"hljs-comment\"># #</span>\n<span class=\"hljs-comment\">###</span>\n<span class=\"hljs-comment\">#   * obstruction Ahead, Right, Left</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">state</span>(<span class=\"hljs-params\">player: <span class=\"hljs-built_in\">object</span>, x_food: <span class=\"hljs-built_in\">int</span>, y_food: <span class=\"hljs-built_in\">int</span></span>) -&amp;gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">\"\"\"\n    This function Checks for the food in nine directions and returns state.\n    \"\"\"</span>\n    x_agent, y_agent = player.body[<span class=\"hljs-number\">0</span>].pos\n    states = []\n\n    <span class=\"hljs-comment\"># Code to check for obstacles in front of the agent</span>\n    DangerAhead = (\n        (player.dirnx == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> x_agent + player.delx &amp;lt; <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">or</span> (player.dirnx == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ((x_agent + player.delx, y_agent) <span class=\"hljs-keyword\">in</span> player.body))\n        <span class=\"hljs-keyword\">or</span> (player.dirnx == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> x_agent + player.delx &amp;gt; <span class=\"hljs-number\">14</span>)\n        <span class=\"hljs-keyword\">or</span> (player.dirnx == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ((x_agent + player.delx, y_agent) <span class=\"hljs-keyword\">in</span> player.body))\n        <span class=\"hljs-keyword\">or</span> (player.dirny == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent + player.dely &amp;gt; <span class=\"hljs-number\">14</span>)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ((x_agent, y_agent + player.dely) <span class=\"hljs-keyword\">in</span> player.body))\n        <span class=\"hljs-keyword\">or</span> (player.dirny == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent + player.dely &amp;lt; <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ((x_agent, y_agent + player.dely) <span class=\"hljs-keyword\">in</span> player.body))\n    )\n    <span class=\"hljs-comment\"># Code to check for obstacles to the left of the agent</span>\n    DangerLeft = (\n        (player.dirnx == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent + <span class=\"hljs-number\">1</span> &amp;gt; <span class=\"hljs-number\">14</span>)\n        <span class=\"hljs-keyword\">or</span> (player.dirnx == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ((x_agent, y_agent + <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">in</span> player.body))\n        <span class=\"hljs-keyword\">or</span> (player.dirnx == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent - <span class=\"hljs-number\">1</span> &amp;lt; <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">or</span> (player.dirnx == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ((x_agent, y_agent - <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">in</span> player.body))\n        <span class=\"hljs-keyword\">or</span> (player.dirny == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> x_agent + <span class=\"hljs-number\">1</span> &amp;gt; <span class=\"hljs-number\">14</span>)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ((x_agent + <span class=\"hljs-number\">1</span>, y_agent) <span class=\"hljs-keyword\">in</span> player.body))\n        <span class=\"hljs-keyword\">or</span> (player.dirny == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> x_agent - <span class=\"hljs-number\">1</span> &amp;lt; <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ((x_agent - <span class=\"hljs-number\">1</span>, y_agent) <span class=\"hljs-keyword\">in</span> player.body))\n    )\n    <span class=\"hljs-comment\"># Code to check for obstacles to the right of the agent</span>\n    DangerRight = (\n        (player.dirnx == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent - <span class=\"hljs-number\">1</span> &amp;lt; <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">or</span> (player.dirnx == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ((x_agent, y_agent - <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">in</span> player.body))\n        <span class=\"hljs-keyword\">or</span> (player.dirnx == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent + <span class=\"hljs-number\">1</span> &amp;gt; <span class=\"hljs-number\">14</span>)\n        <span class=\"hljs-keyword\">or</span> (player.dirnx == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ((x_agent, y_agent + <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">in</span> player.body))\n        <span class=\"hljs-keyword\">or</span> (player.dirny == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> x_agent - <span class=\"hljs-number\">1</span> &amp;lt; <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ((x_agent - <span class=\"hljs-number\">1</span>, y_agent) <span class=\"hljs-keyword\">in</span> player.body))\n        <span class=\"hljs-keyword\">or</span> (player.dirny == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> x_agent + <span class=\"hljs-number\">1</span> &amp;gt; <span class=\"hljs-number\">14</span>)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ((x_agent + <span class=\"hljs-number\">1</span>, y_agent) <span class=\"hljs-keyword\">in</span> player.body))\n    )\n    <span class=\"hljs-comment\"># Code for food straight wrt head</span>\n    FoodStraightAhead = (\n        (player.dirnx == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent == y_food <span class=\"hljs-keyword\">and</span> x_food &amp;gt; x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirnx == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent == y_food <span class=\"hljs-keyword\">and</span> x_food &amp;lt; x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;lt; y_food <span class=\"hljs-keyword\">and</span> x_food == x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;gt; y_food <span class=\"hljs-keyword\">and</span> x_food == x_agent)\n    )\n    <span class=\"hljs-comment\"># Code for food which is ahead and right wrt head</span>\n    FoodAheadRight = (\n        (player.dirnx == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;lt; y_food <span class=\"hljs-keyword\">and</span> x_food &amp;gt; x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirnx == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;gt; y_food <span class=\"hljs-keyword\">and</span> x_food &amp;lt; x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;lt; y_food <span class=\"hljs-keyword\">and</span> x_food &amp;lt; x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;gt; y_food <span class=\"hljs-keyword\">and</span> x_food &amp;gt; x_agent)\n    )\n    <span class=\"hljs-comment\"># Code for food which is ahead and right wrt head</span>\n    FoodAheadLeft = (\n        (player.dirnx == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;gt; y_food <span class=\"hljs-keyword\">and</span> x_food &amp;gt; x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirnx == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;lt; y_food <span class=\"hljs-keyword\">and</span> x_food &amp;lt; x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;lt; y_food <span class=\"hljs-keyword\">and</span> x_food &amp;gt; x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;gt; y_food <span class=\"hljs-keyword\">and</span> x_food &amp;lt; x_agent)\n    )\n    <span class=\"hljs-comment\"># Code for food which is ahead and right wrt head</span>\n    FoodBehindRight = (\n        (player.dirnx == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;lt; y_food <span class=\"hljs-keyword\">and</span> x_food &amp;lt; x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirnx == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;gt; y_food <span class=\"hljs-keyword\">and</span> x_food &amp;gt; x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;gt; y_food <span class=\"hljs-keyword\">and</span> x_food &amp;lt; x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;lt; y_food <span class=\"hljs-keyword\">and</span> x_food &amp;gt; x_agent)\n    )\n    <span class=\"hljs-comment\"># Code for food which is ahead and right wrt head</span>\n    FoodBehindLeft = (\n        (player.dirnx == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;gt; y_food <span class=\"hljs-keyword\">and</span> x_food &amp;lt; x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirnx == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;lt; y_food <span class=\"hljs-keyword\">and</span> x_food &amp;gt; x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;gt; y_food <span class=\"hljs-keyword\">and</span> x_food &amp;gt; x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;lt; y_food <span class=\"hljs-keyword\">and</span> x_food &amp;lt; x_agent)\n    )\n    <span class=\"hljs-comment\"># Code for food exactly behind</span>\n    FoodBehind = (\n        (player.dirnx == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent == y_food <span class=\"hljs-keyword\">and</span> x_food &amp;lt; x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirnx == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent == y_food <span class=\"hljs-keyword\">and</span> x_food &amp;gt; x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;gt; y_food <span class=\"hljs-keyword\">and</span> x_food == x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;lt; y_food <span class=\"hljs-keyword\">and</span> x_food == x_agent)\n    )\n    <span class=\"hljs-comment\"># Code for food left</span>\n    FoodLeft = (\n        (player.dirnx == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;gt; y_food <span class=\"hljs-keyword\">and</span> x_food == x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirnx == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;lt; y_food <span class=\"hljs-keyword\">and</span> x_food == x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent == y_food <span class=\"hljs-keyword\">and</span> x_food &amp;gt; x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent == y_food <span class=\"hljs-keyword\">and</span> x_food &amp;lt; x_agent)\n    )\n    <span class=\"hljs-comment\"># Code for food right</span>\n    FoodRight = (\n        (player.dirnx == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;lt; y_food <span class=\"hljs-keyword\">and</span> x_food == x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirnx == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent &amp;gt; y_food <span class=\"hljs-keyword\">and</span> x_food == x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent == y_food <span class=\"hljs-keyword\">and</span> x_food &amp;lt; x_agent)\n        <span class=\"hljs-keyword\">or</span> (player.dirny == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent == y_food <span class=\"hljs-keyword\">and</span> x_food &amp;gt; x_agent)\n    )\n    <span class=\"hljs-comment\"># Adding to states list while priortizing danger over eating food</span>\n    states = [<span class=\"hljs-built_in\">int</span>(x) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> (DangerAhead, DangerLeft, DangerRight)]\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">sum</span>(states) == <span class=\"hljs-number\">0</span>:\n        states += [<span class=\"hljs-built_in\">int</span>(x) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> (\n            FoodStraightAhead, FoodAheadRight, FoodAheadLeft, FoodBehindRight,\n            FoodBehindLeft, FoodBehind, FoodLeft, FoodRight\n        )]\n    <span class=\"hljs-keyword\">else</span>:\n        states += [<span class=\"hljs-number\">0</span>] * <span class=\"hljs-number\">8</span>\n    state = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">11</span>):\n        <span class=\"hljs-keyword\">if</span> states[i] == <span class=\"hljs-number\">1</span>:\n            state = i\n    <span class=\"hljs-keyword\">return</span> state</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"8\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">euler_dist</span>(<span class=\"hljs-params\">x1: <span class=\"hljs-built_in\">int</span>, y1: <span class=\"hljs-built_in\">int</span>, x2: <span class=\"hljs-built_in\">int</span>, y2: <span class=\"hljs-built_in\">int</span></span>) -&amp;gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">\"\"\"\n    For calculation of Euler Distance.\n    \"\"\"</span>\n    dist = (x1 - x2) ** <span class=\"hljs-number\">2</span> + (y1 - y2) ** <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">return</span> dist ** <span class=\"hljs-number\">0.5</span></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"9\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Reward conditions:</span>\n<span class=\"hljs-comment\">#   * +10 for eating food</span>\n<span class=\"hljs-comment\">#   * -12 for dying</span>\n<span class=\"hljs-comment\">#   * -2 for getting closer</span>\n<span class=\"hljs-comment\">#   * -7 for going away from the fruit</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">reward</span>(<span class=\"hljs-params\">player: <span class=\"hljs-built_in\">object</span>, x_food: <span class=\"hljs-built_in\">int</span>, y_food: <span class=\"hljs-built_in\">int</span></span>) -&amp;gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">\"\"\"\n    This function assigns the reward to the agent according to the action taken\n    \"\"\"</span>\n    x_agent, y_agent = player.body[<span class=\"hljs-number\">0</span>].pos\n    <span class=\"hljs-keyword\">if</span> x_agent == x_food <span class=\"hljs-keyword\">and</span> y_agent == y_food:\n        <span class=\"hljs-keyword\">return</span> +<span class=\"hljs-number\">10</span>\n    <span class=\"hljs-keyword\">elif</span> (\n        (player.dirnx == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> x_agent + player.delx &amp;lt;= <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">or</span> (\n            player.dirnx == -<span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">and</span> ((x_agent + player.delx, y_agent + player.dely) <span class=\"hljs-keyword\">in</span> player.body)\n        )\n        <span class=\"hljs-keyword\">or</span> (player.dirnx == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> x_agent + player.delx &amp;gt;= <span class=\"hljs-number\">14</span>)\n        <span class=\"hljs-keyword\">or</span> (\n            player.dirnx == <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">and</span> ((x_agent + player.dirnx, y_agent + player.dely) <span class=\"hljs-keyword\">in</span> player.body)\n        )\n        <span class=\"hljs-keyword\">or</span> (player.dirny == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent + player.dely &amp;gt;= <span class=\"hljs-number\">14</span>)\n        <span class=\"hljs-keyword\">or</span> (\n            player.dirny == <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">and</span> ((x_agent + player.delx, y_agent + player.dely) <span class=\"hljs-keyword\">in</span> player.body)\n        )\n        <span class=\"hljs-keyword\">or</span> (player.dirny == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> y_agent + player.dely &amp;lt;= <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">or</span> (\n            player.dirny == -<span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">and</span> ((x_agent + player.delx, y_agent + player.dely) <span class=\"hljs-keyword\">in</span> player.body)\n        )\n        <span class=\"hljs-keyword\">or</span> (player.resetDone <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>)\n    ):\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">12</span>\n    <span class=\"hljs-keyword\">elif</span> (\n        euler_dist(x_agent + player.delx, y_agent + player.dely, x_food, y_food)\n        - euler_dist(x_agent, y_agent, x_food, y_food)\n        &amp;gt; <span class=\"hljs-number\">0</span>\n    ):\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">elif</span> (\n        euler_dist(x_agent + player.delx, y_agent + player.dely, x_food, y_food)\n        - euler_dist(x_agent, y_agent, x_food, y_food)\n        &amp;lt; <span class=\"hljs-number\">0</span>\n    ):\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">7</span>\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"10\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">learn</span>(<span class=\"hljs-params\">\n        state: <span class=\"hljs-built_in\">int</span>, action: <span class=\"hljs-built_in\">int</span>, reward: <span class=\"hljs-built_in\">int</span>, next_state: <span class=\"hljs-built_in\">int</span>,\n        next_action: <span class=\"hljs-built_in\">int</span>, i: <span class=\"hljs-built_in\">int</span>, trialNumber: <span class=\"hljs-built_in\">int</span>, epsilon: <span class=\"hljs-built_in\">float</span></span>) -&amp;gt; <span class=\"hljs-built_in\">type</span>(<span class=\"hljs-literal\">None</span>):\n    <span class=\"hljs-string\">\"\"\"\n    This function is for iteratively updating the Qtable.\n    \"\"\"</span>\n    currentQ = Q_table[state][action]\n    nextQ = Q_table[next_state][next_action]\n    <span class=\"hljs-comment\"># Qlearning Algorithm to get new q value for the q table.</span>\n    newQ = (<span class=\"hljs-number\">1</span> - LEARNING_RATE) * currentQ + LEARNING_RATE * (reward + GAMMA * nextQ)\n    Q_table[state][action] = newQ\n    state = next_state\n    currentQ = nextQ\n    <span class=\"hljs-keyword\">if</span> trialNumber % <span class=\"hljs-number\">100</span> == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Printing Q_table: \"</span>)\n        <span class=\"hljs-built_in\">print</span>(Q_table)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>"
  },
  "implementations": {
    "jupyter": {
      "dir": "neural_network/qlearning.ipynb",
      "url": "https://github.com/TheAlgorithms/jupyter/tree/master/neural_network/qlearning.ipynb",
      "code": "<span class=\"hljs-punctuation\">{</span>\n <span class=\"hljs-attr\">&quot;cells&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;import numpy as np\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;import pickle&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">3</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;GAMMA = 0.9\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;LEARNING_RATE = 0.6&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;if __name__ == \\&quot;__main__\\&quot;:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    with open(\\&quot;Qtable.txt\\&quot;, \\&quot;rb\\&quot;) as f:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        \\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        This code is responsible for loading Qtable.txt if already present\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        \\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        Q_table = pickle.load(f)&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">5</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;def next_best_action(state: int, Q_table: np.ndarray) -&gt; int:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    \\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    Return the most suitable action value from Q_table or a random action\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    if there is no np.argmax(Q_table[state]).\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    &gt;&gt;&gt; next_best_action(1, []) in [0, 1, 2, 3]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    True\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    \\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    action = np.argmax(Q_table[state])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    return action if action is not None else np.random.choice([0, 1, 2, 3])&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">6</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;def state_action_reward(player: object, x_food: int, y_food: int) -&gt; tuple:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    \\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    This function returns state, action and reward to update the Qtable.\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    \\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    x_agent, y_agent = player.body[0].pos\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    current_state = state(player, x_food, y_food)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    current_action = next_best_action(state, Q_table)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    current_reward = reward(player, x_food, y_food)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    return (current_state, current_action, current_reward)&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">7</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;# States to consider:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;#   * Food&#x27;s relative positioning wrt the head\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;# Checking for food in nine directions\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;###\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;# #\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;###\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;#   * obstruction Ahead, Right, Left\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;def state(player: object, x_food: int, y_food: int) -&gt; int:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    \\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    This function Checks for the food in nine directions and returns state.\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    \\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    x_agent, y_agent = player.body[0].pos\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    states = []\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    # Code to check for obstacles in front of the agent\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    DangerAhead = (\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        (player.dirnx == -1 and x_agent + player.delx &lt; 0)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirnx == -1 and ((x_agent + player.delx, y_agent) in player.body))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirnx == 1 and x_agent + player.delx &gt; 14)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirnx == 1 and ((x_agent + player.delx, y_agent) in player.body))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == 1 and y_agent + player.dely &gt; 14)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == 1 and ((x_agent, y_agent + player.dely) in player.body))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == -1 and y_agent + player.dely &lt; 0)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == -1 and ((x_agent, y_agent + player.dely) in player.body))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    )\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    # Code to check for obstacles to the left of the agent\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    DangerLeft = (\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        (player.dirnx == -1 and y_agent + 1 &gt; 14)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirnx == -1 and ((x_agent, y_agent + 1) in player.body))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirnx == 1 and y_agent - 1 &lt; 0)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirnx == 1 and ((x_agent, y_agent - 1) in player.body))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == 1 and x_agent + 1 &gt; 14)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == 1 and ((x_agent + 1, y_agent) in player.body))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == -1 and x_agent - 1 &lt; 0)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == -1 and ((x_agent - 1, y_agent) in player.body))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    )\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    # Code to check for obstacles to the right of the agent\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    DangerRight = (\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        (player.dirnx == -1 and y_agent - 1 &lt; 0)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirnx == -1 and ((x_agent, y_agent - 1) in player.body))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirnx == 1 and y_agent + 1 &gt; 14)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirnx == 1 and ((x_agent, y_agent + 1) in player.body))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == 1 and x_agent - 1 &lt; 0)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == 1 and ((x_agent - 1, y_agent) in player.body))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == -1 and x_agent + 1 &gt; 14)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == -1 and ((x_agent + 1, y_agent) in player.body))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    )\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    # Code for food straight wrt head\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    FoodStraightAhead = (\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        (player.dirnx == 1 and y_agent == y_food and x_food &gt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirnx == -1 and y_agent == y_food and x_food &lt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == 1 and y_agent &lt; y_food and x_food == x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == -1 and y_agent &gt; y_food and x_food == x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    )\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    # Code for food which is ahead and right wrt head\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    FoodAheadRight = (\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        (player.dirnx == 1 and y_agent &lt; y_food and x_food &gt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirnx == -1 and y_agent &gt; y_food and x_food &lt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == 1 and y_agent &lt; y_food and x_food &lt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == -1 and y_agent &gt; y_food and x_food &gt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    )\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    # Code for food which is ahead and right wrt head\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    FoodAheadLeft = (\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        (player.dirnx == 1 and y_agent &gt; y_food and x_food &gt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirnx == -1 and y_agent &lt; y_food and x_food &lt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == 1 and y_agent &lt; y_food and x_food &gt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == -1 and y_agent &gt; y_food and x_food &lt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    )\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    # Code for food which is ahead and right wrt head\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    FoodBehindRight = (\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        (player.dirnx == 1 and y_agent &lt; y_food and x_food &lt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirnx == -1 and y_agent &gt; y_food and x_food &gt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == 1 and y_agent &gt; y_food and x_food &lt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == -1 and y_agent &lt; y_food and x_food &gt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    )\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    # Code for food which is ahead and right wrt head\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    FoodBehindLeft = (\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        (player.dirnx == 1 and y_agent &gt; y_food and x_food &lt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirnx == -1 and y_agent &lt; y_food and x_food &gt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == 1 and y_agent &gt; y_food and x_food &gt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == -1 and y_agent &lt; y_food and x_food &lt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    )\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    # Code for food exactly behind\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    FoodBehind = (\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        (player.dirnx == 1 and y_agent == y_food and x_food &lt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirnx == -1 and y_agent == y_food and x_food &gt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == 1 and y_agent &gt; y_food and x_food == x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == -1 and y_agent &lt; y_food and x_food == x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    )\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    # Code for food left\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    FoodLeft = (\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        (player.dirnx == 1 and y_agent &gt; y_food and x_food == x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirnx == -1 and y_agent &lt; y_food and x_food == x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == 1 and y_agent == y_food and x_food &gt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == -1 and y_agent == y_food and x_food &lt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    )\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    # Code for food right\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    FoodRight = (\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        (player.dirnx == 1 and y_agent &lt; y_food and x_food == x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirnx == -1 and y_agent &gt; y_food and x_food == x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == 1 and y_agent == y_food and x_food &lt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == -1 and y_agent == y_food and x_food &gt; x_agent)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    )\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    # Adding to states list while priortizing danger over eating food\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    states = [int(x) for x in (DangerAhead, DangerLeft, DangerRight)]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    if sum(states) == 0:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        states += [int(x) for x in (\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            FoodStraightAhead, FoodAheadRight, FoodAheadLeft, FoodBehindRight,\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            FoodBehindLeft, FoodBehind, FoodLeft, FoodRight\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        )]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    else:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        states += [0] * 8\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    state = 0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    for i in range(11):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        if states[i] == 1:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            state = i\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    return state&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">8</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;def euler_dist(x1: int, y1: int, x2: int, y2: int) -&gt; int:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    \\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    For calculation of Euler Distance.\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    \\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    dist = (x1 - x2) ** 2 + (y1 - y2) ** 2\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    return dist ** 0.5&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">9</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;# Reward conditions:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;#   * +10 for eating food\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;#   * -12 for dying\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;#   * -2 for getting closer\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;#   * -7 for going away from the fruit\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;def reward(player: object, x_food: int, y_food: int) -&gt; int:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    \\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    This function assigns the reward to the agent according to the action taken\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    \\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    x_agent, y_agent = player.body[0].pos\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    if x_agent == x_food and y_agent == y_food:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        return +10\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    elif (\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        (player.dirnx == -1 and x_agent + player.delx &lt;= 0)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            player.dirnx == -1\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            and ((x_agent + player.delx, y_agent + player.dely) in player.body)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        )\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirnx == 1 and x_agent + player.delx &gt;= 14)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            player.dirnx == 1\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            and ((x_agent + player.dirnx, y_agent + player.dely) in player.body)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        )\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == 1 and y_agent + player.dely &gt;= 14)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            player.dirny == 1\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            and ((x_agent + player.delx, y_agent + player.dely) in player.body)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        )\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.dirny == -1 and y_agent + player.dely &lt;= 0)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            player.dirny == -1\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            and ((x_agent + player.delx, y_agent + player.dely) in player.body)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        )\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        or (player.resetDone is True)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    ):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        return -12\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    elif (\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        euler_dist(x_agent + player.delx, y_agent + player.dely, x_food, y_food)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        - euler_dist(x_agent, y_agent, x_food, y_food)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        &gt; 0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    ):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        return -2\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    elif (\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        euler_dist(x_agent + player.delx, y_agent + player.dely, x_food, y_food)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        - euler_dist(x_agent, y_agent, x_food, y_food)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        &lt; 0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    ):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        return -7\\n&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">10</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;def learn(\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        state: int, action: int, reward: int, next_state: int,\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        next_action: int, i: int, trialNumber: int, epsilon: float) -&gt; type(None):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    \\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    This function is for iteratively updating the Qtable.\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    \\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    currentQ = Q_table[state][action]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    nextQ = Q_table[next_state][next_action]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    # Qlearning Algorithm to get new q value for the q table.\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    newQ = (1 - LEARNING_RATE) * currentQ + LEARNING_RATE * (reward + GAMMA * nextQ)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    Q_table[state][action] = newQ\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    state = next_state\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    currentQ = nextQ\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    if trialNumber % 100 == 0:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        print(\\&quot;Printing Q_table: \\&quot;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        print(Q_table)&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span>\n <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;kernelspec&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;display_name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Python 3&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;language&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python3&quot;</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;language_info&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;codemirror_mode&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ipython&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">3</span>\n   <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;file_extension&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;.py&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;mimetype&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;text/x-python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;nbconvert_exporter&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;pygments_lexer&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ipython3&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;3.6.8&quot;</span>\n  <span class=\"hljs-punctuation\">}</span>\n <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n <span class=\"hljs-attr\">&quot;nbformat&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">,</span>\n <span class=\"hljs-attr\">&quot;nbformat_minor&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-punctuation\">}</span>\n"
    }
  },
  "contributors": [
    {
      "name": "__Aryan_Raj",
      "email": "41698113+AryanRaj315@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}