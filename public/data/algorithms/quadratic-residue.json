{
  "slug": "quadratic-residue",
  "name": "Quadratic Residue",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/math/quadratic_residue.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/math/quadratic_residue.rs",
      "code": "<span class=\"hljs-comment\">/// Cipolla algorithm</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Solving quadratic residue problem:</span>\n<span class=\"hljs-comment\">///     x^2 = a (mod p) , p is an odd prime</span>\n<span class=\"hljs-comment\">/// with O(M*log(n)) time complexity, M depends on the complexity of complex numbers multiplication.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Wikipedia reference: https://en.wikipedia.org/wiki/Cipolla%27s_algorithm</span>\n<span class=\"hljs-comment\">/// When a is the primitive root modulo n, the answer is unique.</span>\n<span class=\"hljs-comment\">/// Otherwise it will return the smallest positive solution</span>\n<span class=\"hljs-keyword\">use</span> std::rc::Rc;\n<span class=\"hljs-keyword\">use</span> std::time::{SystemTime, UNIX_EPOCH};\n\n<span class=\"hljs-keyword\">use</span> super::{fast_power, PCG32};\n\n<span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">CustomFiniteFiled</span> {\n    modulus: <span class=\"hljs-type\">u64</span>,\n    i_square: <span class=\"hljs-type\">u64</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">CustomFiniteFiled</span> {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>(modulus: <span class=\"hljs-type\">u64</span>, i_square: <span class=\"hljs-type\">u64</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">Self</span> { modulus, i_square }\n    }\n}\n\n<span class=\"hljs-meta\">#[derive(Clone, Debug)]</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">CustomComplexNumber</span> {\n    real: <span class=\"hljs-type\">u64</span>,\n    imag: <span class=\"hljs-type\">u64</span>,\n    f: Rc&lt;CustomFiniteFiled&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">CustomComplexNumber</span> {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>(real: <span class=\"hljs-type\">u64</span>, imag: <span class=\"hljs-type\">u64</span>, f: Rc&lt;CustomFiniteFiled&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">Self</span> { real, imag, f }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">mult_other</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, rhs: &amp;<span class=\"hljs-keyword\">Self</span>) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">tmp</span> = (<span class=\"hljs-keyword\">self</span>.imag * rhs.real + <span class=\"hljs-keyword\">self</span>.real * rhs.imag) % <span class=\"hljs-keyword\">self</span>.f.modulus;\n        <span class=\"hljs-keyword\">self</span>.real = (<span class=\"hljs-keyword\">self</span>.real * rhs.real\n            + ((<span class=\"hljs-keyword\">self</span>.imag * rhs.imag) % <span class=\"hljs-keyword\">self</span>.f.modulus) * <span class=\"hljs-keyword\">self</span>.f.i_square)\n            % <span class=\"hljs-keyword\">self</span>.f.modulus;\n        <span class=\"hljs-keyword\">self</span>.imag = tmp;\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">mult_self</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">tmp</span> = (<span class=\"hljs-keyword\">self</span>.imag * <span class=\"hljs-keyword\">self</span>.real + <span class=\"hljs-keyword\">self</span>.real * <span class=\"hljs-keyword\">self</span>.imag) % <span class=\"hljs-keyword\">self</span>.f.modulus;\n        <span class=\"hljs-keyword\">self</span>.real = (<span class=\"hljs-keyword\">self</span>.real * <span class=\"hljs-keyword\">self</span>.real\n            + ((<span class=\"hljs-keyword\">self</span>.imag * <span class=\"hljs-keyword\">self</span>.imag) % <span class=\"hljs-keyword\">self</span>.f.modulus) * <span class=\"hljs-keyword\">self</span>.f.i_square)\n            % <span class=\"hljs-keyword\">self</span>.f.modulus;\n        <span class=\"hljs-keyword\">self</span>.imag = tmp;\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fast_power</span>(<span class=\"hljs-keyword\">mut</span> base: <span class=\"hljs-keyword\">Self</span>, <span class=\"hljs-keyword\">mut</span> power: <span class=\"hljs-type\">u64</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span> = CustomComplexNumber::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, base.f.<span class=\"hljs-title function_ invoke__\">clone</span>());\n        <span class=\"hljs-keyword\">while</span> power != <span class=\"hljs-number\">0</span> {\n            <span class=\"hljs-title function_ invoke__\">if</span> (power &amp; <span class=\"hljs-number\">1</span>) != <span class=\"hljs-number\">0</span> {\n                result.<span class=\"hljs-title function_ invoke__\">mult_other</span>(&amp;base); <span class=\"hljs-comment\">// result *= base;</span>\n            }\n            base.<span class=\"hljs-title function_ invoke__\">mult_self</span>(); <span class=\"hljs-comment\">// base *= base;</span>\n            power &gt;&gt;= <span class=\"hljs-number\">1</span>;\n        }\n        result\n    }\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">is_residue</span>(x: <span class=\"hljs-type\">u64</span>, modulus: <span class=\"hljs-type\">u64</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">power</span> = (modulus - <span class=\"hljs-number\">1</span>) &gt;&gt; <span class=\"hljs-number\">1</span>;\n    x != <span class=\"hljs-number\">0</span> &amp;&amp; <span class=\"hljs-title function_ invoke__\">fast_power</span>(x <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>, power <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>, modulus <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>) == <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-comment\">// return two solutions (x1, x2) for Quadratic Residue problem x^2 = a (mod p), where p is an odd prime</span>\n<span class=\"hljs-comment\">// if a is Quadratic Nonresidues, return None</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">cipolla</span>(a: <span class=\"hljs-type\">u32</span>, p: <span class=\"hljs-type\">u32</span>, seed: <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">u64</span>&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;(<span class=\"hljs-type\">u32</span>, <span class=\"hljs-type\">u32</span>)&gt; {\n    <span class=\"hljs-comment\">// The params should be kept in u32 range for multiplication overflow issue</span>\n    <span class=\"hljs-comment\">// But inside we use u64 for convenience</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">a</span> = a <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">p</span> = p <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span>;\n    <span class=\"hljs-keyword\">if</span> a == <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>));\n    }\n    <span class=\"hljs-keyword\">if</span> !<span class=\"hljs-title function_ invoke__\">is_residue</span>(a, p) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>;\n    }\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">seed</span> = <span class=\"hljs-keyword\">match</span> seed {\n        <span class=\"hljs-title function_ invoke__\">Some</span>(seed) =&gt; seed,\n        <span class=\"hljs-literal\">None</span> =&gt; SystemTime::<span class=\"hljs-title function_ invoke__\">now</span>()\n            .<span class=\"hljs-title function_ invoke__\">duration_since</span>(UNIX_EPOCH)\n            .<span class=\"hljs-title function_ invoke__\">unwrap</span>()\n            .<span class=\"hljs-title function_ invoke__\">as_secs</span>(),\n    };\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">rng</span> = PCG32::<span class=\"hljs-title function_ invoke__\">new_default</span>(seed);\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">r</span> = <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">r</span> = rng.<span class=\"hljs-title function_ invoke__\">get_u64</span>() % p;\n        <span class=\"hljs-keyword\">if</span> r == <span class=\"hljs-number\">0</span> || !<span class=\"hljs-title function_ invoke__\">is_residue</span>((p + r * r - a) % p, p) {\n            <span class=\"hljs-keyword\">break</span> r;\n        }\n    };\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">filed</span> = Rc::<span class=\"hljs-title function_ invoke__\">new</span>(CustomFiniteFiled::<span class=\"hljs-title function_ invoke__\">new</span>(p, (p + r * r - a) % p));\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">comp</span> = CustomComplexNumber::<span class=\"hljs-title function_ invoke__\">new</span>(r, <span class=\"hljs-number\">1</span>, filed);\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">power</span> = (p + <span class=\"hljs-number\">1</span>) &gt;&gt; <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">x0</span> = CustomComplexNumber::<span class=\"hljs-title function_ invoke__\">fast_power</span>(comp, power).real <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">x1</span> = p <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span> - x0 <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>;\n    <span class=\"hljs-keyword\">if</span> x0 &lt; x1 {\n        <span class=\"hljs-title function_ invoke__\">Some</span>((x0, x1))\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-title function_ invoke__\">Some</span>((x1, x0))\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">small_numbers</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">cipolla</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">43</span>, <span class=\"hljs-literal\">None</span>), <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">42</span>)));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">cipolla</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-literal\">None</span>), <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">18</span>)));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">cipolla</span>(<span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">83</span>, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">42</span>)), <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">73</span>)));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">random_numbers</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">cipolla</span>(<span class=\"hljs-number\">392203</span>, <span class=\"hljs-number\">852167</span>, <span class=\"hljs-literal\">None</span>), <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-number\">413252</span>, <span class=\"hljs-number\">438915</span>)));\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">cipolla</span>(<span class=\"hljs-number\">379606557</span>, <span class=\"hljs-number\">425172197</span>, <span class=\"hljs-literal\">None</span>),\n            <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-number\">143417827</span>, <span class=\"hljs-number\">281754370</span>))\n        );\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">cipolla</span>(<span class=\"hljs-number\">585251669</span>, <span class=\"hljs-number\">892950901</span>, <span class=\"hljs-literal\">None</span>),\n            <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-number\">192354555</span>, <span class=\"hljs-number\">700596346</span>))\n        );\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">cipolla</span>(<span class=\"hljs-number\">404690348</span>, <span class=\"hljs-number\">430183399</span>, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">19260817</span>)),\n            <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-number\">57227138</span>, <span class=\"hljs-number\">372956261</span>))\n        );\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">cipolla</span>(<span class=\"hljs-number\">210205747</span>, <span class=\"hljs-number\">625380647</span>, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">998244353</span>)),\n            <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-number\">76810367</span>, <span class=\"hljs-number\">548570280</span>))\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">no_answer</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">cipolla</span>(<span class=\"hljs-number\">650927</span>, <span class=\"hljs-number\">852167</span>, <span class=\"hljs-literal\">None</span>), <span class=\"hljs-literal\">None</span>);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "itewqq",
      "email": "30570177+itewqq@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}