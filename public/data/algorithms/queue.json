{
  "slug": "queue",
  "name": "Queue",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Data-Structures/Queue/Queue.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures/Queue/Queue.js",
      "code": "<span class=\"hljs-comment\">/* Queue\n* A Queue is a data structure that allows you to add an element to the end of\n* a list and remove the item at the front. A queue follows a FIFO (First In First Out)\n* system, where the first item to enter the queue is the first to be removed,\n* All these operation complexities are O(1).\n* This implementation following the linked list structure.\n*/</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Queue</span> {\n  #size\n\n  <span class=\"hljs-title function_\">constructor</span> () {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span> = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tail</span> = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-variable language_\">this</span>.#size = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">seal</span>(<span class=\"hljs-variable language_\">this</span>)\n  }\n\n  get length () {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.#size\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@description</span> - Add a value to the end of the queue\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">*</span>} <span class=\"hljs-variable\">data</span>\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">number</span>} - The current size of queue\n   */</span>\n  enqueue (data) {\n    <span class=\"hljs-keyword\">const</span> node = { data, <span class=\"hljs-attr\">next</span>: <span class=\"hljs-literal\">null</span> }\n\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span> &amp;&amp; !<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tail</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span> = node\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tail</span> = node\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tail</span>.<span class=\"hljs-property\">next</span> = node\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tail</span> = node\n    }\n\n    <span class=\"hljs-keyword\">return</span> ++<span class=\"hljs-variable language_\">this</span>.#size\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@description</span> - Removes the value at the front of the queue\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">*</span>} - The first data of the queue\n   */</span>\n  dequeue () {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">isEmpty</span>()) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Queue is Empty&#x27;</span>)\n    }\n\n    <span class=\"hljs-keyword\">const</span> firstData = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">peekFirst</span>()\n\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>.<span class=\"hljs-property\">next</span>\n\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tail</span> = <span class=\"hljs-literal\">null</span>\n    }\n\n    <span class=\"hljs-variable language_\">this</span>.#size--\n\n    <span class=\"hljs-keyword\">return</span> firstData\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@description</span> - Return the item at the front of the queue\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">*</span>}\n   */</span>\n  peekFirst () {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">isEmpty</span>()) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Queue is Empty&#x27;</span>)\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>.<span class=\"hljs-property\">data</span>\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@description</span> - Return the item at the tail of the queue\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">*</span>}\n   */</span>\n  peekLast () {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">isEmpty</span>()) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Queue is Empty&#x27;</span>)\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tail</span>.<span class=\"hljs-property\">data</span>\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@description</span> - Return the array of Queue\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">Array&lt;*&gt;</span>}\n   */</span>\n  toArray () {\n    <span class=\"hljs-keyword\">const</span> array = []\n    <span class=\"hljs-keyword\">let</span> node = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>\n\n    <span class=\"hljs-keyword\">while</span> (node) {\n      array.<span class=\"hljs-title function_\">push</span>(node.<span class=\"hljs-property\">data</span>)\n      node = node.<span class=\"hljs-property\">next</span>\n    }\n\n    <span class=\"hljs-keyword\">return</span> array\n  }\n\n  <span class=\"hljs-comment\">/**\n  * <span class=\"hljs-doctag\">@description</span> - Return is queue empty or not\n  * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">boolean</span>}\n  */</span>\n  isEmpty () {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Queue</span>\n"
    },
    "c-plus-plus": {
      "dir": "data_structures/queue.h",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/queue.h",
      "code": "<span class=\"hljs-comment\">/* This class specifies the basic operation on a queue as a linked list */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifndef</span> DATA_STRUCTURES_QUEUE_H_</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> DATA_STRUCTURES_QUEUE_H_</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/** Definition of the node */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Kind</span>&gt;\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span> {\n    Kind data;\n    node&lt;Kind&gt; *next;\n};\n\n<span class=\"hljs-comment\">/** Definition of the queue class */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Kind</span>&gt;\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">queue</span> {\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/** Show queue */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">display</span><span class=\"hljs-params\">()</span> </span>{\n        node&lt;Kind&gt; *current = queueFront;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Front --&gt; &quot;</span>;\n        <span class=\"hljs-keyword\">while</span> (current != <span class=\"hljs-literal\">NULL</span>) {\n            std::cout &lt;&lt; current-&gt;data &lt;&lt; <span class=\"hljs-string\">&quot;    &quot;</span>;\n            current = current-&gt;next;\n        }\n        std::cout &lt;&lt; std::endl;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Size of queue: &quot;</span> &lt;&lt; size &lt;&lt; std::endl;\n    }\n\n    <span class=\"hljs-comment\">/** Default constructor*/</span>\n    <span class=\"hljs-built_in\">queue</span>() {\n        queueFront = <span class=\"hljs-literal\">NULL</span>;\n        queueRear = <span class=\"hljs-literal\">NULL</span>;\n        size = <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">/** Destructor */</span>\n    ~<span class=\"hljs-built_in\">queue</span>() {}\n\n    <span class=\"hljs-comment\">/** Determine whether the queue is empty */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">isEmptyQueue</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> (queueFront == <span class=\"hljs-literal\">NULL</span>); }\n\n    <span class=\"hljs-comment\">/** Add new item to the queue */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">enQueue</span><span class=\"hljs-params\">(Kind item)</span> </span>{\n        node&lt;Kind&gt; *newNode;\n        newNode = <span class=\"hljs-keyword\">new</span> node&lt;Kind&gt;;\n        newNode-&gt;data = item;\n        newNode-&gt;next = <span class=\"hljs-literal\">NULL</span>;\n        <span class=\"hljs-keyword\">if</span> (queueFront == <span class=\"hljs-literal\">NULL</span>) {\n            queueFront = newNode;\n            queueRear = newNode;\n        } <span class=\"hljs-keyword\">else</span> {\n            queueRear-&gt;next = newNode;\n            queueRear = queueRear-&gt;next;\n        }\n        size++;\n    }\n\n    <span class=\"hljs-comment\">/** Return the first element of the queue */</span>\n    <span class=\"hljs-function\">Kind <span class=\"hljs-title\">front</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-built_in\">assert</span>(queueFront != <span class=\"hljs-literal\">NULL</span>);\n        <span class=\"hljs-keyword\">return</span> queueFront-&gt;data;\n    }\n\n    <span class=\"hljs-comment\">/** Remove the top element of the queue */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">deQueue</span><span class=\"hljs-params\">()</span> </span>{\n        node&lt;Kind&gt; *temp;\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">isEmptyQueue</span>()) {\n            temp = queueFront;\n            queueFront = queueFront-&gt;next;\n            <span class=\"hljs-keyword\">delete</span> temp;\n            size--;\n        } <span class=\"hljs-keyword\">else</span> {\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Queue is empty !&quot;</span> &lt;&lt; std::endl;\n        }\n    }\n\n    <span class=\"hljs-comment\">/** Clear queue */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">clear</span><span class=\"hljs-params\">()</span> </span>{ queueFront = <span class=\"hljs-literal\">NULL</span>; }\n\n <span class=\"hljs-keyword\">private</span>:\n    node&lt;Kind&gt; *queueFront; <span class=\"hljs-comment\">/**&lt; Pointer to the front of the queue */</span>\n    node&lt;Kind&gt; *queueRear;  <span class=\"hljs-comment\">/**&lt; Pointer to the rear of the queue  */</span>\n    <span class=\"hljs-type\">int</span> size;\n};\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span>  <span class=\"hljs-comment\">// DATA_STRUCTURES_QUEUE_H_</span></span>\n"
    },
    "c": {
      "dir": "data_structures/graphs/queue.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/graphs/queue.c",
      "code": "<span class=\"hljs-comment\">// Queue ADT implementation ... COMP2521</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;queue.h&quot;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>\n{</span>\n    <span class=\"hljs-type\">int</span> data;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">next</span>;</span>\n} NodeT;\n\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">QueueRep</span>\n{</span>\n    <span class=\"hljs-type\">int</span> length;\n    NodeT *head;\n    NodeT *tail;\n} QueueRep;\n\n<span class=\"hljs-comment\">// set up empty queue</span>\n<span class=\"hljs-built_in\">queue</span> <span class=\"hljs-title function_\">newQueue</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-built_in\">queue</span> Q = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(QueueRep));\n    Q-&gt;length = <span class=\"hljs-number\">0</span>;\n    Q-&gt;head = <span class=\"hljs-literal\">NULL</span>;\n    Q-&gt;tail = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">return</span> Q;\n}\n\n<span class=\"hljs-comment\">// remove unwanted queue</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">dropQueue</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">queue</span> Q)</span>\n{\n    NodeT *curr = Q-&gt;head;\n    <span class=\"hljs-keyword\">while</span> (curr != <span class=\"hljs-literal\">NULL</span>)\n    {\n        NodeT *temp = curr-&gt;next;\n        <span class=\"hljs-built_in\">free</span>(curr);\n        curr = temp;\n    }\n    <span class=\"hljs-built_in\">free</span>(Q);\n}\n\n<span class=\"hljs-comment\">// check whether queue is empty</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">QueueIsEmpty</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">queue</span> Q)</span> { <span class=\"hljs-keyword\">return</span> (Q-&gt;length == <span class=\"hljs-number\">0</span>); }\n\n<span class=\"hljs-comment\">// insert an int at end of queue</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">QueueEnqueue</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">queue</span> Q, <span class=\"hljs-type\">int</span> v)</span>\n{\n    NodeT *new = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(NodeT));\n    assert(new != <span class=\"hljs-literal\">NULL</span>);\n    new-&gt;data = v;\n    new-&gt;next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">if</span> (Q-&gt;tail != <span class=\"hljs-literal\">NULL</span>)\n    {\n        Q-&gt;tail-&gt;next = new;\n        Q-&gt;tail = new;\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        Q-&gt;head = new;\n        Q-&gt;tail = new;\n    }\n    Q-&gt;length++;\n}\n\n<span class=\"hljs-comment\">// remove int from front of queue</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">QueueDequeue</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">queue</span> Q)</span>\n{\n    assert(Q-&gt;length &gt; <span class=\"hljs-number\">0</span>);\n    NodeT *p = Q-&gt;head;\n    Q-&gt;head = Q-&gt;head-&gt;next;\n    <span class=\"hljs-keyword\">if</span> (Q-&gt;head == <span class=\"hljs-literal\">NULL</span>)\n    {\n        Q-&gt;tail = <span class=\"hljs-literal\">NULL</span>;\n    }\n    Q-&gt;length--;\n    <span class=\"hljs-type\">int</span> d = p-&gt;data;\n    <span class=\"hljs-built_in\">free</span>(p);\n    <span class=\"hljs-keyword\">return</span> d;\n}\n\n<span class=\"hljs-comment\">// By</span>\n<span class=\"hljs-comment\">//  .----------------.  .----------------.  .----------------.</span>\n<span class=\"hljs-comment\">//  .-----------------.  .----------------.  .----------------.</span>\n<span class=\"hljs-comment\">// | .--------------. || .--------------. || .--------------. ||</span>\n<span class=\"hljs-comment\">// .--------------. | | .--------------. || .--------------. | | |  _________ |</span>\n<span class=\"hljs-comment\">// || | _____  _____ | || |      __      | || | ____  _____  | | | |  ____  ____</span>\n<span class=\"hljs-comment\">// | || |     ____     | | | | |  _   _  |  | || ||_   _||_   _|| || |     /  \\\n// | || ||_   \\|_   _| | | | | |_   ||   _| | || |   .&#x27;    `.   | | | | |_/ | |</span>\n<span class=\"hljs-comment\">// \\_|  | || |  | |    | |  | || |    / /\\ \\    | || |  |   \\ | |   | | | |   |</span>\n<span class=\"hljs-comment\">// |__| |   | || |  /  .--.  \\  | | | |     | |      | || |  | &#x27;    &#x27; |  | || |</span>\n<span class=\"hljs-comment\">// / ____ \\   | || |  | |\\ \\| |   | | | |   |  __  |   | || |  | |    | |  | |</span>\n<span class=\"hljs-comment\">// | |    _| |_     | || |   \\ `--&#x27; /   | || | _/ /    \\ \\_ | || | _| |_\\   |_</span>\n<span class=\"hljs-comment\">// | | | |  _| |  | |_  | || |  \\  `--&#x27;  /  | | | |   |_____|    | || | `.__.&#x27;</span>\n<span class=\"hljs-comment\">// | || ||____|  |____|| || ||_____|\\____| | | | | |____||____| | || | `.____.&#x27;</span>\n<span class=\"hljs-comment\">// | | | |              | || |              | || |              | || | | | | |</span>\n<span class=\"hljs-comment\">// | || |              | | | &#x27;--------------&#x27; || &#x27;--------------&#x27; ||</span>\n<span class=\"hljs-comment\">// &#x27;--------------&#x27; || &#x27;--------------&#x27; | | &#x27;--------------&#x27; || &#x27;--------------&#x27;</span>\n<span class=\"hljs-comment\">// |</span>\n<span class=\"hljs-comment\">//  &#x27;----------------&#x27;  &#x27;----------------&#x27;  &#x27;----------------&#x27;</span>\n<span class=\"hljs-comment\">//  &#x27;----------------&#x27;   &#x27;----------------&#x27;  &#x27;----------------&#x27;</span>\n\n<span class=\"hljs-comment\">//  Email :    z5261243@unsw.edu.au</span>\n<span class=\"hljs-comment\">//             hhoanhtuann@gmail.com</span>\n"
    },
    "rust": {
      "dir": "src/data_structures/queue.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/data_structures/queue.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::collections::LinkedList;\n\n<span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Queue</span>&lt;T&gt; {\n    elements: LinkedList&lt;T&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Queue&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>() <span class=\"hljs-punctuation\">-&gt;</span> Queue&lt;T&gt; {\n        Queue {\n            elements: LinkedList::<span class=\"hljs-title function_ invoke__\">new</span>(),\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">enqueue</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, value: T) {\n        <span class=\"hljs-keyword\">self</span>.elements.<span class=\"hljs-title function_ invoke__\">push_back</span>(value)\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">dequeue</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;T&gt; {\n        <span class=\"hljs-keyword\">self</span>.elements.<span class=\"hljs-title function_ invoke__\">pop_front</span>()\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">peek_front</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;&amp;T&gt; {\n        <span class=\"hljs-keyword\">self</span>.elements.<span class=\"hljs-title function_ invoke__\">front</span>()\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">len</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\n        <span class=\"hljs-keyword\">self</span>.elements.<span class=\"hljs-title function_ invoke__\">len</span>()\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">is_empty</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">self</span>.elements.<span class=\"hljs-title function_ invoke__\">is_empty</span>()\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Default</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Queue</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">default</span>() <span class=\"hljs-punctuation\">-&gt;</span> Queue&lt;T&gt; {\n        Queue::<span class=\"hljs-title function_ invoke__\">new</span>()\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::Queue;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_enqueue</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">queue</span>: Queue&lt;<span class=\"hljs-type\">u8</span>&gt; = Queue::<span class=\"hljs-title function_ invoke__\">new</span>();\n        queue.<span class=\"hljs-title function_ invoke__\">enqueue</span>(<span class=\"hljs-number\">64</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(queue.<span class=\"hljs-title function_ invoke__\">is_empty</span>(), <span class=\"hljs-literal\">false</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_dequeue</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">queue</span>: Queue&lt;<span class=\"hljs-type\">u8</span>&gt; = Queue::<span class=\"hljs-title function_ invoke__\">new</span>();\n        queue.<span class=\"hljs-title function_ invoke__\">enqueue</span>(<span class=\"hljs-number\">32</span>);\n        queue.<span class=\"hljs-title function_ invoke__\">enqueue</span>(<span class=\"hljs-number\">64</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">retrieved_dequeue</span> = queue.<span class=\"hljs-title function_ invoke__\">dequeue</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(retrieved_dequeue, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">32</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_peek_front</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">queue</span>: Queue&lt;<span class=\"hljs-type\">u8</span>&gt; = Queue::<span class=\"hljs-title function_ invoke__\">new</span>();\n        queue.<span class=\"hljs-title function_ invoke__\">enqueue</span>(<span class=\"hljs-number\">8</span>);\n        queue.<span class=\"hljs-title function_ invoke__\">enqueue</span>(<span class=\"hljs-number\">16</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">retrieved_peek</span> = queue.<span class=\"hljs-title function_ invoke__\">peek_front</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(retrieved_peek, <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;<span class=\"hljs-number\">8</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_size</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">queue</span>: Queue&lt;<span class=\"hljs-type\">u8</span>&gt; = Queue::<span class=\"hljs-title function_ invoke__\">new</span>();\n        queue.<span class=\"hljs-title function_ invoke__\">enqueue</span>(<span class=\"hljs-number\">8</span>);\n        queue.<span class=\"hljs-title function_ invoke__\">enqueue</span>(<span class=\"hljs-number\">16</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">2</span>, queue.<span class=\"hljs-title function_ invoke__\">len</span>());\n    }\n}\n"
    },
    "ruby": {
      "dir": "data_structures/queues/queue.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/queues/queue.rb",
      "code": "<span class=\"hljs-comment\"># A queue is like a waiting list.</span>\n<span class=\"hljs-comment\"># Imagine you are waiting in line to buy the latest Android product</span>\n<span class=\"hljs-comment\"># or getting a parking ticket. These are queues!</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># 1. An array can behave like a Queue if you use the right methods.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># These methods are:</span>\n<span class=\"hljs-comment\"># - unshift: when you unshift, you are adding one item to the queue</span>\n<span class=\"hljs-comment\"># - pop</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ArrayQueue</span>\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">initialize</span>(<span class=\"hljs-params\">queue = []</span>)\n    <span class=\"hljs-variable\">@queue</span> = queue\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">attr_accessor</span> <span class=\"hljs-symbol\">:queue</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">item</span>)\n    queue.unshift(item)\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pop</span>\n    queue.pop\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">peek</span>\n    queue[-<span class=\"hljs-number\">1</span>]\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\nqueue = ArrayQueue.new\nqueue.add(<span class=\"hljs-number\">3</span>)\nqueue.add(<span class=\"hljs-number\">4</span>)\nqueue.add(<span class=\"hljs-number\">5</span>)\n\nputs queue.inspect\n<span class=\"hljs-comment\"># =&gt; #&lt;ArrayQueue:0x00007fc78200f5e0 <span class=\"hljs-doctag\">@queue</span>=[5, 4, 3]&gt;</span>\n\nqueue.pop\n\nputs queue.inspect\n<span class=\"hljs-comment\"># =&gt; #&lt;ArrayQueue:0x00007fc78200f5e0 <span class=\"hljs-doctag\">@queue</span>=[5, 4]&gt;</span>\n\nputs(queue.peek)\n<span class=\"hljs-comment\"># =&gt; 4</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># 2. Ruby Concurrent Queue</span>\n<span class=\"hljs-comment\"># Ruby has a proper thread-safe, blocking, Queue class.</span>\n<span class=\"hljs-comment\"># You can use this queue for coordinating work in a multi-threaded program.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Reference: https://ruby-doc.org/core-2.5.0/Queue.html</span>\n<span class=\"hljs-comment\">#</span>\n\nqueue = Queue.new\n\nqueue &lt;&lt; <span class=\"hljs-number\">1</span>\nqueue &lt;&lt; <span class=\"hljs-number\">2</span>\nqueue &lt;&lt; <span class=\"hljs-number\">3</span>\n\nqueue.pop\n<span class=\"hljs-comment\"># 1</span>\n\nqueue.pop\n<span class=\"hljs-comment\"># 2</span>\n\n<span class=\"hljs-comment\"># If the queue is empty, calling pop will put your current</span>\n<span class=\"hljs-comment\"># thread to sleep &amp; wait until something is added to the queue.</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># 3. How to Use a Ruby SizedQueue</span>\n<span class=\"hljs-comment\"># A sized queue is the same as a regular queue but with a size limit.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Reference: https://ruby-doc.org/core-2.5.0/SizedQueue.html</span>\n<span class=\"hljs-comment\">#</span>\n\nqueue = <span class=\"hljs-title class_\">SizedQueue</span>.new(<span class=\"hljs-number\">5</span>)\n\n<span class=\"hljs-comment\"># When the queue is full, the push (same as &lt;&lt;) operation</span>\n<span class=\"hljs-comment\"># will suspend the current thread until an item is taken off the queue.</span>\n\nqueue.push(<span class=\"hljs-symbol\">:oranges</span>)\nqueue.push(<span class=\"hljs-symbol\">:apples</span>)\nqueue.push(<span class=\"hljs-symbol\">:blue</span>)\nqueue.push(<span class=\"hljs-symbol\">:orange</span>)\nqueue.push(<span class=\"hljs-symbol\">:green</span>)\n<span class=\"hljs-comment\"># At this point, the SizedQueue is full</span>\n\nqueue.push(<span class=\"hljs-symbol\">:throw_expection</span>)\n<span class=\"hljs-comment\"># data_structures/queues/queue.rb:81:in `push&#x27;: No live threads left. Deadlock? (fatal)</span>\n<span class=\"hljs-comment\"># 1 threads, 1 sleeps current:0x00007ff54f407130 main thread:0x00007ff54f407130</span>\n<span class=\"hljs-comment\"># * #&lt;Thread:0x00007ff54f86ef38 sleep_forever&gt;</span>\n<span class=\"hljs-comment\">#    rb_thread_t:0x00007ff54f407130 native:0x000000010dd24dc0 int:0</span>\n<span class=\"hljs-comment\">#    data_structures/queues/queue.rb:81:in `push&#x27;</span>\n<span class=\"hljs-comment\">#    data_structures/queues/queue.rb:81:in `&lt;main&gt;&#x27;</span>\n<span class=\"hljs-comment\"># \tfrom data_structures/queues/queue.rb:81:in `&lt;main&gt;&#x27;</span>\n\n<span class=\"hljs-comment\"># You can choose to raise an exception, passing true as an argument as follows:</span>\nqueue.push(<span class=\"hljs-symbol\">:throw_expection</span>, <span class=\"hljs-literal\">true</span>)\n<span class=\"hljs-comment\"># data_structures/queues/queue.rb:83:in `push&#x27;: queue full (ThreadError)</span>\n<span class=\"hljs-comment\"># \tfrom data_structures/queues/queue.rb:83:in `&lt;main&gt;&#x27;</span>\n"
    },
    "swift": {
      "dir": "data_structures/queue/queue.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/data_structures/queue/queue.swift",
      "code": "<span class=\"hljs-comment\">// Create simple queue</span>\n<span class=\"hljs-comment\">// Tejas Nanaware</span>\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Queue</span>&lt;<span class=\"hljs-title class_\">T</span>&gt; {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> elements: [<span class=\"hljs-type\">T</span>] <span class=\"hljs-operator\">=</span> []\n\n  <span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">value</span>: <span class=\"hljs-type\">T</span>) {\n    elements.append(value)\n  }\n\n  <span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">pop</span>() -&gt; <span class=\"hljs-type\">T</span>? {\n    <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-operator\">!</span>elements.isEmpty <span class=\"hljs-keyword\">else</span> { \n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n    }\n    <span class=\"hljs-keyword\">return</span> elements.removeFirst()\n  }\n}\n\n<span class=\"hljs-keyword\">var</span> queue <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">Queue</span>&lt;<span class=\"hljs-type\">String</span>&gt;()\n\nqueue.push(<span class=\"hljs-string\">&quot;One&quot;</span>)\nqueue.push(<span class=\"hljs-string\">&quot;Two&quot;</span>)\nqueue.push(<span class=\"hljs-string\">&quot;Three&quot;</span>)\n\n<span class=\"hljs-built_in\">print</span>(queue.pop())\n<span class=\"hljs-built_in\">print</span>(queue)\n<span class=\"hljs-built_in\">print</span>(queue.pop())\n<span class=\"hljs-built_in\">print</span>(queue)\n<span class=\"hljs-built_in\">print</span>(queue.pop())\n<span class=\"hljs-built_in\">print</span>(queue)\n"
    }
  },
  "contributors": [
    {
      "name": "Tejas Nanaware",
      "email": "nanawaret@hotmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Ryan Lowe",
      "email": "rlowe13@me.com",
      "commits": 1
    },
    {
      "name": "Aisuko",
      "email": "urakiny@gmail.com",
      "commits": 1
    },
    {
      "name": "Sutthinart Khunvadhana",
      "email": "iakgoog@gmail.com",
      "commits": 1
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Shezza221b",
      "email": "41204318+Shezza221b@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "devraj4522",
      "email": "55313450+devraj4522@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Kyler",
      "email": "KylerSmith",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rail",
      "email": "livechess@yahoo.com",
      "commits": 1
    },
    {
      "name": "Juliano Nunes",
      "email": "julianomarquesnunes@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 2
    },
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 2
    },
    {
      "name": "ttuanho",
      "email": "hhoanhtuann@gmail.com",
      "commits": 2
    },
    {
      "name": "hai dang",
      "email": "haihoangdang91@gmail.com",
      "commits": 2
    },
    {
      "name": "KylerSmith",
      "email": "Kyler@macBookAir.local",
      "commits": 2
    },
    {
      "name": "Fahim Faisaal",
      "email": "57553028+fahimfaisaal@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "YATIN KATHURIA",
      "email": "47096348+Yatin-kathuria@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Josh Vinge",
      "email": "joshvinge@outlook.com",
      "commits": 2
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}