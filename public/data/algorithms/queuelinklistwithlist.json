{
  "slug": "queuelinklistwithlist",
  "name": "Queuelinklistwithlist",
  "categories": [
    "structure",
    "queues"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "structure/queue/queuelinklistwithlist.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/structure/queue/queuelinklistwithlist.go",
      "code": "<span class=\"hljs-comment\">// Queue Linked-List with standard library (Container/List)</span>\n<span class=\"hljs-comment\">// description: based on `geeksforgeeks` description A Queue is a linear structure which follows a particular order in which the operations are performed.</span>\n<span class=\"hljs-comment\">// \tThe order is First In First Out (FIFO).</span>\n<span class=\"hljs-comment\">// details:</span>\n<span class=\"hljs-comment\">// \tQueue Data Structure : https://www.geeksforgeeks.org/queue-data-structure/</span>\n<span class=\"hljs-comment\">//  Queue (abstract data type) : https://en.wikipedia.org/wiki/Queue_(abstract_data_type)</span>\n<span class=\"hljs-comment\">// author [Milad](https://github.com/miraddo)</span>\n<span class=\"hljs-comment\">// see queuearray.go, queuelinkedlist.go, queue_test.go</span>\n\n<span class=\"hljs-keyword\">package</span> queue\n\n<span class=\"hljs-comment\">// container/list: is used as linked-list</span>\n<span class=\"hljs-comment\">// fmt: used to return fmt.Errorf for the error part</span>\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;container/list&quot;</span>\n\t<span class=\"hljs-string\">&quot;fmt&quot;</span>\n)\n\n<span class=\"hljs-comment\">// LQueue will be store the value into the list</span>\n<span class=\"hljs-keyword\">type</span> LQueue <span class=\"hljs-keyword\">struct</span> {\n\tqueue *list.List\n}\n\n<span class=\"hljs-comment\">// Enqueue will be added new value</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(lq *LQueue)</span></span> Enqueue(value any) {\n\tlq.queue.PushBack(value)\n}\n\n<span class=\"hljs-comment\">// Dequeue will be removed the first value that input (First In First Out - FIFO)</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(lq *LQueue)</span></span> Dequeue() <span class=\"hljs-type\">error</span> {\n\n\t<span class=\"hljs-keyword\">if</span> !lq.Empty() {\n\t\telement := lq.queue.Front()\n\t\tlq.queue.Remove(element)\n\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> fmt.Errorf(<span class=\"hljs-string\">&quot;dequeue is empty we got an error&quot;</span>)\n}\n\n<span class=\"hljs-comment\">// Front it will return the front value</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(lq *LQueue)</span></span> Front() (any, <span class=\"hljs-type\">error</span>) {\n\t<span class=\"hljs-keyword\">if</span> !lq.Empty() {\n\t\tval := lq.queue.Front().Value\n\t\t<span class=\"hljs-keyword\">return</span> val, <span class=\"hljs-literal\">nil</span>\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;error queue is empty&quot;</span>)\n}\n\n<span class=\"hljs-comment\">// Back it will return the back value</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(lq *LQueue)</span></span> Back() (any, <span class=\"hljs-type\">error</span>) {\n\t<span class=\"hljs-keyword\">if</span> !lq.Empty() {\n\t\tval := lq.queue.Back().Value\n\t\t<span class=\"hljs-keyword\">return</span> val, <span class=\"hljs-literal\">nil</span>\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;error queue is empty&quot;</span>)\n}\n\n<span class=\"hljs-comment\">// Len it will return the length of list</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(lq *LQueue)</span></span> Len() <span class=\"hljs-type\">int</span> {\n\t<span class=\"hljs-keyword\">return</span> lq.queue.Len()\n}\n\n<span class=\"hljs-comment\">// Empty is check our list is empty or not</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(lq *LQueue)</span></span> Empty() <span class=\"hljs-type\">bool</span> {\n\t<span class=\"hljs-keyword\">return</span> lq.queue.Len() == <span class=\"hljs-number\">0</span>\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ritik Bhandari",
      "email": "ritikbhandari68@gmail.com",
      "commits": 1
    },
    {
      "name": "Milad",
      "email": "14594374+Miraddo@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}