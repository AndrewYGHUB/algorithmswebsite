{
  "slug": "quick-sort",
  "name": "Quick Sort",
  "categories": [
    "sorts"
  ],
  "body": {
    "en": "<h4>Problem Statement</h4>\n<p>Given an unsorted array of n elements, write a function to sort the array</p>\n<h4>Approach</h4>\n<ul>\n<li>Make the right-most index value pivot</li>\n<li>partition the array using pivot value</li>\n<li>quicksort left partition recursively</li>\n<li>quicksort right partition recursively</li>\n</ul>\n<h4>Time Complexity</h4>\n<ul>\n<li><code>O(n^2)</code> Worst case performance</li>\n<li><code>O(n log n)</code> Best-case performance</li>\n<li><code>O(n log n)</code> Average performance</li>\n</ul>\n<h4>Space Complexity</h4>\n<p><code>O(log n)</code> Worst case</p>\n<h4>Founder's Name</h4>\n<p>Tony Hoare in 1959</p>\n<h4>Example</h4>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">arr</span>[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">70</span>}\n<span class=\"hljs-attribute\">Indexes</span>:  <span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">1</span>   <span class=\"hljs-number\">2</span>   <span class=\"hljs-number\">3</span>   <span class=\"hljs-number\">4</span>   <span class=\"hljs-number\">5</span>   <span class=\"hljs-number\">6</span>\n\n<span class=\"hljs-attribute\">low</span> = <span class=\"hljs-number\">0</span>, high =  <span class=\"hljs-number\">6</span>, pivot = arr[h] = <span class=\"hljs-number\">70</span>\n<span class=\"hljs-attribute\">Initialize</span> index of smaller element, i = -<span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-attribute\">Traverse</span> elements from j = low to high-<span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">j</span> = <span class=\"hljs-number\">0</span> : Since arr[j] &#x3C;= pivot, do i++ and swap(arr[i], arr[j])\n<span class=\"hljs-attribute\">i</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">arr</span>[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">70</span>} // No change as i and j\n                                     // <span class=\"hljs-attribute\">are</span> same\n\n<span class=\"hljs-attribute\">j</span> = <span class=\"hljs-number\">1</span> : Since arr[j] > pivot, do nothing\n// <span class=\"hljs-attribute\">No</span> change in i and arr[]\n\n<span class=\"hljs-attribute\">j</span> = <span class=\"hljs-number\">2</span> : Since arr[j] &#x3C;= pivot, do i++ and swap(arr[i], arr[j])\n<span class=\"hljs-attribute\">i</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">arr</span>[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">70</span>} // We swap <span class=\"hljs-number\">80</span> and <span class=\"hljs-number\">30</span>\n\n<span class=\"hljs-attribute\">j</span> = <span class=\"hljs-number\">3</span> : Since arr[j] > pivot, do nothing\n// <span class=\"hljs-attribute\">No</span> change in i and arr[]\n\n<span class=\"hljs-attribute\">j</span> = <span class=\"hljs-number\">4</span> : Since arr[j] &#x3C;= pivot, do i++ and swap(arr[i], arr[j])\n<span class=\"hljs-attribute\">i</span> = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-attribute\">arr</span>[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">70</span>} // <span class=\"hljs-number\">80</span> and <span class=\"hljs-number\">40</span> Swapped\n<span class=\"hljs-attribute\">j</span> = <span class=\"hljs-number\">5</span> : Since arr[j] &#x3C;= pivot, do i++ and swap arr[i] with arr[j]\n<span class=\"hljs-attribute\">i</span> = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-attribute\">arr</span>[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">70</span>} // <span class=\"hljs-number\">90</span> and <span class=\"hljs-number\">50</span> Swapped\n\n<span class=\"hljs-attribute\">We</span> come out of loop because j is now equal to high-<span class=\"hljs-number\">1</span>.\n<span class=\"hljs-attribute\">Finally</span> we place pivot at correct position by swapping\n<span class=\"hljs-attribute\">arr</span>[i+<span class=\"hljs-number\">1</span>] and arr[high] (or pivot)\n<span class=\"hljs-attribute\">arr</span>[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">70</span>, <span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">80</span>} // <span class=\"hljs-number\">80</span> and <span class=\"hljs-number\">70</span> Swapped\n\n<span class=\"hljs-attribute\">Now</span> <span class=\"hljs-number\">70</span> is at its correct place. <span class=\"hljs-literal\">All</span> elements smaller than\n<span class=\"hljs-attribute\">70</span> are before it and <span class=\"hljs-literal\">all</span> elements greater than <span class=\"hljs-number\">70</span> are after\n<span class=\"hljs-attribute\">it</span>.\n</code></pre>\n<h4>Code Implementation Links</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/Sorts/QuickSort.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/Sorting/Quick%20Sort.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/sorts/quick_sort.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/sorting/quicksort.rb\">Ruby</a></li>\n</ul>\n<h4>Video Explanation</h4>\n<p><a href=\"https://www.youtube.com/watch?v=COk73cpQbFQ\">A video explaining the Quick Sort Algorithm</a></p>",
    "es": "<h4>Declaración de problema</h4>\n<p>Dada una matriz no ordenada de n elementos, escriba una función para ordenar la matriz</p>\n<h4>Enfoque</h4>\n<ul>\n<li>Hacer el pivote de valor de índice más correcto</li>\n<li>particionar la matriz utilizando el valor de pivote</li>\n<li>quicksort partición izquierda recursivamente</li>\n<li>quicksort partición derecha recursivamente</li>\n</ul>\n<h4>Complejidad temporal</h4>\n<ul>\n<li><code>O(n^2)</code> Peor rendimiento en el caso</li>\n<li><code>O(n log n)</code> Mejor rendimiento en el caso</li>\n<li><code>O(n log n)</code> Rendimiento medio</li>\n</ul>\n<h4>Complejidad espacial</h4>\n<p><code>O(log n)</code> El peor caso</p>\n<h4>Nombre del Fundador</h4>\n<p>Tony Hoare, en 1959</p>\n<h4>Ejemplo</h4>\n<pre><code class=\"hljs language-markdown\">arr[] = {10, 80, 30, 90, 40, 50, 70}\nÍndices: 0 1 2 3 4 5 6\n\nbajo = 0, alto = 6, pivote = arr[h] = 70\nInicializar el índice de elemento más pequeño, i = -1\n\nAtravesar elementos de j = bajo a alto-1\nj = 0 : Desde arr[j] &#x3C;= pivote, hacer i++ e swap(arr[i], arr[j])\ni = 0\narr[] = {10, 80, 30, 90, 40, 50, 70} // Ningún cambio como i y j\n<span class=\"hljs-code\">                                     son los mismos\n</span>\nj = 1 : Desde arr[j] > pivote, no hagas nada\nSin cambios en i y arr[]\n\nj = 2 : Desde arr[j] &#x3C;= pivote, hacer i++ e swap(arr[i], arr[j])\ni = 1\narr[] = {10, 30, 80, 90, 40, 50, 70} // Intercambiamos 80 y 30\n\nj = 3 : Desde arr[j] > pivote, no hagas nada\nSin cambios en i y arr[]\n\nj = 4 : Desde arr[j] &#x3C;= pivote, hacer i++ e swap(arr[i], arr[j])\ni = 2\narr[] = {10, 30, 40, 90, 80, 50, 70} // 80 y 40 Intercambiados\nj = 5 : Desde arr[j] &#x3C;= pivote, haga i++ e intercambie arr[i] con arr[j]\ni = 3\narr[] = {10, 30, 40, 50, 80, 90, 70} // 90 y 50 Intercambiados\n\nSalimos del bucle porque j es ahora igual a high-1.\nFinalmente colocamos pivote en la posición correcta intercambiando\narr[i+1] y arr[high] (o pivote)\narr[] = {10, 30, 40, 50, 70, 90, 80} // 80 y 70 Intercambiados\n\nAhora 70 está en su lugar correcto. Todos los elementos más pequeños que\n70 están antes y todos los elementos mayores de 70 años están después\neso.\n</code></pre>\n<h4>Enlaces de implementación de código</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/Sorts/QuickSort.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/Sorting/Quick%20Sort.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/sorts/quick_sort.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/sorting/quicksort.rb\">Ruby</a></li>\n</ul>\n<h4>Explicación de vídeo</h4>\n<p><a href=\"https://www.youtube.com/watch?v=COk73cpQbFQ\">Un vídeo explicando el algoritmo de ordenamiento rápido</a></p>"
  },
  "implementations": {
    "python": {
      "dir": "sorts/quick_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/quick_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nA pure Python implementation of the quick sort algorithm\n\nFor doctests run following command:\npython3 -m doctest -v quick_sort.py\n\nFor manual testing run:\npython3 quick_sort.py\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">quick_sort</span>(<span class=\"hljs-params\">collection: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;A pure Python implementation of quick sort algorithm\n\n    :param collection: a mutable collection of comparable items\n    :return: the same collection ordered by ascending\n\n    Examples:\n    &gt;&gt;&gt; quick_sort([0, 5, 3, 2, 2])\n    [0, 2, 2, 3, 5]\n    &gt;&gt;&gt; quick_sort([])\n    []\n    &gt;&gt;&gt; quick_sort([-2, 5, 0, -45])\n    [-45, -2, 0, 5]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(collection) &lt; <span class=\"hljs-number\">2</span>:\n        <span class=\"hljs-keyword\">return</span> collection\n    pivot = collection.pop()  <span class=\"hljs-comment\"># Use the last element as the first pivot</span>\n    greater: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>] = []  <span class=\"hljs-comment\"># All elements greater than pivot</span>\n    lesser: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>] = []  <span class=\"hljs-comment\"># All elements less than or equal to pivot</span>\n    <span class=\"hljs-keyword\">for</span> element <span class=\"hljs-keyword\">in</span> collection:\n        (greater <span class=\"hljs-keyword\">if</span> element &gt; pivot <span class=\"hljs-keyword\">else</span> lesser).append(element)\n    <span class=\"hljs-keyword\">return</span> quick_sort(lesser) + [pivot] + quick_sort(greater)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\n    unsorted = [<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\n    <span class=\"hljs-built_in\">print</span>(quick_sort(unsorted))\n"
    },
    "javascript": {
      "dir": "Sorts/QuickSort.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts/QuickSort.js",
      "code": "<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> <span class=\"hljs-variable\">QuickSort</span>\n * <span class=\"hljs-doctag\">@description</span> Quick sort is a comparison sorting algorithm that uses a divide and conquer strategy.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Integer[]</span>} <span class=\"hljs-variable\">items</span> - Array of integers\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">Integer[]</span>} - Sorted array.\n * <span class=\"hljs-doctag\">@see</span> [QuickSort](https://en.wikipedia.org/wiki/Quicksort)\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">quickSort</span> (items) {\n  <span class=\"hljs-keyword\">const</span> length = items.<span class=\"hljs-property\">length</span>\n\n  <span class=\"hljs-keyword\">if</span> (length &lt;= <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">return</span> items\n  }\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">PIVOT</span> = items[<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">GREATER</span> = []\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">LESSER</span> = []\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; length; i++) {\n    <span class=\"hljs-keyword\">if</span> (items[i] &gt; <span class=\"hljs-variable constant_\">PIVOT</span>) {\n      <span class=\"hljs-variable constant_\">GREATER</span>.<span class=\"hljs-title function_\">push</span>(items[i])\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-variable constant_\">LESSER</span>.<span class=\"hljs-title function_\">push</span>(items[i])\n    }\n  }\n\n  <span class=\"hljs-keyword\">const</span> sorted = [...<span class=\"hljs-title function_\">quickSort</span>(<span class=\"hljs-variable constant_\">LESSER</span>), <span class=\"hljs-variable constant_\">PIVOT</span>, ...<span class=\"hljs-title function_\">quickSort</span>(<span class=\"hljs-variable constant_\">GREATER</span>)]\n  <span class=\"hljs-keyword\">return</span> sorted\n}\n\n<span class=\"hljs-keyword\">export</span> { quickSort }\n"
    },
    "c-plus-plus": {
      "dir": "sorting/quick_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/quick_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Quick sort algorithm\n *\n * Implementation Details -\n *      Quick Sort is a divide and conquer algorithm. It picks and element as\n *      pivot and partition the given array around the picked pivot. There\n *      are many different versions of quickSort that pick pivot in different\n *      ways.\n *\n *      1. Always pick the first element as pivot\n *      2. Always pick the last element as pivot (implemented below)\n *      3. Pick a random element as pivot\n *      4. Pick median as pivot\n *\n *      The key process in quickSort is partition(). Target of partition is,\n *      given an array and an element x(say) of array as pivot, put x at it&#x27;s\n *      correct position in sorted array and put all smaller elements (samller\n *      than x) before x, and put all greater elements (greater than x) after\n *      x. All this should be done in linear time\n *\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdlib&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> sorting {\n<span class=\"hljs-comment\">/**\n *      This function takes last element as pivot, places\n *      the pivot element at its correct position in sorted\n *      array, and places all smaller (smaller than pivot)\n *      to left of pivot and all greater elements to right\n *      of pivot\n *\n */</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">partition</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> high)</span> </span>{\n    <span class=\"hljs-type\">int</span> pivot = arr[high];  <span class=\"hljs-comment\">// taking the last element as pivot</span>\n    <span class=\"hljs-type\">int</span> i = (low - <span class=\"hljs-number\">1</span>);      <span class=\"hljs-comment\">// Index of smaller element</span>\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = low; j &lt; high; j++) {\n        <span class=\"hljs-comment\">// If current element is smaller than or</span>\n        <span class=\"hljs-comment\">// equal to pivot</span>\n        <span class=\"hljs-keyword\">if</span> (arr[j] &lt;= pivot) {\n            i++;  <span class=\"hljs-comment\">// increment index of smaller element</span>\n            <span class=\"hljs-type\">int</span> temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n    <span class=\"hljs-type\">int</span> temp = arr[i + <span class=\"hljs-number\">1</span>];\n    arr[i + <span class=\"hljs-number\">1</span>] = arr[high];\n    arr[high] = temp;\n    <span class=\"hljs-keyword\">return</span> (i + <span class=\"hljs-number\">1</span>);\n}\n\n<span class=\"hljs-comment\">/**\n *      The main function that implements QuickSort\n *      arr[] --&gt; Array to be sorted,\n *      low --&gt; Starting index,\n *      high --&gt; Ending index\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">quickSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> high)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (low &lt; high) {\n        <span class=\"hljs-type\">int</span> p = <span class=\"hljs-built_in\">partition</span>(arr, low, high);\n        <span class=\"hljs-built_in\">quickSort</span>(arr, low, p - <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">quickSort</span>(arr, p + <span class=\"hljs-number\">1</span>, high);\n    }\n}\n\n}  <span class=\"hljs-comment\">// namespace sorting</span>\n\n<span class=\"hljs-keyword\">using</span> sorting::quickSort;\n\n<span class=\"hljs-comment\">// prints the array after sorting</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">show</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> size)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++) std::cout &lt;&lt; arr[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/** Driver program to test above functions */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> size;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the number of elements : &quot;</span>;\n\n    std::cin &gt;&gt; size;\n\n    <span class=\"hljs-type\">int</span> *arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[size];\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the unsorted elements : &quot;</span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; ++i) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n        std::cin &gt;&gt; arr[i];\n    }\n    <span class=\"hljs-built_in\">quickSort</span>(arr, <span class=\"hljs-number\">0</span>, size);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Sorted array\\n&quot;</span>;\n    <span class=\"hljs-built_in\">show</span>(arr, size);\n    <span class=\"hljs-keyword\">delete</span>[] arr;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/sorts/QuickSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/sorts/QuickSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> com.thealgorithms.sorts.SortUtils.*;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> Varun Upadhyay (https://github.com/varunu28)\n * <span class=\"hljs-doctag\">@author</span> Podshivalov Nikita (https://github.com/nikitap492)\n * <span class=\"hljs-doctag\">@see</span> SortAlgorithm\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">QuickSort</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SortAlgorithm</span> {\n\n    <span class=\"hljs-comment\">/**\n     * This method implements the Generic Quick Sort\n     *\n     * <span class=\"hljs-doctag\">@param</span> array The array to be sorted Sorts the array in increasing order\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; T[] sort(T[] array) {\n        doSort(array, <span class=\"hljs-number\">0</span>, array.length - <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">return</span> array;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * The sorting process\n     *\n     * <span class=\"hljs-doctag\">@param</span> left The first index of an array\n     * <span class=\"hljs-doctag\">@param</span> right The last index of an array\n     * <span class=\"hljs-doctag\">@param</span> array The array to be sorted\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doSort</span><span class=\"hljs-params\">(T[] array, <span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right)</span> {\n        <span class=\"hljs-keyword\">if</span> (left &lt; right) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pivot</span> <span class=\"hljs-operator\">=</span> randomPartition(array, left, right);\n            doSort(array, left, pivot - <span class=\"hljs-number\">1</span>);\n            doSort(array, pivot, right);\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Ramdomize the array to avoid the basically ordered sequences\n     *\n     * <span class=\"hljs-doctag\">@param</span> array The array to be sorted\n     * <span class=\"hljs-doctag\">@param</span> left The first index of an array\n     * <span class=\"hljs-doctag\">@param</span> right The last index of an array\n     * <span class=\"hljs-doctag\">@return</span> the partition index of the array\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">randomPartition</span><span class=\"hljs-params\">(T[] array, <span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">randomIndex</span> <span class=\"hljs-operator\">=</span> left + (<span class=\"hljs-type\">int</span>) (Math.random() * (right - left + <span class=\"hljs-number\">1</span>));\n        swap(array, randomIndex, right);\n        <span class=\"hljs-keyword\">return</span> partition(array, left, right);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * This method finds the partition index for an array\n     *\n     * <span class=\"hljs-doctag\">@param</span> array The array to be sorted\n     * <span class=\"hljs-doctag\">@param</span> left The first index of an array\n     * <span class=\"hljs-doctag\">@param</span> right The last index of an array Finds the partition index of an\n     * array\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">partition</span><span class=\"hljs-params\">(T[] array, <span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mid</span> <span class=\"hljs-operator\">=</span> (left + right) &gt;&gt;&gt; <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">pivot</span> <span class=\"hljs-operator\">=</span> array[mid];\n\n        <span class=\"hljs-keyword\">while</span> (left &lt;= right) {\n            <span class=\"hljs-keyword\">while</span> (less(array[left], pivot)) {\n                ++left;\n            }\n            <span class=\"hljs-keyword\">while</span> (less(pivot, array[right])) {\n                --right;\n            }\n            <span class=\"hljs-keyword\">if</span> (left &lt;= right) {\n                swap(array, left, right);\n                ++left;\n                --right;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> left;\n    }\n}\n"
    },
    "c": {
      "dir": "sorting/quick_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/quick_sort.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/*Displays the array, passed to this method*/</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> n)</span>\n{\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, arr[i]);\n    }\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n}\n\n<span class=\"hljs-comment\">/*Swap function to swap two values*/</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *first, <span class=\"hljs-type\">int</span> *second)</span>\n{\n    <span class=\"hljs-type\">int</span> temp = *first;\n    *first = *second;\n    *second = temp;\n}\n\n<span class=\"hljs-comment\">/*Partition method which selects a pivot\n  and places each element which is less than the pivot value to its left\n  and the elements greater than the pivot value to its right\n  arr[] --- array to be partitioned\n  lower --- lower index\n  upper --- upper index\n*/</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">partition</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> lower, <span class=\"hljs-type\">int</span> upper)</span>\n{\n    <span class=\"hljs-type\">int</span> i = (lower - <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-type\">int</span> pivot = arr[upper];  <span class=\"hljs-comment\">// Selects last element as the pivot value</span>\n\n    <span class=\"hljs-type\">int</span> j;\n    <span class=\"hljs-keyword\">for</span> (j = lower; j &lt; upper; j++)\n    {\n        <span class=\"hljs-keyword\">if</span> (arr[j] &lt;= pivot)\n        {  <span class=\"hljs-comment\">// if current element is smaller than the pivot</span>\n\n            i++;  <span class=\"hljs-comment\">// increment the index of smaller element</span>\n            swap(&amp;arr[i], &amp;arr[j]);\n        }\n    }\n\n    swap(&amp;arr[i + <span class=\"hljs-number\">1</span>], &amp;arr[upper]);  <span class=\"hljs-comment\">// places the last element i.e, the pivot</span>\n                                     <span class=\"hljs-comment\">// to its correct position</span>\n\n    <span class=\"hljs-keyword\">return</span> (i + <span class=\"hljs-number\">1</span>);\n}\n\n<span class=\"hljs-comment\">/*This is where the sorting of the array takes place\n    arr[] --- Array to be sorted\n    lower --- Starting index\n    upper --- Ending index\n*/</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">quickSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> lower, <span class=\"hljs-type\">int</span> upper)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (upper &gt; lower)\n    {\n        <span class=\"hljs-comment\">// partitioning index is returned by the partition method , partition</span>\n        <span class=\"hljs-comment\">// element is at its correct poition</span>\n\n        <span class=\"hljs-type\">int</span> partitionIndex = partition(arr, lower, upper);\n\n        <span class=\"hljs-comment\">// Sorting elements before and after the partition index</span>\n        quickSort(arr, lower, partitionIndex - <span class=\"hljs-number\">1</span>);\n        quickSort(arr, partitionIndex + <span class=\"hljs-number\">1</span>, upper);\n    }\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> n;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter size of array:\\n&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);  <span class=\"hljs-comment\">// E.g. 8</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the elements of the array\\n&quot;</span>);\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-type\">int</span> *arr = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>) * n);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;arr[i]);\n    }\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Original array: &quot;</span>);\n    display(arr, n);  <span class=\"hljs-comment\">// Original array : 10 11 9 8 4 7 3 8</span>\n\n    quickSort(arr, <span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Sorted array: &quot;</span>);\n    display(arr, n);  <span class=\"hljs-comment\">// Sorted array : 3 4 7 8 8 9 10 11</span>\n    getchar();\n    <span class=\"hljs-built_in\">free</span>(arr);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "haskell": {
      "dir": "src/Sorts/QuickSort.hs",
      "url": "https://github.com/TheAlgorithms/haskell/tree/master/src/Sorts/QuickSort.hs",
      "code": "<span class=\"hljs-keyword\">module</span> Sorts.QuickSort <span class=\"hljs-keyword\">where</span>\n\n<span class=\"hljs-title\">listToSort</span> :: [<span class=\"hljs-type\">Int</span>]\n<span class=\"hljs-title\">listToSort</span> = [<span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">20</span>]\n\n<span class=\"hljs-title\">quicksort</span> :: (<span class=\"hljs-type\">Ord</span> a) =&gt; [a] -&gt; [a]\n<span class=\"hljs-title\">quicksort</span> [] = [] <span class=\"hljs-comment\">-- Empty list is empty.</span>\n<span class=\"hljs-title\">quicksort</span> [x] = [x] <span class=\"hljs-comment\">-- Singleton list is always trivially sorted.</span>\n<span class=\"hljs-title\">quicksort</span> [x, y] = [(min x y), (max x y)]\n<span class=\"hljs-title\">quicksort</span> (x:xs) =\n  quicksort [a | a &lt;- xs, a &lt;= x] ++ [x] ++ quicksort [a | a &lt;- xs, a &gt; x]\n  <span class=\"hljs-comment\">-- x is the pivot, left quicksort returns smaller sorted and right quicksort bigger sorted</span>\n\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\n    putStrLn $ <span class=\"hljs-string\">&quot;Unsorted: &quot;</span> ++ show listToSort\n    putStrLn $ <span class=\"hljs-string\">&quot;Sorted: &quot;</span> ++ show (quicksort listToSort)\n\n"
    },
    "f-sharp": {
      "dir": "Algorithms/Sort/Quick_Sort.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms/Sort/Quick_Sort.fs",
      "code": "<span class=\"hljs-keyword\">namespace</span> Algorithms.Sort\r\n\r\n<span class=\"hljs-keyword\">module</span> QuickSort <span class=\"hljs-operator\">=</span>\r\n    <span class=\"hljs-keyword\">let</span> Sort lst <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">rec</span> aux l cont <span class=\"hljs-operator\">=</span>\r\n            <span class=\"hljs-keyword\">match</span> l <span class=\"hljs-keyword\">with</span>\r\n            <span class=\"hljs-operator\">|</span> [] <span class=\"hljs-operator\">-&gt;</span> cont []\r\n            <span class=\"hljs-operator\">|</span> pivot <span class=\"hljs-operator\">::</span> rest <span class=\"hljs-operator\">-&gt;</span>\r\n                <span class=\"hljs-keyword\">let</span> left, right <span class=\"hljs-operator\">=</span>\r\n                    rest <span class=\"hljs-operator\">|&gt;</span> List.partition (<span class=\"hljs-keyword\">fun</span> i <span class=\"hljs-operator\">-&gt;</span> i <span class=\"hljs-operator\">&lt;</span> pivot)\r\n\r\n                aux left (<span class=\"hljs-keyword\">fun</span> acc_left <span class=\"hljs-operator\">-&gt;</span> aux right (<span class=\"hljs-keyword\">fun</span> acc_right <span class=\"hljs-operator\">-&gt;</span> cont (acc_left <span class=\"hljs-operator\">@</span> pivot <span class=\"hljs-operator\">::</span> acc_right)))\r\n\r\n        aux lst (<span class=\"hljs-built_in\">id</span>)\r\n"
    },
    "go": {
      "dir": "sort/quicksort.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/sort/quicksort.go",
      "code": "<span class=\"hljs-comment\">// quicksort.go</span>\n<span class=\"hljs-comment\">// description: Implementation of in-place quicksort algorithm</span>\n<span class=\"hljs-comment\">// details:</span>\n<span class=\"hljs-comment\">// A simple in-place quicksort algorithm implementation. [Wikipedia](https://en.wikipedia.org/wiki/Quicksort)</span>\n<span class=\"hljs-comment\">// author(s) [Taj](https://github.com/tjgurwara99)</span>\n<span class=\"hljs-comment\">// see sort_test.go for a test implementation, test function TestQuickSort.</span>\n\n<span class=\"hljs-keyword\">package</span> sort\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;github.com/TheAlgorithms/Go/constraints&quot;</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Partition</span>[<span class=\"hljs-title\">T</span> <span class=\"hljs-title\">constraints</span>.<span class=\"hljs-title\">Ordered</span>]<span class=\"hljs-params\">(arr []T, low, high <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> {\n\tindex := low - <span class=\"hljs-number\">1</span>\n\tpivotElement := arr[high]\n\t<span class=\"hljs-keyword\">for</span> i := low; i &lt; high; i++ {\n\t\t<span class=\"hljs-keyword\">if</span> arr[i] &lt;= pivotElement {\n\t\t\tindex += <span class=\"hljs-number\">1</span>\n\t\t\tarr[index], arr[i] = arr[i], arr[index]\n\t\t}\n\t}\n\tarr[index+<span class=\"hljs-number\">1</span>], arr[high] = arr[high], arr[index+<span class=\"hljs-number\">1</span>]\n\t<span class=\"hljs-keyword\">return</span> index + <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-comment\">// QuicksortRange Sorts the specified range within the array</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">QuicksortRange</span>[<span class=\"hljs-title\">T</span> <span class=\"hljs-title\">constraints</span>.<span class=\"hljs-title\">Ordered</span>]<span class=\"hljs-params\">(arr []T, low, high <span class=\"hljs-type\">int</span>)</span></span> {\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(arr) &lt;= <span class=\"hljs-number\">1</span> {\n\t\t<span class=\"hljs-keyword\">return</span>\n\t}\n\n\t<span class=\"hljs-keyword\">if</span> low &lt; high {\n\t\tpivot := Partition(arr, low, high)\n\t\tQuicksortRange(arr, low, pivot<span class=\"hljs-number\">-1</span>)\n\t\tQuicksortRange(arr, pivot+<span class=\"hljs-number\">1</span>, high)\n\t}\n}\n\n<span class=\"hljs-comment\">// Quicksort Sorts the entire array</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Quicksort</span>[<span class=\"hljs-title\">T</span> <span class=\"hljs-title\">constraints</span>.<span class=\"hljs-title\">Ordered</span>]<span class=\"hljs-params\">(arr []T)</span></span> []T {\n\tQuicksortRange(arr, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(arr)<span class=\"hljs-number\">-1</span>)\n\t<span class=\"hljs-keyword\">return</span> arr\n}\n"
    },
    "rust": {
      "dir": "src/sorting/quick_sort.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/sorting/quick_sort.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::cmp::<span class=\"hljs-built_in\">PartialOrd</span>;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">partition</span>&lt;T: <span class=\"hljs-built_in\">PartialOrd</span>&gt;(arr: &amp;<span class=\"hljs-keyword\">mut</span> [T], lo: <span class=\"hljs-type\">isize</span>, hi: <span class=\"hljs-type\">isize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">isize</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">pivot</span> = hi <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">i</span> = lo - <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">j</span> = hi;\n\n    <span class=\"hljs-keyword\">loop</span> {\n        i += <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">while</span> arr[i <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>] &lt; arr[pivot] {\n            i += <span class=\"hljs-number\">1</span>;\n        }\n        j -= <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">while</span> j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; arr[j <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>] &gt; arr[pivot] {\n            j -= <span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> i &gt;= j {\n            <span class=\"hljs-keyword\">break</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            arr.<span class=\"hljs-title function_ invoke__\">swap</span>(i <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>, j <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>);\n        }\n    }\n    arr.<span class=\"hljs-title function_ invoke__\">swap</span>(i <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>, pivot <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>);\n    i\n}\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">_quick_sort</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(arr: &amp;<span class=\"hljs-keyword\">mut</span> [T], lo: <span class=\"hljs-type\">isize</span>, hi: <span class=\"hljs-type\">isize</span>) {\n    <span class=\"hljs-keyword\">if</span> lo &lt; hi {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">p</span> = <span class=\"hljs-title function_ invoke__\">partition</span>(arr, lo, hi);\n        _quick_sort(arr, lo, p - <span class=\"hljs-number\">1</span>);\n        _quick_sort(arr, p + <span class=\"hljs-number\">1</span>, hi);\n    }\n}\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">quick_sort</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(arr: &amp;<span class=\"hljs-keyword\">mut</span> [T]) {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">len</span> = arr.<span class=\"hljs-title function_ invoke__\">len</span>();\n    _quick_sort(arr, <span class=\"hljs-number\">0</span>, (len - <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">isize</span>);\n}\n"
    },
    "aarch64_assembly": {
      "dir": "sorters/quick_sort.s",
      "url": "https://github.com/TheAlgorithms/aarch64_assembly/tree/master/sorters/quick_sort.s",
      "code": "<span class=\"hljs-comment\">/* ARM assembly AARCH64 Raspberry PI 3B */</span>\n<span class=\"hljs-comment\">/*  program quickSort64.s  */</span>\n \n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* Constantes file                         */</span>\n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeConstantesARM64.inc&quot;</span>\n \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* Initialized data              */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.data</span>\n<span class=\"hljs-symbol\">szMessSortOk:</span>       <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table sorted.\\n&quot;</span>\n<span class=\"hljs-symbol\">szMessSortNok:</span>      <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table not sorted !!!!!.\\n&quot;</span>\n<span class=\"hljs-symbol\">sMessResult:</span>        <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Value  : @ \\n&quot;</span>\n<span class=\"hljs-symbol\">szCarriageReturn:</span>   <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;\\n&quot;</span>\n \n<span class=\"hljs-symbol\">.align</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-symbol\">TableNumber:</span>      .quad   <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">11</span>\n<span class=\"hljs-comment\">#TableNumber:     .quad   10,9,8,7,6,-5,4,3,2,1</span>\n                 <span class=\"hljs-meta\">.equ</span> NBELEMENTS, (. - TableNumber) / <span class=\"hljs-number\">8</span> \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* UnInitialized data            */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.bss</span>\n<span class=\"hljs-symbol\">sZoneConv:</span>       <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">24</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/*  code section                 */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.text</span>\n<span class=\"hljs-symbol\">.global</span> main \n<span class=\"hljs-symbol\">main:</span>                                              <span class=\"hljs-comment\">// entry of program </span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-number\">0</span>                                       <span class=\"hljs-comment\">// first element</span>\n    <span class=\"hljs-keyword\">mov</span> x2,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\n    <span class=\"hljs-keyword\">bl</span> quickSort\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">bl</span> displayTable\n \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">mov</span> x1,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\n    <span class=\"hljs-keyword\">bl</span> isSorted                                    <span class=\"hljs-comment\">// control sort</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">1</span>                                       <span class=\"hljs-comment\">// sorted ?</span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">1</span>f                                    \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortNok                       <span class=\"hljs-comment\">// no !! error sort</span>\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\n<span class=\"hljs-number\">1</span>:                                                 <span class=\"hljs-comment\">// yes</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortOk\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n<span class=\"hljs-number\">100</span>:                                               <span class=\"hljs-comment\">// standard end of the program </span>\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                                       <span class=\"hljs-comment\">// return code</span>\n    <span class=\"hljs-keyword\">mov</span> x8,EXIT                                    <span class=\"hljs-comment\">// request to exit program</span>\n    <span class=\"hljs-keyword\">svc</span> <span class=\"hljs-number\">0</span>                                          <span class=\"hljs-comment\">// perform the system call</span>\n \n<span class=\"hljs-symbol\">qAdrsZoneConv:</span>            .quad sZoneConv\n<span class=\"hljs-symbol\">qAdrszCarriageReturn:</span>     .quad szCarriageReturn\n<span class=\"hljs-symbol\">qAdrsMessResult:</span>          .quad sMessResult\n<span class=\"hljs-symbol\">qAdrTableNumber:</span>          .quad TableNumber\n<span class=\"hljs-symbol\">qAdrszMessSortOk:</span>         .quad szMessSortOk\n<span class=\"hljs-symbol\">qAdrszMessSortNok:</span>        .quad szMessSortNok\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*     control sorted table                                   */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains the number of elements  &gt; 0  */</span>\n<span class=\"hljs-comment\">/* x0 return 0  if not sorted   1  if sorted */</span>\n<span class=\"hljs-symbol\">isSorted:</span>\n    stp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!             <span class=\"hljs-comment\">// save  registers</span>\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!             <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">ldr</span> x4,[x0,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">cmp</span> x2,x1\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">99</span>f\n    <span class=\"hljs-keyword\">ldr</span> x3,[x0,x2, <span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">cmp</span> x3,x4\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">98</span>f\n    <span class=\"hljs-keyword\">mov</span> x4,x3\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b\n<span class=\"hljs-number\">98</span>:\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                       <span class=\"hljs-comment\">// not sorted</span>\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\n<span class=\"hljs-number\">99</span>:\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">1</span>                       <span class=\"hljs-comment\">// sorted</span>\n<span class=\"hljs-number\">100</span>:\n    ldp x3,x4,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/***************************************************/</span>\n<span class=\"hljs-comment\">/*   Appel récursif Tri Rapide quicksort           */</span>\n<span class=\"hljs-comment\">/***************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains index of first item  */</span>\n<span class=\"hljs-comment\">/* x2 contains the number of elements  &gt; 0  */</span>\n<span class=\"hljs-symbol\">quickSort:</span>\n    stp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!             <span class=\"hljs-comment\">// save  registers</span>\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!             <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">str</span> x5,   [<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!             <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">sub</span> x2,x2,<span class=\"hljs-number\">1</span>                     <span class=\"hljs-comment\">// last item index</span>\n    <span class=\"hljs-keyword\">cmp</span> x1,x2                       <span class=\"hljs-comment\">// first &gt; last ? </span>\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">100</span>f                        <span class=\"hljs-comment\">// yes -&gt; end</span>\n    <span class=\"hljs-keyword\">mov</span> x4,x0                       <span class=\"hljs-comment\">// save x0</span>\n    <span class=\"hljs-keyword\">mov</span> x5,x2                       <span class=\"hljs-comment\">// save x2</span>\n    <span class=\"hljs-keyword\">bl</span> partition1                   <span class=\"hljs-comment\">// cutting into 2 parts</span>\n    <span class=\"hljs-keyword\">mov</span> x2,x0                       <span class=\"hljs-comment\">// index partition</span>\n    <span class=\"hljs-keyword\">mov</span> x0,x4                       <span class=\"hljs-comment\">// table address</span>\n    <span class=\"hljs-keyword\">bl</span> quickSort                    <span class=\"hljs-comment\">// sort lower part</span>\n    <span class=\"hljs-keyword\">add</span> x1,x2,<span class=\"hljs-number\">1</span>                     <span class=\"hljs-comment\">// index begin = index partition + 1</span>\n    <span class=\"hljs-keyword\">add</span> x2,x5,<span class=\"hljs-number\">1</span>                     <span class=\"hljs-comment\">// number of elements</span>\n    <span class=\"hljs-keyword\">bl</span> quickSort                    <span class=\"hljs-comment\">// sort higter part</span>\n \n <span class=\"hljs-number\">100</span>:                               <span class=\"hljs-comment\">// end function</span>\n    <span class=\"hljs-keyword\">ldr</span> x5,   [<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  1 register</span>\n    ldp x3,x4,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                             <span class=\"hljs-comment\">// return to address lr x30</span>\n \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*      Partition table elements                                */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains index of first item  */</span>\n<span class=\"hljs-comment\">/* x2 contains index of last item   */</span>\n<span class=\"hljs-symbol\">partition1:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!             <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!             <span class=\"hljs-comment\">// save  registers</span>\n    stp x4,x5,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!             <span class=\"hljs-comment\">// save  registers</span>\n    stp x6,x7,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!             <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">ldr</span> x3,[x0,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]            <span class=\"hljs-comment\">// load value last index</span>\n    <span class=\"hljs-keyword\">mov</span> x4,x1                       <span class=\"hljs-comment\">// init with first index</span>\n    <span class=\"hljs-keyword\">mov</span> x5,x1                       <span class=\"hljs-comment\">// init with first index</span>\n<span class=\"hljs-number\">1</span>:                                  <span class=\"hljs-comment\">// begin loop</span>\n    <span class=\"hljs-keyword\">ldr</span> x6,[x0,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]            <span class=\"hljs-comment\">// load value</span>\n    <span class=\"hljs-keyword\">cmp</span> x6,x3                       <span class=\"hljs-comment\">// compare value</span>\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">2</span>f\n    <span class=\"hljs-keyword\">ldr</span> x7,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]            <span class=\"hljs-comment\">// if &lt; swap value table</span>\n    <span class=\"hljs-keyword\">str</span> x6,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">str</span> x7,[x0,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">add</span> x4,x4,<span class=\"hljs-number\">1</span>                     <span class=\"hljs-comment\">// and increment index 1</span>\n<span class=\"hljs-number\">2</span>:\n    <span class=\"hljs-keyword\">add</span> x5,x5,<span class=\"hljs-number\">1</span>                     <span class=\"hljs-comment\">// increment index 2</span>\n    <span class=\"hljs-keyword\">cmp</span> x5,x2                       <span class=\"hljs-comment\">// end ?</span>\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">1</span>b                          <span class=\"hljs-comment\">// no loop</span>\n    <span class=\"hljs-keyword\">ldr</span> x7,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]            <span class=\"hljs-comment\">// swap value</span>\n    <span class=\"hljs-keyword\">str</span> x3,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">str</span> x7,[x0,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">mov</span> x0,x4                       <span class=\"hljs-comment\">// return index partition</span>\n<span class=\"hljs-number\">100</span>:\n    ldp x6,x7,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x4,x5,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                             <span class=\"hljs-comment\">// return to address lr x30</span>\n \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*      Display table elements                                */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-symbol\">displayTable:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x2,x0                        <span class=\"hljs-comment\">// table address</span>\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">1</span>:                                   <span class=\"hljs-comment\">// loop display table</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,[x2,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\n    <span class=\"hljs-keyword\">bl</span> conversion10S                  <span class=\"hljs-comment\">// décimal conversion</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrsMessResult\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\n    <span class=\"hljs-keyword\">bl</span> strInsertAtCharInc            <span class=\"hljs-comment\">// insert result at // character</span>\n    <span class=\"hljs-keyword\">bl</span> affichageMess                 <span class=\"hljs-comment\">// display message</span>\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">cmp</span> x3,NBELEMENTS - <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">1</span>b\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszCarriageReturn\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n    <span class=\"hljs-keyword\">mov</span> x0,x2\n<span class=\"hljs-number\">100</span>:\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                             <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/*        File Include fonctions                        */</span>\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeARM64.inc&quot;</span>\n"
    },
    "dart": {
      "dir": "sort/quick_Sort.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/sort/quick_Sort.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;dart:math&#x27;</span> <span class=\"hljs-keyword\">show</span> Random;\r\n\r\n<span class=\"hljs-comment\">// quickSort</span>\r\n<span class=\"hljs-comment\">// O(n*log n)</span>\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  <span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt;();\r\n  Random random = <span class=\"hljs-keyword\">new</span> Random();\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) {\r\n    list.add(random.nextInt(<span class=\"hljs-number\">100</span>));\r\n  }\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;before sorting:&#x27;</span>);\r\n  <span class=\"hljs-built_in\">print</span>(list);\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;---------------------------------------------&#x27;</span>);\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;After sorting:&#x27;</span>);\r\n  <span class=\"hljs-built_in\">print</span>(quickSort(list));\r\n}\r\n\r\n<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; quickSort(<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; a) {\r\n  <span class=\"hljs-keyword\">if</span> (a.length &lt; <span class=\"hljs-number\">2</span>) {\r\n    <span class=\"hljs-keyword\">return</span> a;\r\n  } <span class=\"hljs-keyword\">else</span> {\r\n    <span class=\"hljs-keyword\">var</span> pivot = a[<span class=\"hljs-number\">0</span>];\r\n    <span class=\"hljs-keyword\">var</span> less = &lt;<span class=\"hljs-built_in\">int</span>&gt;[];\r\n    <span class=\"hljs-keyword\">var</span> greater = &lt;<span class=\"hljs-built_in\">int</span>&gt;[];\r\n    a.removeAt(<span class=\"hljs-number\">0</span>);\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i <span class=\"hljs-keyword\">in</span> a) {\r\n      <span class=\"hljs-keyword\">if</span> (i &lt;= pivot) {\r\n        less.add(i);\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n        greater.add(i);\r\n      }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> quickSort(less) + [pivot] + quickSort(greater);\r\n  }\r\n}\r\n"
    },
    "r": {
      "dir": "Sorting-Algorithms/quick_sort.R",
      "url": "https://github.com/TheAlgorithms/r/tree/master/Sorting-Algorithms/quick_sort.R",
      "code": "<span class=\"hljs-comment\"># Quick sort in R:</span>\n\nquick.sort <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-keyword\">if</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">&lt;=</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span>\n  <span class=\"hljs-punctuation\">}</span>\n  pivot <span class=\"hljs-operator\">&lt;-</span> elements.vec<span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">]</span>\n  non.pivot  <span class=\"hljs-operator\">&lt;-</span> elements.vec<span class=\"hljs-punctuation\">[</span><span class=\"hljs-operator\">-</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">]</span>\n  pivot_less    <span class=\"hljs-operator\">&lt;-</span> quick.sort<span class=\"hljs-punctuation\">(</span>non.pivot<span class=\"hljs-punctuation\">[</span>non.pivot <span class=\"hljs-operator\">&lt;</span> pivot<span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">)</span>\n  pivot_greater <span class=\"hljs-operator\">&lt;-</span> quick.sort<span class=\"hljs-punctuation\">(</span>non.pivot<span class=\"hljs-punctuation\">[</span>non.pivot <span class=\"hljs-operator\">&gt;=</span> pivot<span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">)</span>\n  <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">c</span><span class=\"hljs-punctuation\">(</span>pivot_less<span class=\"hljs-punctuation\">,</span> pivot<span class=\"hljs-punctuation\">,</span> pivot_greater<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span>\n<span class=\"hljs-punctuation\">}</span>\n\n<span class=\"hljs-comment\"># Example:</span>\n<span class=\"hljs-comment\"># quick.sort(c(5, 2, 3, 1, 1, 4)) </span>\n<span class=\"hljs-comment\"># [1] 1 1 2 3 4 5</span>\n\n<span class=\"hljs-comment\"># Notes:</span>\n<span class=\"hljs-comment\"># 1. Quick sort is not a stable sorting algorithm.</span>\n<span class=\"hljs-comment\"># 2. It is implemented in the &#x27;sort&#x27; function of base R:</span>\n<span class=\"hljs-comment\"># sort(c(5, 2, 3, 1, 1, 4), method = &quot;quick&quot; , index.return = FALSE)</span>\n<span class=\"hljs-comment\"># [1] 1 1 2 3 4 5</span>\n"
    },
    "ruby": {
      "dir": "sorting/quicksort.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/sorting/quicksort.rb",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">quicksort</span>(<span class=\"hljs-params\">arr</span>)\n  <span class=\"hljs-keyword\">return</span> [] <span class=\"hljs-keyword\">if</span> arr.empty?\n\n  <span class=\"hljs-comment\"># chose a random pivot value</span>\n  pivot = arr.delete_at(rand(arr.size))\n  <span class=\"hljs-comment\"># partition array into 2 arrays and comparing them to each other and eventually returning</span>\n  <span class=\"hljs-comment\"># array with the pivot value sorted</span>\n  left, right = arr.partition(&amp;pivot.method(<span class=\"hljs-symbol\">:&gt;</span>))\n\n  <span class=\"hljs-comment\"># recursively calling the quicksort method on itself</span>\n  [*quicksort(left), pivot, *quicksort(right)]\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">$0</span> == <span class=\"hljs-variable constant_\">__FILE__</span>\n  puts <span class=\"hljs-string\">&#x27;Enter a list of numbers separated by space&#x27;</span>\n\n  list = gets.split.map(&amp;<span class=\"hljs-symbol\">:to_i</span>)\n  p quicksort(list)\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "php": {
      "dir": "sorting/quickSort.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/sorting/quickSort.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-comment\">/*\n * Quick Sort\n * Compare number in an array to the next number and sets to new array (greater than or less than)\n */</span>\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@param</span> array $input array of random numbers\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">quickSort</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$input</span></span>)\n</span>{\n    <span class=\"hljs-comment\">/* Return nothing if input is empty */</span>\n    <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$input</span>))\n    {\n        <span class=\"hljs-keyword\">return</span> [];\n    }\n\n    <span class=\"hljs-variable\">$lt</span> = [];\n    <span class=\"hljs-variable\">$gt</span> = [];\n\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title function_ invoke__\">sizeof</span>(<span class=\"hljs-variable\">$input</span>) &lt; <span class=\"hljs-number\">2</span>)\n    {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$input</span>;\n    }\n\n    <span class=\"hljs-variable\">$key</span> = <span class=\"hljs-title function_ invoke__\">key</span>(<span class=\"hljs-variable\">$input</span>);\n    <span class=\"hljs-variable\">$shift</span> = <span class=\"hljs-title function_ invoke__\">array_shift</span>(<span class=\"hljs-variable\">$input</span>);\n\n    <span class=\"hljs-keyword\">foreach</span>(<span class=\"hljs-variable\">$input</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$value</span>)\n    {\n        <span class=\"hljs-variable\">$value</span> &lt;= <span class=\"hljs-variable\">$shift</span> ? <span class=\"hljs-variable\">$lt</span>[] = <span class=\"hljs-variable\">$value</span> : <span class=\"hljs-variable\">$gt</span>[] = <span class=\"hljs-variable\">$value</span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">array_merge</span>(<span class=\"hljs-title function_ invoke__\">quickSort</span>(<span class=\"hljs-variable\">$lt</span>), [<span class=\"hljs-variable\">$key</span> =&gt; <span class=\"hljs-variable\">$shift</span>], <span class=\"hljs-title function_ invoke__\">quickSort</span>(<span class=\"hljs-variable\">$gt</span>));\n}\n\n<span class=\"hljs-comment\">/*\n * Test quickSort\n */</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">51158</span>,<span class=\"hljs-number\">1856</span>,<span class=\"hljs-number\">8459</span>,<span class=\"hljs-number\">67957</span>,<span class=\"hljs-number\">59748</span>,<span class=\"hljs-number\">58213</span>,<span class=\"hljs-number\">90876</span>,<span class=\"hljs-number\">39621</span>,<span class=\"hljs-number\">66570</span>,<span class=\"hljs-number\">64204</span>,<span class=\"hljs-number\">79935</span>,<span class=\"hljs-number\">27892</span>,<span class=\"hljs-number\">47615</span>,<span class=\"hljs-number\">94706</span>,<span class=\"hljs-number\">34201</span>,<span class=\"hljs-number\">74474</span>,<span class=\"hljs-number\">63968</span>,<span class=\"hljs-number\">4337</span>,<span class=\"hljs-number\">43688</span>,<span class=\"hljs-number\">42685</span>,<span class=\"hljs-number\">31577</span>,<span class=\"hljs-number\">5239</span>,<span class=\"hljs-number\">25385</span>,<span class=\"hljs-number\">56301</span>,<span class=\"hljs-number\">94083</span>,<span class=\"hljs-number\">23232</span>,<span class=\"hljs-number\">67025</span>,<span class=\"hljs-number\">44044</span>,<span class=\"hljs-number\">74813</span>,<span class=\"hljs-number\">34671</span>,<span class=\"hljs-number\">90235</span>,<span class=\"hljs-number\">65764</span>,<span class=\"hljs-number\">49709</span>,<span class=\"hljs-number\">12440</span>,<span class=\"hljs-number\">21165</span>,<span class=\"hljs-number\">20620</span>,<span class=\"hljs-number\">38265</span>,<span class=\"hljs-number\">12973</span>,<span class=\"hljs-number\">25236</span>,<span class=\"hljs-number\">93144</span>,<span class=\"hljs-number\">13720</span>,<span class=\"hljs-number\">4204</span>,<span class=\"hljs-number\">77026</span>,<span class=\"hljs-number\">42348</span>,<span class=\"hljs-number\">19756</span>,<span class=\"hljs-number\">97222</span>,<span class=\"hljs-number\">78828</span>,<span class=\"hljs-number\">73437</span>,<span class=\"hljs-number\">48208</span>,<span class=\"hljs-number\">69858</span>,<span class=\"hljs-number\">19713</span>,<span class=\"hljs-number\">29411</span>,<span class=\"hljs-number\">49809</span>,<span class=\"hljs-number\">66174</span>,<span class=\"hljs-number\">5257</span>,<span class=\"hljs-number\">43340</span>,<span class=\"hljs-number\">40565</span>,<span class=\"hljs-number\">9592</span>,<span class=\"hljs-number\">52328</span>,<span class=\"hljs-number\">16677</span>,<span class=\"hljs-number\">38386</span>,<span class=\"hljs-number\">55416</span>,<span class=\"hljs-number\">99519</span>,<span class=\"hljs-number\">13732</span>,<span class=\"hljs-number\">84076</span>,<span class=\"hljs-number\">52905</span>,<span class=\"hljs-number\">47662</span>,<span class=\"hljs-number\">31805</span>,<span class=\"hljs-number\">46184</span>,<span class=\"hljs-number\">2811</span>,<span class=\"hljs-number\">35374</span>,<span class=\"hljs-number\">50800</span>,<span class=\"hljs-number\">53635</span>,<span class=\"hljs-number\">51886</span>,<span class=\"hljs-number\">49052</span>,<span class=\"hljs-number\">75197</span>,<span class=\"hljs-number\">3720</span>,<span class=\"hljs-number\">75045</span>,<span class=\"hljs-number\">28309</span>,<span class=\"hljs-number\">63771</span>,<span class=\"hljs-number\">71526</span>,<span class=\"hljs-number\">16122</span>,<span class=\"hljs-number\">36625</span>,<span class=\"hljs-number\">44654</span>,<span class=\"hljs-number\">86814</span>,<span class=\"hljs-number\">98845</span>,<span class=\"hljs-number\">44637</span>,<span class=\"hljs-number\">54955</span>,<span class=\"hljs-number\">24714</span>,<span class=\"hljs-number\">81960</span>,<span class=\"hljs-number\">78095</span>,<span class=\"hljs-number\">49048</span>,<span class=\"hljs-number\">99711</span>,<span class=\"hljs-number\">272</span>,<span class=\"hljs-number\">45755</span>,<span class=\"hljs-number\">31919</span>,<span class=\"hljs-number\">8181</span>,<span class=\"hljs-number\">1392</span>,<span class=\"hljs-number\">15352</span>,<span class=\"hljs-number\">82656</span>,<span class=\"hljs-number\">27760</span>,<span class=\"hljs-number\">18362</span>,<span class=\"hljs-number\">43780</span>,<span class=\"hljs-number\">50209</span>,<span class=\"hljs-number\">51433</span>,<span class=\"hljs-number\">2847</span>,<span class=\"hljs-number\">62310</span>,<span class=\"hljs-number\">87450</span>,<span class=\"hljs-number\">22874</span>,<span class=\"hljs-number\">40789</span>,<span class=\"hljs-number\">56841</span>,<span class=\"hljs-number\">52928</span>,<span class=\"hljs-number\">5523</span>,<span class=\"hljs-number\">76474</span>,<span class=\"hljs-number\">8935</span>,<span class=\"hljs-number\">63245</span>,<span class=\"hljs-number\">16387</span>,<span class=\"hljs-number\">21746</span>,<span class=\"hljs-number\">47596</span>,<span class=\"hljs-number\">84402</span>,<span class=\"hljs-number\">49168</span>,<span class=\"hljs-number\">58223</span>,<span class=\"hljs-number\">26993</span>,<span class=\"hljs-number\">55908</span>,<span class=\"hljs-number\">92837</span>,<span class=\"hljs-number\">64208</span>,<span class=\"hljs-number\">86309</span>,<span class=\"hljs-number\">30819</span>,<span class=\"hljs-number\">83638</span>,<span class=\"hljs-number\">9508</span>,<span class=\"hljs-number\">44628</span>,<span class=\"hljs-number\">10786</span>,<span class=\"hljs-number\">68125</span>,<span class=\"hljs-number\">14123</span>,<span class=\"hljs-number\">70474</span>,<span class=\"hljs-number\">50596</span>,<span class=\"hljs-number\">44518</span>,<span class=\"hljs-number\">74872</span>,<span class=\"hljs-number\">61968</span>,<span class=\"hljs-number\">36828</span>,<span class=\"hljs-number\">17860</span>,<span class=\"hljs-number\">4605</span>,<span class=\"hljs-number\">68756</span>,<span class=\"hljs-number\">86070</span>,<span class=\"hljs-number\">52068</span>,<span class=\"hljs-number\">51830</span>,<span class=\"hljs-number\">56992</span>,<span class=\"hljs-number\">45799</span>,<span class=\"hljs-number\">42422</span>,<span class=\"hljs-number\">68514</span>,<span class=\"hljs-number\">92559</span>,<span class=\"hljs-number\">40206</span>,<span class=\"hljs-number\">31263</span>,<span class=\"hljs-number\">71774</span>,<span class=\"hljs-number\">14202</span>,<span class=\"hljs-number\">94807</span>,<span class=\"hljs-number\">25774</span>,<span class=\"hljs-number\">15003</span>,<span class=\"hljs-number\">54211</span>,<span class=\"hljs-number\">18708</span>,<span class=\"hljs-number\">32074</span>,<span class=\"hljs-number\">43836</span>,<span class=\"hljs-number\">48964</span>,<span class=\"hljs-number\">40742</span>,<span class=\"hljs-number\">26281</span>,<span class=\"hljs-number\">67338</span>,<span class=\"hljs-number\">75786</span>,<span class=\"hljs-number\">34925</span>,<span class=\"hljs-number\">34649</span>,<span class=\"hljs-number\">45519</span>,<span class=\"hljs-number\">72472</span>,<span class=\"hljs-number\">80188</span>,<span class=\"hljs-number\">40858</span>,<span class=\"hljs-number\">83246</span>,<span class=\"hljs-number\">92215</span>,<span class=\"hljs-number\">66178</span>,<span class=\"hljs-number\">67452</span>,<span class=\"hljs-number\">86198</span>,<span class=\"hljs-number\">82300</span>,<span class=\"hljs-number\">45894</span>,<span class=\"hljs-number\">97156</span>,<span class=\"hljs-number\">73907</span>,<span class=\"hljs-number\">31159</span>,<span class=\"hljs-number\">7018</span>,<span class=\"hljs-number\">55549</span>,<span class=\"hljs-number\">35245</span>,<span class=\"hljs-number\">68975</span>,<span class=\"hljs-number\">88246</span>,<span class=\"hljs-number\">14098</span>,<span class=\"hljs-number\">59973</span>,<span class=\"hljs-number\">7762</span>,<span class=\"hljs-number\">40459</span>,<span class=\"hljs-number\">86358</span>,<span class=\"hljs-number\">63178</span>,<span class=\"hljs-number\">47489</span>,<span class=\"hljs-number\">55515</span>,<span class=\"hljs-number\">79488</span>,<span class=\"hljs-number\">46528</span>,<span class=\"hljs-number\">99272</span>,<span class=\"hljs-number\">10867</span>,<span class=\"hljs-number\">75190</span>,<span class=\"hljs-number\">56963</span>,<span class=\"hljs-number\">5520</span>,<span class=\"hljs-number\">56494</span>,<span class=\"hljs-number\">42310</span>,<span class=\"hljs-number\">40171</span>,<span class=\"hljs-number\">78105</span>,<span class=\"hljs-number\">29724</span>,<span class=\"hljs-number\">30110</span>,<span class=\"hljs-number\">28493</span>,<span class=\"hljs-number\">36141</span>,<span class=\"hljs-number\">22479</span>,<span class=\"hljs-number\">85799</span>,<span class=\"hljs-number\">70466</span>,<span class=\"hljs-number\">92106</span>,<span class=\"hljs-number\">16868</span>,<span class=\"hljs-number\">57402</span>,<span class=\"hljs-number\">4813</span>,<span class=\"hljs-number\">47432</span>,<span class=\"hljs-number\">24689</span>,<span class=\"hljs-number\">78533</span>,<span class=\"hljs-number\">97577</span>,<span class=\"hljs-number\">32178</span>,<span class=\"hljs-number\">30258</span>,<span class=\"hljs-number\">82785</span>,<span class=\"hljs-number\">56063</span>,<span class=\"hljs-number\">76277</span>,<span class=\"hljs-number\">96407</span>,<span class=\"hljs-number\">77849</span>,<span class=\"hljs-number\">1807</span>,<span class=\"hljs-number\">45344</span>,<span class=\"hljs-number\">30298</span>,<span class=\"hljs-number\">18158</span>,<span class=\"hljs-number\">49935</span>,<span class=\"hljs-number\">90728</span>,<span class=\"hljs-number\">22192</span>,<span class=\"hljs-number\">36852</span>,<span class=\"hljs-number\">33982</span>,<span class=\"hljs-number\">66206</span>,<span class=\"hljs-number\">30948</span>,<span class=\"hljs-number\">40372</span>,<span class=\"hljs-number\">33446</span>,<span class=\"hljs-number\">99156</span>,<span class=\"hljs-number\">28651</span>,<span class=\"hljs-number\">61591</span>,<span class=\"hljs-number\">79028</span>,<span class=\"hljs-number\">1689</span>,<span class=\"hljs-number\">94257</span>,<span class=\"hljs-number\">32158</span>,<span class=\"hljs-number\">11122</span>,<span class=\"hljs-number\">81097</span>,<span class=\"hljs-number\">57981</span>,<span class=\"hljs-number\">26277</span>,<span class=\"hljs-number\">7515</span>,<span class=\"hljs-number\">7873</span>,<span class=\"hljs-number\">8350</span>,<span class=\"hljs-number\">28229</span>,<span class=\"hljs-number\">24105</span>,<span class=\"hljs-number\">76818</span>,<span class=\"hljs-number\">86897</span>,<span class=\"hljs-number\">18456</span>,<span class=\"hljs-number\">29373</span>,<span class=\"hljs-number\">7853</span>,<span class=\"hljs-number\">24932</span>,<span class=\"hljs-number\">93070</span>,<span class=\"hljs-number\">4696</span>,<span class=\"hljs-number\">63015</span>,<span class=\"hljs-number\">9358</span>,<span class=\"hljs-number\">28302</span>,<span class=\"hljs-number\">3938</span>,<span class=\"hljs-number\">11754</span>,<span class=\"hljs-number\">33679</span>,<span class=\"hljs-number\">18492</span>,<span class=\"hljs-number\">91503</span>,<span class=\"hljs-number\">63395</span>,<span class=\"hljs-number\">12029</span>,<span class=\"hljs-number\">23954</span>,<span class=\"hljs-number\">27230</span>,<span class=\"hljs-number\">58336</span>,<span class=\"hljs-number\">16544</span>,<span class=\"hljs-number\">23606</span>,<span class=\"hljs-number\">61349</span>,<span class=\"hljs-number\">37348</span>,<span class=\"hljs-number\">78629</span>,<span class=\"hljs-number\">96145</span>,<span class=\"hljs-number\">57954</span>,<span class=\"hljs-number\">32392</span>,<span class=\"hljs-number\">76201</span>,<span class=\"hljs-number\">54616</span>,<span class=\"hljs-number\">59992</span>,<span class=\"hljs-number\">5676</span>,<span class=\"hljs-number\">97799</span>,<span class=\"hljs-number\">47910</span>,<span class=\"hljs-number\">98758</span>,<span class=\"hljs-number\">75043</span>,<span class=\"hljs-number\">72849</span>,<span class=\"hljs-number\">6466</span>,<span class=\"hljs-number\">68831</span>,<span class=\"hljs-number\">2246</span>,<span class=\"hljs-number\">69091</span>,<span class=\"hljs-number\">22296</span>,<span class=\"hljs-number\">6506</span>,<span class=\"hljs-number\">93729</span>,<span class=\"hljs-number\">86968</span>,<span class=\"hljs-number\">39583</span>,<span class=\"hljs-number\">46186</span>,<span class=\"hljs-number\">96782</span>,<span class=\"hljs-number\">19074</span>,<span class=\"hljs-number\">46574</span>,<span class=\"hljs-number\">46704</span>,<span class=\"hljs-number\">99211</span>,<span class=\"hljs-number\">55295</span>,<span class=\"hljs-number\">33963</span>,<span class=\"hljs-number\">77977</span>,<span class=\"hljs-number\">86805</span>,<span class=\"hljs-number\">72686</span>];\n\n<span class=\"hljs-variable\">$array</span> = <span class=\"hljs-title function_ invoke__\">quickSort</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">implode</span>(<span class=\"hljs-string\">&#x27;,&#x27;</span>, <span class=\"hljs-variable\">$array</span>);"
    },
    "elixir": {
      "dir": "lib/sorting/quick_sort.ex",
      "url": "https://github.com/TheAlgorithms/elixir/tree/master/lib/sorting/quick_sort.ex",
      "code": "<span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">Algorithms.Sorting.QuickSort</span></span> <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-variable\">@moduledoc</span> <span class=\"hljs-string\">&quot;&quot;&quot;\n  Implementation of QuickSort algorithm (https://en.wikipedia.org/wiki/Quicksort)\n\n  You will be given an array of numbers, you have to sort numbers in ascending order\n  using quick sort algorithm.\n\n  Quick sort algorithm uses a divide and conquer strategy.\n  It takes a pivot, and sort other numbers in functions of the pivot, divided them \n  in a smaller and a bigger group. Execute this step until there is empty list.\n\n  Example:\n   [2, 1, 5, 4, 3] \n    1. pivot:2 smaller:[1] bigger:[5, 4, 3]\n    2. 2 [1] [5, 4, 3]  \n    3. 2 [1] | \n             | 5 [4, 3] [] \n    4. 2 [1] | \n               | 5 | \n                   | 4 [3] []\n    5. [1, 2, 3, 4, 5] # Recursion reunite all splited lists.\n\n   [2, 1, 5, 4, 3] =&gt; [1, 2, 3, 4, 5]\n  Complexity: O(n log n)\n  &quot;&quot;&quot;</span>\n  <span class=\"hljs-keyword\">require</span> <span class=\"hljs-title class_\">Integer</span>\n\n  <span class=\"hljs-variable\">@doc</span> <span class=\"hljs-string\">&quot;&quot;&quot;\n    take a List and return the List with the numbers ordered\n  &quot;&quot;&quot;</span>\n  <span class=\"hljs-variable\">@spec</span> quick_sort(list(<span class=\"hljs-title class_\">Integer</span>)) :: list(<span class=\"hljs-title class_\">Integer</span>)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">quick_sort</span></span>([]), <span class=\"hljs-symbol\">do:</span> []\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">quick_sort</span></span>([head | tail]) <span class=\"hljs-keyword\">do</span>\n    smaller = <span class=\"hljs-title class_\">Enum</span>.filter(tail, <span class=\"hljs-keyword\">fn</span> x -&gt; x &lt;= head <span class=\"hljs-keyword\">end</span>) |&gt; quick_sort()\n    bigger = <span class=\"hljs-title class_\">Enum</span>.filter(tail, <span class=\"hljs-keyword\">fn</span> x -&gt; x &gt; head <span class=\"hljs-keyword\">end</span>) |&gt; quick_sort()\n\n    <span class=\"hljs-title class_\">Enum</span>.concat(smaller, [head]) |&gt; <span class=\"hljs-title class_\">Enum</span>.concat(bigger)\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "kotlin": {
      "dir": "src/main/kotlin/sort/QuickSort.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src/main/kotlin/sort/QuickSort.kt",
      "code": "<span class=\"hljs-keyword\">package</span> sort\n\n<span class=\"hljs-comment\">/**\n * This method implements the Quick Sort\n *\n * <span class=\"hljs-doctag\">@param</span> array The array to be sorted\n * It is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot.\n *\n * Worst-case performance\t    O(n^2)\n * Best-case performance\t    O(nLogn)\n * Average performance      \tO(nLogn)\n * Worst-case space complexity\tO(1)\n **/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-type\">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class=\"hljs-title\">quickSort</span><span class=\"hljs-params\">(array: <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">T</span>&gt;, low: <span class=\"hljs-type\">Int</span>, high: <span class=\"hljs-type\">Int</span>)</span></span> {\n    <span class=\"hljs-keyword\">if</span> (low &lt; high) {\n        <span class=\"hljs-keyword\">val</span> pivot = partition(array, low, high)\n        quickSort(array, low, pivot - <span class=\"hljs-number\">1</span>)\n        quickSort(array, pivot, high)\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * This method finds the pivot index for an array\n *\n * <span class=\"hljs-doctag\">@param</span> array The array to be sorted\n * <span class=\"hljs-doctag\">@param</span> low The first index of the array\n * <span class=\"hljs-doctag\">@param</span> high The last index of the array\n *\n * */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-type\">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class=\"hljs-title\">partition</span><span class=\"hljs-params\">(array: <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">T</span>&gt;, low: <span class=\"hljs-type\">Int</span>, high: <span class=\"hljs-type\">Int</span>)</span></span>: <span class=\"hljs-built_in\">Int</span> {\n\n    <span class=\"hljs-keyword\">var</span> left = low\n    <span class=\"hljs-keyword\">var</span> right = high\n    <span class=\"hljs-keyword\">val</span> mid = (left + right) / <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">val</span> pivot = array[mid]\n\n    <span class=\"hljs-keyword\">while</span> (left &lt;= right) {\n        <span class=\"hljs-keyword\">while</span> (array[left] &lt; pivot) {\n            left++\n        }\n\n        <span class=\"hljs-keyword\">while</span> (array[right] &gt; pivot) {\n            right--\n        }\n\n        <span class=\"hljs-keyword\">if</span> (left &lt;= right) {\n            swapElements(array, left, right)\n            left++\n            right--\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> left\n}"
    },
    "scala": {
      "dir": "src/main/scala/Sort/QuickSort.scala",
      "url": "https://github.com/TheAlgorithms/scala/tree/master/src/main/scala/Sort/QuickSort.scala",
      "code": "<span class=\"hljs-keyword\">package</span> <span class=\"hljs-type\">Sort</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">QuickSort</span> </span>{\n\n  <span class=\"hljs-comment\">/** @param array\n    *   - a sequence of unsorted integers\n    * @return\n    *   - sequence of sorted integers @array\n    */</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">quickSort</span></span>(array: <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>]): <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>] = {\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">quickSortImpl</span></span>(array: <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>], first: <span class=\"hljs-type\">Int</span>, last: <span class=\"hljs-type\">Int</span>): <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>] = {\n      <span class=\"hljs-keyword\">var</span> pivot: <span class=\"hljs-type\">Int</span> = <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">var</span> i: <span class=\"hljs-type\">Int</span>     = <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">var</span> j: <span class=\"hljs-type\">Int</span>     = <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">var</span> temp: <span class=\"hljs-type\">Int</span>  = <span class=\"hljs-number\">0</span>\n\n      <span class=\"hljs-keyword\">if</span> (first &lt; last) {\n        pivot = first\n        i = first\n        j = last\n\n        <span class=\"hljs-keyword\">while</span> (i &lt; j) {\n          <span class=\"hljs-keyword\">while</span> (array(i) &lt;= array(pivot) &amp;&amp; i &lt; last) {\n            i += <span class=\"hljs-number\">1</span>\n          }\n\n          <span class=\"hljs-keyword\">while</span> (array(j) &gt; array(pivot)) {\n            j -= <span class=\"hljs-number\">1</span>\n          }\n\n          <span class=\"hljs-keyword\">if</span> (i &lt; j) {\n            temp = array(i)\n            array(i) = array(j)\n            array(j) = temp\n          }\n        }\n\n        temp = array(pivot)\n        array(pivot) = array(j)\n        array(j) = temp\n        quickSortImpl(array, first, j - <span class=\"hljs-number\">1</span>)\n        quickSortImpl(array, j + <span class=\"hljs-number\">1</span>, last)\n      }\n\n      array\n    }\n\n    quickSortImpl(array, <span class=\"hljs-number\">0</span>, array.length - <span class=\"hljs-number\">1</span>)\n  }\n}\n"
    },
    "ocaml": {
      "dir": "Sorts/quicksort.ml",
      "url": "https://github.com/TheAlgorithms/ocaml/tree/master/Sorts/quicksort.ml",
      "code": "<span class=\"hljs-comment\">(* Quicksort\n * https://en.wikipedia.org/wiki/Quicksort *)</span>\n\n<span class=\"hljs-comment\">(* partitions list into two lists:\n * elements that are less than or equal to the pivot, and\n * elements that are greater than the pivot *)</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">rec</span> partition : <span class=\"hljs-symbol\">&#x27;a</span> * <span class=\"hljs-symbol\">&#x27;a</span> <span class=\"hljs-built_in\">list</span> * <span class=\"hljs-symbol\">&#x27;a</span> <span class=\"hljs-built_in\">list</span> * <span class=\"hljs-symbol\">&#x27;a</span> <span class=\"hljs-built_in\">list</span> -&gt; <span class=\"hljs-symbol\">&#x27;a</span> <span class=\"hljs-built_in\">list</span> * <span class=\"hljs-symbol\">&#x27;a</span> <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-keyword\">function</span>\n    | _, <span class=\"hljs-literal\">[]</span>, less, more -&gt; less, more\n    | pivot, first :: rest, less, more -&gt;\n        <span class=\"hljs-keyword\">if</span> first &lt;= pivot\n        <span class=\"hljs-keyword\">then</span> partition (pivot, rest, first :: less, more)\n        <span class=\"hljs-keyword\">else</span> partition (pivot, rest, less, first :: more)\n\n\n<span class=\"hljs-comment\">(* for simplicity, always choosing the leftmost element as pivot *)</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">rec</span> quicksort : <span class=\"hljs-symbol\">&#x27;a</span> <span class=\"hljs-built_in\">list</span> -&gt; <span class=\"hljs-symbol\">&#x27;a</span> <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-keyword\">function</span>\n    | <span class=\"hljs-literal\">[]</span> -&gt; <span class=\"hljs-literal\">[]</span>\n    | pivot :: rest -&gt;\n        <span class=\"hljs-keyword\">let</span> less, more = partition (pivot, rest, <span class=\"hljs-literal\">[]</span>, <span class=\"hljs-literal\">[]</span>) <span class=\"hljs-keyword\">in</span>\n        quicksort less @ [pivot] @ quicksort more\n\n\n<span class=\"hljs-comment\">(* testing the quicksort function *)</span>\n<span class=\"hljs-keyword\">let</span> main <span class=\"hljs-literal\">()</span> =\n    <span class=\"hljs-keyword\">let</span> list_to_sort =\n        [<span class=\"hljs-number\">13</span>; <span class=\"hljs-number\">2</span>; <span class=\"hljs-number\">3</span>; <span class=\"hljs-number\">14</span>; <span class=\"hljs-number\">17</span>; <span class=\"hljs-number\">4</span>; <span class=\"hljs-number\">1</span>; <span class=\"hljs-number\">5</span>; <span class=\"hljs-number\">16</span>; <span class=\"hljs-number\">12</span>; <span class=\"hljs-number\">9</span>; <span class=\"hljs-number\">10</span>; <span class=\"hljs-number\">15</span>; <span class=\"hljs-number\">8</span>; <span class=\"hljs-number\">7</span>; <span class=\"hljs-number\">11</span>; <span class=\"hljs-number\">18</span>; <span class=\"hljs-number\">19</span>; <span class=\"hljs-number\">6</span>; <span class=\"hljs-number\">20</span>]\n    <span class=\"hljs-keyword\">in</span>\n\n    print_string <span class=\"hljs-string\">&quot;Unsorted: &quot;</span>;\n    <span class=\"hljs-type\">List</span>.iter (<span class=\"hljs-type\">Printf</span>.printf <span class=\"hljs-string\">&quot;%d &quot;</span>) list_to_sort;\n    print_newline <span class=\"hljs-literal\">()</span>;\n\n    print_string <span class=\"hljs-string\">&quot;  Sorted: &quot;</span>;\n    <span class=\"hljs-type\">List</span>.iter (<span class=\"hljs-type\">Printf</span>.printf <span class=\"hljs-string\">&quot;%d &quot;</span>) (quicksort list_to_sort);\n    print_newline <span class=\"hljs-literal\">()</span>\n\n\n<span class=\"hljs-comment\">(* this can be run with: ocaml quicksort.ml on the command line *)</span>\n<span class=\"hljs-keyword\">let</span> _ = main <span class=\"hljs-literal\">()</span>\n"
    },
    "swift": {
      "dir": "sorts/QuickSort.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/sorts/QuickSort.swift",
      "code": "<span class=\"hljs-keyword\">import</span> Foundation\n\n<span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title class_\">Array</span> <span class=\"hljs-title class_\">where</span> <span class=\"hljs-title class_\">Element</span>: <span class=\"hljs-title class_\">Comparable</span> {\n    <span class=\"hljs-comment\">/// Sorts the array using the QuickSort algorithm in place.</span>\n    <span class=\"hljs-comment\">///</span>\n    <span class=\"hljs-comment\">/// The QuickSort algorithm sorts the array by first choosing a pivot. This pivot is used to rearrange</span>\n    <span class=\"hljs-comment\">/// all elements, moving the smaller ones to the left of it. This operation is then recursevely applied</span>\n    <span class=\"hljs-comment\">/// to the subarrays formed around the pivot.</span>\n    <span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">quickSort</span>() {\n        <span class=\"hljs-keyword\">guard</span> count <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span>\n        }\n        \n        _quickSort(from: <span class=\"hljs-number\">0</span>, to: count <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>)\n    }\n    \n    <span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">_quickSort</span>(<span class=\"hljs-params\">from</span> <span class=\"hljs-params\">left</span>: <span class=\"hljs-type\">Int</span>, <span class=\"hljs-params\">to</span> <span class=\"hljs-params\">right</span>: <span class=\"hljs-type\">Int</span>) {\n        <span class=\"hljs-keyword\">guard</span> left <span class=\"hljs-operator\">&lt;</span> right, right <span class=\"hljs-operator\">-</span> left <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span>\n        }\n        \n        <span class=\"hljs-keyword\">let</span> pivotIndex <span class=\"hljs-operator\">=</span> partition(from: left, to: right)\n        _quickSort(from: left, to: pivotIndex <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>)\n        _quickSort(from: pivotIndex <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>, to: right)\n    }\n    \n    <span class=\"hljs-comment\">/// This method is where the pivot is chosen, so the smaller elements get moved to the left,</span>\n    <span class=\"hljs-comment\">/// and the bigger ones to the right.</span>\n    <span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">partition</span>(<span class=\"hljs-params\">from</span> <span class=\"hljs-params\">left</span>: <span class=\"hljs-type\">Int</span>, <span class=\"hljs-params\">to</span> <span class=\"hljs-params\">right</span>: <span class=\"hljs-type\">Int</span>) -&gt; <span class=\"hljs-type\">Int</span> {\n        <span class=\"hljs-comment\">/// Chooses the pivot, which in this case is always the first element, which is not very efficient.</span>\n        <span class=\"hljs-keyword\">let</span> pivotIndex <span class=\"hljs-operator\">=</span> left\n        swapAt(pivotIndex, right)\n        \n        <span class=\"hljs-keyword\">let</span> pivot <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">self</span>[right]\n        <span class=\"hljs-keyword\">var</span> i <span class=\"hljs-operator\">=</span> left\n        \n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> i <span class=\"hljs-operator\">..&lt;</span> right {\n            <span class=\"hljs-comment\">// If the element is smaller than the pivot, move it to the left.</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>[j] <span class=\"hljs-operator\">&lt;=</span> pivot {\n                swapAt(i, j)\n                i <span class=\"hljs-operator\">+=</span> <span class=\"hljs-number\">1</span>\n            }\n        }\n        \n        <span class=\"hljs-comment\">// Move the pivot to its right sorted position.</span>\n        swapAt(i, right)\n        \n        <span class=\"hljs-keyword\">return</span> i\n    }\n    \n    <span class=\"hljs-comment\">/// Returns a sorted version of this array using the QuickSort algorithm.</span>\n    <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">quickSorted</span>() -&gt; <span class=\"hljs-type\">Array</span> {\n        <span class=\"hljs-keyword\">var</span> copy <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">self</span>\n        \n        copy.quickSort()\n        \n        <span class=\"hljs-keyword\">return</span> copy\n    }\n}\n\n<span class=\"hljs-comment\">// Use the following code to test it:</span>\n<span class=\"hljs-comment\">// var numbers = [1002, 42, 55, 124, 205]</span>\n<span class=\"hljs-comment\">// debugPrint(numbers.quickSorted())</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// numbers.quickSort()</span>\n<span class=\"hljs-comment\">// debugPrint(numbers)</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// The console should print:</span>\n<span class=\"hljs-comment\">// [42, 55, 124, 205, 1002]</span>\n<span class=\"hljs-comment\">// [42, 55, 124, 205, 1002]</span>\n"
    },
    "matlab-octave": {
      "dir": "algorithms/sorting/quick_sort.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms/sorting/quick_sort.m",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sortedArray</span> = <span class=\"hljs-title\">quick_sort</span><span class=\"hljs-params\">(array)</span></span>\n \n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">numel</span>(array) &lt;= <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">%If the array has 1 element then it can&#x27;t be sorted       </span>\n        sortedArray = array;\n        <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">end</span>\n \n    pivot = array(<span class=\"hljs-keyword\">end</span>);\n    array(<span class=\"hljs-keyword\">end</span>) = [];\n \n    <span class=\"hljs-comment\">%Create two new arrays which contain the elements that are less than or</span>\n    <span class=\"hljs-comment\">%equal to the pivot called &quot;less&quot; and greater than the pivot called</span>\n    <span class=\"hljs-comment\">%&quot;greater&quot;</span>\n    less = array( array &lt;= pivot );\n    greater = array( array &gt; pivot );\n \n    <span class=\"hljs-comment\">%The sorted array is the concatenation of the sorted &quot;less&quot; array, the</span>\n    <span class=\"hljs-comment\">%pivot and the sorted &quot;greater&quot; array in that order</span>\n    sortedArray = [quick_sort(less) pivot quick_sort(greater)];\n \n<span class=\"hljs-keyword\">end</span>"
    },
    "julia": {
      "dir": "src/sorts/quick_sort.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/sorts/quick_sort.jl",
      "code": "<span class=\"hljs-keyword\">function</span> quick_sort!(arr::<span class=\"hljs-built_in\">Vector</span>{T}, l::<span class=\"hljs-built_in\">Int</span> = <span class=\"hljs-number\">1</span>, r::<span class=\"hljs-built_in\">Int</span> = length(arr)) <span class=\"hljs-keyword\">where</span> {T}\n    <span class=\"hljs-keyword\">if</span> l &gt;= r\n        <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">end</span>\n    mid = arr[(l+r)&gt;&gt;<span class=\"hljs-number\">1</span>]\n    l_pos = l\n    r_pos = r\n    <span class=\"hljs-keyword\">while</span> l_pos &lt;= r_pos\n        <span class=\"hljs-keyword\">while</span> arr[l_pos] &lt; mid\n            l_pos += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">while</span> arr[r_pos] &gt; mid\n            r_pos -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">if</span> l_pos &lt;= r_pos\n            t = arr[l_pos]\n            arr[l_pos] = arr[r_pos]\n            arr[r_pos] = t\n            l_pos += <span class=\"hljs-number\">1</span>\n            r_pos -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">if</span> l &lt; r_pos\n        quick_sort!(arr, l, r_pos)\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">if</span> l_pos &lt; r\n        quick_sort!(arr, l_pos, r)\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "lua": {
      "dir": "src/sorting/quicksort.lua",
      "url": "https://github.com/TheAlgorithms/lua/tree/master/src/sorting/quicksort.lua",
      "code": "<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(\n\t<span class=\"hljs-comment\">-- function(lower_index, upper_index) -&gt; pivot index</span>\n\tchoose_pivot\n)</span></span>\n\tchoose_pivot = choose_pivot <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">math</span>.<span class=\"hljs-built_in\">random</span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(\n\t\t<span class=\"hljs-comment\">-- list to be sorted in-place</span>\n\t\tlist,\n\t\t<span class=\"hljs-comment\">-- function(a, b) -&gt; truthy value if a &lt; b</span>\n\t\tless_than\n\t)</span></span>\n\t\tless_than = less_than <span class=\"hljs-keyword\">or</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(a, b)</span></span>\n\t\t\t<span class=\"hljs-keyword\">return</span> a &lt; b\n\t\t<span class=\"hljs-keyword\">end</span>\n\t\t<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">quicksort</span><span class=\"hljs-params\">(lower_index, upper_index)</span></span>\n\t\t\t<span class=\"hljs-keyword\">if</span> lower_index &gt;= upper_index <span class=\"hljs-keyword\">then</span>\n\t\t\t\t<span class=\"hljs-keyword\">return</span>\n\t\t\t<span class=\"hljs-keyword\">end</span>\n\t\t\t<span class=\"hljs-keyword\">local</span> pivot_index = choose_pivot(lower_index, upper_index)\n\t\t\t<span class=\"hljs-keyword\">local</span> pivot_value = list[pivot_index]\n\t\t\t<span class=\"hljs-comment\">-- Place pivot at last position in range</span>\n\t\t\tlist[pivot_index], list[upper_index] = list[upper_index], pivot_value\n\t\t\t<span class=\"hljs-comment\">-- Index to place the pivot at</span>\n\t\t\tpivot_index = lower_index\n\t\t\t<span class=\"hljs-comment\">-- Partition</span>\n\t\t\t<span class=\"hljs-keyword\">for</span> j = lower_index, upper_index - <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\n\t\t\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> less_than(pivot_value, list[j]) <span class=\"hljs-keyword\">then</span>\n\t\t\t\t\tlist[pivot_index], list[j] = list[j], list[pivot_index]\n\t\t\t\t\tpivot_index = pivot_index + <span class=\"hljs-number\">1</span>\n\t\t\t\t<span class=\"hljs-keyword\">end</span>\n\t\t\t<span class=\"hljs-keyword\">end</span>\n\t\t\t<span class=\"hljs-comment\">-- Place pivot between numbers &lt;= pivot (from lower_index to pivot_index - 1)</span>\n\t\t\t<span class=\"hljs-comment\">-- and numbers &gt;= pivot (from pivot_index to upper_index)</span>\n\t\t\tlist[pivot_index], list[upper_index] = list[upper_index], list[pivot_index]\n\t\t\t<span class=\"hljs-comment\">-- Sort larger interval first to ensure a worst-case logarithmic stack size (which equals space complexity)</span>\n\t\t\t<span class=\"hljs-keyword\">local</span> lower_interval_size, upper_interval_size =\n\t\t\t\tpivot_index - <span class=\"hljs-number\">1</span> - lower_index, upper_index - pivot_index - <span class=\"hljs-number\">1</span>\n\t\t\t<span class=\"hljs-keyword\">if</span> lower_interval_size &gt; upper_interval_size <span class=\"hljs-keyword\">then</span>\n\t\t\t\t<span class=\"hljs-comment\">-- lower interval is larger, sort it first</span>\n\t\t\t\tquicksort(lower_index, pivot_index - <span class=\"hljs-number\">1</span>)\n\t\t\t\t<span class=\"hljs-keyword\">return</span> quicksort(pivot_index + <span class=\"hljs-number\">1</span>, upper_index)\n\t\t\t<span class=\"hljs-keyword\">end</span>\n\t\t\t<span class=\"hljs-comment\">-- upper interval is larger, sort it first</span>\n\t\t\tquicksort(pivot_index + <span class=\"hljs-number\">1</span>, upper_index)\n\t\t\t<span class=\"hljs-keyword\">return</span> quicksort(lower_index, pivot_index - <span class=\"hljs-number\">1</span>)\n\t\t<span class=\"hljs-keyword\">end</span>\n\t\tquicksort(<span class=\"hljs-number\">1</span>, #list)\n\t<span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Sorters/Comparison/QuickSorter.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/Algorithms/Sorters/Comparison/QuickSorter.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.Comparison</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sorts arrays using quicksort.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Type of array element.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QuickSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt; : <span class=\"hljs-title\">IComparisonSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt;\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sorts array using Hoare partition scheme,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     internal, in-place,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity average: O(n log(n)),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity worst: O(n^2),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(log(n)),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - array length.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Array to sort.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;comparer&quot;&gt;</span>Compares elements.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\">T[] array, IComparer&lt;T&gt; comparer</span>)</span> =&gt; Sort(array, comparer, <span class=\"hljs-number\">0</span>, array.Length - <span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">abstract</span> T <span class=\"hljs-title\">SelectPivot</span>(<span class=\"hljs-params\">T[] array, IComparer&lt;T&gt; comparer, <span class=\"hljs-built_in\">int</span> left, <span class=\"hljs-built_in\">int</span> right</span>)</span>;\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\">T[] array, IComparer&lt;T&gt; comparer, <span class=\"hljs-built_in\">int</span> left, <span class=\"hljs-built_in\">int</span> right</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (left &gt;= right)\n            {\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\n            <span class=\"hljs-keyword\">var</span> p = Partition(array, comparer, left, right);\n            Sort(array, comparer, left, p);\n            Sort(array, comparer, p + <span class=\"hljs-number\">1</span>, right);\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">Partition</span>(<span class=\"hljs-params\">T[] array, IComparer&lt;T&gt; comparer, <span class=\"hljs-built_in\">int</span> left, <span class=\"hljs-built_in\">int</span> right</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> pivot = SelectPivot(array, comparer, left, right);\n            <span class=\"hljs-keyword\">var</span> nleft = left;\n            <span class=\"hljs-keyword\">var</span> nright = right;\n            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)\n            {\n                <span class=\"hljs-keyword\">while</span> (comparer.Compare(array[nleft], pivot) &lt; <span class=\"hljs-number\">0</span>)\n                {\n                    nleft++;\n                }\n\n                <span class=\"hljs-keyword\">while</span> (comparer.Compare(array[nright], pivot) &gt; <span class=\"hljs-number\">0</span>)\n                {\n                    nright--;\n                }\n\n                <span class=\"hljs-keyword\">if</span> (nleft &gt;= nright)\n                {\n                    <span class=\"hljs-keyword\">return</span> nright;\n                }\n\n                <span class=\"hljs-keyword\">var</span> t = array[nleft];\n                array[nleft] = array[nright];\n                array[nright] = t;\n\n                nleft++;\n                nright--;\n            }\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Mertcan Davulcu",
      "email": "54983926+mertcandav@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Emil Suleymanov",
      "email": "emil.suleymanov@tum.de",
      "commits": 1
    },
    {
      "name": "Bhavya Karia",
      "email": "bhavyakaria@yahoo.in",
      "commits": 1
    },
    {
      "name": "Georgy Komarov",
      "email": "jubnzv@gmail.com",
      "commits": 1
    },
    {
      "name": "Artur Parowicz",
      "email": "arturparowicz@gmail,com",
      "commits": 1
    },
    {
      "name": "MarcosVillacanas",
      "email": "marcosvillacanas@icloud.com",
      "commits": 1
    },
    {
      "name": "Andrew S Erwin",
      "email": "andrew@andrewerwin.com",
      "commits": 1
    },
    {
      "name": "Arthur Kurbidaev",
      "email": "artkurbidaev@gmail.com",
      "commits": 1
    },
    {
      "name": "Arnav Borborah",
      "email": "arnavborborah11@gmail.com",
      "commits": 1
    },
    {
      "name": "Anshul",
      "email": "malikanshul29@gmail.com",
      "commits": 1
    },
    {
      "name": "Yashwanth Reddy Gondi",
      "email": "yashwanthreddy.g@live.com",
      "commits": 1
    },
    {
      "name": "puneet-pr-arya",
      "email": "puneetarya66@gmail.com",
      "commits": 1
    },
    {
      "name": "Alfredo Torre",
      "email": "alfredotorre@gmail.com",
      "commits": 1
    },
    {
      "name": "khanhhuynguyenvu",
      "email": "khanhhuynguyenvu@gmail.com",
      "commits": 1
    },
    {
      "name": "Andrei Cioban",
      "email": "andrei.cioban@assist.ro",
      "commits": 1
    },
    {
      "name": "Ihjass Thasbekha",
      "email": "44056715+Ihjass@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "PoolOfDeath20",
      "email": "53143214+GervinFung@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rratic",
      "email": "Rratic@163.com",
      "commits": 1
    },
    {
      "name": "vzvu3k6k",
      "email": "vzvu3k6k@gmail.com",
      "commits": 1
    },
    {
      "name": "Mateus Luiz",
      "email": "mateuslfreitasb@gmail.com",
      "commits": 1
    },
    {
      "name": "TheDoctor",
      "email": "doctorshacking@gmail.com",
      "commits": 1
    },
    {
      "name": "Richard Bailey",
      "email": "richard@firsttech.digital",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 1
    },
    {
      "name": "mattan",
      "email": "mattany@gmali.com",
      "commits": 1
    },
    {
      "name": "Connor Bottum",
      "email": "cbb692@gmail.com",
      "commits": 1
    },
    {
      "name": "KuhakuPixel",
      "email": "66545911+KuhakuPixel@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Atishaya Jain",
      "email": "atishaya.11@live.com",
      "commits": 1
    },
    {
      "name": "Akshay Dubey",
      "email": "38462415+itsAkshayDubey@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "YATIN KATHURIA",
      "email": "47096348+Yatin-kathuria@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sukhpreet K Sekhon",
      "email": "sukhpreetsekhon@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Panzki",
      "email": "Panzki@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ayaan Khan",
      "email": "43348292+ayaankhan98@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "khongta0932488598",
      "email": "37770805+khongta0932488598@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "KyleScharnhorst",
      "email": "scharkr1@uw.edu",
      "commits": 1
    },
    {
      "name": "Matthew",
      "email": "MatthewG25@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "sakuralethe",
      "email": "sakuralethe@outlook.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "alvin562",
      "email": "alvindantic562@gmail.com",
      "commits": 1
    },
    {
      "name": "yyeltsyn",
      "email": "crawler2.0@gmail.com",
      "commits": 1
    },
    {
      "name": "JakeBonek",
      "email": "jake.bonek@gmail.com",
      "commits": 1
    },
    {
      "name": "miczal",
      "email": "mpierscinski@gmail.com",
      "commits": 1
    },
    {
      "name": "spamegg",
      "email": "spamegg@pm.me",
      "commits": 2
    },
    {
      "name": "TiagoMaiaL",
      "email": "tiago.maia.lopes@gmail.com",
      "commits": 2
    },
    {
      "name": "Lars Mueller",
      "email": "appgurulars@gmx.de",
      "commits": 2
    },
    {
      "name": "varunu28",
      "email": "varun.u28@gmail.com",
      "commits": 2
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Erez Shomron",
      "email": "48328872+eshom@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Anirban166",
      "email": "bloodraven166@gmail.com",
      "commits": 2
    },
    {
      "name": "Roland Hummel",
      "email": "roland.hummel@qaware.de",
      "commits": 2
    },
    {
      "name": "Guo Ziyang",
      "email": "guoziyang0033@gmail.com",
      "commits": 2
    },
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 2
    },
    {
      "name": "BruceLee569",
      "email": "49506152+BruceLee569@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Rolf1e",
      "email": "tigran.slama@laposte.net",
      "commits": 3
    },
    {
      "name": "Brayo",
      "email": "vukubrian@gmail.com",
      "commits": 3
    },
    {
      "name": "Mehdi ALAOUI",
      "email": "alaoui.mehdi.1995@gmail.com",
      "commits": 3
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 4
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 4
    },
    {
      "name": "ayaankhan98",
      "email": "ayaankhan98@gmail.com",
      "commits": 6
    }
  ],
  "explanationUrl": {
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en/Sorting Algorithms/Quick Sort.md",
    "es": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/es/Algoritmos de Ordenamiento/Ordenamiento rápido.md"
  }
}