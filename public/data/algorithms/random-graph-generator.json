{
  "slug": "random-graph-generator",
  "name": "Random Graph Generator",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs/random_graph_generator.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs/random_graph_generator.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n* Author: Manuel Di Lullo (https://github.com/manueldilullo)\n* Description: Random graphs generator.\n               Uses graphs represented with an adjacency list.\n\nURL: https://en.wikipedia.org/wiki/Random_graph\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">import</span> random\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">random_graph</span>(<span class=\"hljs-params\">\n    vertices_number: <span class=\"hljs-built_in\">int</span>, probability: <span class=\"hljs-built_in\">float</span>, directed: <span class=\"hljs-built_in\">bool</span> = <span class=\"hljs-literal\">False</span>\n</span>) -&gt; <span class=\"hljs-built_in\">dict</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Generate a random graph\n    @input: vertices_number (number of vertices),\n            probability (probability that a generic edge (u,v) exists),\n            directed (if True: graph will be a directed graph,\n                      otherwise it will be an undirected graph)\n    @examples:\n    &gt;&gt;&gt; random.seed(1)\n    &gt;&gt;&gt; random_graph(4, 0.5)\n    {0: [1], 1: [0, 2, 3], 2: [1, 3], 3: [1, 2]}\n    &gt;&gt;&gt; random.seed(1)\n    &gt;&gt;&gt; random_graph(4, 0.5, True)\n    {0: [1], 1: [2, 3], 2: [3], 3: []}\n    &quot;&quot;&quot;</span>\n    graph: <span class=\"hljs-built_in\">dict</span> = {i: [] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(vertices_number)}\n\n    <span class=\"hljs-comment\"># if probability is greater or equal than 1, then generate a complete graph</span>\n    <span class=\"hljs-keyword\">if</span> probability &gt;= <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span> complete_graph(vertices_number)\n    <span class=\"hljs-comment\"># if probability is lower or equal than 0, then return a graph without edges</span>\n    <span class=\"hljs-keyword\">if</span> probability &lt;= <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> graph\n\n    <span class=\"hljs-comment\"># for each couple of nodes, add an edge from u to v</span>\n    <span class=\"hljs-comment\"># if the number randomly generated is greater than probability probability</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(vertices_number):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i + <span class=\"hljs-number\">1</span>, vertices_number):\n            <span class=\"hljs-keyword\">if</span> random.random() &lt; probability:\n                graph[i].append(j)\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> directed:\n                    <span class=\"hljs-comment\"># if the graph is undirected, add an edge in from j to i, either</span>\n                    graph[j].append(i)\n    <span class=\"hljs-keyword\">return</span> graph\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">complete_graph</span>(<span class=\"hljs-params\">vertices_number: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">dict</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Generate a complete graph with vertices_number vertices.\n    @input: vertices_number (number of vertices),\n            directed (False if the graph is undirected, True otherwise)\n    @example:\n    &gt;&gt;&gt; print(complete_graph(3))\n    {0: [1, 2], 1: [0, 2], 2: [0, 1]}\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> {\n        i: [j <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(vertices_number) <span class=\"hljs-keyword\">if</span> i != j] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(vertices_number)\n    }\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "Rohan R Bharadwaj",
      "email": "rohanrbharadwaj@gmail.com",
      "commits": 1
    },
    {
      "name": "Manuel Di Lullo",
      "email": "39048927+manueldilullo@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}