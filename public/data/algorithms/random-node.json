{
  "slug": "random-node",
  "name": "Random Node",
  "categories": [
    "datastructures",
    "list"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/lists/RandomNode.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/lists/RandomNode.java",
      "code": "<span class=\"hljs-comment\">/** Author : Suraj Kumar\n * Github : https://github.com/skmodi649\n */</span>\n\n<span class=\"hljs-comment\">/** PROBLEM DESCRIPTION :\n * There is a single linked list and we are supposed to find a random node in the given linked list\n */</span>\n\n<span class=\"hljs-comment\">/** ALGORITHM :\n * Step 1 : START\n * Step 2 : Create an arraylist of type integer\n * Step 3 : Declare an integer type variable for size and linked list type for head\n * Step 4 : We will use two methods, one for traversing through the linked list using while loop and also increase the size by 1\n *\n * (a) RandomNode(head)\n * (b) run a while loop till null;\n * (c) add the value to arraylist;\n * (d) increase the size;\n *\n * Step 5 : Now use another method for getting random values using Math.random() and return the value present in arraylist for the calculated index\n * Step 6 : Now in main() method we will simply insert nodes in the linked list and then call the appropriate method and then print the random node generated\n * Step 7 : STOP\n */</span>\n\n\n<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.lists;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n<span class=\"hljs-keyword\">import</span> java.util.Random;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RandomNode</span> {\n    <span class=\"hljs-keyword\">private</span> List&lt;Integer&gt; list;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> size;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">rand</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ListNode</span> {\n        <span class=\"hljs-type\">int</span> val;\n        ListNode next;\n\n        ListNode(<span class=\"hljs-type\">int</span> val) {\n            <span class=\"hljs-built_in\">this</span>.val = val;\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">RandomNode</span><span class=\"hljs-params\">(ListNode head)</span> {\n        list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        <span class=\"hljs-type\">ListNode</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> head;\n\n        <span class=\"hljs-comment\">// Now using while loop to traverse through the linked list and</span>\n        <span class=\"hljs-comment\">// go on adding values and increasing the size value by 1</span>\n        <span class=\"hljs-keyword\">while</span> (temp != <span class=\"hljs-literal\">null</span>) {\n            list.add(temp.val);\n            temp = temp.next;\n            size++;\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getRandom</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> rand.nextInt(size);\n        <span class=\"hljs-keyword\">return</span> list.get(index);\n    }\n\n    <span class=\"hljs-comment\">// Driver program to test above functions</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">ListNode</span> <span class=\"hljs-variable\">head</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ListNode</span>(<span class=\"hljs-number\">15</span>);\n        head.next = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ListNode</span>(<span class=\"hljs-number\">25</span>);\n        head.next.next = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ListNode</span>(<span class=\"hljs-number\">4</span>);\n        head.next.next.next = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ListNode</span>(<span class=\"hljs-number\">1</span>);\n        head.next.next.next.next = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ListNode</span>(<span class=\"hljs-number\">78</span>);\n        head.next.next.next.next.next = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ListNode</span>(<span class=\"hljs-number\">63</span>);\n        <span class=\"hljs-type\">RandomNode</span> <span class=\"hljs-variable\">list</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomNode</span>(head);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">randomNum</span> <span class=\"hljs-operator\">=</span> list.getRandom();\n        System.out.println(<span class=\"hljs-string\">&quot;Random Node : &quot;</span> + randomNum);\n    }\n}\n\n\n<span class=\"hljs-comment\">/**\n * OUTPUT :\n * First output :\n * Random Node : 25\n * Second output :\n * Random Node : 78\n * Time Complexity : O(n)\n * Auxiliary Space Complexity : O(1)\n * Time Complexity : O(n)\n * Auxiliary Space Complexity : O(1)\n */</span>\n\n<span class=\"hljs-comment\">/** Time Complexity : O(n)\n * Auxiliary Space Complexity : O(1)\n */</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Suraj Kumar",
      "email": "76468931+skmodi649@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}