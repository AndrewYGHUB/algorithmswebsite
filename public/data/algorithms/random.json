{
  "slug": "random",
  "name": "Random",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/math/random.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/math/random.rs",
      "code": "<span class=\"hljs-comment\">/*\nPermuted Congruential Generator\nhttps://en.wikipedia.org/wiki/Permuted_congruential_generator\n\nNote that this is _NOT_ intended for serious applications. Use this generator\nat your own risk and only use your own values instead of the default ones if\nyou really know what you are doing.\n */</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">PCG32</span> {\n    state: <span class=\"hljs-type\">u64</span>,\n    multiplier: <span class=\"hljs-type\">u64</span>,\n    increment: <span class=\"hljs-type\">u64</span>,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">const</span> PCG32_MULTIPLIER: <span class=\"hljs-type\">u64</span> = <span class=\"hljs-number\">6364136223846793005_u64</span>;\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">const</span> PCG32_INCREMENT: <span class=\"hljs-type\">u64</span> = <span class=\"hljs-number\">1442695040888963407_u64</span>;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">IterMut</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>&gt; {\n    pcg: &amp;<span class=\"hljs-symbol\">&#x27;a</span> <span class=\"hljs-keyword\">mut</span> PCG32,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">PCG32</span> {\n    <span class=\"hljs-comment\">/// `stream` should be less than 1 &lt;&lt; 63</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>(seed: <span class=\"hljs-type\">u64</span>, multiplier: <span class=\"hljs-type\">u64</span>, stream: <span class=\"hljs-type\">u64</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-comment\">// We should make sure that increment is odd</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">increment</span> = (stream &lt;&lt; <span class=\"hljs-number\">1</span>) | <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">pcg</span> = PCG32 {\n            state: seed.<span class=\"hljs-title function_ invoke__\">wrapping_add</span>(increment),\n            multiplier,\n            increment,\n        };\n        pcg.<span class=\"hljs-title function_ invoke__\">next</span>();\n        pcg\n    }\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new_default</span>(seed: <span class=\"hljs-type\">u64</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">multiplier</span> = PCG32_MULTIPLIER;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">increment</span> = PCG32_INCREMENT;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">pcg</span> = PCG32 {\n            state: seed.<span class=\"hljs-title function_ invoke__\">wrapping_add</span>(increment),\n            multiplier,\n            increment,\n        };\n        pcg.<span class=\"hljs-title function_ invoke__\">next</span>();\n        pcg\n    }\n    <span class=\"hljs-meta\">#[inline]</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">next</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">self</span>.state = <span class=\"hljs-keyword\">self</span>\n            .state\n            .<span class=\"hljs-title function_ invoke__\">wrapping_mul</span>(<span class=\"hljs-keyword\">self</span>.multiplier)\n            .<span class=\"hljs-title function_ invoke__\">wrapping_add</span>(<span class=\"hljs-keyword\">self</span>.increment);\n    }\n    <span class=\"hljs-meta\">#[inline]</span>\n    <span class=\"hljs-comment\">/// Advance the PCG by `delta` steps in O(lg(`delta`)) time. By passing</span>\n    <span class=\"hljs-comment\">/// a negative i64 as u64, it can go back too.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">advance</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, <span class=\"hljs-keyword\">mut</span> delta: <span class=\"hljs-type\">u64</span>) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">acc_mult</span> = <span class=\"hljs-number\">1u64</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">acc_incr</span> = <span class=\"hljs-number\">0u64</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">curr_mlt</span> = <span class=\"hljs-keyword\">self</span>.multiplier;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">curr_inc</span> = <span class=\"hljs-keyword\">self</span>.increment;\n        <span class=\"hljs-keyword\">while</span> delta &gt; <span class=\"hljs-number\">0</span> {\n            <span class=\"hljs-keyword\">if</span> delta &amp; <span class=\"hljs-number\">1</span> != <span class=\"hljs-number\">0</span> {\n                acc_mult = acc_mult.<span class=\"hljs-title function_ invoke__\">wrapping_mul</span>(curr_mlt);\n                acc_incr = acc_incr.<span class=\"hljs-title function_ invoke__\">wrapping_mul</span>(curr_mlt).<span class=\"hljs-title function_ invoke__\">wrapping_add</span>(curr_inc);\n            }\n            curr_inc = curr_mlt.<span class=\"hljs-title function_ invoke__\">wrapping_add</span>(<span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">wrapping_mul</span>(curr_inc);\n            curr_mlt = curr_mlt.<span class=\"hljs-title function_ invoke__\">wrapping_mul</span>(curr_mlt);\n            delta &gt;&gt;= <span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-keyword\">self</span>.state = acc_mult.<span class=\"hljs-title function_ invoke__\">wrapping_mul</span>(<span class=\"hljs-keyword\">self</span>.state).<span class=\"hljs-title function_ invoke__\">wrapping_add</span>(acc_incr);\n    }\n    <span class=\"hljs-meta\">#[inline]</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_u32</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u32</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">x</span> = <span class=\"hljs-keyword\">self</span>.state;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">count</span> = (x &gt;&gt; <span class=\"hljs-number\">59</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>;\n\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">next</span>();\n\n        x ^= x &gt;&gt; <span class=\"hljs-number\">18</span>;\n        ((x &gt;&gt; <span class=\"hljs-number\">27</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>).<span class=\"hljs-title function_ invoke__\">rotate_right</span>(count)\n    }\n    <span class=\"hljs-meta\">#[inline]</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_u64</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u64</span> {\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">get_u32</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span> ^ ((<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">get_u32</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span>) &lt;&lt; <span class=\"hljs-number\">32</span>)\n    }\n    <span class=\"hljs-meta\">#[inline]</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_u16</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> (<span class=\"hljs-type\">u16</span>, <span class=\"hljs-type\">u16</span>) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">get_u32</span>();\n        (res <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u16</span>, (res &gt;&gt; <span class=\"hljs-number\">16</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u16</span>)\n    }\n    <span class=\"hljs-meta\">#[inline]</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_u8</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> (<span class=\"hljs-type\">u8</span>, <span class=\"hljs-type\">u8</span>, <span class=\"hljs-type\">u8</span>, <span class=\"hljs-type\">u8</span>) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">get_u32</span>();\n        (\n            res <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>,\n            (res &gt;&gt; <span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>,\n            (res &gt;&gt; <span class=\"hljs-number\">16</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>,\n            (res &gt;&gt; <span class=\"hljs-number\">24</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>,\n        )\n    }\n    <span class=\"hljs-meta\">#[inline]</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_state</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u64</span> {\n        <span class=\"hljs-keyword\">self</span>.state\n    }\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">iter_mut</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> IterMut {\n        IterMut { pcg: <span class=\"hljs-keyword\">self</span> }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">IterMut</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>&gt; {\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Item</span> = <span class=\"hljs-type\">u32</span>;\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">next</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-keyword\">Self</span>::Item&gt; {\n        <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-keyword\">self</span>.pcg.<span class=\"hljs-title function_ invoke__\">get_u32</span>())\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">no_birthday</span>() {\n        <span class=\"hljs-comment\">// If the distribution is not almost uniform, the probability of</span>\n        <span class=\"hljs-comment\">// birthday paradox increases. For n=2^32 and k=1e5, the probability</span>\n        <span class=\"hljs-comment\">// of not having a collision is about (1 - (k+1)/n) ^ (k/2) which is</span>\n        <span class=\"hljs-comment\">// 0.3121 for this (n, k).</span>\n        <span class=\"hljs-comment\">// So this test is a (dumb) test for distribution, and for speed. This</span>\n        <span class=\"hljs-comment\">// is only basic sanity checking, as the actual algorithm was</span>\n        <span class=\"hljs-comment\">// rigorously tested by others before.</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">numbers</span> = <span class=\"hljs-number\">1e5</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">pcg</span> = PCG32::<span class=\"hljs-title function_ invoke__\">new_default</span>(<span class=\"hljs-number\">314159</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">pcg2</span> = PCG32::<span class=\"hljs-title function_ invoke__\">new_default</span>(<span class=\"hljs-number\">314159</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(pcg.<span class=\"hljs-title function_ invoke__\">get_u32</span>(), pcg2.<span class=\"hljs-title function_ invoke__\">get_u32</span>());\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">randoms</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u32</span>&gt; = pcg.<span class=\"hljs-title function_ invoke__\">iter_mut</span>().<span class=\"hljs-title function_ invoke__\">take</span>(numbers).collect::&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u32</span>&gt;&gt;();\n        pcg2.<span class=\"hljs-title function_ invoke__\">advance</span>(<span class=\"hljs-number\">1000</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(pcg2.<span class=\"hljs-title function_ invoke__\">get_u32</span>(), randoms[<span class=\"hljs-number\">1000</span>]);\n        pcg2.<span class=\"hljs-title function_ invoke__\">advance</span>((-<span class=\"hljs-number\">1001_i64</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(pcg2.<span class=\"hljs-title function_ invoke__\">get_u32</span>(), randoms[<span class=\"hljs-number\">0</span>]);\n        randoms.<span class=\"hljs-title function_ invoke__\">sort_unstable</span>();\n        randoms.<span class=\"hljs-title function_ invoke__\">dedup</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(randoms.<span class=\"hljs-title function_ invoke__\">len</span>(), numbers);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Erfan Khadem",
      "email": "45465346+er888kh@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}