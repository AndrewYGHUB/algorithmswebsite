{
  "slug": "rat-in-a-maze",
  "name": "Rat In A Maze",
  "categories": [
    "backtracking"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Backtracking/RatInAMaze.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Backtracking/RatInAMaze.js",
      "code": "<span class=\"hljs-comment\">/*\n * Problem Statement:\n * - Given a NxN grid, find whether rat in cell [0, 0] can reach the target in cell [N-1, N-1]\n * - The grid is represented as an array of rows. Each row is represented as an array of 0 or 1 values.\n * - A cell with value 0 can not be moved through. Value 1 means the rat can move here.\n * - The rat can not move diagonally.\n *\n * Reference for this problem: https://www.geeksforgeeks.org/rat-in-a-maze-backtracking-2/\n *\n * Based on the original implementation contributed by Chiranjeev Thapliyal (https://github.com/chiranjeev-thapliyal).\n */</span>\n\n<span class=\"hljs-comment\">/**\n * Checks if the given grid is valid.\n *\n * A grid needs to satisfy these conditions:\n * - must not be empty\n * - must be a square\n * - must not contain values other than {<span class=\"hljs-doctag\">@code</span> 0} and {<span class=\"hljs-doctag\">@code</span> 1}\n *\n * <span class=\"hljs-doctag\">@param</span> grid The grid to check.\n * <span class=\"hljs-doctag\">@throws</span> TypeError When the given grid is invalid.\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">validateGrid</span> (grid) {\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(grid) || grid.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;Grid must be a non-empty array&#x27;</span>)\n\n  <span class=\"hljs-keyword\">const</span> allRowsHaveCorrectLength = grid.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> row.<span class=\"hljs-property\">length</span> === grid.<span class=\"hljs-property\">length</span>)\n  <span class=\"hljs-keyword\">if</span> (!allRowsHaveCorrectLength) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;Grid must be a square&#x27;</span>)\n\n  <span class=\"hljs-keyword\">const</span> allCellsHaveValidValues = grid.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> row.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">cell</span> =&gt;</span> cell === <span class=\"hljs-number\">0</span> || cell === <span class=\"hljs-number\">1</span>)\n  })\n  <span class=\"hljs-keyword\">if</span> (!allCellsHaveValidValues) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;Grid must only contain 0s and 1s&#x27;</span>)\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isSafe</span> (grid, x, y) {\n  <span class=\"hljs-keyword\">const</span> n = grid.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">return</span> x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; y &lt; n &amp;&amp; grid[y][x] === <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-comment\">/**\n * Attempts to calculate the remaining path to the target.\n *\n * <span class=\"hljs-doctag\">@param</span> grid The full grid.\n * <span class=\"hljs-doctag\">@param</span> x The current X coordinate.\n * <span class=\"hljs-doctag\">@param</span> y The current Y coordinate.\n * <span class=\"hljs-doctag\">@param</span> solution The current solution matrix.\n * <span class=\"hljs-doctag\">@param</span> path The path we took to get from the source cell to the current location.\n * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">string|boolean</span>} Either the path to the target cell or false.\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getPathPart</span> (grid, x, y, solution, path) {\n  <span class=\"hljs-keyword\">const</span> n = grid.<span class=\"hljs-property\">length</span>\n\n  <span class=\"hljs-comment\">// are we there yet?</span>\n  <span class=\"hljs-keyword\">if</span> (x === n - <span class=\"hljs-number\">1</span> &amp;&amp; y === n - <span class=\"hljs-number\">1</span> &amp;&amp; grid[y][x] === <span class=\"hljs-number\">1</span>) {\n    solution[y][x] = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> path\n  }\n\n  <span class=\"hljs-comment\">// did we step on a 0 cell or outside the grid?</span>\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title function_\">isSafe</span>(grid, x, y)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n\n  <span class=\"hljs-comment\">// are we walking onto an already-marked solution coordinate?</span>\n  <span class=\"hljs-keyword\">if</span> (solution[y][x] === <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n\n  <span class=\"hljs-comment\">// none of the above? let&#x27;s dig deeper!</span>\n\n  <span class=\"hljs-comment\">// mark the current coordinates on the solution matrix</span>\n  solution[y][x] = <span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-comment\">// attempt to move right</span>\n  <span class=\"hljs-keyword\">const</span> right = <span class=\"hljs-title function_\">getPathPart</span>(grid, x + <span class=\"hljs-number\">1</span>, y, solution, path + <span class=\"hljs-string\">&#x27;R&#x27;</span>)\n  <span class=\"hljs-keyword\">if</span> (right) <span class=\"hljs-keyword\">return</span> right\n\n  <span class=\"hljs-comment\">// right didn&#x27;t work: attempt to move down</span>\n  <span class=\"hljs-keyword\">const</span> down = <span class=\"hljs-title function_\">getPathPart</span>(grid, x, y + <span class=\"hljs-number\">1</span>, solution, path + <span class=\"hljs-string\">&#x27;D&#x27;</span>)\n  <span class=\"hljs-keyword\">if</span> (down) <span class=\"hljs-keyword\">return</span> down\n\n  <span class=\"hljs-comment\">// down didn&#x27;t work: attempt to move up</span>\n  <span class=\"hljs-keyword\">const</span> up = <span class=\"hljs-title function_\">getPathPart</span>(grid, x, y - <span class=\"hljs-number\">1</span>, solution, path + <span class=\"hljs-string\">&#x27;U&#x27;</span>)\n  <span class=\"hljs-keyword\">if</span> (up) <span class=\"hljs-keyword\">return</span> up\n\n  <span class=\"hljs-comment\">// up didn&#x27;t work: attempt to move left</span>\n  <span class=\"hljs-keyword\">const</span> left = <span class=\"hljs-title function_\">getPathPart</span>(grid, x - <span class=\"hljs-number\">1</span>, y, solution, path + <span class=\"hljs-string\">&#x27;L&#x27;</span>)\n  <span class=\"hljs-keyword\">if</span> (left) <span class=\"hljs-keyword\">return</span> left\n\n  <span class=\"hljs-comment\">// no direction was successful: remove this cell from the solution matrix and backtrack</span>\n  solution[y][x] = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getPath</span> (grid) {\n  <span class=\"hljs-comment\">// grid dimensions</span>\n  <span class=\"hljs-keyword\">const</span> n = grid.<span class=\"hljs-property\">length</span>\n\n  <span class=\"hljs-comment\">// prepare solution matrix</span>\n  <span class=\"hljs-keyword\">const</span> solution = []\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n    <span class=\"hljs-keyword\">const</span> row = <span class=\"hljs-title class_\">Array</span>(n)\n    row.<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-number\">0</span>)\n    solution[i] = row\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">getPathPart</span>(grid, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, solution, <span class=\"hljs-string\">&#x27;&#x27;</span>)\n}\n\n<span class=\"hljs-comment\">/**\n * Creates an instance of the &quot;rat in a maze&quot; based on a given grid (maze).\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RatInAMaze</span> {\n  <span class=\"hljs-title function_\">constructor</span> (grid) {\n    <span class=\"hljs-comment\">// first, let&#x27;s do some error checking on the input</span>\n    <span class=\"hljs-title function_\">validateGrid</span>(grid)\n\n    <span class=\"hljs-comment\">// attempt to solve the maze now - all public methods only query the result state later</span>\n    <span class=\"hljs-keyword\">const</span> solution = <span class=\"hljs-title function_\">getPath</span>(grid)\n\n    <span class=\"hljs-keyword\">if</span> (solution !== <span class=\"hljs-literal\">false</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">path</span> = solution\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">solved</span> = <span class=\"hljs-literal\">true</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">path</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">solved</span> = <span class=\"hljs-literal\">false</span>\n    }\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Chiranjeev",
      "email": "6258860@gmail.com",
      "commits": 3
    },
    {
      "name": "Roland Hummel",
      "email": "roland.hummel@qaware.de",
      "commits": 6
    }
  ],
  "explanationUrl": {}
}