{
  "slug": "rb-tree",
  "name": "Rb Tree",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "data_structures/rb_tree.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/rb_tree.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span>\n{\n\t<span class=\"hljs-type\">int</span> key;\n\tnode *parent;\n\t<span class=\"hljs-type\">char</span> color;\n\tnode *left;\n\tnode *right;\n};\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RBtree</span>\n{\n\tnode *root;\n\tnode *q;\n<span class=\"hljs-keyword\">public</span>:\n\t<span class=\"hljs-built_in\">RBtree</span>()\n\t{\n\t\tq = <span class=\"hljs-literal\">NULL</span>;\n\t\troot = <span class=\"hljs-literal\">NULL</span>;\n\t}\n\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">()</span></span>;\n\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insertfix</span><span class=\"hljs-params\">(node *)</span></span>;\n\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">leftrotate</span><span class=\"hljs-params\">(node *)</span></span>;\n\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">rightrotate</span><span class=\"hljs-params\">(node *)</span></span>;\n\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">del</span><span class=\"hljs-params\">()</span></span>;\n\t<span class=\"hljs-function\">node* <span class=\"hljs-title\">successor</span><span class=\"hljs-params\">(node *)</span></span>;\n\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">delfix</span><span class=\"hljs-params\">(node *)</span></span>;\n\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">disp</span><span class=\"hljs-params\">()</span></span>;\n\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">display</span><span class=\"hljs-params\">(node *)</span></span>;\n\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">()</span></span>;\n};\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">RBtree::insert</span><span class=\"hljs-params\">()</span>\n</span>{\n\t<span class=\"hljs-type\">int</span> z, i = <span class=\"hljs-number\">0</span>;\n\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter key of the node to be inserted: &quot;</span>;\n\tcin &gt;&gt; z;\n\tnode *p, *q;\n\tnode *t = <span class=\"hljs-keyword\">new</span> node;\n\tt-&gt;key = z;\n\tt-&gt;left = <span class=\"hljs-literal\">NULL</span>;\n\tt-&gt;right = <span class=\"hljs-literal\">NULL</span>;\n\tt-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\tp = root;\n\tq = <span class=\"hljs-literal\">NULL</span>;\n\t<span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)\n\t{\n\t\troot = t;\n\t\tt-&gt;parent = <span class=\"hljs-literal\">NULL</span>;\n\t}\n\t<span class=\"hljs-keyword\">else</span>\n\t{\n\t\t<span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-literal\">NULL</span>)\n\t\t{\n\t\t\tq = p;\n\t\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;key &lt; t-&gt;key)\n\t\t\t\tp = p-&gt;right;\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t\tp = p-&gt;left;\n\t\t}\n\t\tt-&gt;parent = q;\n\t\t<span class=\"hljs-keyword\">if</span> (q-&gt;key &lt; t-&gt;key)\n\t\t\tq-&gt;right = t;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tq-&gt;left = t;\n\t}\n\t<span class=\"hljs-built_in\">insertfix</span>(t);\n}\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">RBtree::insertfix</span><span class=\"hljs-params\">(node *t)</span>\n</span>{\n\tnode *u;\n\t<span class=\"hljs-keyword\">if</span> (root == t)\n\t{\n\t\tt-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t<span class=\"hljs-keyword\">return</span>;\n\t}\n\t<span class=\"hljs-keyword\">while</span> (t-&gt;parent != <span class=\"hljs-literal\">NULL</span> &amp;&amp; t-&gt;parent-&gt;color == <span class=\"hljs-string\">&#x27;r&#x27;</span>)\n\t{\n\t\tnode *g = t-&gt;parent-&gt;parent;\n\t\t<span class=\"hljs-keyword\">if</span> (g-&gt;left == t-&gt;parent)\n\t\t{\n\t\t\t<span class=\"hljs-keyword\">if</span> (g-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n\t\t\t{\n\t\t\t\tu = g-&gt;right;\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (u-&gt;color == <span class=\"hljs-string\">&#x27;r&#x27;</span>)\n\t\t\t\t{\n\t\t\t\t\tt-&gt;parent-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\t\tu-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\t\tg-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\t\tt = g;\n\t\t\t\t}\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t{\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (t-&gt;parent-&gt;right == t)\n\t\t\t\t{\n\t\t\t\t\tt = t-&gt;parent;\n\t\t\t\t\t<span class=\"hljs-built_in\">leftrotate</span>(t);\n\t\t\t\t}\n\t\t\t\tt-&gt;parent-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\tg-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\t<span class=\"hljs-built_in\">rightrotate</span>(g);\n\t\t\t}\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t{\n\t\t\t<span class=\"hljs-keyword\">if</span> (g-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n\t\t\t{\n\t\t\t\tu = g-&gt;left;\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (u-&gt;color == <span class=\"hljs-string\">&#x27;r&#x27;</span>)\n\t\t\t\t{\n\t\t\t\t\tt-&gt;parent-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\t\tu-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\t\tg-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\t\tt = g;\n\t\t\t\t}\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t{\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (t-&gt;parent-&gt;left == t)\n\t\t\t\t{\n\t\t\t\t\tt = t-&gt;parent;\n\t\t\t\t\t<span class=\"hljs-built_in\">rightrotate</span>(t);\n\t\t\t\t}\n\t\t\t\tt-&gt;parent-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\tg-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\t<span class=\"hljs-built_in\">leftrotate</span>(g);\n\t\t\t}\n\t\t}\n\t\troot-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">RBtree::del</span><span class=\"hljs-params\">()</span>\n</span>{\n\t<span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)\n\t{\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEmpty Tree.&quot;</span>;\n\t\t<span class=\"hljs-keyword\">return</span>;\n\t}\n\t<span class=\"hljs-type\">int</span> x;\n\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the key of the node to be deleted: &quot;</span>;\n\tcin &gt;&gt; x;\n\tnode *p;\n\tp = root;\n\tnode *y = <span class=\"hljs-literal\">NULL</span>;\n\tnode *q = <span class=\"hljs-literal\">NULL</span>;\n\t<span class=\"hljs-type\">int</span> found = <span class=\"hljs-number\">0</span>;\n\t<span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-literal\">NULL</span> &amp;&amp; found == <span class=\"hljs-number\">0</span>)\n\t{\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;key == x)\n\t\t\tfound = <span class=\"hljs-number\">1</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (found == <span class=\"hljs-number\">0</span>)\n\t\t{\n\t\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;key &lt; x)\n\t\t\t\tp = p-&gt;right;\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t\tp = p-&gt;left;\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">if</span> (found == <span class=\"hljs-number\">0</span>)\n\t{\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nElement Not Found.&quot;</span>;\n\t\t<span class=\"hljs-keyword\">return</span>;\n\t}\n\t<span class=\"hljs-keyword\">else</span>\n\t{\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nDeleted Element: &quot;</span> &lt;&lt; p-&gt;key;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nColour: &quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;Black\\n&quot;</span>;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;Red\\n&quot;</span>;\n\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;parent != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nParent: &quot;</span> &lt;&lt; p-&gt;parent-&gt;key;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nThere is no parent of the node.  &quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nRight Child: &quot;</span> &lt;&lt; p-&gt;right-&gt;key;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nThere is no right child of the node.  &quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nLeft Child: &quot;</span> &lt;&lt; p-&gt;left-&gt;key;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nThere is no left child of the node.  &quot;</span>;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nNode Deleted.&quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;left == <span class=\"hljs-literal\">NULL</span> || p-&gt;right == <span class=\"hljs-literal\">NULL</span>)\n\t\t\ty = p;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\ty = <span class=\"hljs-built_in\">successor</span>(p);\n\t\t<span class=\"hljs-keyword\">if</span> (y-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tq = y-&gt;left;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t{\n\t\t\t<span class=\"hljs-keyword\">if</span> (y-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n\t\t\t\tq = y-&gt;right;\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t\tq = <span class=\"hljs-literal\">NULL</span>;\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> (q != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tq-&gt;parent = y-&gt;parent;\n\t\t<span class=\"hljs-keyword\">if</span> (y-&gt;parent == <span class=\"hljs-literal\">NULL</span>)\n\t\t\troot = q;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t{\n\t\t\t<span class=\"hljs-keyword\">if</span> (y == y-&gt;parent-&gt;left)\n\t\t\t\ty-&gt;parent-&gt;left = q;\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t\ty-&gt;parent-&gt;right = q;\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> (y != p)\n\t\t{\n\t\t\tp-&gt;color = y-&gt;color;\n\t\t\tp-&gt;key = y-&gt;key;\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> (y-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>)\n\t\t\t<span class=\"hljs-built_in\">delfix</span>(q);\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">RBtree::delfix</span><span class=\"hljs-params\">(node *p)</span>\n</span>{\n\tnode *s;\n\t<span class=\"hljs-keyword\">while</span> (p != root &amp;&amp; p-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>)\n\t{\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;parent-&gt;left == p)\n\t\t{\n\t\t\ts = p-&gt;parent-&gt;right;\n\t\t\t<span class=\"hljs-keyword\">if</span> (s-&gt;color == <span class=\"hljs-string\">&#x27;r&#x27;</span>)\n\t\t\t{\n\t\t\t\ts-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\tp-&gt;parent-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\t<span class=\"hljs-built_in\">leftrotate</span>(p-&gt;parent);\n\t\t\t\ts = p-&gt;parent-&gt;right;\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">if</span> (s-&gt;right-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>&amp;&amp;s-&gt;left-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>)\n\t\t\t{\n\t\t\t\ts-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\tp = p-&gt;parent;\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t{\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (s-&gt;right-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>)\n\t\t\t\t{\n\t\t\t\t\ts-&gt;left-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\t\ts-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\t\t<span class=\"hljs-built_in\">rightrotate</span>(s);\n\t\t\t\t\ts = p-&gt;parent-&gt;right;\n\t\t\t\t}\n\t\t\t\ts-&gt;color = p-&gt;parent-&gt;color;\n\t\t\t\tp-&gt;parent-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\ts-&gt;right-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\t<span class=\"hljs-built_in\">leftrotate</span>(p-&gt;parent);\n\t\t\t\tp = root;\n\t\t\t}\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t{\n\t\t\ts = p-&gt;parent-&gt;left;\n\t\t\t<span class=\"hljs-keyword\">if</span> (s-&gt;color == <span class=\"hljs-string\">&#x27;r&#x27;</span>)\n\t\t\t{\n\t\t\t\ts-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\tp-&gt;parent-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\t<span class=\"hljs-built_in\">rightrotate</span>(p-&gt;parent);\n\t\t\t\ts = p-&gt;parent-&gt;left;\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">if</span> (s-&gt;left-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>&amp;&amp;s-&gt;right-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>)\n\t\t\t{\n\t\t\t\ts-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\tp = p-&gt;parent;\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t{\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (s-&gt;left-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>)\n\t\t\t\t{\n\t\t\t\t\ts-&gt;right-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\t\ts-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\t\t<span class=\"hljs-built_in\">leftrotate</span>(s);\n\t\t\t\t\ts = p-&gt;parent-&gt;left;\n\t\t\t\t}\n\t\t\t\ts-&gt;color = p-&gt;parent-&gt;color;\n\t\t\t\tp-&gt;parent-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\ts-&gt;left-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\t<span class=\"hljs-built_in\">rightrotate</span>(p-&gt;parent);\n\t\t\t\tp = root;\n\t\t\t}\n\t\t}\n\t\tp-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\troot-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">RBtree::leftrotate</span><span class=\"hljs-params\">(node *p)</span>\n</span>{\n\t<span class=\"hljs-keyword\">if</span> (p-&gt;right == <span class=\"hljs-literal\">NULL</span>)\n\t\t<span class=\"hljs-keyword\">return</span>;\n\t<span class=\"hljs-keyword\">else</span>\n\t{\n\t\tnode *y = p-&gt;right;\n\t\t<span class=\"hljs-keyword\">if</span> (y-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n\t\t{\n\t\t\tp-&gt;right = y-&gt;left;\n\t\t\ty-&gt;left-&gt;parent = p;\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tp-&gt;right = <span class=\"hljs-literal\">NULL</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;parent != <span class=\"hljs-literal\">NULL</span>)\n\t\t\ty-&gt;parent = p-&gt;parent;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;parent == <span class=\"hljs-literal\">NULL</span>)\n\t\t\troot = y;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t{\n\t\t\t<span class=\"hljs-keyword\">if</span> (p == p-&gt;parent-&gt;left)\n\t\t\t\tp-&gt;parent-&gt;left = y;\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t\tp-&gt;parent-&gt;right = y;\n\t\t}\n\t\ty-&gt;left = p;\n\t\tp-&gt;parent = y;\n\t}\n}\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">RBtree::rightrotate</span><span class=\"hljs-params\">(node *p)</span>\n</span>{\n\t<span class=\"hljs-keyword\">if</span> (p-&gt;left == <span class=\"hljs-literal\">NULL</span>)\n\t\t<span class=\"hljs-keyword\">return</span>;\n\t<span class=\"hljs-keyword\">else</span>\n\t{\n\t\tnode *y = p-&gt;left;\n\t\t<span class=\"hljs-keyword\">if</span> (y-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n\t\t{\n\t\t\tp-&gt;left = y-&gt;right;\n\t\t\ty-&gt;right-&gt;parent = p;\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tp-&gt;left = <span class=\"hljs-literal\">NULL</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;parent != <span class=\"hljs-literal\">NULL</span>)\n\t\t\ty-&gt;parent = p-&gt;parent;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;parent == <span class=\"hljs-literal\">NULL</span>)\n\t\t\troot = y;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t{\n\t\t\t<span class=\"hljs-keyword\">if</span> (p == p-&gt;parent-&gt;left)\n\t\t\t\tp-&gt;parent-&gt;left = y;\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t\tp-&gt;parent-&gt;right = y;\n\t\t}\n\t\ty-&gt;right = p;\n\t\tp-&gt;parent = y;\n\t}\n}\n\n<span class=\"hljs-function\">node* <span class=\"hljs-title\">RBtree::successor</span><span class=\"hljs-params\">(node *p)</span>\n</span>{\n\tnode *y = <span class=\"hljs-literal\">NULL</span>;\n\t<span class=\"hljs-keyword\">if</span> (p-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n\t{\n\t\ty = p-&gt;left;\n\t\t<span class=\"hljs-keyword\">while</span> (y-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n\t\t\ty = y-&gt;right;\n\t}\n\t<span class=\"hljs-keyword\">else</span>\n\t{\n\t\ty = p-&gt;right;\n\t\t<span class=\"hljs-keyword\">while</span> (y-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n\t\t\ty = y-&gt;left;\n\t}\n\t<span class=\"hljs-keyword\">return</span> y;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">RBtree::disp</span><span class=\"hljs-params\">()</span>\n</span>{\n\t<span class=\"hljs-built_in\">display</span>(root);\n}\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">RBtree::display</span><span class=\"hljs-params\">(node *p)</span>\n</span>{\n\t<span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)\n\t{\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEmpty Tree.&quot;</span>;\n\t\t<span class=\"hljs-keyword\">return</span>;\n\t}\n\t<span class=\"hljs-keyword\">if</span> (p != <span class=\"hljs-literal\">NULL</span>)\n\t{\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\t NODE: &quot;</span>;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Key: &quot;</span> &lt;&lt; p-&gt;key;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Colour: &quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;Black&quot;</span>;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;Red&quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;parent != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Parent: &quot;</span> &lt;&lt; p-&gt;parent-&gt;key;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n There is no parent of the node.  &quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Right Child: &quot;</span> &lt;&lt; p-&gt;right-&gt;key;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n There is no right child of the node.  &quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Left Child: &quot;</span> &lt;&lt; p-&gt;left-&gt;key;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n There is no left child of the node.  &quot;</span>;\n\t\tcout &lt;&lt; endl;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;left)\n\t\t{\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\nLeft:\\n&quot;</span>;\n\t\t\t<span class=\"hljs-built_in\">display</span>(p-&gt;left);\n\t\t}\n\t\t<span class=\"hljs-comment\">/*else\n\t\t cout&lt;&lt;&quot;\\nNo Left Child.\\n&quot;;*/</span>\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;right)\n\t\t{\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\nRight:\\n&quot;</span>;\n\t\t\t<span class=\"hljs-built_in\">display</span>(p-&gt;right);\n\t\t}\n\t\t<span class=\"hljs-comment\">/*else\n\t\t cout&lt;&lt;&quot;\\nNo Right Child.\\n&quot;*/</span>\n\t}\n}\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">RBtree::search</span><span class=\"hljs-params\">()</span>\n</span>{\n\t<span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)\n\t{\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEmpty Tree\\n&quot;</span>;\n\t\t<span class=\"hljs-keyword\">return</span>;\n\t}\n\t<span class=\"hljs-type\">int</span> x;\n\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Enter key of the node to be searched: &quot;</span>;\n\tcin &gt;&gt; x;\n\tnode *p = root;\n\t<span class=\"hljs-type\">int</span> found = <span class=\"hljs-number\">0</span>;\n\t<span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-literal\">NULL</span> &amp;&amp; found == <span class=\"hljs-number\">0</span>)\n\t{\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;key == x)\n\t\t\tfound = <span class=\"hljs-number\">1</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (found == <span class=\"hljs-number\">0</span>)\n\t\t{\n\t\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;key &lt; x)\n\t\t\t\tp = p-&gt;right;\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t\tp = p-&gt;left;\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">if</span> (found == <span class=\"hljs-number\">0</span>)\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nElement Not Found.&quot;</span>;\n\t<span class=\"hljs-keyword\">else</span>\n\t{\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\t FOUND NODE: &quot;</span>;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Key: &quot;</span> &lt;&lt; p-&gt;key;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Colour: &quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;Black&quot;</span>;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;Red&quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;parent != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Parent: &quot;</span> &lt;&lt; p-&gt;parent-&gt;key;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n There is no parent of the node.  &quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Right Child: &quot;</span> &lt;&lt; p-&gt;right-&gt;key;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n There is no right child of the node.  &quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Left Child: &quot;</span> &lt;&lt; p-&gt;left-&gt;key;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n There is no left child of the node.  &quot;</span>;\n\t\tcout &lt;&lt; endl;\n\n\t}\n}\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n\t<span class=\"hljs-type\">int</span> ch, y = <span class=\"hljs-number\">0</span>;\n\tRBtree obj;\n\t<span class=\"hljs-keyword\">do</span>\n\t{\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\t RED BLACK TREE &quot;</span>;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n 1. Insert in the tree &quot;</span>;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n 2. Delete a node from the tree&quot;</span>;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n 3. Search for an element in the tree&quot;</span>;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n 4. Display the tree &quot;</span>;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n 5. Exit &quot;</span>;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter Your Choice: &quot;</span>;\n\t\tcin &gt;&gt; ch;\n\t\t<span class=\"hljs-keyword\">switch</span> (ch)\n\t\t{\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>: obj.<span class=\"hljs-built_in\">insert</span>();\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nNode Inserted.\\n&quot;</span>;\n\t\t\t<span class=\"hljs-keyword\">break</span>;\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>: obj.<span class=\"hljs-built_in\">del</span>();\n\t\t\t<span class=\"hljs-keyword\">break</span>;\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>: obj.<span class=\"hljs-built_in\">search</span>();\n\t\t\t<span class=\"hljs-keyword\">break</span>;\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>: obj.<span class=\"hljs-built_in\">disp</span>();\n\t\t\t<span class=\"hljs-keyword\">break</span>;\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>: y = <span class=\"hljs-number\">1</span>;\n\t\t\t<span class=\"hljs-keyword\">break</span>;\n\t\t<span class=\"hljs-keyword\">default</span>: cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter a Valid Choice.&quot;</span>;\n\t\t}\n\t\tcout &lt;&lt; endl;\n\n\t} <span class=\"hljs-keyword\">while</span> (y != <span class=\"hljs-number\">1</span>);\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n}\n"
    },
    "rust": {
      "dir": "src/data_structures/rb_tree.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/data_structures/rb_tree.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::boxed::<span class=\"hljs-type\">Box</span>;\n<span class=\"hljs-keyword\">use</span> std::cmp::{<span class=\"hljs-built_in\">Ord</span>, Ordering};\n<span class=\"hljs-keyword\">use</span> std::iter::<span class=\"hljs-built_in\">Iterator</span>;\n<span class=\"hljs-keyword\">use</span> std::ptr::null_mut;\n\n<span class=\"hljs-meta\">#[derive(Copy, Clone)]</span>\n<span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Color</span> {\n    Red,\n    Black,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">RBNode</span>&lt;K: <span class=\"hljs-built_in\">Ord</span>, V&gt; {\n    key: K,\n    value: V,\n    color: Color,\n    parent: *<span class=\"hljs-keyword\">mut</span> RBNode&lt;K, V&gt;,\n    left: *<span class=\"hljs-keyword\">mut</span> RBNode&lt;K, V&gt;,\n    right: *<span class=\"hljs-keyword\">mut</span> RBNode&lt;K, V&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;K: <span class=\"hljs-built_in\">Ord</span>, V&gt; RBNode&lt;K, V&gt; {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>(key: K, value: V) <span class=\"hljs-punctuation\">-&gt;</span> RBNode&lt;K, V&gt; {\n        RBNode {\n            key,\n            value,\n            color: Color::Red,\n            parent: <span class=\"hljs-title function_ invoke__\">null_mut</span>(),\n            left: <span class=\"hljs-title function_ invoke__\">null_mut</span>(),\n            right: <span class=\"hljs-title function_ invoke__\">null_mut</span>(),\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">RBTree</span>&lt;K: <span class=\"hljs-built_in\">Ord</span>, V&gt; {\n    root: *<span class=\"hljs-keyword\">mut</span> RBNode&lt;K, V&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;K: <span class=\"hljs-built_in\">Ord</span>, V&gt; <span class=\"hljs-built_in\">Default</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">RBTree</span>&lt;K, V&gt; {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">default</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">Self</span>::<span class=\"hljs-title function_ invoke__\">new</span>()\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;K: <span class=\"hljs-built_in\">Ord</span>, V&gt; RBTree&lt;K, V&gt; {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>() <span class=\"hljs-punctuation\">-&gt;</span> RBTree&lt;K, V&gt; {\n        RBTree::&lt;K, V&gt; { root: <span class=\"hljs-title function_ invoke__\">null_mut</span>() }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">find</span>(&amp;<span class=\"hljs-keyword\">self</span>, key: &amp;K) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;&amp;V&gt; {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">node</span> = <span class=\"hljs-keyword\">self</span>.root;\n            <span class=\"hljs-keyword\">while</span> !node.<span class=\"hljs-title function_ invoke__\">is_null</span>() {\n                node = <span class=\"hljs-title function_ invoke__\">match</span> (*node).key.<span class=\"hljs-title function_ invoke__\">cmp</span>(key) {\n                    Ordering::Less =&gt; (*node).right,\n                    Ordering::Equal =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;(*node).value),\n                    Ordering::Greater =&gt; (*node).left,\n                }\n            }\n        }\n        <span class=\"hljs-literal\">None</span>\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, key: K, value: V) {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">parent</span> = <span class=\"hljs-title function_ invoke__\">null_mut</span>();\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">node</span> = <span class=\"hljs-keyword\">self</span>.root;\n            <span class=\"hljs-keyword\">while</span> !node.<span class=\"hljs-title function_ invoke__\">is_null</span>() {\n                parent = node;\n                node = <span class=\"hljs-title function_ invoke__\">match</span> (*node).key.<span class=\"hljs-title function_ invoke__\">cmp</span>(&amp;key) {\n                    Ordering::Less =&gt; (*node).right,\n                    Ordering::Equal =&gt; {\n                        (*node).value = value;\n                        <span class=\"hljs-keyword\">return</span>;\n                    }\n                    Ordering::Greater =&gt; (*node).left,\n                }\n            }\n            node = Box::<span class=\"hljs-title function_ invoke__\">into_raw</span>(Box::<span class=\"hljs-title function_ invoke__\">new</span>(RBNode::<span class=\"hljs-title function_ invoke__\">new</span>(key, value)));\n            <span class=\"hljs-keyword\">if</span> !parent.<span class=\"hljs-title function_ invoke__\">is_null</span>() {\n                <span class=\"hljs-title function_ invoke__\">if</span> (*node).key &lt; (*parent).key {\n                    (*parent).left = node;\n                } <span class=\"hljs-keyword\">else</span> {\n                    (*parent).right = node;\n                }\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">self</span>.root = node;\n            }\n            (*node).parent = parent;\n            <span class=\"hljs-title function_ invoke__\">insert_fixup</span>(<span class=\"hljs-keyword\">self</span>, node);\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">delete</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, key: &amp;K) {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">parent</span> = <span class=\"hljs-title function_ invoke__\">null_mut</span>();\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">node</span> = <span class=\"hljs-keyword\">self</span>.root;\n            <span class=\"hljs-keyword\">while</span> !node.<span class=\"hljs-title function_ invoke__\">is_null</span>() {\n                node = <span class=\"hljs-title function_ invoke__\">match</span> (*node).key.<span class=\"hljs-title function_ invoke__\">cmp</span>(key) {\n                    Ordering::Less =&gt; {\n                        parent = node;\n                        (*node).right\n                    }\n                    Ordering::Equal =&gt; <span class=\"hljs-keyword\">break</span>,\n                    Ordering::Greater =&gt; {\n                        parent = node;\n                        (*node).left\n                    }\n                };\n            }\n\n            <span class=\"hljs-keyword\">if</span> node.<span class=\"hljs-title function_ invoke__\">is_null</span>() {\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\n            <span class=\"hljs-comment\">/* cl and cr denote left and right child of node, respectively. */</span>\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">cl</span> = (*node).left;\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">cr</span> = (*node).right;\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">deleted_color</span>;\n\n            <span class=\"hljs-keyword\">if</span> cl.<span class=\"hljs-title function_ invoke__\">is_null</span>() {\n                <span class=\"hljs-title function_ invoke__\">replace_node</span>(<span class=\"hljs-keyword\">self</span>, parent, node, cr);\n                <span class=\"hljs-keyword\">if</span> cr.<span class=\"hljs-title function_ invoke__\">is_null</span>() {\n                    <span class=\"hljs-comment\">/*\n                     * Case 1 - cl and cr are both NULL\n                     * (n could be either color here)\n                     *\n                     *     (n)             NULL\n                     *    /   \\    --&gt;\n                     *  NULL  NULL\n                     */</span>\n\n                    deleted_color = (*node).color;\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-comment\">/*\n                     * Case 2 - cl is NULL and cr is not NULL\n                     *\n                     *     N             Cr\n                     *    / \\    --&gt;    /  \\\n                     *  NULL cr       NULL NULL\n                     */</span>\n\n                    (*cr).parent = parent;\n                    (*cr).color = Color::Black;\n                    deleted_color = Color::Red;\n                }\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> cr.<span class=\"hljs-title function_ invoke__\">is_null</span>() {\n                <span class=\"hljs-comment\">/*\n                 * Case 3 - cl is not NULL and cr is NULL\n                 *\n                 *     N             Cl\n                 *    / \\    --&gt;    /  \\\n                 *  cl  NULL      NULL NULL\n                 */</span>\n\n                <span class=\"hljs-title function_ invoke__\">replace_node</span>(<span class=\"hljs-keyword\">self</span>, parent, node, cl);\n                (*cl).parent = parent;\n                (*cl).color = Color::Black;\n                deleted_color = Color::Red;\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">victim</span> = (*node).right;\n                <span class=\"hljs-keyword\">while</span> !(*victim).left.<span class=\"hljs-title function_ invoke__\">is_null</span>() {\n                    victim = (*victim).left;\n                }\n                <span class=\"hljs-keyword\">if</span> victim == (*node).right {\n                    <span class=\"hljs-comment\">/* Case 4 - victim is the right child of node\n                     *\n                     *     N         N         n\n                     *    / \\       / \\       / \\\n                     *  (cl) cr   (cl) Cr    Cl  Cr\n                     *\n                     *     N         n\n                     *    / \\       / \\\n                     *  (cl) Cr    Cl  Cr\n                     *         \\         \\\n                     *         crr       crr\n                     */</span>\n\n                    <span class=\"hljs-title function_ invoke__\">replace_node</span>(<span class=\"hljs-keyword\">self</span>, parent, node, victim);\n                    (*victim).parent = parent;\n                    deleted_color = (*victim).color;\n                    (*victim).color = (*node).color;\n                    (*victim).left = cl;\n                    (*cl).parent = victim;\n                    <span class=\"hljs-title function_ invoke__\">if</span> (*victim).right.<span class=\"hljs-title function_ invoke__\">is_null</span>() {\n                        parent = victim;\n                    } <span class=\"hljs-keyword\">else</span> {\n                        deleted_color = Color::Red;\n                        (*(*victim).right).color = Color::Black;\n                    }\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-comment\">/*\n                     * Case 5 - victim is not the right child of node\n                     */</span>\n\n                    <span class=\"hljs-comment\">/* vp and vr denote parent and right child of victim, respectively. */</span>\n                    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">vp</span> = (*victim).parent;\n                    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">vr</span> = (*victim).right;\n                    (*vp).left = vr;\n                    <span class=\"hljs-keyword\">if</span> vr.<span class=\"hljs-title function_ invoke__\">is_null</span>() {\n                        deleted_color = (*victim).color;\n                    } <span class=\"hljs-keyword\">else</span> {\n                        deleted_color = Color::Red;\n                        (*vr).parent = vp;\n                        (*vr).color = Color::Black;\n                    }\n                    <span class=\"hljs-title function_ invoke__\">replace_node</span>(<span class=\"hljs-keyword\">self</span>, parent, node, victim);\n                    (*victim).parent = parent;\n                    (*victim).color = (*node).color;\n                    (*victim).left = cl;\n                    (*victim).right = cr;\n                    (*cl).parent = victim;\n                    (*cr).parent = victim;\n                    parent = vp;\n                }\n            }\n\n            <span class=\"hljs-comment\">/* release resource */</span>\n            Box::<span class=\"hljs-title function_ invoke__\">from_raw</span>(node);\n            <span class=\"hljs-keyword\">if</span> matches!(deleted_color, Color::Black) {\n                <span class=\"hljs-title function_ invoke__\">delete_fixup</span>(<span class=\"hljs-keyword\">self</span>, parent);\n            }\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">iter</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>&gt;(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> RBTreeIterator&lt;<span class=\"hljs-symbol\">&#x27;a</span>, K, V&gt; {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">iterator</span> = RBTreeIterator { stack: Vec::<span class=\"hljs-title function_ invoke__\">new</span>() };\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">node</span> = <span class=\"hljs-keyword\">self</span>.root;\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-keyword\">while</span> !node.<span class=\"hljs-title function_ invoke__\">is_null</span>() {\n                iterator.stack.<span class=\"hljs-title function_ invoke__\">push</span>(&amp;*node);\n                node = (*node).left;\n            }\n        }\n        iterator\n    }\n}\n\n<span class=\"hljs-meta\">#[inline]</span>\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert_fixup</span>&lt;K: <span class=\"hljs-built_in\">Ord</span>, V&gt;(tree: &amp;<span class=\"hljs-keyword\">mut</span> RBTree&lt;K, V&gt;, <span class=\"hljs-keyword\">mut</span> node: *<span class=\"hljs-keyword\">mut</span> RBNode&lt;K, V&gt;) {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">parent</span>: *<span class=\"hljs-keyword\">mut</span> RBNode&lt;K, V&gt; = (*node).parent;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">gparent</span>: *<span class=\"hljs-keyword\">mut</span> RBNode&lt;K, V&gt;;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">tmp</span>: *<span class=\"hljs-keyword\">mut</span> RBNode&lt;K, V&gt;;\n\n    <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-comment\">/*\n         * Loop invariant:\n         * - node is red\n         */</span>\n\n        <span class=\"hljs-keyword\">if</span> parent.<span class=\"hljs-title function_ invoke__\">is_null</span>() {\n            (*node).color = Color::Black;\n            <span class=\"hljs-keyword\">break</span>;\n        }\n\n        <span class=\"hljs-keyword\">if</span> matches!((*parent).color, Color::Black) {\n            <span class=\"hljs-keyword\">break</span>;\n        }\n\n        gparent = (*parent).parent;\n        tmp = (*gparent).right;\n        <span class=\"hljs-keyword\">if</span> parent != tmp {\n            <span class=\"hljs-comment\">/* parent = (*gparent).left */</span>\n            <span class=\"hljs-keyword\">if</span> !tmp.<span class=\"hljs-title function_ invoke__\">is_null</span>() &amp;&amp; matches!((*tmp).color, Color::Red) {\n                <span class=\"hljs-comment\">/*\n                 * Case 1 - color flips and recurse at g\n                 *\n                 *      G               g\n                 *     / \\             / \\\n                 *    p   u    --&gt;    P   U\n                 *   /               /\n                 *  n               n\n                 */</span>\n\n                (*parent).color = Color::Black;\n                (*tmp).color = Color::Black;\n                (*gparent).color = Color::Red;\n                node = gparent;\n                parent = (*node).parent;\n                <span class=\"hljs-keyword\">continue</span>;\n            }\n            tmp = (*parent).right;\n            <span class=\"hljs-keyword\">if</span> node == tmp {\n                <span class=\"hljs-comment\">/* node = (*parent).right */</span>\n                <span class=\"hljs-comment\">/*\n                 * Case 2 - left rotate at p (then Case 3)\n                 *\n                 *    G               G\n                 *   / \\             / \\\n                 *  p   U    --&gt;    n   U\n                 *   \\             /\n                 *    n           p\n                 */</span>\n\n                <span class=\"hljs-title function_ invoke__\">left_rotate</span>(tree, parent);\n                parent = node;\n            }\n            <span class=\"hljs-comment\">/*\n             * Case 3 - right rotate at g\n             *\n             *      G               P\n             *     / \\             / \\\n             *    p   U    --&gt;    n   g\n             *   /                     \\\n             *  n                       U\n             */</span>\n\n            (*parent).color = Color::Black;\n            (*gparent).color = Color::Red;\n            <span class=\"hljs-title function_ invoke__\">right_rotate</span>(tree, gparent);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">/* parent = (*gparent).right */</span>\n            tmp = (*gparent).left;\n            <span class=\"hljs-keyword\">if</span> !tmp.<span class=\"hljs-title function_ invoke__\">is_null</span>() &amp;&amp; matches!((*tmp).color, Color::Red) {\n                <span class=\"hljs-comment\">/*\n                 * Case 1 - color flips and recurse at g\n                 *    G               g\n                 *   / \\             / \\\n                 *  u   p    --&gt;    U   P\n                 *       \\               \\\n                 *        n               n\n                 */</span>\n\n                (*parent).color = Color::Black;\n                (*tmp).color = Color::Black;\n                (*gparent).color = Color::Red;\n                node = gparent;\n                parent = (*node).parent;\n                <span class=\"hljs-keyword\">continue</span>;\n            }\n            tmp = (*parent).left;\n            <span class=\"hljs-keyword\">if</span> node == tmp {\n                <span class=\"hljs-comment\">/*\n                 * Case 2 - right rotate at p (then Case 3)\n                 *\n                 *       G             G\n                 *      / \\           / \\\n                 *     U   p   --&gt;   U   n\n                 *        /               \\\n                 *       n                 p\n                 */</span>\n\n                <span class=\"hljs-title function_ invoke__\">right_rotate</span>(tree, parent);\n                parent = node;\n            }\n            <span class=\"hljs-comment\">/*\n             * Case 3 - left rotate at g\n             *\n             *       G             P\n             *      / \\           / \\\n             *     U   p   --&gt;   g   n\n             *          \\       /\n             *           n     U\n             */</span>\n\n            (*parent).color = Color::Black;\n            (*gparent).color = Color::Red;\n            <span class=\"hljs-title function_ invoke__\">left_rotate</span>(tree, gparent);\n        }\n        <span class=\"hljs-keyword\">break</span>;\n    }\n}\n\n<span class=\"hljs-meta\">#[inline]</span>\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">delete_fixup</span>&lt;K: <span class=\"hljs-built_in\">Ord</span>, V&gt;(tree: &amp;<span class=\"hljs-keyword\">mut</span> RBTree&lt;K, V&gt;, <span class=\"hljs-keyword\">mut</span> parent: *<span class=\"hljs-keyword\">mut</span> RBNode&lt;K, V&gt;) {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">node</span>: *<span class=\"hljs-keyword\">mut</span> RBNode&lt;K, V&gt; = <span class=\"hljs-title function_ invoke__\">null_mut</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">sibling</span>: *<span class=\"hljs-keyword\">mut</span> RBNode&lt;K, V&gt;;\n    <span class=\"hljs-comment\">/* sl and sr denote left and right child of sibling, respectively. */</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">sl</span>: *<span class=\"hljs-keyword\">mut</span> RBNode&lt;K, V&gt;;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">sr</span>: *<span class=\"hljs-keyword\">mut</span> RBNode&lt;K, V&gt;;\n\n    <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-comment\">/*\n         * Loop invariants:\n         * - node is black (or null on first iteration)\n         * - node is not the root (so parent is not null)\n         * - All leaf paths going through parent and node have a\n         *   black node count that is 1 lower than other leaf paths.\n         */</span>\n        sibling = (*parent).right;\n        <span class=\"hljs-keyword\">if</span> node != sibling {\n            <span class=\"hljs-comment\">/* node = (*parent).left */</span>\n            <span class=\"hljs-keyword\">if</span> matches!((*sibling).color, Color::Red) {\n                <span class=\"hljs-comment\">/*\n                 * Case 1 - left rotate at parent\n                 *\n                 *    P               S\n                 *   / \\             / \\\n                 *  N   s    --&gt;    p   Sr\n                 *     / \\         / \\\n                 *    Sl  Sr      N  Sl\n                 */</span>\n\n                <span class=\"hljs-title function_ invoke__\">left_rotate</span>(tree, parent);\n                (*parent).color = Color::Red;\n                (*sibling).color = Color::Black;\n                sibling = (*parent).right;\n            }\n            sl = (*sibling).left;\n            sr = (*sibling).right;\n\n            <span class=\"hljs-keyword\">if</span> !sl.<span class=\"hljs-title function_ invoke__\">is_null</span>() &amp;&amp; matches!((*sl).color, Color::Red) {\n                <span class=\"hljs-comment\">/*\n                 * Case 2 - right rotate at sibling and then left rotate at parent\n                 * (p and sr could be either color here)\n                 *\n                 *   (p)             (p)              (sl)\n                 *   / \\             / \\              / \\\n                 *  N   S    --&gt;    N   sl    --&gt;    P   S\n                 *     / \\                \\         /     \\\n                 *    sl (sr)              S       N      (sr)\n                 *                          \\\n                 *                          (sr)\n                 */</span>\n\n                (*sl).color = (*parent).color;\n                (*parent).color = Color::Black;\n                <span class=\"hljs-title function_ invoke__\">right_rotate</span>(tree, sibling);\n                <span class=\"hljs-title function_ invoke__\">left_rotate</span>(tree, parent);\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> !sr.<span class=\"hljs-title function_ invoke__\">is_null</span>() &amp;&amp; matches!((*sr).color, Color::Red) {\n                <span class=\"hljs-comment\">/*\n                 * Case 3 - left rotate at parent\n                 * (p could be either color here)\n                 *\n                 *   (p)               S\n                 *   / \\              / \\\n                 *  N   S    --&gt;    (p) (sr)\n                 *     / \\          / \\\n                 *    Sl  sr       N   Sl\n                 */</span>\n\n                (*sr).color = (*parent).color;\n                <span class=\"hljs-title function_ invoke__\">left_rotate</span>(tree, parent);\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-comment\">/*\n                 * Case 4 - color clip\n                 * (p could be either color here)\n                 *\n                 *   (p)             (p)\n                 *   / \\             / \\\n                 *  N   S    --&gt;    N   s\n                 *     / \\             / \\\n                 *    Sl  Sr          Sl  Sr\n                 */</span>\n\n                (*sibling).color = Color::Red;\n                <span class=\"hljs-keyword\">if</span> matches!((*parent).color, Color::Black) {\n                    node = parent;\n                    parent = (*node).parent;\n                    <span class=\"hljs-keyword\">continue</span>;\n                }\n                (*parent).color = Color::Black;\n            }\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">/* node = (*parent).right */</span>\n            sibling = (*parent).left;\n            <span class=\"hljs-keyword\">if</span> matches!((*sibling).color, Color::Red) {\n                <span class=\"hljs-comment\">/*\n                 * Case 1 - right rotate at parent\n                 */</span>\n\n                <span class=\"hljs-title function_ invoke__\">right_rotate</span>(tree, parent);\n                (*parent).color = Color::Red;\n                (*sibling).color = Color::Black;\n                sibling = (*parent).right;\n            }\n            sl = (*sibling).left;\n            sr = (*sibling).right;\n\n            <span class=\"hljs-keyword\">if</span> !sr.<span class=\"hljs-title function_ invoke__\">is_null</span>() &amp;&amp; matches!((*sr).color, Color::Red) {\n                <span class=\"hljs-comment\">/*\n                 * Case 2 - left rotate at sibling and then right rotate at parent\n                 */</span>\n\n                (*sr).color = (*parent).color;\n                (*parent).color = Color::Black;\n                <span class=\"hljs-title function_ invoke__\">left_rotate</span>(tree, sibling);\n                <span class=\"hljs-title function_ invoke__\">right_rotate</span>(tree, parent);\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> !sl.<span class=\"hljs-title function_ invoke__\">is_null</span>() &amp;&amp; matches!((*sl).color, Color::Red) {\n                <span class=\"hljs-comment\">/*\n                 * Case 3 - right rotate at parent\n                 */</span>\n\n                (*sl).color = (*parent).color;\n                <span class=\"hljs-title function_ invoke__\">right_rotate</span>(tree, parent);\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-comment\">/*\n                 * Case 4 - color flip\n                 */</span>\n\n                (*sibling).color = Color::Red;\n                <span class=\"hljs-keyword\">if</span> matches!((*parent).color, Color::Black) {\n                    node = parent;\n                    parent = (*node).parent;\n                    <span class=\"hljs-keyword\">continue</span>;\n                }\n                (*parent).color = Color::Black;\n            }\n        }\n        <span class=\"hljs-keyword\">break</span>;\n    }\n}\n\n<span class=\"hljs-meta\">#[inline]</span>\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">left_rotate</span>&lt;K: <span class=\"hljs-built_in\">Ord</span>, V&gt;(tree: &amp;<span class=\"hljs-keyword\">mut</span> RBTree&lt;K, V&gt;, x: *<span class=\"hljs-keyword\">mut</span> RBNode&lt;K, V&gt;) {\n    <span class=\"hljs-comment\">/*\n     * Left rotate at x\n     * (x could also be the left child of p)\n     *\n     *  p           p\n     *   \\           \\\n     *    x    --&gt;    y\n     *   / \\         / \\\n     *      y       x\n     *     / \\     / \\\n     *    c           c\n     */</span>\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">p</span> = (*x).parent;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">y</span> = (*x).right;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">c</span> = (*y).left;\n\n    (*y).left = x;\n    (*x).parent = y;\n    (*x).right = c;\n    <span class=\"hljs-keyword\">if</span> !c.<span class=\"hljs-title function_ invoke__\">is_null</span>() {\n        (*c).parent = x;\n    }\n    <span class=\"hljs-keyword\">if</span> p.<span class=\"hljs-title function_ invoke__\">is_null</span>() {\n        tree.root = y;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-title function_ invoke__\">if</span> (*p).left == x {\n        (*p).left = y;\n    } <span class=\"hljs-keyword\">else</span> {\n        (*p).right = y;\n    }\n    (*y).parent = p;\n}\n\n<span class=\"hljs-meta\">#[inline]</span>\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">right_rotate</span>&lt;K: <span class=\"hljs-built_in\">Ord</span>, V&gt;(tree: &amp;<span class=\"hljs-keyword\">mut</span> RBTree&lt;K, V&gt;, x: *<span class=\"hljs-keyword\">mut</span> RBNode&lt;K, V&gt;) {\n    <span class=\"hljs-comment\">/*\n     * Right rotate at x\n     * (x could also be the left child of p)\n     *\n     *  p           p\n     *   \\           \\\n     *    x    --&gt;    y\n     *   / \\         / \\\n     *  y               x\n     * / \\             / \\\n     *    c           c\n     */</span>\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">p</span> = (*x).parent;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">y</span> = (*x).left;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">c</span> = (*y).right;\n\n    (*y).right = x;\n    (*x).parent = y;\n    (*x).left = c;\n    <span class=\"hljs-keyword\">if</span> !c.<span class=\"hljs-title function_ invoke__\">is_null</span>() {\n        (*c).parent = x;\n    }\n    <span class=\"hljs-keyword\">if</span> p.<span class=\"hljs-title function_ invoke__\">is_null</span>() {\n        tree.root = y;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-title function_ invoke__\">if</span> (*p).left == x {\n        (*p).left = y;\n    } <span class=\"hljs-keyword\">else</span> {\n        (*p).right = y;\n    }\n    (*y).parent = p;\n}\n\n<span class=\"hljs-meta\">#[inline]</span>\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">replace_node</span>&lt;K: <span class=\"hljs-built_in\">Ord</span>, V&gt;(\n    tree: &amp;<span class=\"hljs-keyword\">mut</span> RBTree&lt;K, V&gt;,\n    parent: *<span class=\"hljs-keyword\">mut</span> RBNode&lt;K, V&gt;,\n    node: *<span class=\"hljs-keyword\">mut</span> RBNode&lt;K, V&gt;,\n    new: *<span class=\"hljs-keyword\">mut</span> RBNode&lt;K, V&gt;,\n) {\n    <span class=\"hljs-keyword\">if</span> parent.<span class=\"hljs-title function_ invoke__\">is_null</span>() {\n        tree.root = new;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-title function_ invoke__\">if</span> (*parent).left == node {\n        (*parent).left = new;\n    } <span class=\"hljs-keyword\">else</span> {\n        (*parent).right = new;\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">RBTreeIterator</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, K: <span class=\"hljs-built_in\">Ord</span>, V&gt; {\n    stack: <span class=\"hljs-type\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">&#x27;a</span> RBNode&lt;K, V&gt;&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, K: <span class=\"hljs-built_in\">Ord</span>, V&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">RBTreeIterator</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, K, V&gt; {\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Item</span> = &amp;<span class=\"hljs-symbol\">&#x27;a</span> RBNode&lt;K, V&gt;;\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">next</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-keyword\">Self</span>::Item&gt; {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.stack.<span class=\"hljs-title function_ invoke__\">pop</span>() {\n            <span class=\"hljs-title function_ invoke__\">Some</span>(node) =&gt; {\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">next</span> = node.right;\n                <span class=\"hljs-keyword\">unsafe</span> {\n                    <span class=\"hljs-keyword\">while</span> !next.<span class=\"hljs-title function_ invoke__\">is_null</span>() {\n                        <span class=\"hljs-keyword\">self</span>.stack.<span class=\"hljs-title function_ invoke__\">push</span>(&amp;*next);\n                        next = (*next).left;\n                    }\n                }\n                <span class=\"hljs-title function_ invoke__\">Some</span>(node)\n            }\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\n        }\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::RBTree;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">find</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">tree</span> = RBTree::&lt;<span class=\"hljs-type\">usize</span>, <span class=\"hljs-type\">char</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-title function_ invoke__\">for</span> (k, v) <span class=\"hljs-keyword\">in</span> String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;hello, world!&quot;</span>).<span class=\"hljs-title function_ invoke__\">chars</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\n            tree.<span class=\"hljs-title function_ invoke__\">insert</span>(k, v);\n        }\n        <span class=\"hljs-built_in\">assert_eq!</span>(*tree.<span class=\"hljs-title function_ invoke__\">find</span>(&amp;<span class=\"hljs-number\">3</span>).<span class=\"hljs-title function_ invoke__\">unwrap_or</span>(&amp;<span class=\"hljs-string\">&#x27;*&#x27;</span>), <span class=\"hljs-string\">&#x27;l&#x27;</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(*tree.<span class=\"hljs-title function_ invoke__\">find</span>(&amp;<span class=\"hljs-number\">6</span>).<span class=\"hljs-title function_ invoke__\">unwrap_or</span>(&amp;<span class=\"hljs-string\">&#x27;*&#x27;</span>), <span class=\"hljs-string\">&#x27; &#x27;</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(*tree.<span class=\"hljs-title function_ invoke__\">find</span>(&amp;<span class=\"hljs-number\">8</span>).<span class=\"hljs-title function_ invoke__\">unwrap_or</span>(&amp;<span class=\"hljs-string\">&#x27;*&#x27;</span>), <span class=\"hljs-string\">&#x27;o&#x27;</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(*tree.<span class=\"hljs-title function_ invoke__\">find</span>(&amp;<span class=\"hljs-number\">12</span>).<span class=\"hljs-title function_ invoke__\">unwrap_or</span>(&amp;<span class=\"hljs-string\">&#x27;*&#x27;</span>), <span class=\"hljs-string\">&#x27;!&#x27;</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">tree</span> = RBTree::&lt;<span class=\"hljs-type\">usize</span>, <span class=\"hljs-type\">char</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-title function_ invoke__\">for</span> (k, v) <span class=\"hljs-keyword\">in</span> String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;hello, world!&quot;</span>).<span class=\"hljs-title function_ invoke__\">chars</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\n            tree.<span class=\"hljs-title function_ invoke__\">insert</span>(k, v);\n        }\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">s</span>: <span class=\"hljs-type\">String</span> = tree.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">map</span>(|x| x.value).<span class=\"hljs-title function_ invoke__\">collect</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(s, <span class=\"hljs-string\">&quot;hello, world!&quot;</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">delete</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">tree</span> = RBTree::&lt;<span class=\"hljs-type\">usize</span>, <span class=\"hljs-type\">char</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-title function_ invoke__\">for</span> (k, v) <span class=\"hljs-keyword\">in</span> String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;hello, world!&quot;</span>).<span class=\"hljs-title function_ invoke__\">chars</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\n            tree.<span class=\"hljs-title function_ invoke__\">insert</span>(k, v);\n        }\n        tree.<span class=\"hljs-title function_ invoke__\">delete</span>(&amp;<span class=\"hljs-number\">1</span>);\n        tree.<span class=\"hljs-title function_ invoke__\">delete</span>(&amp;<span class=\"hljs-number\">3</span>);\n        tree.<span class=\"hljs-title function_ invoke__\">delete</span>(&amp;<span class=\"hljs-number\">5</span>);\n        tree.<span class=\"hljs-title function_ invoke__\">delete</span>(&amp;<span class=\"hljs-number\">7</span>);\n        tree.<span class=\"hljs-title function_ invoke__\">delete</span>(&amp;<span class=\"hljs-number\">11</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">s</span>: <span class=\"hljs-type\">String</span> = tree.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">map</span>(|x| x.value).<span class=\"hljs-title function_ invoke__\">collect</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(s, <span class=\"hljs-string\">&quot;hlo orl!&quot;</span>);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 1
    },
    {
      "name": "Julian Tescher",
      "email": "julian@tescher.me",
      "commits": 1
    },
    {
      "name": "Zelu Deng",
      "email": "72188499+zeludeng@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "sinkyoungdeok",
      "email": "tlsrudejr123@nate.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}