{
  "slug": "rbc",
  "name": "Rbc",
  "categories": [
    "math",
    "binary"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "math/binary/rbc.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/math/binary/rbc.go",
      "code": "<span class=\"hljs-comment\">// rbc.go</span>\n<span class=\"hljs-comment\">// description: Reflected binary code (RBC)</span>\n<span class=\"hljs-comment\">// details:</span>\n<span class=\"hljs-comment\">// The reflected binary code (RBC), also known just as reflected binary (RB) or Gray code after Frank Gray, is an ordering of the binary numeral system such that two successive values differ in only one bit (binary digit). - [RBC](https://en.wikipedia.org/wiki/Gray_code)</span>\n<span class=\"hljs-comment\">// author(s) [red_byte](https://github.com/i-redbyte)</span>\n<span class=\"hljs-comment\">// see rbc_test.go</span>\n\n<span class=\"hljs-keyword\">package</span> binary\n\n<span class=\"hljs-comment\">// SequenceGrayCode The function generates an &quot;Gray code&quot; sequence of length n</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">SequenceGrayCode</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">uint</span>)</span></span> []<span class=\"hljs-type\">uint</span> {\n\tresult := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">uint</span>, <span class=\"hljs-number\">0</span>)\n\t<span class=\"hljs-keyword\">var</span> i <span class=\"hljs-type\">uint</span>\n\t<span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1</span>&lt;&lt;n; i++ {\n\t\tresult = <span class=\"hljs-built_in\">append</span>(result, i^(i&gt;&gt;<span class=\"hljs-number\">1</span>))\n\t}\n\t<span class=\"hljs-keyword\">return</span> result\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Ilya Sokolov",
      "email": "developer.sokolov@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}