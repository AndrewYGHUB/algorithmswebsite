{
  "slug": "red-black-bst",
  "name": "Red Black BST",
  "categories": [
    "datastructures",
    "tree"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/trees/RedBlackBST.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/trees/RedBlackBST.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.trees;\n\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> jack870131\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedBlackBST</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">R</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">B</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">1</span>, color = B;\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-operator\">=</span> nil, right = nil, p = nil;\n\n        Node(<span class=\"hljs-type\">int</span> key) {\n            <span class=\"hljs-built_in\">this</span>.key = key;\n        }\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">nil</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(-<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">root</span> <span class=\"hljs-operator\">=</span> nil;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printTree</span><span class=\"hljs-params\">(Node node)</span> {\n        <span class=\"hljs-keyword\">if</span> (node == nil) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        printTree(node.left);\n        System.out.print(\n                ((node.color == R) ? <span class=\"hljs-string\">&quot; R &quot;</span> : <span class=\"hljs-string\">&quot; B &quot;</span>) + <span class=\"hljs-string\">&quot;Key: &quot;</span> + node.key + <span class=\"hljs-string\">&quot; Parent: &quot;</span> + node.p.key + <span class=\"hljs-string\">&quot;\\n&quot;</span>);\n        printTree(node.right);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printTreepre</span><span class=\"hljs-params\">(Node node)</span> {\n        <span class=\"hljs-keyword\">if</span> (node == nil) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        System.out.print(\n                ((node.color == R) ? <span class=\"hljs-string\">&quot; R &quot;</span> : <span class=\"hljs-string\">&quot; B &quot;</span>) + <span class=\"hljs-string\">&quot;Key: &quot;</span> + node.key + <span class=\"hljs-string\">&quot; Parent: &quot;</span> + node.p.key + <span class=\"hljs-string\">&quot;\\n&quot;</span>);\n        printTree(node.left);\n        printTree(node.right);\n    }\n\n    <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">findNode</span><span class=\"hljs-params\">(Node findNode, Node node)</span> {\n        <span class=\"hljs-keyword\">if</span> (root == nil) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (findNode.key &lt; node.key) {\n            <span class=\"hljs-keyword\">if</span> (node.left != nil) {\n                <span class=\"hljs-keyword\">return</span> findNode(findNode, node.left);\n            }\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (findNode.key &gt; node.key) {\n            <span class=\"hljs-keyword\">if</span> (node.right != nil) {\n                <span class=\"hljs-keyword\">return</span> findNode(findNode, node.right);\n            }\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (findNode.key == node.key) {\n            <span class=\"hljs-keyword\">return</span> node;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(Node node)</span> {\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> root;\n        <span class=\"hljs-keyword\">if</span> (root == nil) {\n            root = node;\n            node.color = B;\n            node.p = nil;\n        } <span class=\"hljs-keyword\">else</span> {\n            node.color = R;\n            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n                <span class=\"hljs-keyword\">if</span> (node.key &lt; temp.key) {\n                    <span class=\"hljs-keyword\">if</span> (temp.left == nil) {\n                        temp.left = node;\n                        node.p = temp;\n                        <span class=\"hljs-keyword\">break</span>;\n                    } <span class=\"hljs-keyword\">else</span> {\n                        temp = temp.left;\n                    }\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.key &gt;= temp.key) {\n                    <span class=\"hljs-keyword\">if</span> (temp.right == nil) {\n                        temp.right = node;\n                        node.p = temp;\n                        <span class=\"hljs-keyword\">break</span>;\n                    } <span class=\"hljs-keyword\">else</span> {\n                        temp = temp.right;\n                    }\n                }\n            }\n            fixTree(node);\n        }\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fixTree</span><span class=\"hljs-params\">(Node node)</span> {\n        <span class=\"hljs-keyword\">while</span> (node.p.color == R) {\n            <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> nil;\n            <span class=\"hljs-keyword\">if</span> (node.p == node.p.p.left) {\n                y = node.p.p.right;\n\n                <span class=\"hljs-keyword\">if</span> (y != nil &amp;&amp; y.color == R) {\n                    node.p.color = B;\n                    y.color = B;\n                    node.p.p.color = R;\n                    node = node.p.p;\n                    <span class=\"hljs-keyword\">continue</span>;\n                }\n                <span class=\"hljs-keyword\">if</span> (node == node.p.right) {\n                    node = node.p;\n                    rotateLeft(node);\n                }\n                node.p.color = B;\n                node.p.p.color = R;\n                rotateRight(node.p.p);\n            } <span class=\"hljs-keyword\">else</span> {\n                y = node.p.p.left;\n                <span class=\"hljs-keyword\">if</span> (y != nil &amp;&amp; y.color == R) {\n                    node.p.color = B;\n                    y.color = B;\n                    node.p.p.color = R;\n                    node = node.p.p;\n                    <span class=\"hljs-keyword\">continue</span>;\n                }\n                <span class=\"hljs-keyword\">if</span> (node == node.p.left) {\n                    node = node.p;\n                    rotateRight(node);\n                }\n                node.p.color = B;\n                node.p.p.color = R;\n                rotateLeft(node.p.p);\n            }\n        }\n        root.color = B;\n    }\n\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">rotateLeft</span><span class=\"hljs-params\">(Node node)</span> {\n        <span class=\"hljs-keyword\">if</span> (node.p != nil) {\n            <span class=\"hljs-keyword\">if</span> (node == node.p.left) {\n                node.p.left = node.right;\n            } <span class=\"hljs-keyword\">else</span> {\n                node.p.right = node.right;\n            }\n            node.right.p = node.p;\n            node.p = node.right;\n            <span class=\"hljs-keyword\">if</span> (node.right.left != nil) {\n                node.right.left.p = node;\n            }\n            node.right = node.right.left;\n            node.p.left = node;\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">right</span> <span class=\"hljs-operator\">=</span> root.right;\n            root.right = right.left;\n            right.left.p = root;\n            root.p = right;\n            right.left = root;\n            right.p = nil;\n            root = right;\n        }\n    }\n\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">rotateRight</span><span class=\"hljs-params\">(Node node)</span> {\n        <span class=\"hljs-keyword\">if</span> (node.p != nil) {\n            <span class=\"hljs-keyword\">if</span> (node == node.p.left) {\n                node.p.left = node.left;\n            } <span class=\"hljs-keyword\">else</span> {\n                node.p.right = node.left;\n            }\n\n            node.left.p = node.p;\n            node.p = node.left;\n            <span class=\"hljs-keyword\">if</span> (node.left.right != nil) {\n                node.left.right.p = node;\n            }\n            node.left = node.left.right;\n            node.p.right = node;\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-operator\">=</span> root.left;\n            root.left = root.left.right;\n            left.right.p = root;\n            root.p = left;\n            left.right = root;\n            left.p = nil;\n            root = left;\n        }\n    }\n\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">transplant</span><span class=\"hljs-params\">(Node target, Node with)</span> {\n        <span class=\"hljs-keyword\">if</span> (target.p == nil) {\n            root = with;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (target == target.p.left) {\n            target.p.left = with;\n        } <span class=\"hljs-keyword\">else</span> {\n            target.p.right = with;\n        }\n        with.p = target.p;\n    }\n\n    Node <span class=\"hljs-title function_\">treeMinimum</span><span class=\"hljs-params\">(Node subTreeRoot)</span> {\n        <span class=\"hljs-keyword\">while</span> (subTreeRoot.left != nil) {\n            subTreeRoot = subTreeRoot.left;\n        }\n        <span class=\"hljs-keyword\">return</span> subTreeRoot;\n    }\n\n    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">(Node z)</span> {\n        <span class=\"hljs-keyword\">if</span> ((z = findNode(z, root)) == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        Node x;\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> z;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">yorigcolor</span> <span class=\"hljs-operator\">=</span> y.color;\n\n        <span class=\"hljs-keyword\">if</span> (z.left == nil) {\n            x = z.right;\n            transplant(z, z.right);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (z.right == nil) {\n            x = z.left;\n            transplant(z, z.left);\n        } <span class=\"hljs-keyword\">else</span> {\n            y = treeMinimum(z.right);\n            yorigcolor = y.color;\n            x = y.right;\n            <span class=\"hljs-keyword\">if</span> (y.p == z) {\n                x.p = y;\n            } <span class=\"hljs-keyword\">else</span> {\n                transplant(y, y.right);\n                y.right = z.right;\n                y.right.p = y;\n            }\n            transplant(z, y);\n            y.left = z.left;\n            y.left.p = y;\n            y.color = z.color;\n        }\n        <span class=\"hljs-keyword\">if</span> (yorigcolor == B) {\n            deleteFixup(x);\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteFixup</span><span class=\"hljs-params\">(Node x)</span> {\n        <span class=\"hljs-keyword\">while</span> (x != root &amp;&amp; x.color == B) {\n            <span class=\"hljs-keyword\">if</span> (x == x.p.left) {\n                <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">w</span> <span class=\"hljs-operator\">=</span> x.p.right;\n                <span class=\"hljs-keyword\">if</span> (w.color == R) {\n                    w.color = B;\n                    x.p.color = R;\n                    rotateLeft(x.p);\n                    w = x.p.right;\n                }\n                <span class=\"hljs-keyword\">if</span> (w.left.color == B &amp;&amp; w.right.color == B) {\n                    w.color = R;\n                    x = x.p;\n                    <span class=\"hljs-keyword\">continue</span>;\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (w.right.color == B) {\n                    w.left.color = B;\n                    w.color = R;\n                    rotateRight(w);\n                    w = x.p.right;\n                }\n                <span class=\"hljs-keyword\">if</span> (w.right.color == R) {\n                    w.color = x.p.color;\n                    x.p.color = B;\n                    w.right.color = B;\n                    rotateLeft(x.p);\n                    x = root;\n                }\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">w</span> <span class=\"hljs-operator\">=</span> x.p.left;\n                <span class=\"hljs-keyword\">if</span> (w.color == R) {\n                    w.color = B;\n                    x.p.color = R;\n                    rotateRight(x.p);\n                    w = x.p.left;\n                }\n                <span class=\"hljs-keyword\">if</span> (w.right.color == B &amp;&amp; w.left.color == B) {\n                    w.color = R;\n                    x = x.p;\n                    <span class=\"hljs-keyword\">continue</span>;\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (w.left.color == B) {\n                    w.right.color = B;\n                    w.color = R;\n                    rotateLeft(w);\n                    w = x.p.left;\n                }\n                <span class=\"hljs-keyword\">if</span> (w.left.color == R) {\n                    w.color = x.p.color;\n                    x.p.color = B;\n                    w.left.color = B;\n                    rotateRight(x.p);\n                    x = root;\n                }\n            }\n        }\n        x.color = B;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertDemo</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scan</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n            System.out.println(<span class=\"hljs-string\">&quot;Add items&quot;</span>);\n\n            <span class=\"hljs-type\">int</span> item;\n            Node node;\n\n            item = scan.nextInt();\n            <span class=\"hljs-keyword\">while</span> (item != -<span class=\"hljs-number\">999</span>) {\n                node = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(item);\n                insert(node);\n                item = scan.nextInt();\n            }\n            printTree(root);\n            System.out.println(<span class=\"hljs-string\">&quot;Pre order&quot;</span>);\n            printTreepre(root);\n            <span class=\"hljs-keyword\">break</span>;\n        }\n        scan.close();\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteDemo</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scan</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n        System.out.println(<span class=\"hljs-string\">&quot;Delete items&quot;</span>);\n        <span class=\"hljs-type\">int</span> item;\n        Node node;\n        item = scan.nextInt();\n        node = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(item);\n        System.out.print(<span class=\"hljs-string\">&quot;Deleting item &quot;</span> + item);\n        <span class=\"hljs-keyword\">if</span> (delete(node)) {\n            System.out.print(<span class=\"hljs-string\">&quot;: deleted!&quot;</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            System.out.print(<span class=\"hljs-string\">&quot;: does not exist!&quot;</span>);\n        }\n\n        System.out.println();\n        printTree(root);\n        System.out.println(<span class=\"hljs-string\">&quot;Pre order&quot;</span>);\n        printTreepre(root);\n        scan.close();\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "EAlexa",
      "email": "rubi_81@outlook.de",
      "commits": 1
    },
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "Jack",
      "email": "34185019+jack870131@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}