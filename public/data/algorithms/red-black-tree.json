{
  "slug": "red-black-tree",
  "name": "Red Black Tree",
  "categories": [
    "datastructures",
    "binarytree"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/binary_tree/red_black_tree.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/binary_tree/red_black_tree.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\npython/black : true\r\nflake8 : passed\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">from</span> collections.abc <span class=\"hljs-keyword\">import</span> Iterator\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedBlackTree</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    A Red-Black tree, which is a self-balancing BST (binary search\r\n    tree).\r\n    This tree has similar performance to AVL trees, but the balancing is\r\n    less strict, so it will perform faster for writing/deleting nodes\r\n    and slower for reading in the average case, though, because they&#x27;re\r\n    both balanced binary search trees, both will get the same asymptotic\r\n    performance.\r\n    To read more about them, https://en.wikipedia.org/wiki/Redâ€“black_tree\r\n    Unless otherwise specified, all asymptotic runtimes are specified in\r\n    terms of the size of the tree.\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">\r\n        self,\r\n        label: <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>,\r\n        color: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span>,\r\n        parent: RedBlackTree | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>,\r\n        left: RedBlackTree | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>,\r\n        right: RedBlackTree | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>,\r\n    </span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Initialize a new Red-Black Tree node with the given values:\r\n        label: The value associated with this node\r\n        color: 0 if black, 1 if red\r\n        parent: The parent to this node\r\n        left: This node&#x27;s left child\r\n        right: This node&#x27;s right child\r\n        &quot;&quot;&quot;</span>\r\n        self.label = label\r\n        self.parent = parent\r\n        self.left = left\r\n        self.right = right\r\n        self.color = color\r\n\r\n    <span class=\"hljs-comment\"># Here are functions which are specific to red-black trees</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rotate_left</span>(<span class=\"hljs-params\">self</span>) -&gt; RedBlackTree:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Rotate the subtree rooted at this node to the left and\r\n        returns the new root to this subtree.\r\n        Performing one rotation can be done in O(1).\r\n        &quot;&quot;&quot;</span>\r\n        parent = self.parent\r\n        right = self.right\r\n        <span class=\"hljs-keyword\">if</span> right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">return</span> self\r\n        self.right = right.left\r\n        <span class=\"hljs-keyword\">if</span> self.right:\r\n            self.right.parent = self\r\n        self.parent = right\r\n        right.left = self\r\n        <span class=\"hljs-keyword\">if</span> parent <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">if</span> parent.left == self:\r\n                parent.left = right\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                parent.right = right\r\n        right.parent = parent\r\n        <span class=\"hljs-keyword\">return</span> right\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rotate_right</span>(<span class=\"hljs-params\">self</span>) -&gt; RedBlackTree:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Rotate the subtree rooted at this node to the right and\r\n        returns the new root to this subtree.\r\n        Performing one rotation can be done in O(1).\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">return</span> self\r\n        parent = self.parent\r\n        left = self.left\r\n        self.left = left.right\r\n        <span class=\"hljs-keyword\">if</span> self.left:\r\n            self.left.parent = self\r\n        self.parent = left\r\n        left.right = self\r\n        <span class=\"hljs-keyword\">if</span> parent <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">if</span> parent.right <span class=\"hljs-keyword\">is</span> self:\r\n                parent.right = left\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                parent.left = left\r\n        left.parent = parent\r\n        <span class=\"hljs-keyword\">return</span> left\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-params\">self, label: <span class=\"hljs-built_in\">int</span></span>) -&gt; RedBlackTree:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Inserts label into the subtree rooted at self, performs any\r\n        rotations necessary to maintain balance, and then returns the\r\n        new root to this subtree (likely self).\r\n        This is guaranteed to run in O(log(n)) time.\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.label <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-comment\"># Only possible with an empty tree</span>\r\n            self.label = label\r\n            <span class=\"hljs-keyword\">return</span> self\r\n        <span class=\"hljs-keyword\">if</span> self.label == label:\r\n            <span class=\"hljs-keyword\">return</span> self\r\n        <span class=\"hljs-keyword\">elif</span> self.label &gt; label:\r\n            <span class=\"hljs-keyword\">if</span> self.left:\r\n                self.left.insert(label)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                self.left = RedBlackTree(label, <span class=\"hljs-number\">1</span>, self)\r\n                self.left._insert_repair()\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">if</span> self.right:\r\n                self.right.insert(label)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                self.right = RedBlackTree(label, <span class=\"hljs-number\">1</span>, self)\r\n                self.right._insert_repair()\r\n        <span class=\"hljs-keyword\">return</span> self.parent <span class=\"hljs-keyword\">or</span> self\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_insert_repair</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Repair the coloring from inserting into a tree.&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.parent <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-comment\"># This node is the root, so it just needs to be black</span>\r\n            self.color = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">elif</span> color(self.parent) == <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-comment\"># If the parent is black, then it just needs to be red</span>\r\n            self.color = <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            uncle = self.parent.sibling\r\n            <span class=\"hljs-keyword\">if</span> color(uncle) == <span class=\"hljs-number\">0</span>:\r\n                <span class=\"hljs-keyword\">if</span> self.is_left() <span class=\"hljs-keyword\">and</span> self.parent.is_right():\r\n                    self.parent.rotate_right()\r\n                    <span class=\"hljs-keyword\">if</span> self.right:\r\n                        self.right._insert_repair()\r\n                <span class=\"hljs-keyword\">elif</span> self.is_right() <span class=\"hljs-keyword\">and</span> self.parent.is_left():\r\n                    self.parent.rotate_left()\r\n                    <span class=\"hljs-keyword\">if</span> self.left:\r\n                        self.left._insert_repair()\r\n                <span class=\"hljs-keyword\">elif</span> self.is_left():\r\n                    <span class=\"hljs-keyword\">if</span> self.grandparent:\r\n                        self.grandparent.rotate_right()\r\n                        self.parent.color = <span class=\"hljs-number\">0</span>\r\n                    <span class=\"hljs-keyword\">if</span> self.parent.right:\r\n                        self.parent.right.color = <span class=\"hljs-number\">1</span>\r\n                <span class=\"hljs-keyword\">else</span>:\r\n                    <span class=\"hljs-keyword\">if</span> self.grandparent:\r\n                        self.grandparent.rotate_left()\r\n                        self.parent.color = <span class=\"hljs-number\">0</span>\r\n                    <span class=\"hljs-keyword\">if</span> self.parent.left:\r\n                        self.parent.left.color = <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                self.parent.color = <span class=\"hljs-number\">0</span>\r\n                <span class=\"hljs-keyword\">if</span> uncle <span class=\"hljs-keyword\">and</span> self.grandparent:\r\n                    uncle.color = <span class=\"hljs-number\">0</span>\r\n                    self.grandparent.color = <span class=\"hljs-number\">1</span>\r\n                    self.grandparent._insert_repair()\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-params\">self, label: <span class=\"hljs-built_in\">int</span></span>) -&gt; RedBlackTree:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Remove label from this tree.&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.label == label:\r\n            <span class=\"hljs-keyword\">if</span> self.left <span class=\"hljs-keyword\">and</span> self.right:\r\n                <span class=\"hljs-comment\"># It&#x27;s easier to balance a node with at most one child,</span>\r\n                <span class=\"hljs-comment\"># so we replace this node with the greatest one less than</span>\r\n                <span class=\"hljs-comment\"># it and remove that.</span>\r\n                value = self.left.get_max()\r\n                <span class=\"hljs-keyword\">if</span> value <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n                    self.label = value\r\n                    self.left.remove(value)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-comment\"># This node has at most one non-None child, so we don&#x27;t</span>\r\n                <span class=\"hljs-comment\"># need to replace</span>\r\n                child = self.left <span class=\"hljs-keyword\">or</span> self.right\r\n                <span class=\"hljs-keyword\">if</span> self.color == <span class=\"hljs-number\">1</span>:\r\n                    <span class=\"hljs-comment\"># This node is red, and its child is black</span>\r\n                    <span class=\"hljs-comment\"># The only way this happens to a node with one child</span>\r\n                    <span class=\"hljs-comment\"># is if both children are None leaves.</span>\r\n                    <span class=\"hljs-comment\"># We can just remove this node and call it a day.</span>\r\n                    <span class=\"hljs-keyword\">if</span> self.parent:\r\n                        <span class=\"hljs-keyword\">if</span> self.is_left():\r\n                            self.parent.left = <span class=\"hljs-literal\">None</span>\r\n                        <span class=\"hljs-keyword\">else</span>:\r\n                            self.parent.right = <span class=\"hljs-literal\">None</span>\r\n                <span class=\"hljs-keyword\">else</span>:\r\n                    <span class=\"hljs-comment\"># The node is black</span>\r\n                    <span class=\"hljs-keyword\">if</span> child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n                        <span class=\"hljs-comment\"># This node and its child are black</span>\r\n                        <span class=\"hljs-keyword\">if</span> self.parent <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n                            <span class=\"hljs-comment\"># The tree is now empty</span>\r\n                            <span class=\"hljs-keyword\">return</span> RedBlackTree(<span class=\"hljs-literal\">None</span>)\r\n                        <span class=\"hljs-keyword\">else</span>:\r\n                            self._remove_repair()\r\n                            <span class=\"hljs-keyword\">if</span> self.is_left():\r\n                                self.parent.left = <span class=\"hljs-literal\">None</span>\r\n                            <span class=\"hljs-keyword\">else</span>:\r\n                                self.parent.right = <span class=\"hljs-literal\">None</span>\r\n                            self.parent = <span class=\"hljs-literal\">None</span>\r\n                    <span class=\"hljs-keyword\">else</span>:\r\n                        <span class=\"hljs-comment\"># This node is black and its child is red</span>\r\n                        <span class=\"hljs-comment\"># Move the child node here and make it black</span>\r\n                        self.label = child.label\r\n                        self.left = child.left\r\n                        self.right = child.right\r\n                        <span class=\"hljs-keyword\">if</span> self.left:\r\n                            self.left.parent = self\r\n                        <span class=\"hljs-keyword\">if</span> self.right:\r\n                            self.right.parent = self\r\n        <span class=\"hljs-keyword\">elif</span> self.label <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> self.label &gt; label:\r\n            <span class=\"hljs-keyword\">if</span> self.left:\r\n                self.left.remove(label)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">if</span> self.right:\r\n                self.right.remove(label)\r\n        <span class=\"hljs-keyword\">return</span> self.parent <span class=\"hljs-keyword\">or</span> self\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_remove_repair</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Repair the coloring of the tree that may have been messed up.&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> (\r\n            self.parent <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\r\n            <span class=\"hljs-keyword\">or</span> self.sibling <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\r\n            <span class=\"hljs-keyword\">or</span> self.parent.sibling <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\r\n            <span class=\"hljs-keyword\">or</span> self.grandparent <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\r\n        ):\r\n            <span class=\"hljs-keyword\">return</span>\r\n        <span class=\"hljs-keyword\">if</span> color(self.sibling) == <span class=\"hljs-number\">1</span>:\r\n            self.sibling.color = <span class=\"hljs-number\">0</span>\r\n            self.parent.color = <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">if</span> self.is_left():\r\n                self.parent.rotate_left()\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                self.parent.rotate_right()\r\n        <span class=\"hljs-keyword\">if</span> (\r\n            color(self.parent) == <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-keyword\">and</span> color(self.sibling) == <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-keyword\">and</span> color(self.sibling.left) == <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-keyword\">and</span> color(self.sibling.right) == <span class=\"hljs-number\">0</span>\r\n        ):\r\n            self.sibling.color = <span class=\"hljs-number\">1</span>\r\n            self.parent._remove_repair()\r\n            <span class=\"hljs-keyword\">return</span>\r\n        <span class=\"hljs-keyword\">if</span> (\r\n            color(self.parent) == <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">and</span> color(self.sibling) == <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-keyword\">and</span> color(self.sibling.left) == <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-keyword\">and</span> color(self.sibling.right) == <span class=\"hljs-number\">0</span>\r\n        ):\r\n            self.sibling.color = <span class=\"hljs-number\">1</span>\r\n            self.parent.color = <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-keyword\">return</span>\r\n        <span class=\"hljs-keyword\">if</span> (\r\n            self.is_left()\r\n            <span class=\"hljs-keyword\">and</span> color(self.sibling) == <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-keyword\">and</span> color(self.sibling.right) == <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-keyword\">and</span> color(self.sibling.left) == <span class=\"hljs-number\">1</span>\r\n        ):\r\n            self.sibling.rotate_right()\r\n            self.sibling.color = <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-keyword\">if</span> self.sibling.right:\r\n                self.sibling.right.color = <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">if</span> (\r\n            self.is_right()\r\n            <span class=\"hljs-keyword\">and</span> color(self.sibling) == <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-keyword\">and</span> color(self.sibling.right) == <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">and</span> color(self.sibling.left) == <span class=\"hljs-number\">0</span>\r\n        ):\r\n            self.sibling.rotate_left()\r\n            self.sibling.color = <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-keyword\">if</span> self.sibling.left:\r\n                self.sibling.left.color = <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">if</span> (\r\n            self.is_left()\r\n            <span class=\"hljs-keyword\">and</span> color(self.sibling) == <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-keyword\">and</span> color(self.sibling.right) == <span class=\"hljs-number\">1</span>\r\n        ):\r\n            self.parent.rotate_left()\r\n            self.grandparent.color = self.parent.color\r\n            self.parent.color = <span class=\"hljs-number\">0</span>\r\n            self.parent.sibling.color = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">if</span> (\r\n            self.is_right()\r\n            <span class=\"hljs-keyword\">and</span> color(self.sibling) == <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-keyword\">and</span> color(self.sibling.left) == <span class=\"hljs-number\">1</span>\r\n        ):\r\n            self.parent.rotate_right()\r\n            self.grandparent.color = self.parent.color\r\n            self.parent.color = <span class=\"hljs-number\">0</span>\r\n            self.parent.sibling.color = <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_color_properties</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Check the coloring of the tree, and return True iff the tree\r\n        is colored in a way which matches these five properties:\r\n        (wording stolen from wikipedia article)\r\n         1. Each node is either red or black.\r\n         2. The root node is black.\r\n         3. All leaves are black.\r\n         4. If a node is red, then both its children are black.\r\n         5. Every path from any node to all of its descendent NIL nodes\r\n            has the same number of black nodes.\r\n        This function runs in O(n) time, because properties 4 and 5 take\r\n        that long to check.\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-comment\"># I assume property 1 to hold because there is nothing that can</span>\r\n        <span class=\"hljs-comment\"># make the color be anything other than 0 or 1.</span>\r\n        <span class=\"hljs-comment\"># Property 2</span>\r\n        <span class=\"hljs-keyword\">if</span> self.color:\r\n            <span class=\"hljs-comment\"># The root was red</span>\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Property 2&quot;</span>)\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n        <span class=\"hljs-comment\"># Property 3 does not need to be checked, because None is assumed</span>\r\n        <span class=\"hljs-comment\"># to be black and is all the leaves.</span>\r\n        <span class=\"hljs-comment\"># Property 4</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.check_coloring():\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Property 4&quot;</span>)\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n        <span class=\"hljs-comment\"># Property 5</span>\r\n        <span class=\"hljs-keyword\">if</span> self.black_height() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Property 5&quot;</span>)\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n        <span class=\"hljs-comment\"># All properties were met</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_coloring</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;A helper function to recursively check Property 4 of a\r\n        Red-Black Tree. See check_color_properties for more info.\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.color == <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-keyword\">if</span> color(self.left) == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">or</span> color(self.right) == <span class=\"hljs-number\">1</span>:\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n        <span class=\"hljs-keyword\">if</span> self.left <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> self.left.check_coloring():\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n        <span class=\"hljs-keyword\">if</span> self.right <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> self.right.check_coloring():\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">black_height</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Returns the number of black nodes from this node to the\r\n        leaves of the tree, or None if there isn&#x27;t one such value (the\r\n        tree is color incorrectly).\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">or</span> self.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">or</span> self.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-comment\"># If we&#x27;re already at a leaf, there is no path</span>\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\r\n        left = RedBlackTree.black_height(self.left)\r\n        right = RedBlackTree.black_height(self.right)\r\n        <span class=\"hljs-keyword\">if</span> left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">or</span> right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-comment\"># There are issues with coloring below children nodes</span>\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">if</span> left != right:\r\n            <span class=\"hljs-comment\"># The two children have unequal depths</span>\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-comment\"># Return the black depth of children, plus one if this node is</span>\r\n        <span class=\"hljs-comment\"># black</span>\r\n        <span class=\"hljs-keyword\">return</span> left + (<span class=\"hljs-number\">1</span> - self.color)\r\n\r\n    <span class=\"hljs-comment\"># Here are functions which are general to all binary search trees</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__contains__</span>(<span class=\"hljs-params\">self, label: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Search through the tree for label, returning True iff it is\r\n        found somewhere in the tree.\r\n        Guaranteed to run in O(log(n)) time.\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> self.search(label) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-params\">self, label: <span class=\"hljs-built_in\">int</span></span>) -&gt; RedBlackTree | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Search through the tree for label, returning its node if\r\n        it&#x27;s found, and None otherwise.\r\n        This method is guaranteed to run in O(log(n)) time.\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.label == label:\r\n            <span class=\"hljs-keyword\">return</span> self\r\n        <span class=\"hljs-keyword\">elif</span> self.label <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> label &gt; self.label:\r\n            <span class=\"hljs-keyword\">if</span> self.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-keyword\">return</span> self.right.search(label)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">if</span> self.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-keyword\">return</span> self.left.search(label)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-params\">self, label: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Returns the largest element in this tree which is at most label.\r\n        This method is guaranteed to run in O(log(n)) time.&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.label == label:\r\n            <span class=\"hljs-keyword\">return</span> self.label\r\n        <span class=\"hljs-keyword\">elif</span> self.label <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> self.label &gt; label:\r\n            <span class=\"hljs-keyword\">if</span> self.left:\r\n                <span class=\"hljs-keyword\">return</span> self.left.floor(label)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">if</span> self.right:\r\n                attempt = self.right.floor(label)\r\n                <span class=\"hljs-keyword\">if</span> attempt <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n                    <span class=\"hljs-keyword\">return</span> attempt\r\n            <span class=\"hljs-keyword\">return</span> self.label\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">ceil</span>(<span class=\"hljs-params\">self, label: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Returns the smallest element in this tree which is at least label.\r\n        This method is guaranteed to run in O(log(n)) time.\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.label == label:\r\n            <span class=\"hljs-keyword\">return</span> self.label\r\n        <span class=\"hljs-keyword\">elif</span> self.label <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> self.label &lt; label:\r\n            <span class=\"hljs-keyword\">if</span> self.right:\r\n                <span class=\"hljs-keyword\">return</span> self.right.ceil(label)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">if</span> self.left:\r\n                attempt = self.left.ceil(label)\r\n                <span class=\"hljs-keyword\">if</span> attempt <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n                    <span class=\"hljs-keyword\">return</span> attempt\r\n            <span class=\"hljs-keyword\">return</span> self.label\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_max</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Returns the largest element in this tree.\r\n        This method is guaranteed to run in O(log(n)) time.\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.right:\r\n            <span class=\"hljs-comment\"># Go as far right as possible</span>\r\n            <span class=\"hljs-keyword\">return</span> self.right.get_max()\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">return</span> self.label\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_min</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Returns the smallest element in this tree.\r\n        This method is guaranteed to run in O(log(n)) time.\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.left:\r\n            <span class=\"hljs-comment\"># Go as far left as possible</span>\r\n            <span class=\"hljs-keyword\">return</span> self.left.get_min()\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">return</span> self.label\r\n\r\n<span class=\"hljs-meta\">    @property</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">grandparent</span>(<span class=\"hljs-params\">self</span>) -&gt; RedBlackTree | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Get the current node&#x27;s grandparent, or None if it doesn&#x27;t exist.&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.parent <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">return</span> self.parent.parent\r\n\r\n<span class=\"hljs-meta\">    @property</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sibling</span>(<span class=\"hljs-params\">self</span>) -&gt; RedBlackTree | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Get the current node&#x27;s sibling, or None if it doesn&#x27;t exist.&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.parent <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">elif</span> self.parent.left <span class=\"hljs-keyword\">is</span> self:\r\n            <span class=\"hljs-keyword\">return</span> self.parent.right\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">return</span> self.parent.left\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_left</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Returns true iff this node is the left child of its parent.&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.parent <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n        <span class=\"hljs-keyword\">return</span> self.parent.left <span class=\"hljs-keyword\">is</span> self.parent.left <span class=\"hljs-keyword\">is</span> self\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_right</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Returns true iff this node is the right child of its parent.&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.parent <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n        <span class=\"hljs-keyword\">return</span> self.parent.right <span class=\"hljs-keyword\">is</span> self\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__bool__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__len__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Return the number of nodes in this tree.\r\n        &quot;&quot;&quot;</span>\r\n        ln = <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">if</span> self.left:\r\n            ln += <span class=\"hljs-built_in\">len</span>(self.left)\r\n        <span class=\"hljs-keyword\">if</span> self.right:\r\n            ln += <span class=\"hljs-built_in\">len</span>(self.right)\r\n        <span class=\"hljs-keyword\">return</span> ln\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">preorder_traverse</span>(<span class=\"hljs-params\">self</span>) -&gt; Iterator[<span class=\"hljs-built_in\">int</span> | <span class=\"hljs-literal\">None</span>]:\r\n        <span class=\"hljs-keyword\">yield</span> self.label\r\n        <span class=\"hljs-keyword\">if</span> self.left:\r\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> self.left.preorder_traverse()\r\n        <span class=\"hljs-keyword\">if</span> self.right:\r\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> self.right.preorder_traverse()\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">inorder_traverse</span>(<span class=\"hljs-params\">self</span>) -&gt; Iterator[<span class=\"hljs-built_in\">int</span> | <span class=\"hljs-literal\">None</span>]:\r\n        <span class=\"hljs-keyword\">if</span> self.left:\r\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> self.left.inorder_traverse()\r\n        <span class=\"hljs-keyword\">yield</span> self.label\r\n        <span class=\"hljs-keyword\">if</span> self.right:\r\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> self.right.inorder_traverse()\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">postorder_traverse</span>(<span class=\"hljs-params\">self</span>) -&gt; Iterator[<span class=\"hljs-built_in\">int</span> | <span class=\"hljs-literal\">None</span>]:\r\n        <span class=\"hljs-keyword\">if</span> self.left:\r\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> self.left.postorder_traverse()\r\n        <span class=\"hljs-keyword\">if</span> self.right:\r\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> self.right.postorder_traverse()\r\n        <span class=\"hljs-keyword\">yield</span> self.label\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        <span class=\"hljs-keyword\">from</span> pprint <span class=\"hljs-keyword\">import</span> pformat\r\n\r\n        <span class=\"hljs-keyword\">if</span> self.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> self.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;&#x27;<span class=\"hljs-subst\">{self.label}</span> <span class=\"hljs-subst\">{(self.color <span class=\"hljs-keyword\">and</span> <span class=\"hljs-string\">&#x27;red&#x27;</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">&#x27;blk&#x27;</span>}</span>&#x27;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> pformat(\r\n            {\r\n                <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{self.label}</span> <span class=\"hljs-subst\">{(self.color <span class=\"hljs-keyword\">and</span> <span class=\"hljs-string\">&#x27;red&#x27;</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">&#x27;blk&#x27;</span>}</span>&quot;</span>: (\r\n                    self.left,\r\n                    self.right,\r\n                )\r\n            },\r\n            indent=<span class=\"hljs-number\">1</span>,\r\n        )\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__eq__</span>(<span class=\"hljs-params\">self, other: <span class=\"hljs-built_in\">object</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Test if two trees are equal.&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(other, RedBlackTree):\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NotImplemented</span>\r\n        <span class=\"hljs-keyword\">if</span> self.label == other.label:\r\n            <span class=\"hljs-keyword\">return</span> self.left == other.left <span class=\"hljs-keyword\">and</span> self.right == other.right\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">color</span>(<span class=\"hljs-params\">node: RedBlackTree | <span class=\"hljs-literal\">None</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Returns the color of a node, allowing for None leaves.&quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-keyword\">return</span> node.color\r\n\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\nCode for testing the various\r\nfunctions of the red-black tree.\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_rotations</span>() -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Test that the rotate_left and rotate_right functions work.&quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># Make a tree to test on</span>\r\n    tree = RedBlackTree(<span class=\"hljs-number\">0</span>)\r\n    tree.left = RedBlackTree(-<span class=\"hljs-number\">10</span>, parent=tree)\r\n    tree.right = RedBlackTree(<span class=\"hljs-number\">10</span>, parent=tree)\r\n    tree.left.left = RedBlackTree(-<span class=\"hljs-number\">20</span>, parent=tree.left)\r\n    tree.left.right = RedBlackTree(-<span class=\"hljs-number\">5</span>, parent=tree.left)\r\n    tree.right.left = RedBlackTree(<span class=\"hljs-number\">5</span>, parent=tree.right)\r\n    tree.right.right = RedBlackTree(<span class=\"hljs-number\">20</span>, parent=tree.right)\r\n    <span class=\"hljs-comment\"># Make the right rotation</span>\r\n    left_rot = RedBlackTree(<span class=\"hljs-number\">10</span>)\r\n    left_rot.left = RedBlackTree(<span class=\"hljs-number\">0</span>, parent=left_rot)\r\n    left_rot.left.left = RedBlackTree(-<span class=\"hljs-number\">10</span>, parent=left_rot.left)\r\n    left_rot.left.right = RedBlackTree(<span class=\"hljs-number\">5</span>, parent=left_rot.left)\r\n    left_rot.left.left.left = RedBlackTree(-<span class=\"hljs-number\">20</span>, parent=left_rot.left.left)\r\n    left_rot.left.left.right = RedBlackTree(-<span class=\"hljs-number\">5</span>, parent=left_rot.left.left)\r\n    left_rot.right = RedBlackTree(<span class=\"hljs-number\">20</span>, parent=left_rot)\r\n    tree = tree.rotate_left()\r\n    <span class=\"hljs-keyword\">if</span> tree != left_rot:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    tree = tree.rotate_right()\r\n    tree = tree.rotate_right()\r\n    <span class=\"hljs-comment\"># Make the left rotation</span>\r\n    right_rot = RedBlackTree(-<span class=\"hljs-number\">10</span>)\r\n    right_rot.left = RedBlackTree(-<span class=\"hljs-number\">20</span>, parent=right_rot)\r\n    right_rot.right = RedBlackTree(<span class=\"hljs-number\">0</span>, parent=right_rot)\r\n    right_rot.right.left = RedBlackTree(-<span class=\"hljs-number\">5</span>, parent=right_rot.right)\r\n    right_rot.right.right = RedBlackTree(<span class=\"hljs-number\">10</span>, parent=right_rot.right)\r\n    right_rot.right.right.left = RedBlackTree(<span class=\"hljs-number\">5</span>, parent=right_rot.right.right)\r\n    right_rot.right.right.right = RedBlackTree(<span class=\"hljs-number\">20</span>, parent=right_rot.right.right)\r\n    <span class=\"hljs-keyword\">if</span> tree != right_rot:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_insertion_speed</span>() -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Test that the tree balances inserts to O(log(n)) by doing a lot\r\n    of them.\r\n    &quot;&quot;&quot;</span>\r\n    tree = RedBlackTree(-<span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">300000</span>):\r\n        tree = tree.insert(i)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_insert</span>() -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Test the insert() method of the tree correctly balances, colors,\r\n    and inserts.\r\n    &quot;&quot;&quot;</span>\r\n    tree = RedBlackTree(<span class=\"hljs-number\">0</span>)\r\n    tree.insert(<span class=\"hljs-number\">8</span>)\r\n    tree.insert(-<span class=\"hljs-number\">8</span>)\r\n    tree.insert(<span class=\"hljs-number\">4</span>)\r\n    tree.insert(<span class=\"hljs-number\">12</span>)\r\n    tree.insert(<span class=\"hljs-number\">10</span>)\r\n    tree.insert(<span class=\"hljs-number\">11</span>)\r\n    ans = RedBlackTree(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\r\n    ans.left = RedBlackTree(-<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">0</span>, ans)\r\n    ans.right = RedBlackTree(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>, ans)\r\n    ans.right.left = RedBlackTree(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>, ans.right)\r\n    ans.right.right = RedBlackTree(<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">0</span>, ans.right)\r\n    ans.right.right.left = RedBlackTree(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">1</span>, ans.right.right)\r\n    ans.right.right.right = RedBlackTree(<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">1</span>, ans.right.right)\r\n    <span class=\"hljs-keyword\">return</span> tree == ans\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_insert_and_search</span>() -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Tests searching through the tree for values.&quot;&quot;&quot;</span>\r\n    tree = RedBlackTree(<span class=\"hljs-number\">0</span>)\r\n    tree.insert(<span class=\"hljs-number\">8</span>)\r\n    tree.insert(-<span class=\"hljs-number\">8</span>)\r\n    tree.insert(<span class=\"hljs-number\">4</span>)\r\n    tree.insert(<span class=\"hljs-number\">12</span>)\r\n    tree.insert(<span class=\"hljs-number\">10</span>)\r\n    tree.insert(<span class=\"hljs-number\">11</span>)\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-keyword\">in</span> tree <span class=\"hljs-keyword\">or</span> -<span class=\"hljs-number\">6</span> <span class=\"hljs-keyword\">in</span> tree <span class=\"hljs-keyword\">or</span> -<span class=\"hljs-number\">10</span> <span class=\"hljs-keyword\">in</span> tree <span class=\"hljs-keyword\">or</span> <span class=\"hljs-number\">13</span> <span class=\"hljs-keyword\">in</span> tree:\r\n        <span class=\"hljs-comment\"># Found something not in there</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> (<span class=\"hljs-number\">11</span> <span class=\"hljs-keyword\">in</span> tree <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">12</span> <span class=\"hljs-keyword\">in</span> tree <span class=\"hljs-keyword\">and</span> -<span class=\"hljs-number\">8</span> <span class=\"hljs-keyword\">in</span> tree <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">in</span> tree):\r\n        <span class=\"hljs-comment\"># Didn&#x27;t find something in there</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_insert_delete</span>() -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Test the insert() and delete() method of the tree, verifying the\r\n    insertion and removal of elements, and the balancing of the tree.\r\n    &quot;&quot;&quot;</span>\r\n    tree = RedBlackTree(<span class=\"hljs-number\">0</span>)\r\n    tree = tree.insert(-<span class=\"hljs-number\">12</span>)\r\n    tree = tree.insert(<span class=\"hljs-number\">8</span>)\r\n    tree = tree.insert(-<span class=\"hljs-number\">8</span>)\r\n    tree = tree.insert(<span class=\"hljs-number\">15</span>)\r\n    tree = tree.insert(<span class=\"hljs-number\">4</span>)\r\n    tree = tree.insert(<span class=\"hljs-number\">12</span>)\r\n    tree = tree.insert(<span class=\"hljs-number\">10</span>)\r\n    tree = tree.insert(<span class=\"hljs-number\">9</span>)\r\n    tree = tree.insert(<span class=\"hljs-number\">11</span>)\r\n    tree = tree.remove(<span class=\"hljs-number\">15</span>)\r\n    tree = tree.remove(-<span class=\"hljs-number\">12</span>)\r\n    tree = tree.remove(<span class=\"hljs-number\">9</span>)\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> tree.check_color_properties():\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">list</span>(tree.inorder_traverse()) != [-<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>]:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_floor_ceil</span>() -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Tests the floor and ceiling functions in the tree.&quot;&quot;&quot;</span>\r\n    tree = RedBlackTree(<span class=\"hljs-number\">0</span>)\r\n    tree.insert(-<span class=\"hljs-number\">16</span>)\r\n    tree.insert(<span class=\"hljs-number\">16</span>)\r\n    tree.insert(<span class=\"hljs-number\">8</span>)\r\n    tree.insert(<span class=\"hljs-number\">24</span>)\r\n    tree.insert(<span class=\"hljs-number\">20</span>)\r\n    tree.insert(<span class=\"hljs-number\">22</span>)\r\n    tuples = [(-<span class=\"hljs-number\">20</span>, <span class=\"hljs-literal\">None</span>, -<span class=\"hljs-number\">16</span>), (-<span class=\"hljs-number\">10</span>, -<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">0</span>), (<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">8</span>), (<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-literal\">None</span>)]\r\n    <span class=\"hljs-keyword\">for</span> val, floor, ceil <span class=\"hljs-keyword\">in</span> tuples:\r\n        <span class=\"hljs-keyword\">if</span> tree.floor(val) != floor <span class=\"hljs-keyword\">or</span> tree.ceil(val) != ceil:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_min_max</span>() -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Tests the min and max functions in the tree.&quot;&quot;&quot;</span>\r\n    tree = RedBlackTree(<span class=\"hljs-number\">0</span>)\r\n    tree.insert(-<span class=\"hljs-number\">16</span>)\r\n    tree.insert(<span class=\"hljs-number\">16</span>)\r\n    tree.insert(<span class=\"hljs-number\">8</span>)\r\n    tree.insert(<span class=\"hljs-number\">24</span>)\r\n    tree.insert(<span class=\"hljs-number\">20</span>)\r\n    tree.insert(<span class=\"hljs-number\">22</span>)\r\n    <span class=\"hljs-keyword\">if</span> tree.get_max() != <span class=\"hljs-number\">22</span> <span class=\"hljs-keyword\">or</span> tree.get_min() != -<span class=\"hljs-number\">16</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_tree_traversal</span>() -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Tests the three different tree traversal functions.&quot;&quot;&quot;</span>\r\n    tree = RedBlackTree(<span class=\"hljs-number\">0</span>)\r\n    tree = tree.insert(-<span class=\"hljs-number\">16</span>)\r\n    tree.insert(<span class=\"hljs-number\">16</span>)\r\n    tree.insert(<span class=\"hljs-number\">8</span>)\r\n    tree.insert(<span class=\"hljs-number\">24</span>)\r\n    tree.insert(<span class=\"hljs-number\">20</span>)\r\n    tree.insert(<span class=\"hljs-number\">22</span>)\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">list</span>(tree.inorder_traverse()) != [-<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">24</span>]:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">list</span>(tree.preorder_traverse()) != [<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">24</span>]:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">list</span>(tree.postorder_traverse()) != [-<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">0</span>]:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_tree_chaining</span>() -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Tests the three different tree chaining functions.&quot;&quot;&quot;</span>\r\n    tree = RedBlackTree(<span class=\"hljs-number\">0</span>)\r\n    tree = tree.insert(-<span class=\"hljs-number\">16</span>).insert(<span class=\"hljs-number\">16</span>).insert(<span class=\"hljs-number\">8</span>).insert(<span class=\"hljs-number\">24</span>).insert(<span class=\"hljs-number\">20</span>).insert(<span class=\"hljs-number\">22</span>)\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">list</span>(tree.inorder_traverse()) != [-<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">24</span>]:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">list</span>(tree.preorder_traverse()) != [<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">24</span>]:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">list</span>(tree.postorder_traverse()) != [-<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">0</span>]:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_results</span>(<span class=\"hljs-params\">msg: <span class=\"hljs-built_in\">str</span>, passes: <span class=\"hljs-built_in\">bool</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">str</span>(msg), <span class=\"hljs-string\">&quot;works!&quot;</span> <span class=\"hljs-keyword\">if</span> passes <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">&quot;doesn&#x27;t work :(&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pytests</span>() -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-keyword\">assert</span> test_rotations()\r\n    <span class=\"hljs-keyword\">assert</span> test_insert()\r\n    <span class=\"hljs-keyword\">assert</span> test_insert_and_search()\r\n    <span class=\"hljs-keyword\">assert</span> test_insert_delete()\r\n    <span class=\"hljs-keyword\">assert</span> test_floor_ceil()\r\n    <span class=\"hljs-keyword\">assert</span> test_tree_traversal()\r\n    <span class=\"hljs-keyword\">assert</span> test_tree_chaining()\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>() -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; pytests()\r\n    &quot;&quot;&quot;</span>\r\n    print_results(<span class=\"hljs-string\">&quot;Rotating right and left&quot;</span>, test_rotations())\r\n    print_results(<span class=\"hljs-string\">&quot;Inserting&quot;</span>, test_insert())\r\n    print_results(<span class=\"hljs-string\">&quot;Searching&quot;</span>, test_insert_and_search())\r\n    print_results(<span class=\"hljs-string\">&quot;Deleting&quot;</span>, test_insert_delete())\r\n    print_results(<span class=\"hljs-string\">&quot;Floor and ceil&quot;</span>, test_floor_ceil())\r\n    print_results(<span class=\"hljs-string\">&quot;Tree traversal&quot;</span>, test_tree_traversal())\r\n    print_results(<span class=\"hljs-string\">&quot;Tree traversal&quot;</span>, test_tree_chaining())\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Testing tree balancing...&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;This should only be a few seconds.&quot;</span>)\r\n    test_insertion_speed()\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Done!&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    main()\r\n"
    },
    "c": {
      "dir": "data_structures/binary_trees/red_black_tree.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/binary_trees/red_black_tree.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>\n{</span>\n    <span class=\"hljs-type\">int</span> val;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">par</span>;</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">left</span>;</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">right</span>;</span>\n    <span class=\"hljs-type\">int</span> color;\n} Node;\n\n<span class=\"hljs-comment\">// Create a new node</span>\nNode *<span class=\"hljs-title function_\">newNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> val, Node *par)</span>\n{\n    Node *create = (Node *)(<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(Node)));\n    create-&gt;val = val;\n    create-&gt;par = par;\n    create-&gt;left = <span class=\"hljs-literal\">NULL</span>;\n    create-&gt;right = <span class=\"hljs-literal\">NULL</span>;\n    create-&gt;color = <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-comment\">// Check if the node is the leaf</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">isLeaf</span><span class=\"hljs-params\">(Node *n)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (n-&gt;left == <span class=\"hljs-literal\">NULL</span> &amp;&amp; n-&gt;right == <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-comment\">// Left Rotate</span>\nNode *<span class=\"hljs-title function_\">leftRotate</span><span class=\"hljs-params\">(Node *node)</span>\n{\n    Node *parent = node-&gt;par;\n    Node *grandParent = parent-&gt;par;\n\n    parent-&gt;right = node-&gt;left;\n    <span class=\"hljs-keyword\">if</span> (node-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n    {\n        node-&gt;left-&gt;par = parent;\n    }\n    node-&gt;par = grandParent;\n    parent-&gt;par = node;\n    node-&gt;left = parent;\n    <span class=\"hljs-keyword\">if</span> (grandParent != <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-keyword\">if</span> (grandParent-&gt;right == parent)\n        {\n            grandParent-&gt;right = node;\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {\n            grandParent-&gt;left = node;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> node;\n}\n\n<span class=\"hljs-comment\">// Right Rotate</span>\nNode *<span class=\"hljs-title function_\">rightRotate</span><span class=\"hljs-params\">(Node *node)</span>\n{\n    Node *parent = node-&gt;par;\n    Node *grandParent = parent-&gt;par;\n\n    parent-&gt;left = node-&gt;right;\n    <span class=\"hljs-keyword\">if</span> (node-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n    {\n        node-&gt;right-&gt;par = parent;\n    }\n    node-&gt;par = grandParent;\n    parent-&gt;par = node;\n    node-&gt;right = parent;\n    <span class=\"hljs-keyword\">if</span> (grandParent != <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-keyword\">if</span> (grandParent-&gt;right == parent)\n        {\n            grandParent-&gt;right = node;\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {\n            grandParent-&gt;left = node;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> node;\n}\n\n<span class=\"hljs-comment\">// Check the node after the insertion step</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">checkNode</span><span class=\"hljs-params\">(Node *node)</span>\n{\n    <span class=\"hljs-comment\">// If the node is the root</span>\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span> || node-&gt;par == <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-keyword\">return</span>;\n    }\n    Node *child = node;\n    <span class=\"hljs-comment\">// If it is a black node or its parent is a black node</span>\n    <span class=\"hljs-keyword\">if</span> (node-&gt;color == <span class=\"hljs-number\">0</span> || (node-&gt;par)-&gt;color == <span class=\"hljs-number\">0</span>)\n    {\n        <span class=\"hljs-comment\">// Dont Do Anything</span>\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">// Both parent and child are red</span>\n    <span class=\"hljs-comment\">// Check For Uncle</span>\n    Node *parent = node-&gt;par;\n    Node *grandParent = parent-&gt;par;\n\n    <span class=\"hljs-comment\">// If grandParent is NULL, then parent is the root.</span>\n    <span class=\"hljs-comment\">// Just make the root black.</span>\n    <span class=\"hljs-keyword\">if</span> (grandParent == <span class=\"hljs-literal\">NULL</span>)\n    {\n        parent-&gt;color = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">// If both the children of the grandParent are red</span>\n    <span class=\"hljs-keyword\">if</span> (grandParent-&gt;right != <span class=\"hljs-literal\">NULL</span> &amp;&amp; (grandParent-&gt;right)-&gt;color == <span class=\"hljs-number\">1</span> &amp;&amp;\n        grandParent-&gt;left != <span class=\"hljs-literal\">NULL</span> &amp;&amp; (grandParent-&gt;left)-&gt;color == <span class=\"hljs-number\">1</span>)\n    {\n        <span class=\"hljs-comment\">// Make the grandParent red and both of its children black</span>\n        (grandParent-&gt;right)-&gt;color = <span class=\"hljs-number\">0</span>;\n        (grandParent-&gt;left)-&gt;color = <span class=\"hljs-number\">0</span>;\n        grandParent-&gt;color = <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        <span class=\"hljs-comment\">// The only option left is rotation.</span>\n        Node *greatGrandParent = grandParent-&gt;par;\n        <span class=\"hljs-comment\">// Right Case</span>\n        <span class=\"hljs-keyword\">if</span> (grandParent-&gt;right == parent)\n        {\n            <span class=\"hljs-comment\">// Right Right Case</span>\n            <span class=\"hljs-keyword\">if</span> (parent-&gt;right == node)\n            {\n                grandParent-&gt;right = parent-&gt;left;\n                <span class=\"hljs-keyword\">if</span> (parent-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n                {\n                    (parent-&gt;left)-&gt;par = grandParent;\n                }\n                parent-&gt;left = grandParent;\n                grandParent-&gt;par = parent;\n\n                <span class=\"hljs-comment\">// Attach to existing Tree;</span>\n                parent-&gt;par = greatGrandParent;\n                <span class=\"hljs-keyword\">if</span> (greatGrandParent != <span class=\"hljs-literal\">NULL</span>)\n                {\n                    <span class=\"hljs-keyword\">if</span> (greatGrandParent-&gt;left != <span class=\"hljs-literal\">NULL</span> &amp;&amp;\n                        greatGrandParent-&gt;left == grandParent)\n                    {\n                        greatGrandParent-&gt;left = parent;\n                    }\n                    <span class=\"hljs-keyword\">else</span>\n                    {\n                        greatGrandParent-&gt;right = parent;\n                    }\n                }\n\n                <span class=\"hljs-comment\">// Change the colors</span>\n                parent-&gt;color = <span class=\"hljs-number\">0</span>;\n                grandParent-&gt;color = <span class=\"hljs-number\">1</span>;\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {  <span class=\"hljs-comment\">// Right Left Case</span>\n                <span class=\"hljs-comment\">// First step -&gt; Parent Child Rotation</span>\n                parent-&gt;left = child-&gt;right;\n                <span class=\"hljs-keyword\">if</span> (child-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n                {\n                    (child-&gt;right)-&gt;par = parent;\n                }\n                child-&gt;right = parent;\n                parent-&gt;par = child;\n\n                <span class=\"hljs-comment\">// Second step -&gt; Child and GrandParent Rotation</span>\n                grandParent-&gt;right = child-&gt;left;\n                <span class=\"hljs-keyword\">if</span> (child-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n                {\n                    (child-&gt;left)-&gt;par = grandParent;\n                }\n                child-&gt;left = grandParent;\n                grandParent-&gt;par = child;\n\n                <span class=\"hljs-comment\">// Attach to the existing tree</span>\n                child-&gt;par = greatGrandParent;\n                <span class=\"hljs-keyword\">if</span> (greatGrandParent != <span class=\"hljs-literal\">NULL</span>)\n                {\n                    <span class=\"hljs-keyword\">if</span> (greatGrandParent-&gt;left != <span class=\"hljs-literal\">NULL</span> &amp;&amp;\n                        greatGrandParent-&gt;left == grandParent)\n                    {\n                        greatGrandParent-&gt;left = child;\n                    }\n                    <span class=\"hljs-keyword\">else</span>\n                    {\n                        greatGrandParent-&gt;right = child;\n                    }\n                }\n\n                <span class=\"hljs-comment\">// Change The Colors</span>\n                child-&gt;color = <span class=\"hljs-number\">0</span>;\n                grandParent-&gt;color = <span class=\"hljs-number\">1</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {  <span class=\"hljs-comment\">// Left Case</span>\n            <span class=\"hljs-comment\">// Left Left Case</span>\n            <span class=\"hljs-keyword\">if</span> (parent-&gt;left == node)\n            {\n                grandParent-&gt;left = parent-&gt;right;\n                <span class=\"hljs-keyword\">if</span> (parent-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n                {\n                    (parent-&gt;right)-&gt;par = grandParent;\n                }\n                parent-&gt;right = grandParent;\n                grandParent-&gt;par = parent;\n\n                <span class=\"hljs-comment\">// Attach to existing Tree;</span>\n                parent-&gt;par = greatGrandParent;\n                <span class=\"hljs-keyword\">if</span> (greatGrandParent != <span class=\"hljs-literal\">NULL</span>)\n                {\n                    <span class=\"hljs-keyword\">if</span> (greatGrandParent-&gt;left != <span class=\"hljs-literal\">NULL</span> &amp;&amp;\n                        greatGrandParent-&gt;left == grandParent)\n                    {\n                        greatGrandParent-&gt;left = parent;\n                    }\n                    <span class=\"hljs-keyword\">else</span>\n                    {\n                        greatGrandParent-&gt;right = parent;\n                    }\n                }\n\n                <span class=\"hljs-comment\">// Change the colors</span>\n                parent-&gt;color = <span class=\"hljs-number\">0</span>;\n                grandParent-&gt;color = <span class=\"hljs-number\">1</span>;\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {  <span class=\"hljs-comment\">// Left Right Case</span>\n\n                <span class=\"hljs-comment\">// First step -&gt; Parent Child Rotation</span>\n                parent-&gt;right = child-&gt;left;\n                <span class=\"hljs-keyword\">if</span> (child-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n                {\n                    (child-&gt;left)-&gt;par = parent;\n                }\n                child-&gt;left = parent;\n                parent-&gt;par = child;\n\n                <span class=\"hljs-comment\">// Second step -&gt; Child and GrandParent Rotation</span>\n                grandParent-&gt;left = child-&gt;right;\n                <span class=\"hljs-keyword\">if</span> (child-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n                {\n                    (child-&gt;right)-&gt;par = grandParent;\n                }\n                child-&gt;right = grandParent;\n                grandParent-&gt;par = child;\n\n                <span class=\"hljs-comment\">// Attach to the existing tree</span>\n                child-&gt;par = greatGrandParent;\n                <span class=\"hljs-keyword\">if</span> (greatGrandParent != <span class=\"hljs-literal\">NULL</span>)\n                {\n                    <span class=\"hljs-keyword\">if</span> (greatGrandParent-&gt;left != <span class=\"hljs-literal\">NULL</span> &amp;&amp;\n                        greatGrandParent-&gt;left == grandParent)\n                    {\n                        greatGrandParent-&gt;left = child;\n                    }\n                    <span class=\"hljs-keyword\">else</span>\n                    {\n                        greatGrandParent-&gt;right = child;\n                    }\n                }\n\n                <span class=\"hljs-comment\">// Change The Colors</span>\n                child-&gt;color = <span class=\"hljs-number\">0</span>;\n                grandParent-&gt;color = <span class=\"hljs-number\">1</span>;\n            }\n        }\n    }\n}\n\n<span class=\"hljs-comment\">// To insert a node in the existing tree</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">insertNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> val, Node **root)</span>\n{\n    Node *buffRoot = *root;\n    <span class=\"hljs-keyword\">while</span> (buffRoot)\n    {\n        <span class=\"hljs-keyword\">if</span> (buffRoot-&gt;val &gt; val)\n        {\n            <span class=\"hljs-comment\">// Go left</span>\n            <span class=\"hljs-keyword\">if</span> (buffRoot-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n            {\n                buffRoot = buffRoot-&gt;left;\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\n                <span class=\"hljs-comment\">// Insert The Node</span>\n                Node *toInsert = newNode(val, buffRoot);\n                buffRoot-&gt;left = toInsert;\n                buffRoot = toInsert;\n\n                <span class=\"hljs-comment\">// Check For Double Red Problems</span>\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {\n            <span class=\"hljs-comment\">// Go right</span>\n            <span class=\"hljs-keyword\">if</span> (buffRoot-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n            {\n                buffRoot = buffRoot-&gt;right;\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\n                <span class=\"hljs-comment\">// Insert The Node</span>\n                Node *toInsert = newNode(val, buffRoot);\n                buffRoot-&gt;right = toInsert;\n                buffRoot = toInsert;\n\n                <span class=\"hljs-comment\">// Check For Double Red Problems</span>\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n    }\n\n    <span class=\"hljs-keyword\">while</span> (buffRoot != *root)\n    {\n        checkNode(buffRoot);\n        <span class=\"hljs-keyword\">if</span> (buffRoot-&gt;par == <span class=\"hljs-literal\">NULL</span>)\n        {\n            *root = buffRoot;\n            <span class=\"hljs-keyword\">break</span>;\n        }\n        buffRoot = buffRoot-&gt;par;\n        <span class=\"hljs-keyword\">if</span> (buffRoot == *root)\n        {\n            buffRoot-&gt;color = <span class=\"hljs-number\">0</span>;\n        }\n    }\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">checkForCase2</span><span class=\"hljs-params\">(Node *toDelete, <span class=\"hljs-type\">int</span> delete, <span class=\"hljs-type\">int</span> fromDirection, Node **root)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (toDelete == (*root))\n    {\n        (*root)-&gt;color = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (!delete &amp;&amp;toDelete-&gt;color == <span class=\"hljs-number\">1</span>)\n    {\n        <span class=\"hljs-keyword\">if</span> (!fromDirection)\n        {\n            <span class=\"hljs-keyword\">if</span> (toDelete-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n            {\n                toDelete-&gt;right-&gt;color = <span class=\"hljs-number\">1</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (toDelete-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n            {\n                toDelete-&gt;left-&gt;color = <span class=\"hljs-number\">1</span>;\n            }\n        }\n        toDelete-&gt;color = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">// Get the sibling for further inspection</span>\n    Node *sibling;\n    Node *parent = toDelete-&gt;par;\n    <span class=\"hljs-type\">int</span> locateChild = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// 0 if toDeleted is left of its parent else 1</span>\n    <span class=\"hljs-keyword\">if</span> (parent-&gt;right == toDelete)\n    {\n        sibling = parent-&gt;left;\n        locateChild = <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        sibling = parent-&gt;right;\n    }\n\n    <span class=\"hljs-comment\">// Case 2.1. i.e. if the any children of the sibling is red</span>\n    <span class=\"hljs-keyword\">if</span> ((sibling-&gt;right != <span class=\"hljs-literal\">NULL</span> &amp;&amp; sibling-&gt;right-&gt;color == <span class=\"hljs-number\">1</span>) ||\n        (sibling-&gt;left != <span class=\"hljs-literal\">NULL</span> &amp;&amp; sibling-&gt;left-&gt;color == <span class=\"hljs-number\">1</span>))\n    {\n        <span class=\"hljs-keyword\">if</span> (sibling-&gt;right != <span class=\"hljs-literal\">NULL</span> &amp;&amp; sibling-&gt;right-&gt;color == <span class=\"hljs-number\">1</span>)\n        {\n            <span class=\"hljs-comment\">// Sibling is left and child is right. i.e. LEFT RIGHT ROTATION</span>\n            <span class=\"hljs-keyword\">if</span> (locateChild == <span class=\"hljs-number\">1</span>)\n            {\n                <span class=\"hljs-type\">int</span> parColor = parent-&gt;color;\n\n                <span class=\"hljs-comment\">// Step 1: Left rotate sibling</span>\n                sibling = leftRotate(sibling-&gt;right);\n\n                <span class=\"hljs-comment\">// Step 2: Right rotate updated sibling</span>\n                parent = rightRotate(sibling);\n\n                <span class=\"hljs-comment\">// Check if the root is rotated</span>\n                <span class=\"hljs-keyword\">if</span> (parent-&gt;par == <span class=\"hljs-literal\">NULL</span>)\n                {\n                    *root = parent;\n                }\n\n                <span class=\"hljs-comment\">// Step 3: Update the colors</span>\n                parent-&gt;color = parColor;\n                parent-&gt;left-&gt;color = <span class=\"hljs-number\">0</span>;\n                parent-&gt;right-&gt;color = <span class=\"hljs-number\">0</span>;\n\n                <span class=\"hljs-comment\">// Delete the node (present at parent-&gt;right-&gt;right)</span>\n                <span class=\"hljs-keyword\">if</span> (delete)\n                {\n                    <span class=\"hljs-keyword\">if</span> (toDelete-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n                    {\n                        toDelete-&gt;left-&gt;par = parent-&gt;right;\n                    }\n                    parent-&gt;right-&gt;right = toDelete-&gt;left;\n                    <span class=\"hljs-built_in\">free</span>(toDelete);\n                }\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {  <span class=\"hljs-comment\">// Sibling is right and child is also right. i.e. LEFT LEFT</span>\n               <span class=\"hljs-comment\">// ROTATION</span>\n\n                <span class=\"hljs-type\">int</span> parColor = parent-&gt;color;\n\n                <span class=\"hljs-comment\">// Left Rotate the sibling</span>\n                parent = leftRotate(sibling);\n\n                <span class=\"hljs-comment\">// Check if the root is rotated</span>\n                <span class=\"hljs-keyword\">if</span> (parent-&gt;par == <span class=\"hljs-literal\">NULL</span>)\n                {\n                    *root = parent;\n                }\n\n                <span class=\"hljs-comment\">// Update Colors</span>\n                parent-&gt;color = parColor;\n                parent-&gt;left-&gt;color = <span class=\"hljs-number\">0</span>;\n                parent-&gt;right-&gt;color = <span class=\"hljs-number\">0</span>;\n\n                <span class=\"hljs-comment\">// Delete the node (present at parent-&gt;left-&gt;left)</span>\n                <span class=\"hljs-keyword\">if</span> (delete)\n                {\n                    <span class=\"hljs-keyword\">if</span> (toDelete-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n                    {\n                        toDelete-&gt;right-&gt;par = parent-&gt;left;\n                    }\n                    parent-&gt;left-&gt;left = toDelete-&gt;left;\n                    <span class=\"hljs-built_in\">free</span>(toDelete);\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {\n            <span class=\"hljs-comment\">// Sibling is right and child is left. i.e. RIGHT LEFT ROTATION</span>\n            <span class=\"hljs-keyword\">if</span> (locateChild == <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-type\">int</span> parColor = parent-&gt;color;\n\n                <span class=\"hljs-comment\">// Step 1: Right rotate sibling</span>\n                sibling = rightRotate(sibling-&gt;left);\n\n                <span class=\"hljs-comment\">// printf(&quot;%d - reached\\n&quot;, sibling-&gt;val);</span>\n                <span class=\"hljs-comment\">// return;</span>\n\n                <span class=\"hljs-comment\">// Step 2: Left rotate updated sibling</span>\n                parent = leftRotate(sibling);\n\n                <span class=\"hljs-comment\">// Check if the root is rotated</span>\n                <span class=\"hljs-keyword\">if</span> (parent-&gt;par == <span class=\"hljs-literal\">NULL</span>)\n                {\n                    *root = parent;\n                }\n\n                <span class=\"hljs-comment\">// Step 3: Update the colors</span>\n                parent-&gt;color = parColor;\n                parent-&gt;left-&gt;color = <span class=\"hljs-number\">0</span>;\n                parent-&gt;right-&gt;color = <span class=\"hljs-number\">0</span>;\n\n                <span class=\"hljs-comment\">// Delete the node (present at parent-&gt;left-&gt;left)</span>\n                <span class=\"hljs-keyword\">if</span> (delete)\n                {\n                    <span class=\"hljs-keyword\">if</span> (toDelete-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n                    {\n                        toDelete-&gt;right-&gt;par = parent-&gt;left;\n                    }\n                    parent-&gt;left-&gt;left = toDelete-&gt;right;\n                    <span class=\"hljs-built_in\">free</span>(toDelete);\n                }\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {  <span class=\"hljs-comment\">// Sibling is left and child is also left. i.e. RIGHT RIGHT</span>\n               <span class=\"hljs-comment\">// ROTATION</span>\n\n                <span class=\"hljs-type\">int</span> parColor = parent-&gt;color;\n\n                <span class=\"hljs-comment\">// Right Rotate the sibling</span>\n                parent = rightRotate(sibling);\n\n                <span class=\"hljs-comment\">// Check if the root is rotated</span>\n                <span class=\"hljs-keyword\">if</span> (parent-&gt;par == <span class=\"hljs-literal\">NULL</span>)\n                {\n                    *root = parent;\n                }\n\n                <span class=\"hljs-comment\">// Update Colors</span>\n                parent-&gt;color = parColor;\n                parent-&gt;left-&gt;color = <span class=\"hljs-number\">0</span>;\n                parent-&gt;right-&gt;color = <span class=\"hljs-number\">0</span>;\n\n                <span class=\"hljs-comment\">// Delete the node (present at parent-&gt;right-&gt;right)</span>\n                <span class=\"hljs-keyword\">if</span> (delete)\n                {\n                    <span class=\"hljs-keyword\">if</span> (toDelete-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n                    {\n                        toDelete-&gt;left-&gt;par = parent-&gt;right;\n                    }\n                    parent-&gt;right-&gt;right = toDelete-&gt;left;\n                    <span class=\"hljs-built_in\">free</span>(toDelete);\n                }\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sibling-&gt;color == <span class=\"hljs-number\">0</span>)\n    {  <span class=\"hljs-comment\">// Make the sibling red and recur for its parent</span>\n\n        <span class=\"hljs-comment\">// Recolor the sibling</span>\n        sibling-&gt;color = <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-comment\">// Delete if necessary</span>\n        <span class=\"hljs-keyword\">if</span> (delete)\n        {\n            <span class=\"hljs-keyword\">if</span> (locateChild)\n            {\n                toDelete-&gt;par-&gt;right = toDelete-&gt;left;\n                <span class=\"hljs-keyword\">if</span> (toDelete-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n                {\n                    toDelete-&gt;left-&gt;par = toDelete-&gt;par;\n                }\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\n                toDelete-&gt;par-&gt;left = toDelete-&gt;right;\n                <span class=\"hljs-keyword\">if</span> (toDelete-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n                {\n                    toDelete-&gt;right-&gt;par = toDelete-&gt;par;\n                }\n            }\n        }\n\n        checkForCase2(parent, <span class=\"hljs-number\">0</span>, locateChild, root);\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {  <span class=\"hljs-comment\">// Bring the sibling on top and apply 2.1 or 2.2 accordingly</span>\n        <span class=\"hljs-keyword\">if</span> (locateChild)\n        {  <span class=\"hljs-comment\">// Right Rotate</span>\n\n            toDelete-&gt;par-&gt;right = toDelete-&gt;left;\n            <span class=\"hljs-keyword\">if</span> (toDelete-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n            {\n                toDelete-&gt;left-&gt;par = toDelete-&gt;par;\n            }\n\n            parent = rightRotate(sibling);\n\n            <span class=\"hljs-comment\">// Check if the root is rotated</span>\n            <span class=\"hljs-keyword\">if</span> (parent-&gt;par == <span class=\"hljs-literal\">NULL</span>)\n            {\n                *root = parent;\n            }\n\n            parent-&gt;color = <span class=\"hljs-number\">0</span>;\n            parent-&gt;right-&gt;color = <span class=\"hljs-number\">1</span>;\n            checkForCase2(parent-&gt;right, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, root);\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {  <span class=\"hljs-comment\">// Left Rotate</span>\n\n            toDelete-&gt;par-&gt;left = toDelete-&gt;right;\n            <span class=\"hljs-keyword\">if</span> (toDelete-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n            {\n                toDelete-&gt;right-&gt;par = toDelete-&gt;par;\n            }\n            parent = leftRotate(sibling);\n\n            <span class=\"hljs-comment\">// Check if the root is rotated</span>\n            <span class=\"hljs-keyword\">if</span> (parent-&gt;par == <span class=\"hljs-literal\">NULL</span>)\n            {\n                *root = parent;\n            }\n\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nroot - %d - %d\\n&quot;</span>, parent-&gt;val, parent-&gt;left-&gt;val);\n\n            parent-&gt;color = <span class=\"hljs-number\">0</span>;\n            parent-&gt;left-&gt;color = <span class=\"hljs-number\">1</span>;\n            checkForCase2(parent-&gt;left, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, root);\n        }\n    }\n}\n\n<span class=\"hljs-comment\">// To delete a node from the tree</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">deleteNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> val, Node **root)</span>\n{\n    Node *buffRoot = *root;\n\n    <span class=\"hljs-comment\">// Search for the element in the tree</span>\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)\n    {\n        <span class=\"hljs-keyword\">if</span> (val == buffRoot-&gt;val)\n        {\n            <span class=\"hljs-comment\">// Node Found</span>\n            <span class=\"hljs-keyword\">break</span>;\n        }\n\n        <span class=\"hljs-keyword\">if</span> (val &gt; buffRoot-&gt;val)\n        {\n            <span class=\"hljs-keyword\">if</span> (buffRoot-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n            {\n                buffRoot = buffRoot-&gt;right;\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Node Not Found!!!&quot;</span>);\n                <span class=\"hljs-keyword\">return</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (buffRoot-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n            {\n                buffRoot = buffRoot-&gt;left;\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Node Not Found!!!&quot;</span>);\n                <span class=\"hljs-keyword\">return</span>;\n            }\n        }\n    }\n\n    Node *toDelete = buffRoot;\n\n    <span class=\"hljs-comment\">// Look for the leftmost of right node or right most of left node</span>\n    <span class=\"hljs-keyword\">if</span> (toDelete-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n    {\n        toDelete = toDelete-&gt;left;\n        <span class=\"hljs-keyword\">while</span> (toDelete-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n        {\n            toDelete = toDelete-&gt;right;\n        }\n    }\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (toDelete-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n    {\n        toDelete = toDelete-&gt;right;\n        <span class=\"hljs-keyword\">while</span> (toDelete-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n        {\n            toDelete = toDelete-&gt;left;\n        }\n    }\n\n    <span class=\"hljs-keyword\">if</span> (toDelete == *root)\n    {\n        *root = <span class=\"hljs-literal\">NULL</span>;\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">// Swap the values</span>\n    buffRoot-&gt;val = toDelete-&gt;val;\n    toDelete-&gt;val = val;\n\n    <span class=\"hljs-comment\">// Checking for case 1</span>\n    <span class=\"hljs-keyword\">if</span> (toDelete-&gt;color == <span class=\"hljs-number\">1</span> ||\n        (toDelete-&gt;left != <span class=\"hljs-literal\">NULL</span> &amp;&amp; toDelete-&gt;left-&gt;color == <span class=\"hljs-number\">1</span>) ||\n        (toDelete-&gt;right != <span class=\"hljs-literal\">NULL</span> &amp;&amp; toDelete-&gt;right-&gt;color == <span class=\"hljs-number\">1</span>))\n    {\n        <span class=\"hljs-comment\">// if it is a leaf</span>\n        <span class=\"hljs-keyword\">if</span> (toDelete-&gt;left == <span class=\"hljs-literal\">NULL</span> &amp;&amp; toDelete-&gt;right == <span class=\"hljs-literal\">NULL</span>)\n        {\n            <span class=\"hljs-comment\">// Delete instantly</span>\n            <span class=\"hljs-keyword\">if</span> (toDelete-&gt;par-&gt;left == toDelete)\n            {\n                toDelete-&gt;par-&gt;left = <span class=\"hljs-literal\">NULL</span>;\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\n                toDelete-&gt;par-&gt;right = <span class=\"hljs-literal\">NULL</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {  <span class=\"hljs-comment\">// else its child should be red</span>\n\n            <span class=\"hljs-comment\">// Check for the exitstence of left node</span>\n            <span class=\"hljs-keyword\">if</span> (toDelete-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n            {\n                <span class=\"hljs-comment\">// The node should be right to its parent</span>\n                toDelete-&gt;par-&gt;right = toDelete-&gt;left;\n                toDelete-&gt;left-&gt;par = toDelete-&gt;par;\n                toDelete-&gt;left-&gt;color = <span class=\"hljs-number\">1</span>;\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {  <span class=\"hljs-comment\">// else the right node should be red</span>\n                toDelete-&gt;par-&gt;left = toDelete-&gt;right;\n                toDelete-&gt;right-&gt;par = toDelete-&gt;par;\n                toDelete-&gt;right-&gt;color = <span class=\"hljs-number\">1</span>;\n            }\n        }\n\n        <span class=\"hljs-comment\">// Remove the node from memory</span>\n        <span class=\"hljs-built_in\">free</span>(toDelete);\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {  <span class=\"hljs-comment\">// Case 2</span>\n        checkForCase2(toDelete, <span class=\"hljs-number\">1</span>, ((toDelete-&gt;par-&gt;right == toDelete)), root);\n    }\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printInorder</span><span class=\"hljs-params\">(Node *root)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (root != <span class=\"hljs-literal\">NULL</span>)\n    {\n        printInorder(root-&gt;left);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d c-%d &quot;</span>, root-&gt;val, root-&gt;color);\n        printInorder(root-&gt;right);\n    }\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">checkBlack</span><span class=\"hljs-params\">(Node *temp, <span class=\"hljs-type\">int</span> c)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (temp == <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, c);\n        <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (temp-&gt;color == <span class=\"hljs-number\">0</span>)\n    {\n        c++;\n    }\n    checkBlack(temp-&gt;left, c);\n    checkBlack(temp-&gt;right, c);\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    Node *root = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-type\">int</span> scanValue, choice = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-built_in\">printf</span>(\n        <span class=\"hljs-string\">&quot;1 - Input\\n2 - Delete\\n3 - Inorder Traversel\\n0 - Quit\\n\\nPlease &quot;</span>\n        <span class=\"hljs-string\">&quot;Enter the Choice - &quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;choice);\n    <span class=\"hljs-keyword\">while</span> (choice)\n    {\n        <span class=\"hljs-keyword\">switch</span> (choice)\n        {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\nPlease Enter A Value to insert - &quot;</span>);\n            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;scanValue);\n            <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)\n            {\n                root = newNode(scanValue, <span class=\"hljs-literal\">NULL</span>);\n                root-&gt;color = <span class=\"hljs-number\">0</span>;\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\n                insertNode(scanValue, &amp;root);\n            }\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nSuccessfully Inserted %d in the tree\\n\\n&quot;</span>, scanValue);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\nPlease Enter A Value to Delete - &quot;</span>);\n            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;scanValue);\n            deleteNode(scanValue, &amp;root);\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nSuccessfully Inserted %d in the tree\\n\\n&quot;</span>, scanValue);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nInorder Traversel - &quot;</span>);\n            printInorder(root);\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\n&quot;</span>);\n            <span class=\"hljs-comment\">// checkBlack(root,0);</span>\n            <span class=\"hljs-comment\">// printf(&quot;\\n&quot;);</span>\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">default</span>:\n            <span class=\"hljs-keyword\">if</span> (root != <span class=\"hljs-literal\">NULL</span>)\n            {\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Root - %d\\n&quot;</span>, root-&gt;val);\n            }\n        }\n        <span class=\"hljs-built_in\">printf</span>(\n            <span class=\"hljs-string\">&quot;1 - Input\\n2 - Delete\\n3 - Inorder Traversel\\n0 - &quot;</span>\n            <span class=\"hljs-string\">&quot;Quit\\n\\nPlease Enter the Choice - &quot;</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;choice);\n    }\n}\n\n<span class=\"hljs-comment\">// 32 12 50 53 1 2 3 4 5 6 7 8 9</span>\n"
    }
  },
  "contributors": [
    {
      "name": "JarredAllen",
      "email": "jarredallen73@gmail.com",
      "commits": 1
    },
    {
      "name": "QuantumNovice",
      "email": "43876848+QuantumNovice@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "flamespirit919",
      "email": "mikelsworld@comcast.net",
      "commits": 1
    },
    {
      "name": "Abhijit Patil",
      "email": "abhi175668@gmail.com",
      "commits": 1
    },
    {
      "name": "Dylan Buchi",
      "email": "devybuchi@gmail.com",
      "commits": 1
    },
    {
      "name": "CarsonHam",
      "email": "carson.ham@utexas.edu",
      "commits": 1
    },
    {
      "name": "kanthuc",
      "email": "srikanthuchavali@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}