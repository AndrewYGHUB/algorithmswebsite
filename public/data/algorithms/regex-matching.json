{
  "slug": "regex-matching",
  "name": "Regex Matching",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/dynamicprogramming/RegexMatching.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/dynamicprogramming/RegexMatching.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\n\n<span class=\"hljs-comment\">/**\n * Given a text and wildcard pattern implement a wildcard pattern matching\n * algorithm that finds if wildcard is matched with text. The matching should\n * cover the entire text ?-&gt; matches single characters *-&gt; match the sequence of\n * characters\n *\n */</span>\n<span class=\"hljs-comment\">/**\n * For calculation of Time and Space Complexity. Let N be length of src and M be\n * length of pat\n *\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RegexMatching</span> {\n\n    <span class=\"hljs-comment\">// Method 1: Using Recursion</span>\n    <span class=\"hljs-comment\">// Time Complexity=0(2^(N+M)) Space Complexity=Recursion Extra Space</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">regexRecursion</span><span class=\"hljs-params\">(String src, String pat)</span> {\n        <span class=\"hljs-keyword\">if</span> (src.length() == <span class=\"hljs-number\">0</span> &amp;&amp; pat.length() == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (src.length() != <span class=\"hljs-number\">0</span> &amp;&amp; pat.length() == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (src.length() == <span class=\"hljs-number\">0</span> &amp;&amp; pat.length() != <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; pat.length(); i++) {\n                <span class=\"hljs-keyword\">if</span> (pat.charAt(i) != <span class=\"hljs-string\">&#x27;*&#x27;</span>) {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n            }\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n        <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">chs</span> <span class=\"hljs-operator\">=</span> src.charAt(<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">chp</span> <span class=\"hljs-operator\">=</span> pat.charAt(<span class=\"hljs-number\">0</span>);\n\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">ros</span> <span class=\"hljs-operator\">=</span> src.substring(<span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">rop</span> <span class=\"hljs-operator\">=</span> pat.substring(<span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-type\">boolean</span> ans;\n        <span class=\"hljs-keyword\">if</span> (chs == chp || chp == <span class=\"hljs-string\">&#x27;?&#x27;</span>) {\n            ans = regexRecursion(ros, rop);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (chp == <span class=\"hljs-string\">&#x27;*&#x27;</span>) {\n            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">blank</span> <span class=\"hljs-operator\">=</span> regexRecursion(src, rop);\n            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">multiple</span> <span class=\"hljs-operator\">=</span> regexRecursion(ros, pat);\n            ans = blank || multiple;\n        } <span class=\"hljs-keyword\">else</span> {\n            ans = <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> ans;\n    }\n\n    <span class=\"hljs-comment\">// Method 2: Using Recursion and breaking string using virtual index</span>\n    <span class=\"hljs-comment\">// Time Complexity=0(2^(N+M)) Space Complexity=Recursion Extra Space</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">regexRecursion</span><span class=\"hljs-params\">(String src, String pat, <span class=\"hljs-type\">int</span> svidx, <span class=\"hljs-type\">int</span> pvidx)</span> {\n        <span class=\"hljs-keyword\">if</span> (src.length() == svidx &amp;&amp; pat.length() == pvidx) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (src.length() != svidx &amp;&amp; pat.length() == pvidx) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (src.length() == svidx &amp;&amp; pat.length() != pvidx) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> pvidx; i &lt; pat.length(); i++) {\n                <span class=\"hljs-keyword\">if</span> (pat.charAt(i) != <span class=\"hljs-string\">&#x27;*&#x27;</span>) {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n            }\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n        <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">chs</span> <span class=\"hljs-operator\">=</span> src.charAt(svidx);\n        <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">chp</span> <span class=\"hljs-operator\">=</span> pat.charAt(pvidx);\n\n        <span class=\"hljs-type\">boolean</span> ans;\n        <span class=\"hljs-keyword\">if</span> (chs == chp || chp == <span class=\"hljs-string\">&#x27;?&#x27;</span>) {\n            ans = regexRecursion(src, pat, svidx + <span class=\"hljs-number\">1</span>, pvidx + <span class=\"hljs-number\">1</span>);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (chp == <span class=\"hljs-string\">&#x27;*&#x27;</span>) {\n            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">blank</span> <span class=\"hljs-operator\">=</span> regexRecursion(src, pat, svidx, pvidx + <span class=\"hljs-number\">1</span>);\n            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">multiple</span> <span class=\"hljs-operator\">=</span> regexRecursion(src, pat, svidx + <span class=\"hljs-number\">1</span>, pvidx);\n            ans = blank || multiple;\n        } <span class=\"hljs-keyword\">else</span> {\n            ans = <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> ans;\n    }\n\n    <span class=\"hljs-comment\">// Method 3: Top-Down DP(Memoization)</span>\n    <span class=\"hljs-comment\">// Time Complexity=0(N*M) Space Complexity=0(N*M)+Recursion Extra Space</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">regexRecursion</span><span class=\"hljs-params\">(String src, String pat, <span class=\"hljs-type\">int</span> svidx, <span class=\"hljs-type\">int</span> pvidx, <span class=\"hljs-type\">int</span>[][] strg)</span> {\n        <span class=\"hljs-keyword\">if</span> (src.length() == svidx &amp;&amp; pat.length() == pvidx) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (src.length() != svidx &amp;&amp; pat.length() == pvidx) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (src.length() == svidx &amp;&amp; pat.length() != pvidx) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> pvidx; i &lt; pat.length(); i++) {\n                <span class=\"hljs-keyword\">if</span> (pat.charAt(i) != <span class=\"hljs-string\">&#x27;*&#x27;</span>) {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n            }\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (strg[svidx][pvidx] != <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> strg[svidx][pvidx] == <span class=\"hljs-number\">1</span> ? <span class=\"hljs-literal\">false</span> : <span class=\"hljs-literal\">true</span>;\n        }\n        <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">chs</span> <span class=\"hljs-operator\">=</span> src.charAt(svidx);\n        <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">chp</span> <span class=\"hljs-operator\">=</span> pat.charAt(pvidx);\n\n        <span class=\"hljs-type\">boolean</span> ans;\n        <span class=\"hljs-keyword\">if</span> (chs == chp || chp == <span class=\"hljs-string\">&#x27;?&#x27;</span>) {\n            ans = regexRecursion(src, pat, svidx + <span class=\"hljs-number\">1</span>, pvidx + <span class=\"hljs-number\">1</span>, strg);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (chp == <span class=\"hljs-string\">&#x27;*&#x27;</span>) {\n            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">blank</span> <span class=\"hljs-operator\">=</span> regexRecursion(src, pat, svidx, pvidx + <span class=\"hljs-number\">1</span>, strg);\n            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">multiple</span> <span class=\"hljs-operator\">=</span> regexRecursion(src, pat, svidx + <span class=\"hljs-number\">1</span>, pvidx, strg);\n            ans = blank || multiple;\n        } <span class=\"hljs-keyword\">else</span> {\n            ans = <span class=\"hljs-literal\">false</span>;\n        }\n        strg[svidx][pvidx] = ans == <span class=\"hljs-literal\">false</span> ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">return</span> ans;\n    }\n\n    <span class=\"hljs-comment\">// Method 4: Bottom-Up DP(Tabulation)</span>\n    <span class=\"hljs-comment\">// Time Complexity=0(N*M) Space Complexity=0(N*M)</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">regexBU</span><span class=\"hljs-params\">(String src, String pat)</span> {\n\n        <span class=\"hljs-type\">boolean</span> strg[][] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">boolean</span>[src.length() + <span class=\"hljs-number\">1</span>][pat.length() + <span class=\"hljs-number\">1</span>];\n        strg[src.length()][pat.length()] = <span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">row</span> <span class=\"hljs-operator\">=</span> src.length(); row &gt;= <span class=\"hljs-number\">0</span>; row--) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">col</span> <span class=\"hljs-operator\">=</span> pat.length() - <span class=\"hljs-number\">1</span>; col &gt;= <span class=\"hljs-number\">0</span>; col--) {\n                <span class=\"hljs-keyword\">if</span> (row == src.length()) {\n                    <span class=\"hljs-keyword\">if</span> (pat.charAt(col) == <span class=\"hljs-string\">&#x27;*&#x27;</span>) {\n                        strg[row][col] = strg[row][col + <span class=\"hljs-number\">1</span>];\n                    } <span class=\"hljs-keyword\">else</span> {\n                        strg[row][col] = <span class=\"hljs-literal\">false</span>;\n                    }\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">chs</span> <span class=\"hljs-operator\">=</span> src.charAt(row);\n                    <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">chp</span> <span class=\"hljs-operator\">=</span> pat.charAt(col);\n\n                    <span class=\"hljs-type\">boolean</span> ans;\n                    <span class=\"hljs-keyword\">if</span> (chs == chp || chp == <span class=\"hljs-string\">&#x27;?&#x27;</span>) {\n                        ans = strg[row + <span class=\"hljs-number\">1</span>][col + <span class=\"hljs-number\">1</span>];\n                    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (chp == <span class=\"hljs-string\">&#x27;*&#x27;</span>) {\n                        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">blank</span> <span class=\"hljs-operator\">=</span> strg[row][col + <span class=\"hljs-number\">1</span>];\n                        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">multiple</span> <span class=\"hljs-operator\">=</span> strg[row + <span class=\"hljs-number\">1</span>][col];\n                        ans = blank || multiple;\n                    } <span class=\"hljs-keyword\">else</span> {\n                        ans = <span class=\"hljs-literal\">false</span>;\n                    }\n                    strg[row][col] = ans;\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> strg[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>];\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">src</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;aa&quot;</span>;\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">pat</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;*&quot;</span>;\n        System.out.println(<span class=\"hljs-string\">&quot;Method 1: &quot;</span> + regexRecursion(src, pat));\n        System.out.println(<span class=\"hljs-string\">&quot;Method 2: &quot;</span> + regexRecursion(src, pat, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>));\n        System.out.println(<span class=\"hljs-string\">&quot;Method 3: &quot;</span> + regexRecursion(src, pat, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[src.length()][pat.length()]));\n        System.out.println(<span class=\"hljs-string\">&quot;Method 4: &quot;</span> + regexBU(src, pat));\n\n    }\n\n}\n<span class=\"hljs-comment\">// Memoization vs Tabulation : https://www.geeksforgeeks.org/tabulation-vs-memoization/</span>\n<span class=\"hljs-comment\">// Question Link : https://practice.geeksforgeeks.org/problems/wildcard-pattern-matching/1</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Nikita Kapoor",
      "email": "62166533+nikitakapoor1919@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Manan-Rathi",
      "email": "76519771+Manan-Rathi@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}