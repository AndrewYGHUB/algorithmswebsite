{
  "slug": "remote-command-exec-udp-server",
  "name": "Remote Command Exec Udp Server",
  "categories": [
    "clientserver"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "client_server/remote_command_exec_udp_server.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/client_server/remote_command_exec_udp_server.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @author [NVombat](https://github.com/NVombat)\n * @brief Server-side implementation of [Remote Command\n * Execution Using\n * UDP](https://www.imperva.com/learn/ddos/udp-user-datagram-protocol/)\n * @see remote_command_exec_udp_server.c\n *\n * @details\n * The algorithm is based on the simple UDP client and server model. It\n * runs an infinite loop which takes user input and sends it to the server\n * for execution. The server receives the commands and executes them\n * until the user exits the loop. In this way, Remote Command Execution\n * using UDP is shown using the server-client model &amp; socket programming\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;arpa/inet.h&gt;</span>  <span class=\"hljs-comment\">/// For the type in_addr_t and in_port_t</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;errno.h&gt;</span>      <span class=\"hljs-comment\">/// To indicate what went wrong if an error occurs</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;netdb.h&gt;</span>  <span class=\"hljs-comment\">/// For structures returned by the network database library - formatted internet addresses and port numbers</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;netinet/in.h&gt;</span>  <span class=\"hljs-comment\">/// For in_addr and sockaddr_in structures</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdint.h&gt;</span>      <span class=\"hljs-comment\">/// For specific bit size values of variables</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span>  <span class=\"hljs-comment\">/// Variable types, several macros, and various functions for performing input and output</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span>  <span class=\"hljs-comment\">/// Variable types, several macros, and various functions for performing general functions</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span>  <span class=\"hljs-comment\">/// Various functions for manipulating arrays of characters</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/socket.h&gt;</span>  <span class=\"hljs-comment\">/// For macro definitions related to the creation of sockets</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/types.h&gt;</span>  <span class=\"hljs-comment\">/// For definitions to allow for the porting of BSD programs</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unistd.h&gt;</span>  <span class=\"hljs-comment\">/// For miscellaneous symbolic constants and types, and miscellaneous functions</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> PORT 10000  <span class=\"hljs-comment\">/// Define port over which communication will take place</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief Utility function used to print an error message to `stderr`.\n * It prints `str` and an implementation-defined error\n * message corresponding to the global variable `errno`.\n * @returns void\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">error</span><span class=\"hljs-params\">()</span>\n{\n    perror(<span class=\"hljs-string\">&quot;Socket Creation Failed&quot;</span>);\n    <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-comment\">/** Variable Declarations */</span>\n    <span class=\"hljs-type\">uint32_t</span>\n        sockfd;  <span class=\"hljs-comment\">///&lt; socket descriptors - Like file handles but for sockets</span>\n    <span class=\"hljs-type\">char</span> recv_msg[<span class=\"hljs-number\">1024</span>],\n        success_message[] =\n            <span class=\"hljs-string\">&quot;Command Executed Successfully!\\n&quot;</span>;  <span class=\"hljs-comment\">///&lt; character arrays to read</span>\n                                                 <span class=\"hljs-comment\">/// and store string data</span>\n                                                 <span class=\"hljs-comment\">/// for communication &amp; Success</span>\n                                                 <span class=\"hljs-comment\">/// message</span>\n\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">sockaddr_in</span> <span class=\"hljs-title\">server_addr</span>,\n        <span class=\"hljs-title\">client_addr</span>;</span>  <span class=\"hljs-comment\">///&lt; basic structures for all syscalls and functions that</span>\n                      <span class=\"hljs-comment\">/// deal with internet addresses. Structures for handling</span>\n                      <span class=\"hljs-comment\">/// internet addresses</span>\n    <span class=\"hljs-type\">socklen_t</span> clientLength = <span class=\"hljs-keyword\">sizeof</span>(client_addr);  <span class=\"hljs-comment\">/// size of address</span>\n\n    <span class=\"hljs-comment\">/**\n     * The UDP socket is created using the socket function.\n     *\n     * AF_INET (Family) - it is an address family that is used to designate the\n     * type of addresses that your socket can communicate with\n     *\n     * SOCK_DGRAM (Type) - Indicates UDP Connection - UDP does not require the\n     * source and destination to establish a three-way handshake before\n     * transmission takes place. Additionally, there is no need for an\n     * end-to-end connection\n     *\n     * 0 (Protocol) - Specifies a particular protocol to be used with the\n     * socket. Specifying a protocol of 0 causes socket() to use an unspecified\n     * default protocol appropriate for the requested socket type.\n     */</span>\n    <span class=\"hljs-keyword\">if</span> ((sockfd = socket(AF_INET, SOCK_DGRAM, <span class=\"hljs-number\">0</span>)) &lt; <span class=\"hljs-number\">0</span>)\n    {\n        error();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Server Address Information\n     *\n     * The bzero() function erases the data in the n bytes of the memory\n     * starting at the location pointed to, by writing zeros (bytes\n     * containing &#x27;\\0&#x27;) to that area.\n     *\n     * We bind the server_addr to the internet address and port number thus\n     * giving our socket an identity with an address and port where it can\n     * listen for connections\n     *\n     * htons - The htons() function translates a short integer from host byte\n     * order to network byte order\n     *\n     * htonl - The htonl() function translates a long integer from host byte\n     * order to network byte order\n     *\n     * These functions are necessary so that the binding of address and port\n     * takes place with data in the correct format\n     */</span>\n    bzero(&amp;server_addr, <span class=\"hljs-keyword\">sizeof</span>(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(PORT);\n    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n\n    <span class=\"hljs-comment\">/**\n     * This binds the socket descriptor to the server thus enabling the server\n     * to listen for connections and communicate with other clients\n     */</span>\n    <span class=\"hljs-keyword\">if</span> (bind(sockfd, (<span class=\"hljs-keyword\">struct</span> sockaddr *)&amp;server_addr, <span class=\"hljs-keyword\">sizeof</span>(server_addr)) &lt; <span class=\"hljs-number\">0</span>)\n    {\n        error();  <span class=\"hljs-comment\">/// If binding is unsuccessful</span>\n    }\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Server is Connected Successfully...\\n&quot;</span>);\n\n    <span class=\"hljs-comment\">/**\n     * Communication between client and server\n     *\n     * The bzero() function erases the data in the n bytes of the memory\n     * starting at the location pointed to, by writing zeros (bytes\n     * containing &#x27;\\0&#x27;) to that area. The variables are emptied and then\n     * ready for use\n     *\n     * The server receives data from the client which is a command. It then\n     * executes the command.\n     *\n     * The client then receives a response from the server when the\n     * command has been executed\n     *\n     * The server and client can communicate indefinitely till one of them\n     * exits the connection\n     *\n     * The client sends the server a command which it executes thus showing\n     * remote command execution using UDP\n     */</span>\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)\n    {\n        bzero(recv_msg, <span class=\"hljs-keyword\">sizeof</span>(recv_msg));\n        recvfrom(sockfd, recv_msg, <span class=\"hljs-keyword\">sizeof</span>(recv_msg), <span class=\"hljs-number\">0</span>,\n                 (<span class=\"hljs-keyword\">struct</span> sockaddr *)&amp;client_addr, &amp;clientLength);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Command Output: \\n&quot;</span>);\n        system(recv_msg);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Command Executed\\n&quot;</span>);\n        sendto(sockfd, success_message, <span class=\"hljs-keyword\">sizeof</span>(success_message), <span class=\"hljs-number\">0</span>,\n               (<span class=\"hljs-keyword\">struct</span> sockaddr *)&amp;client_addr, clientLength);\n    }\n\n    <span class=\"hljs-comment\">/// Close socket</span>\n    close(sockfd);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Server is offline...\\n&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Nikhill Vombatkere",
      "email": "63743496+NVombat@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}