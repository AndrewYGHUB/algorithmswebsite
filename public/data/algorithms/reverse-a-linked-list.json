{
  "slug": "reverse-a-linked-list",
  "name": "Reverse a Linked List",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "data_structures/reverse_a_linked_list.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/reverse_a_linked_list.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of [Reversing\n * a single linked list](https://simple.wikipedia.org/wiki/Linked_list)\n * @details\n * The linked list is a data structure used for holding a sequence of\n * values, which can be added, displayed, reversed, or removed.\n * ### Algorithm\n * Values can be added by iterating to the end of a list (by following\n * the pointers) starting from the first link. Whichever link points to null\n * is considered the last link and is pointed to the new value.\n *\n * Linked List can be reversed by using 3 pointers: current, previous, and\n * next_node; we keep iterating until the last node. Meanwhile, before changing\n * to the next of current, we store it in the next_node pointer, now we store\n * the prev pointer in the current of next, this is where the actual reversal\n * happens. And then we move the prev and current pointers one step forward.\n * Then the head node is made to point to the last node (prev pointer) after\n * completion of an iteration.\n\n * [A graphic explanation and view of what&#x27;s happening behind the\n *scenes](https://drive.google.com/file/d/1pM5COF0wx-wermnNy_svtyZquaCUP2xS/view?usp=sharing)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for I/O operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;memory&gt;</span>    <span class=\"hljs-comment\">/// for dynamic memory</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;new&gt;</span>       <span class=\"hljs-comment\">/// for managing  dynamic storage</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace data_structures\n * @brief Data Structures algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> data_structures {\n<span class=\"hljs-comment\">/**\n * @namespace linked_list\n * @brief Functions for singly linked list algorithm\n */</span>\n<span class=\"hljs-keyword\">namespace</span> linked_list {\n<span class=\"hljs-comment\">/**\n * A Node class containing a value and pointer to another link\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-type\">int32_t</span> val;  <span class=\"hljs-comment\">/// value of the current link</span>\n    Node *next;   <span class=\"hljs-comment\">/// pointer to the next value on the list</span>\n};\n\n<span class=\"hljs-comment\">/**\n * A list class containing a sequence of links\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">list</span> {\n <span class=\"hljs-keyword\">private</span>:\n    Node *head;  <span class=\"hljs-comment\">// link before the actual first element</span>\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/**\n     * List constructor. Initializes the first link.\n     */</span>\n    <span class=\"hljs-built_in\">list</span>() {\n        head = <span class=\"hljs-literal\">nullptr</span>;  <span class=\"hljs-comment\">// Initialize the first link</span>\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span></span>;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int32_t</span> new_elem)</span></span>;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">reverseList</span><span class=\"hljs-params\">()</span></span>;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">display</span><span class=\"hljs-params\">()</span></span>;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int32_t</span> <span class=\"hljs-title\">top</span><span class=\"hljs-params\">()</span></span>;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int32_t</span> <span class=\"hljs-title\">last</span><span class=\"hljs-params\">()</span></span>;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int32_t</span> <span class=\"hljs-title\">traverse</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int32_t</span> index)</span></span>;\n};\n\n<span class=\"hljs-comment\">/**\n * @brief Utility function that checks if the list is empty\n * @returns true if the list is empty\n * @returns false if the list is not empty\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">list::isEmpty</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> head == <span class=\"hljs-literal\">nullptr</span>; }\n\n<span class=\"hljs-comment\">/**\n * @brief Utility function that adds a new element at the end of the list\n * @param new_elem element be added at the end of the list\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">list::insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int32_t</span> n)</span> </span>{\n    <span class=\"hljs-keyword\">try</span> {\n        Node *new_node = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Node</span>();\n        Node *temp = <span class=\"hljs-literal\">nullptr</span>;\n        new_node-&gt;val = n;\n        new_node-&gt;next = <span class=\"hljs-literal\">nullptr</span>;\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isEmpty</span>()) {\n            head = new_node;\n        } <span class=\"hljs-keyword\">else</span> {\n            temp = head;\n            <span class=\"hljs-keyword\">while</span> (temp-&gt;next != <span class=\"hljs-literal\">nullptr</span>) {\n                temp = temp-&gt;next;\n            }\n            temp-&gt;next = new_node;\n        }\n    } <span class=\"hljs-built_in\">catch</span> (std::bad_alloc &amp;exception) {\n        std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;bad_alloc detected: &quot;</span> &lt;&lt; exception.<span class=\"hljs-built_in\">what</span>() &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Utility function for reversing a list\n * @brief Using the current, previous, and next pointer.\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">list::reverseList</span><span class=\"hljs-params\">()</span> </span>{\n    Node *curr = head;\n    Node *prev = <span class=\"hljs-literal\">nullptr</span>, *next_node = <span class=\"hljs-literal\">nullptr</span>;\n    <span class=\"hljs-keyword\">while</span> (curr != <span class=\"hljs-literal\">nullptr</span>) {\n        next_node = curr-&gt;next;\n        curr-&gt;next = prev;\n        prev = curr;\n        curr = next_node;\n    }\n    head = prev;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Utility function to find the top element of the list\n * @returns the top element of the list\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int32_t</span> <span class=\"hljs-title\">list::top</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">isEmpty</span>()) {\n        <span class=\"hljs-keyword\">return</span> head-&gt;val;\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">throw</span> std::<span class=\"hljs-built_in\">logic_error</span>(<span class=\"hljs-string\">&quot;List is empty&quot;</span>);\n    }\n}\n<span class=\"hljs-comment\">/**\n *  @brief Utility function to find the last element of the list\n *  @returns the last element of the list\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int32_t</span> <span class=\"hljs-title\">list::last</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">isEmpty</span>()) {\n        Node *t = head;\n        <span class=\"hljs-keyword\">while</span> (t-&gt;next != <span class=\"hljs-literal\">nullptr</span>) {\n            t = t-&gt;next;\n        }\n        <span class=\"hljs-keyword\">return</span> t-&gt;val;\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">throw</span> std::<span class=\"hljs-built_in\">logic_error</span>(<span class=\"hljs-string\">&quot;List is empty&quot;</span>);\n    }\n}\n<span class=\"hljs-comment\">/**\n *  @brief Utility function to find the i th element of the list\n *  @returns the i th element of the list\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int32_t</span> <span class=\"hljs-title\">list::traverse</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index)</span> </span>{\n    Node *current = head;\n\n    <span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (current != <span class=\"hljs-literal\">nullptr</span>) {\n        <span class=\"hljs-keyword\">if</span> (count == index) {\n            <span class=\"hljs-keyword\">return</span> (current-&gt;val);\n        }\n        count++;\n        current = current-&gt;next;\n    }\n\n    <span class=\"hljs-comment\">/* if we get to this line,the caller was asking for a non-existent element\n    so we assert fail */</span>\n    <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);\n}\n\n}  <span class=\"hljs-comment\">// namespace linked_list</span>\n}  <span class=\"hljs-comment\">// namespace data_structures</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    data_structures::linked_list::list L;\n    <span class=\"hljs-comment\">// 1st test</span>\n    L.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">11</span>);\n    L.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">12</span>);\n    L.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">15</span>);\n    L.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">10</span>);\n    L.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">-12</span>);\n    L.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">-20</span>);\n    L.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">18</span>);\n    <span class=\"hljs-built_in\">assert</span>(L.<span class=\"hljs-built_in\">top</span>() == <span class=\"hljs-number\">11</span>);\n    <span class=\"hljs-built_in\">assert</span>(L.<span class=\"hljs-built_in\">last</span>() == <span class=\"hljs-number\">18</span>);\n    L.<span class=\"hljs-built_in\">reverseList</span>();\n    <span class=\"hljs-comment\">// Reversal Testing</span>\n    <span class=\"hljs-built_in\">assert</span>(L.<span class=\"hljs-built_in\">top</span>() == <span class=\"hljs-number\">18</span>);\n    <span class=\"hljs-built_in\">assert</span>(L.<span class=\"hljs-built_in\">traverse</span>(<span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">-20</span>);\n    <span class=\"hljs-built_in\">assert</span>(L.<span class=\"hljs-built_in\">traverse</span>(<span class=\"hljs-number\">2</span>) == <span class=\"hljs-number\">-12</span>);\n    <span class=\"hljs-built_in\">assert</span>(L.<span class=\"hljs-built_in\">traverse</span>(<span class=\"hljs-number\">3</span>) == <span class=\"hljs-number\">10</span>);\n    <span class=\"hljs-built_in\">assert</span>(L.<span class=\"hljs-built_in\">traverse</span>(<span class=\"hljs-number\">4</span>) == <span class=\"hljs-number\">15</span>);\n    <span class=\"hljs-built_in\">assert</span>(L.<span class=\"hljs-built_in\">traverse</span>(<span class=\"hljs-number\">5</span>) == <span class=\"hljs-number\">12</span>);\n    <span class=\"hljs-built_in\">assert</span>(L.<span class=\"hljs-built_in\">last</span>() == <span class=\"hljs-number\">11</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;All tests have successfully passed!&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "2kindsofcs",
      "email": "42531877+2kindsofcs@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Tisha Soumya",
      "email": "tishasoumya@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}