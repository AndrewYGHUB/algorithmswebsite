{
  "slug": "reverse-stack",
  "name": "Reverse Stack",
  "categories": [
    "datastructures",
    "stacks"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/stacks/ReverseStack.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/stacks/ReverseStack.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.stacks;\n\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n<span class=\"hljs-keyword\">import</span> java.util.Stack;\n\n<span class=\"hljs-comment\">/**\n * Reversal of a stack using recursion.\n *\n * <span class=\"hljs-doctag\">@author</span> Ishika Agarwal, 2021\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ReverseStack</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\n\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n        System.out.println(<span class=\"hljs-string\">&quot;Enter the number of elements you wish to insert in the stack&quot;</span>);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> sc.nextInt();\n        <span class=\"hljs-type\">int</span> i;\n        Stack&lt;Integer&gt; stack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>&lt;Integer&gt;();\n        System.out.println(<span class=\"hljs-string\">&quot;Enter the stack elements&quot;</span>);\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n            stack.push(sc.nextInt());\n        }\n        sc.close();\n        reverseStack(stack);\n        System.out.println(<span class=\"hljs-string\">&quot;The reversed stack is:&quot;</span>);\n        <span class=\"hljs-keyword\">while</span> (!stack.isEmpty()) {\n            System.out.print(stack.peek() + <span class=\"hljs-string\">&quot;,&quot;</span>);\n            stack.pop();\n        }\n\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">reverseStack</span><span class=\"hljs-params\">(Stack&lt;Integer&gt; stack)</span> {\n        <span class=\"hljs-keyword\">if</span> (stack.isEmpty()) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n\n        <span class=\"hljs-comment\">//Store the topmost element</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">element</span> <span class=\"hljs-operator\">=</span> stack.peek();\n        <span class=\"hljs-comment\">//Remove the topmost element</span>\n        stack.pop();\n\n        <span class=\"hljs-comment\">//Reverse the stack for the leftover elements</span>\n        reverseStack(stack);\n\n        <span class=\"hljs-comment\">//Insert the topmost element to the bottom of the stack</span>\n        insertAtBottom(stack, element);\n\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertAtBottom</span><span class=\"hljs-params\">(Stack&lt;Integer&gt; stack, <span class=\"hljs-type\">int</span> element)</span> {\n\n        <span class=\"hljs-keyword\">if</span> (stack.isEmpty()) {\n            <span class=\"hljs-comment\">//When stack is empty, insert the element so it will be present at the bottom of the stack</span>\n            stack.push(element);\n            <span class=\"hljs-keyword\">return</span>;\n        }\n\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ele</span> <span class=\"hljs-operator\">=</span> stack.peek();\n        <span class=\"hljs-comment\">/*Keep popping elements till stack becomes empty. Push the elements once the topmost element has\n            moved to the bottom of the stack.\n         */</span>\n        stack.pop();\n        insertAtBottom(stack, element);\n\n        stack.push(ele);\n    }\n\n}\n"
    }
  },
  "contributors": [
    {
      "name": "ishika22",
      "email": "ishuagarwal2210@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}