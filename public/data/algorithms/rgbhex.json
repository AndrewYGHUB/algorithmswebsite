{
  "slug": "rgbhex",
  "name": "Rgbhex",
  "categories": [
    "conversions"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "conversion/rgbhex.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/conversion/rgbhex.go",
      "code": "<span class=\"hljs-comment\">// rgbhex.go</span>\n<span class=\"hljs-comment\">// description: convert hex input to red, green and blue and vice versa</span>\n<span class=\"hljs-comment\">// author(s) [darmiel](https://github.com/darmiel)</span>\n<span class=\"hljs-comment\">// see rgbhex_test.go</span>\n\n<span class=\"hljs-keyword\">package</span> conversion\n\n<span class=\"hljs-comment\">// HEXToRGB splits an RGB input (e.g. a color in hex format; 0x&lt;color-code&gt;)</span>\n<span class=\"hljs-comment\">// into the individual components: red, green and blue</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">HEXToRGB</span><span class=\"hljs-params\">(hex <span class=\"hljs-type\">uint</span>)</span></span> (red, green, blue <span class=\"hljs-type\">byte</span>) {\n\t<span class=\"hljs-comment\">// A hex code is structured like this:</span>\n\t<span class=\"hljs-comment\">// #3498db (light blue) - converted to binary:</span>\n\t<span class=\"hljs-comment\">// 00110100 10011000 11011011</span>\n\t<span class=\"hljs-comment\">//  &lt;red&gt;   &lt;green&gt;   &lt;blue&gt;</span>\n\n\t<span class=\"hljs-comment\">// To get the blue value we use the bit operation AND with the bit mask 0xFF (in binary: 11111111)</span>\n\t<span class=\"hljs-comment\">// 00110100 10011000 &lt;11011011&gt; &amp;</span>\n\t<span class=\"hljs-comment\">// 00000000 00000000  11111111  =</span>\n\t<span class=\"hljs-comment\">// 00000000 00000000 &lt;11011011&gt; =</span>\n\tblue = <span class=\"hljs-type\">byte</span>(hex &amp; <span class=\"hljs-number\">0xFF</span>)\n\n\t<span class=\"hljs-comment\">// To get the green value, we first shift the value 8 bits to the right:</span>\n\t<span class=\"hljs-comment\">//  00110100 &lt;10011000&gt;  11011011  &gt;&gt; 8 =</span>\n\t<span class=\"hljs-comment\">//  00000000  00110100  &lt;10011000&gt; &amp;</span>\n\t<span class=\"hljs-comment\">//  00000000  00000000   11111111  =</span>\n\t<span class=\"hljs-comment\">//  00000000  00000000  &lt;10011000&gt; =</span>\n\tgreen = <span class=\"hljs-type\">byte</span>((hex &gt;&gt; <span class=\"hljs-number\">8</span>) &amp; <span class=\"hljs-number\">0xFF</span>)\n\n\t<span class=\"hljs-comment\">// Same as green value, only this time shift 16 to the right</span>\n\t<span class=\"hljs-comment\">// Alternatively, you can apply a bitmask first and then shift it.</span>\n\t<span class=\"hljs-comment\">// &lt;00110100&gt; 10011000  11011011 &amp;</span>\n\t<span class=\"hljs-comment\">//  11111111  00000000  00000000 =</span>\n\t<span class=\"hljs-comment\">// &lt;00110100&gt; 00000000  00000000 &gt;&gt; 16</span>\n\t<span class=\"hljs-comment\">//  00000000  00000000 &lt;00110100&gt; =</span>\n\tred = <span class=\"hljs-type\">byte</span>((hex &gt;&gt; <span class=\"hljs-number\">16</span>) &amp; <span class=\"hljs-number\">0xFF</span>)\n\t<span class=\"hljs-keyword\">return</span>\n}\n\n<span class=\"hljs-comment\">// RGBToHEX does exactly the opposite of HEXToRGB:</span>\n<span class=\"hljs-comment\">// it combines the three components red, green and blue to an RGB value, which can be converted to e.g. Hex</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">RGBToHEX</span><span class=\"hljs-params\">(red, green, blue <span class=\"hljs-type\">byte</span>)</span></span> (hex <span class=\"hljs-type\">uint</span>) {\n\t<span class=\"hljs-comment\">// Sets the bits of blue in position 1-8, green in 9-16 and red in 17-24</span>\n\n\t<span class=\"hljs-comment\">// Red: 00110100</span>\n\t<span class=\"hljs-comment\">// Green: 10011000</span>\n\t<span class=\"hljs-comment\">// Blue: 11011011</span>\n\t<span class=\"hljs-comment\">// RGB:</span>\n\t<span class=\"hljs-comment\">// R &lt;&lt; 16: [00110100]  00000000   00000000 |</span>\n\t<span class=\"hljs-comment\">// G &lt;&lt; 8 :  00000000  {10011000}  00000000 |</span>\n\t<span class=\"hljs-comment\">// B      :  00000000   00000000  &lt;11011011&gt; =</span>\n\t<span class=\"hljs-comment\">//          [00110100] {10011000} &lt;11011011&gt;</span>\n\t<span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">uint</span>(red) &lt;&lt; <span class=\"hljs-number\">16</span>) | (<span class=\"hljs-type\">uint</span>(green) &lt;&lt; <span class=\"hljs-number\">8</span>) | <span class=\"hljs-type\">uint</span>(blue)\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Daniel",
      "email": "71837281+darmiel@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}