{
  "slug": "rsa",
  "name": "RSA",
  "categories": [
    "ciphers"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/ciphers/RSA.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/ciphers/RSA.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.ciphers;\n\n<span class=\"hljs-keyword\">import</span> javax.swing.*;\n<span class=\"hljs-keyword\">import</span> java.math.BigInteger;\n<span class=\"hljs-keyword\">import</span> java.security.SecureRandom;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> Nguyen Duy Tiep on 23-Oct-17.\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RSA</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n        <span class=\"hljs-type\">RSA</span> <span class=\"hljs-variable\">rsa</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RSA</span>(<span class=\"hljs-number\">1024</span>);\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">text1</span> <span class=\"hljs-operator\">=</span> JOptionPane.showInputDialog(<span class=\"hljs-string\">&quot;Enter a message to encrypt :&quot;</span>);\n\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">ciphertext</span> <span class=\"hljs-operator\">=</span> rsa.encrypt(text1);\n        JOptionPane.showMessageDialog(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;Your encrypted message : &quot;</span> + ciphertext);\n\n        JOptionPane.showMessageDialog(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;Your message after decrypt : &quot;</span> + rsa.decrypt(ciphertext));\n    }\n\n    <span class=\"hljs-keyword\">private</span> BigInteger modulus, privateKey, publicKey;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">RSA</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> bits)</span> {\n        generateKeys(bits);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@return</span> encrypted message\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> String <span class=\"hljs-title function_\">encrypt</span><span class=\"hljs-params\">(String message)</span> {\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigInteger</span>(message.getBytes())).modPow(publicKey, modulus).toString();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@return</span> encrypted message as big integer\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> BigInteger <span class=\"hljs-title function_\">encrypt</span><span class=\"hljs-params\">(BigInteger message)</span> {\n        <span class=\"hljs-keyword\">return</span> message.modPow(publicKey, modulus);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@return</span> plain message\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> String <span class=\"hljs-title function_\">decrypt</span><span class=\"hljs-params\">(String encryptedMessage)</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>((<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigInteger</span>(encryptedMessage)).modPow(privateKey, modulus).toByteArray());\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@return</span> plain message as big integer\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> BigInteger <span class=\"hljs-title function_\">decrypt</span><span class=\"hljs-params\">(BigInteger encryptedMessage)</span> {\n        <span class=\"hljs-keyword\">return</span> encryptedMessage.modPow(privateKey, modulus);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Generate a new public and private key set.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">generateKeys</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> bits)</span> {\n        <span class=\"hljs-type\">SecureRandom</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SecureRandom</span>();\n        <span class=\"hljs-type\">BigInteger</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigInteger</span>(bits / <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">100</span>, r);\n        <span class=\"hljs-type\">BigInteger</span> <span class=\"hljs-variable\">q</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigInteger</span>(bits / <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">100</span>, r);\n        modulus = p.multiply(q);\n\n        <span class=\"hljs-type\">BigInteger</span> <span class=\"hljs-variable\">m</span> <span class=\"hljs-operator\">=</span> (p.subtract(BigInteger.ONE)).multiply(q.subtract(BigInteger.ONE));\n\n        publicKey = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigInteger</span>(<span class=\"hljs-string\">&quot;3&quot;</span>);\n\n        <span class=\"hljs-keyword\">while</span> (m.gcd(publicKey).intValue() &gt; <span class=\"hljs-number\">1</span>) {\n            publicKey = publicKey.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigInteger</span>(<span class=\"hljs-string\">&quot;2&quot;</span>));\n        }\n\n        privateKey = publicKey.modInverse(m);\n    }\n}\n"
    },
    "go": {
      "dir": "cipher/rsa/rsa.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/cipher/rsa/rsa.go",
      "code": "<span class=\"hljs-comment\">// rsa.go</span>\n<span class=\"hljs-comment\">// description: Simple RSA algorithm implementation</span>\n<span class=\"hljs-comment\">// details:</span>\n<span class=\"hljs-comment\">// A simple RSA Encryption and Decryption algorithm.</span>\n<span class=\"hljs-comment\">// It uses prime numbers that fit in int64 datatypes and</span>\n<span class=\"hljs-comment\">// thus both the Encrypt and Decrypt are not a production</span>\n<span class=\"hljs-comment\">// ready implementation. The OpenSSL implementation of RSA</span>\n<span class=\"hljs-comment\">// also adds a padding which is not present in this algorithm.</span>\n<span class=\"hljs-comment\">// author(s) [Taj](https://github.com/tjgurwara99)</span>\n<span class=\"hljs-comment\">// see rsa_test.go</span>\n\n<span class=\"hljs-comment\">// Package rsa shows a simple implementation of RSA algorithm</span>\n<span class=\"hljs-keyword\">package</span> rsa\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;errors&quot;</span>\n\n\tmodular <span class=\"hljs-string\">&quot;github.com/TheAlgorithms/Go/math/modular&quot;</span>\n)\n\n<span class=\"hljs-comment\">// ErrorFailedToEncrypt Raised when Encrypt function fails to encrypt the message</span>\n<span class=\"hljs-keyword\">var</span> ErrorFailedToEncrypt = errors.New(<span class=\"hljs-string\">&quot;failed to Encrypt&quot;</span>)\n\n<span class=\"hljs-comment\">// ErrorFailedToDecrypt Raised when Decrypt function fails to decrypt the encrypted message</span>\n<span class=\"hljs-keyword\">var</span> ErrorFailedToDecrypt = errors.New(<span class=\"hljs-string\">&quot;failed to Decrypt&quot;</span>)\n\n<span class=\"hljs-comment\">// Encrypt encrypts based on the RSA algorithm - uses modular exponentitation in math directory</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Encrypt</span><span class=\"hljs-params\">(message []<span class=\"hljs-type\">rune</span>, publicExponent, modulus <span class=\"hljs-type\">int64</span>)</span></span> ([]<span class=\"hljs-type\">rune</span>, <span class=\"hljs-type\">error</span>) {\n\t<span class=\"hljs-keyword\">var</span> encrypted []<span class=\"hljs-type\">rune</span>\n\n\t<span class=\"hljs-keyword\">for</span> _, letter := <span class=\"hljs-keyword\">range</span> message {\n\t\tencryptedLetter, err := modular.Exponentiation(<span class=\"hljs-type\">int64</span>(letter), publicExponent, modulus)\n\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, ErrorFailedToEncrypt\n\t\t}\n\t\tencrypted = <span class=\"hljs-built_in\">append</span>(encrypted, <span class=\"hljs-type\">rune</span>(encryptedLetter))\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> encrypted, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">// Decrypt decrypts encrypted rune slice based on the RSA algorithm</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Decrypt</span><span class=\"hljs-params\">(encrypted []<span class=\"hljs-type\">rune</span>, privateExponent, modulus <span class=\"hljs-type\">int64</span>)</span></span> (<span class=\"hljs-type\">string</span>, <span class=\"hljs-type\">error</span>) {\n\t<span class=\"hljs-keyword\">var</span> decrypted []<span class=\"hljs-type\">rune</span>\n\n\t<span class=\"hljs-keyword\">for</span> _, letter := <span class=\"hljs-keyword\">range</span> encrypted {\n\t\tdecryptedLetter, err := modular.Exponentiation(<span class=\"hljs-type\">int64</span>(letter), privateExponent, modulus)\n\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, ErrorFailedToDecrypt\n\t\t}\n\t\tdecrypted = <span class=\"hljs-built_in\">append</span>(decrypted, <span class=\"hljs-type\">rune</span>(decryptedLetter))\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>(decrypted), <span class=\"hljs-literal\">nil</span>\n}\n"
    },
    "ruby": {
      "dir": "ciphers/rsa.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/ciphers/rsa.rb",
      "code": "<span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">&#x27;prime&#x27;</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">initialize</span>(<span class=\"hljs-params\">keys = {}</span>)\n  <span class=\"hljs-variable\">@e</span> |<span class=\"hljs-params\"></span>|= keys[<span class=\"hljs-symbol\">:e</span>]\n  <span class=\"hljs-variable\">@n</span> |<span class=\"hljs-params\"></span>|= keys[<span class=\"hljs-symbol\">:n</span>]\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cipher</span>(<span class=\"hljs-params\">message</span>)\n  message.bytes.map <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">byte</span>|\n    cbyte = ((byte.to_i**e) % n).to_s\n    missing_chars = n.to_s.size - cbyte.size\n    <span class=\"hljs-string\">&#x27;0&#x27;</span> * missing_chars + cbyte\n  <span class=\"hljs-keyword\">end</span>.join\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decipher</span>(<span class=\"hljs-params\">ciphed_message</span>)\n  ciphed_message.chars.each_slice(n.to_s.size).map <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">arr</span>|\n    (arr.join.to_i**d) % n\n  <span class=\"hljs-keyword\">end</span>.pack(<span class=\"hljs-string\">&#x27;c*&#x27;</span>)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">public_keys</span>\n  { <span class=\"hljs-symbol\">n:</span> n, <span class=\"hljs-symbol\">e:</span> e }\n<span class=\"hljs-keyword\">end</span>\n\nprivate\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">p</span>\n  <span class=\"hljs-variable\">@p</span> |<span class=\"hljs-params\"></span>|= random_prime_number\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">q</span>\n  <span class=\"hljs-variable\">@q</span> |<span class=\"hljs-params\"></span>|= random_prime_number\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">n</span>\n  <span class=\"hljs-variable\">@n</span> |<span class=\"hljs-params\"></span>|= p * q\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">totient</span>\n  <span class=\"hljs-variable\">@totient</span> |<span class=\"hljs-params\"></span>|= (p - <span class=\"hljs-number\">1</span>) * (q - <span class=\"hljs-number\">1</span>)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">e</span>\n  <span class=\"hljs-variable\">@e</span> |<span class=\"hljs-params\"></span>|= totient.downto(<span class=\"hljs-number\">2</span>).find <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">i</span>|\n    Prime.prime?(i) &amp;&amp; totient % i != <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">d</span>\n  <span class=\"hljs-variable\">@d</span> |<span class=\"hljs-params\"></span>|= invmod(e, totient)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">extended_gcd</span>(<span class=\"hljs-params\">a, b</span>)\n  last_remainder = a.abs\n  remainder = b.abs\n  x = <span class=\"hljs-number\">0</span>\n  last_x = <span class=\"hljs-number\">1</span>\n  y = <span class=\"hljs-number\">1</span>\n  last_y = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span> remainder != <span class=\"hljs-number\">0</span>\n    (quotient, remainder) = last_remainder.divmod(remainder)\n    last_remainder = remainder\n    x, last_x = last_x - quotient * x, x\n    y, last_y = last_y - quotient * y, y\n  <span class=\"hljs-keyword\">end</span>\n\n  [last_remainder, last_x * (a &lt; <span class=\"hljs-number\">0</span> ? -<span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">1</span>)]\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">invmod</span>(<span class=\"hljs-params\">e, et</span>)\n  g, x = extended_gcd(e, et)\n  raise <span class=\"hljs-string\">&#x27;The maths are broken!&#x27;</span> <span class=\"hljs-keyword\">if</span> g != <span class=\"hljs-number\">1</span>\n\n  x % et\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">random_prime_number</span>\n  number = Random.rand(<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">1000</span>)\n  number = Random.rand(<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">1000</span>) <span class=\"hljs-keyword\">until</span> Prime.prime?(number) |<span class=\"hljs-params\"></span>| number == p |<span class=\"hljs-params\"></span>| number == q\n  number\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>\n  puts <span class=\"hljs-string\">&#x27;Enter the message you want to encrypt and decrypt with RSA algorithm: &#x27;</span>\n  message = gets.chomp.to_s\n  puts <span class=\"hljs-string\">&#x27;Encoded Text:&#x27;</span>\n  puts cipher(message)\n  puts <span class=\"hljs-string\">&#x27;Decoded Text:&#x27;</span>\n  puts decipher(cipher(message))\n  puts <span class=\"hljs-string\">&quot;p: <span class=\"hljs-subst\">#{p}</span>&quot;</span>\n  puts <span class=\"hljs-string\">&quot;q: <span class=\"hljs-subst\">#{q}</span>&quot;</span>\n  puts <span class=\"hljs-string\">&quot;e: <span class=\"hljs-subst\">#{e}</span>&quot;</span>\n  puts <span class=\"hljs-string\">&quot;d: <span class=\"hljs-subst\">#{d}</span>&quot;</span>\n  puts <span class=\"hljs-string\">&quot;totient: <span class=\"hljs-subst\">#{totient}</span>&quot;</span>\n<span class=\"hljs-keyword\">end</span>\n\nmain\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "datta-agni",
      "email": "dattadunga@gmail.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Prateek Chanda",
      "email": "prateekkol21@gmail.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "Nguyen Duy Tiep",
      "email": "duytiep@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}