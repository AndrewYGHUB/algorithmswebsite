{
  "slug": "schur-complement",
  "name": "Schur Complement",
  "categories": [
    "linearalgebra"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "linear_algebra/src/schur_complement.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/linear_algebra/src/schur_complement.py",
      "code": "<span class=\"hljs-keyword\">import</span> unittest\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">schur_complement</span>(<span class=\"hljs-params\">\n    mat_a: np.ndarray,\n    mat_b: np.ndarray,\n    mat_c: np.ndarray,\n    pseudo_inv: np.ndarray = <span class=\"hljs-literal\">None</span>,\n</span>) -&gt; np.ndarray:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Schur complement of a symmetric matrix X given as a 2x2 block matrix\n    consisting of matrices A, B and C.\n    Matrix A must be quadratic and non-singular.\n    In case A is singular, a pseudo-inverse may be provided using\n    the pseudo_inv argument.\n\n    Link to Wiki: https://en.wikipedia.org/wiki/Schur_complement\n    See also Convex Optimization â€“ Boyd and Vandenberghe, A.5.5\n    &gt;&gt;&gt; import numpy as np\n    &gt;&gt;&gt; a = np.array([[1, 2], [2, 1]])\n    &gt;&gt;&gt; b = np.array([[0, 3], [3, 0]])\n    &gt;&gt;&gt; c = np.array([[2, 1], [6, 3]])\n    &gt;&gt;&gt; schur_complement(a, b, c)\n    array([[ 5., -5.],\n           [ 0.,  6.]])\n    &quot;&quot;&quot;</span>\n    shape_a = np.shape(mat_a)\n    shape_b = np.shape(mat_b)\n    shape_c = np.shape(mat_c)\n\n    <span class=\"hljs-keyword\">if</span> shape_a[<span class=\"hljs-number\">0</span>] != shape_b[<span class=\"hljs-number\">0</span>]:\n        <span class=\"hljs-keyword\">raise</span> ValueError(\n            <span class=\"hljs-string\">f&quot;Expected the same number of rows for A and B. \\\n            Instead found A of size <span class=\"hljs-subst\">{shape_a}</span> and B of size <span class=\"hljs-subst\">{shape_b}</span>&quot;</span>\n        )\n\n    <span class=\"hljs-keyword\">if</span> shape_b[<span class=\"hljs-number\">1</span>] != shape_c[<span class=\"hljs-number\">1</span>]:\n        <span class=\"hljs-keyword\">raise</span> ValueError(\n            <span class=\"hljs-string\">f&quot;Expected the same number of columns for B and C. \\\n            Instead found B of size <span class=\"hljs-subst\">{shape_b}</span> and C of size <span class=\"hljs-subst\">{shape_c}</span>&quot;</span>\n        )\n\n    a_inv = pseudo_inv\n    <span class=\"hljs-keyword\">if</span> a_inv <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">try</span>:\n            a_inv = np.linalg.inv(mat_a)\n        <span class=\"hljs-keyword\">except</span> np.linalg.LinAlgError:\n            <span class=\"hljs-keyword\">raise</span> ValueError(\n                <span class=\"hljs-string\">&quot;Input matrix A is not invertible. Cannot compute Schur complement.&quot;</span>\n            )\n\n    <span class=\"hljs-keyword\">return</span> mat_c - mat_b.T @ a_inv @ mat_b\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestSchurComplement</span>(unittest.TestCase):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_schur_complement</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        a = np.array([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>]])\n        b = np.array([[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]])\n        c = np.array([[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>]])\n\n        s = schur_complement(a, b, c)\n\n        input_matrix = np.block([[a, b], [b.T, c]])\n\n        det_x = np.linalg.det(input_matrix)\n        det_a = np.linalg.det(a)\n        det_s = np.linalg.det(s)\n\n        self.assertAlmostEqual(det_x, det_a * det_s)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_improper_a_b_dimensions</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        a = np.array([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>]])\n        b = np.array([[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]])\n        c = np.array([[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>]])\n\n        <span class=\"hljs-keyword\">with</span> self.assertRaises(ValueError):\n            schur_complement(a, b, c)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_improper_b_c_dimensions</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        a = np.array([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>]])\n        b = np.array([[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]])\n        c = np.array([[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>]])\n\n        <span class=\"hljs-keyword\">with</span> self.assertRaises(ValueError):\n            schur_complement(a, b, c)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n    unittest.main()\n"
    }
  },
  "contributors": [
    {
      "name": "iradonov",
      "email": "86876427+iradonov@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}