{
  "slug": "segtree",
  "name": "Segtree",
  "categories": [
    "rangequeries"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "range_queries/segtree.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/range_queries/segtree.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief   Implementation of [Segment Tree]\n *          (https://en.wikipedia.org/wiki/Segment_tree) data structure\n *\n * @details\n * A segment tree, also known as a statistic tree, is a tree data structure used\n * for storing information about intervals, or segments. Its classical version\n * allows querying which of the stored segments contain a given point, but our\n * modification allows us to perform (query) any binary operation on any range\n * in the array in O(logN) time. Here, we have used addition (+).\n * For range updates, we have used lazy propagation.\n *\n * * Space Complexity : O(NlogN) \\n\n * * Build Time Complexity : O(NlogN) \\n\n * * Query Time Complexity : O(logN) \\n\n *\n * @author  [Madhav Gaba](https://github.com/madhavgaba)\n * @author  [Soham Roy](https://github.com/sohamroy19)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span>     <span class=\"hljs-comment\">/// for log2</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief   Constructs the initial segment tree\n *\n * @param   arr input to construct the tree out of\n * @param   segtree the segment tree\n * @param   low inclusive lowest index of arr to begin at\n * @param   high inclusive highest index of arr to end at\n * @param   pos index of segtree to fill (eg. root node)\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ConsTree</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; &amp;arr, std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; *segtree,\n              <span class=\"hljs-type\">uint64_t</span> low, <span class=\"hljs-type\">uint64_t</span> high, <span class=\"hljs-type\">uint64_t</span> pos)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (low == high) {\n        (*segtree)[pos] = arr[low];\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-type\">uint64_t</span> mid = (low + high) / <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-built_in\">ConsTree</span>(arr, segtree, low, mid, <span class=\"hljs-number\">2</span> * pos + <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">ConsTree</span>(arr, segtree, mid + <span class=\"hljs-number\">1</span>, high, <span class=\"hljs-number\">2</span> * pos + <span class=\"hljs-number\">2</span>);\n    (*segtree)[pos] = (*segtree)[<span class=\"hljs-number\">2</span> * pos + <span class=\"hljs-number\">1</span>] + (*segtree)[<span class=\"hljs-number\">2</span> * pos + <span class=\"hljs-number\">2</span>];\n}\n\n<span class=\"hljs-comment\">/**\n * @brief   Returns the sum of all elements in a range\n *\n * @param   segtree the segment tree\n * @param   lazy for lazy propagation\n * @param   qlow lower index of the required query\n * @param   qhigh higher index of the required query\n * @param   low lower index of query for this function call\n * @param   high higher index of query for this function call\n * @param   pos index of segtree to consider (eg. root node)\n * @return  result of the range query for this function call\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int64_t</span> <span class=\"hljs-title\">query</span><span class=\"hljs-params\">(std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; *segtree, std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; *lazy,\n              <span class=\"hljs-type\">uint64_t</span> qlow, <span class=\"hljs-type\">uint64_t</span> qhigh, <span class=\"hljs-type\">uint64_t</span> low, <span class=\"hljs-type\">uint64_t</span> high,\n              <span class=\"hljs-type\">uint64_t</span> pos)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (low &gt; high || qlow &gt; high || low &gt; qhigh) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-keyword\">if</span> ((*lazy)[pos] != <span class=\"hljs-number\">0</span>) {\n        (*segtree)[pos] += (*lazy)[pos] * (high - low + <span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-keyword\">if</span> (low != high) {\n            (*lazy)[<span class=\"hljs-number\">2</span> * pos + <span class=\"hljs-number\">1</span>] += (*lazy)[pos];\n            (*lazy)[<span class=\"hljs-number\">2</span> * pos + <span class=\"hljs-number\">2</span>] += (*lazy)[pos];\n        }\n        (*lazy)[pos] = <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (qlow &lt;= low &amp;&amp; qhigh &gt;= high) {\n        <span class=\"hljs-keyword\">return</span> (*segtree)[pos];\n    }\n\n    <span class=\"hljs-type\">uint64_t</span> mid = (low + high) / <span class=\"hljs-number\">2</span>;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">query</span>(segtree, lazy, qlow, qhigh, low, mid, <span class=\"hljs-number\">2</span> * pos + <span class=\"hljs-number\">1</span>) +\n           <span class=\"hljs-built_in\">query</span>(segtree, lazy, qlow, qhigh, mid + <span class=\"hljs-number\">1</span>, high, <span class=\"hljs-number\">2</span> * pos + <span class=\"hljs-number\">2</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief   Updates a range of the segment tree\n *\n * @param   segtree the segment tree\n * @param   lazy for lazy propagation\n * @param   start lower index of the required query\n * @param   end higher index of the required query\n * @param   delta integer to add to each element of the range\n * @param   low lower index of query for this function call\n * @param   high higher index of query for this function call\n * @param   pos index of segtree to consider (eg. root node)\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; *segtree, std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; *lazy,\n            <span class=\"hljs-type\">int64_t</span> start, <span class=\"hljs-type\">int64_t</span> end, <span class=\"hljs-type\">int64_t</span> delta, <span class=\"hljs-type\">uint64_t</span> low,\n            <span class=\"hljs-type\">uint64_t</span> high, <span class=\"hljs-type\">uint64_t</span> pos)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (low &gt; high) {\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-keyword\">if</span> ((*lazy)[pos] != <span class=\"hljs-number\">0</span>) {\n        (*segtree)[pos] += (*lazy)[pos] * (high - low + <span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-keyword\">if</span> (low != high) {\n            (*lazy)[<span class=\"hljs-number\">2</span> * pos + <span class=\"hljs-number\">1</span>] += (*lazy)[pos];\n            (*lazy)[<span class=\"hljs-number\">2</span> * pos + <span class=\"hljs-number\">2</span>] += (*lazy)[pos];\n        }\n        (*lazy)[pos] = <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (start &gt; high || end &lt; low) {\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (start &lt;= low &amp;&amp; end &gt;= high) {\n        (*segtree)[pos] += delta * (high - low + <span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-keyword\">if</span> (low != high) {\n            (*lazy)[<span class=\"hljs-number\">2</span> * pos + <span class=\"hljs-number\">1</span>] += delta;\n            (*lazy)[<span class=\"hljs-number\">2</span> * pos + <span class=\"hljs-number\">2</span>] += delta;\n        }\n\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-type\">uint64_t</span> mid = (low + high) / <span class=\"hljs-number\">2</span>;\n\n    <span class=\"hljs-built_in\">update</span>(segtree, lazy, start, end, delta, low, mid, <span class=\"hljs-number\">2</span> * pos + <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">update</span>(segtree, lazy, start, end, delta, mid + <span class=\"hljs-number\">1</span>, high, <span class=\"hljs-number\">2</span> * pos + <span class=\"hljs-number\">2</span>);\n    (*segtree)[pos] = (*segtree)[<span class=\"hljs-number\">2</span> * pos + <span class=\"hljs-number\">1</span>] + (*segtree)[<span class=\"hljs-number\">2</span> * pos + <span class=\"hljs-number\">2</span>];\n}\n\n<span class=\"hljs-comment\">/**\n * @brief   Self-test implementation\n *\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">auto</span> max = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">int64_t</span>&gt;(<span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">log2</span>(<span class=\"hljs-number\">7</span>))) - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">assert</span>(max == <span class=\"hljs-number\">15</span>);\n\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; arr{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>}, <span class=\"hljs-built_in\">lazy</span>(max), <span class=\"hljs-built_in\">segtree</span>(max);\n    <span class=\"hljs-built_in\">ConsTree</span>(arr, &amp;segtree, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span> - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">query</span>(&amp;segtree, &amp;lazy, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span> - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">4</span> + <span class=\"hljs-number\">5</span> + <span class=\"hljs-number\">6</span>);\n\n    <span class=\"hljs-built_in\">update</span>(&amp;segtree, &amp;lazy, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span> - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">query</span>(&amp;segtree, &amp;lazy, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span> - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">4</span> + <span class=\"hljs-number\">5</span> + <span class=\"hljs-number\">6</span> + <span class=\"hljs-number\">6</span>);\n\n    <span class=\"hljs-built_in\">update</span>(&amp;segtree, &amp;lazy, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span> - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">query</span>(&amp;segtree, &amp;lazy, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span> - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">-1</span> + <span class=\"hljs-number\">0</span> + <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">4</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief   Main function\n *\n * @return  0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter number of elements: &quot;</span>;\n\n    <span class=\"hljs-type\">uint64_t</span> n = <span class=\"hljs-number\">0</span>;\n    std::cin &gt;&gt; n;\n\n    <span class=\"hljs-keyword\">auto</span> max = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">uint64_t</span>&gt;(<span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">log2</span>(n))) - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; <span class=\"hljs-title\">arr</span><span class=\"hljs-params\">(n)</span>, <span class=\"hljs-title\">lazy</span><span class=\"hljs-params\">(max)</span>, <span class=\"hljs-title\">segtree</span><span class=\"hljs-params\">(max)</span></span>;\n\n    <span class=\"hljs-type\">int</span> choice = <span class=\"hljs-number\">0</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nDo you wish to enter each number?:\\n&quot;</span>\n                 <span class=\"hljs-string\">&quot;1: Yes\\n&quot;</span>\n                 <span class=\"hljs-string\">&quot;0: No (default initialize them to 0)\\n&quot;</span>;\n\n    std::cin &gt;&gt; choice;\n    <span class=\"hljs-keyword\">if</span> (choice == <span class=\"hljs-number\">1</span>) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter &quot;</span> &lt;&lt; n &lt;&lt; <span class=\"hljs-string\">&quot; numbers:\\n&quot;</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i++) {\n            std::cout &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot;: &quot;</span>;\n            std::cin &gt;&gt; arr[i];\n        }\n    }\n\n    <span class=\"hljs-built_in\">ConsTree</span>(arr, &amp;segtree, <span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-keyword\">do</span> {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nMake your choice:\\n&quot;</span>\n                     <span class=\"hljs-string\">&quot;1: Range update (input)\\n&quot;</span>\n                     <span class=\"hljs-string\">&quot;2: Range query (output)\\n&quot;</span>\n                     <span class=\"hljs-string\">&quot;0: Exit\\n&quot;</span>;\n        std::cin &gt;&gt; choice;\n\n        <span class=\"hljs-keyword\">if</span> (choice == <span class=\"hljs-number\">1</span>) {\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter 1-indexed lower bound, upper bound &amp; value:\\n&quot;</span>;\n\n            <span class=\"hljs-type\">uint64_t</span> p = <span class=\"hljs-number\">1</span>, q = <span class=\"hljs-number\">1</span>, v = <span class=\"hljs-number\">0</span>;\n            std::cin &gt;&gt; p &gt;&gt; q &gt;&gt; v;\n            <span class=\"hljs-built_in\">update</span>(&amp;segtree, &amp;lazy, p - <span class=\"hljs-number\">1</span>, q - <span class=\"hljs-number\">1</span>, v, <span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (choice == <span class=\"hljs-number\">2</span>) {\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter 1-indexed lower bound &amp; upper bound:\\n&quot;</span>;\n\n            <span class=\"hljs-type\">uint64_t</span> p = <span class=\"hljs-number\">1</span>, q = <span class=\"hljs-number\">1</span>;\n            std::cin &gt;&gt; p &gt;&gt; q;\n            std::cout &lt;&lt; <span class=\"hljs-built_in\">query</span>(&amp;segtree, &amp;lazy, p - <span class=\"hljs-number\">1</span>, q - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n        }\n    } <span class=\"hljs-keyword\">while</span> (choice &gt; <span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Lajat5",
      "email": "64376519+Lazeeez@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Soham Roy",
      "email": "72430659+sohamroy19@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Madhav",
      "email": "madhavgaba2@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}