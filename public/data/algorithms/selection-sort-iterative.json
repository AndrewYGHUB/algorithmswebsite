{
  "slug": "selection-sort-iterative",
  "name": "Selection Sort Iterative",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "sorting/selection_sort_iterative.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/selection_sort_iterative.cpp",
      "code": "<span class=\"hljs-comment\">/******************************************************************************\n * @file\n * @brief Implementation of the [Selection\n * sort](https://en.wikipedia.org/wiki/Selection_sort) implementation using\n * swapping\n * @details\n * The selection sort algorithm divides the input vector into two parts: a\n * sorted subvector of items which is built up from left to right at the front\n * (left) of the vector, and a subvector of the remaining unsorted items that\n * occupy the rest of the vector. Initially, the sorted subvector is empty, and\n * the unsorted subvector is the entire input vector. The algorithm proceeds by\n * finding the smallest (or largest, depending on the sorting order) element in\n * the unsorted subvector, exchanging (swapping) it with the leftmost unsorted\n * element (putting it in sorted order), and moving the subvector boundaries one\n * element to the right.\n *\n * ### Implementation\n *\n * SelectionSort\n * The algorithm divides the input vector into two parts: the subvector of items\n * already sorted, which is built up from left to right. Initially, the sorted\n * subvector is empty and the unsorted subvector is the entire input vector. The\n * algorithm proceeds by finding the smallest element in the unsorted subvector,\n * exchanging (swapping) it with the leftmost unsorted element (putting it in\n * sorted order), and moving the subvector boundaries one element to the right.\n *\n * @author [Lajat Manekar](https://github.com/Lazeeez)\n * @author Unknown author\n *******************************************************************************/</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">/// for std::is_sorted</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">/// for std::assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>     <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/******************************************************************************\n * @namespace sorting\n * @brief Sorting algorithms\n *******************************************************************************/</span>\n<span class=\"hljs-keyword\">namespace</span> sorting {\n<span class=\"hljs-comment\">/******************************************************************************\n * @brief The main function which implements Selection sort\n * @param arr vector to be sorted\n * @param len length of vector to be sorted\n * @returns @param array resultant sorted vector\n *******************************************************************************/</span>\n\n<span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">selectionSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; &amp;arr,\n                                    <span class=\"hljs-type\">uint64_t</span> len)</span> </span>{\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">array</span><span class=\"hljs-params\">(\n        arr.begin(),\n        arr.end())</span></span>;  <span class=\"hljs-comment\">// declare a vector in which result will be stored</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> it = <span class=\"hljs-number\">0</span>; it &lt; len; ++it) {\n        <span class=\"hljs-type\">uint64_t</span> min = it;  <span class=\"hljs-comment\">// set min value</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> it2 = it + <span class=\"hljs-number\">1</span>; it2 &lt; len; ++it2) {\n            <span class=\"hljs-keyword\">if</span> (array[it2] &lt; array[min]) {  <span class=\"hljs-comment\">// check which element is smaller</span>\n                min = it2;  <span class=\"hljs-comment\">// store index of smallest element to min</span>\n            }\n        }\n\n        <span class=\"hljs-keyword\">if</span> (min != it) {  <span class=\"hljs-comment\">// swap if min does not match to i</span>\n            <span class=\"hljs-type\">uint64_t</span> tmp = array[min];\n            array[min] = array[it];\n            array[it] = tmp;\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> array;  <span class=\"hljs-comment\">// return sorted vector</span>\n}\n}  <span class=\"hljs-comment\">// namespace sorting</span>\n\n<span class=\"hljs-comment\">/*******************************************************************************\n * @brief Self-test implementations\n * @returns void\n *******************************************************************************/</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// testcase #1</span>\n    <span class=\"hljs-comment\">// [1, 0, 0, 1, 1, 0, 2, 1] returns [0, 0, 0, 1, 1, 1, 1, 2]</span>\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; vector1 = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>};\n    <span class=\"hljs-type\">uint64_t</span> vector1size = vector1.<span class=\"hljs-built_in\">size</span>();\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;1st test... &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; result_test1;\n    result_test1 = sorting::<span class=\"hljs-built_in\">selectionSort</span>(vector1, vector1size);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(result_test1.<span class=\"hljs-built_in\">begin</span>(), result_test1.<span class=\"hljs-built_in\">end</span>()));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// testcase #2</span>\n    <span class=\"hljs-comment\">// [19, 22, 540, 241, 156, 140, 12, 1] returns [1, 12, 19, 22, 140, 156,</span>\n    <span class=\"hljs-comment\">// 241,540]</span>\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; vector2 = {<span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">540</span>, <span class=\"hljs-number\">241</span>, <span class=\"hljs-number\">156</span>, <span class=\"hljs-number\">140</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">1</span>};\n    <span class=\"hljs-type\">uint64_t</span> vector2size = vector2.<span class=\"hljs-built_in\">size</span>();\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;2nd test... &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; result_test2;\n    result_test2 = sorting::<span class=\"hljs-built_in\">selectionSort</span>(vector2, vector2size);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(result_test2.<span class=\"hljs-built_in\">begin</span>(), result_test2.<span class=\"hljs-built_in\">end</span>()));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// testcase #3</span>\n    <span class=\"hljs-comment\">// [11, 20, 30, 41, 15, 60, 82, 15] returns [11, 15, 15, 20, 30, 41, 60, 82]</span>\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; vector3 = {<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">41</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">82</span>, <span class=\"hljs-number\">15</span>};\n    <span class=\"hljs-type\">uint64_t</span> vector3size = vector3.<span class=\"hljs-built_in\">size</span>();\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;3rd test... &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; result_test3;\n    result_test3 = sorting::<span class=\"hljs-built_in\">selectionSort</span>(vector3, vector3size);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(result_test3.<span class=\"hljs-built_in\">begin</span>(), result_test3.<span class=\"hljs-built_in\">end</span>()));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// testcase #4</span>\n    <span class=\"hljs-comment\">// [1, 9, 11, 546, 26, 65, 212, 14, -11] returns [-11, 1, 9, 11, 14, 26, 65,</span>\n    <span class=\"hljs-comment\">// 212, 546]</span>\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; vector4 = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">546</span>, <span class=\"hljs-number\">26</span>, <span class=\"hljs-number\">65</span>, <span class=\"hljs-number\">212</span>, <span class=\"hljs-number\">14</span>};\n    <span class=\"hljs-type\">uint64_t</span> vector4size = vector2.<span class=\"hljs-built_in\">size</span>();\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;4th test... &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; result_test4;\n    result_test4 = sorting::<span class=\"hljs-built_in\">selectionSort</span>(vector4, vector4size);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(result_test4.<span class=\"hljs-built_in\">begin</span>(), result_test4.<span class=\"hljs-built_in\">end</span>()));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/*******************************************************************************\n * @brief Main function\n * @returns 0 on exit\n *******************************************************************************/</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Lajat5",
      "email": "64376519+Lazeeez@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}