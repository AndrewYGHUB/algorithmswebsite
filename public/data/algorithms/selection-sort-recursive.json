{
  "slug": "selection-sort-recursive",
  "name": "Selection Sort Recursive",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "sorting/selection_sort_recursive.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/selection_sort_recursive.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of the [Selection\n * sort](https://en.wikipedia.org/wiki/Selection_sort)\n * implementation using recursion\n * @details\n * The selection sort algorithm divides the input list into two parts: a sorted\n * sublist of items which is built up from left to right at the front (left) of\n * the list, and a sublist of the remaining unsorted items that occupy the rest\n * of the list. Initially, the sorted sublist is empty, and the unsorted sublist\n * is the entire input list. The algorithm proceeds by finding the smallest (or\n * largest, depending on the sorting order) element in the unsorted sublist,\n * exchanging (swapping) it with the leftmost unsorted element (putting it in\n * sorted order), and moving the sublist boundaries one element to the right.\n *\n * ### Implementation\n * FindMinIndex\n * This function finds the minimum element of the array(list) recursively by\n * simply comparing the minimum element of array reduced size by 1 and compares\n * it to the last element of the array to find the minimum of the whole array.\n *\n * SelectionSortRecursive\n * Just like selection sort, it divides the list into two parts (i.e.: sorted\n * and unsorted) and finds the minimum of the unsorted array. By calling the\n * `FindMinIndex` function, it swaps the minimum element with the first element\n * of the list, and then solves recursively for the remaining unsorted list.\n * @author [Tushar Khanduri](https://github.com/Tushar-K24)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">/// for std::is_sorted</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">/// for std::swap and io operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>     <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace sorting\n * @brief Sorting algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> sorting {\n<span class=\"hljs-comment\">/**\n * @namespace selection_sort_recursive\n * @brief Functions for the [Selection\n * sort](https://en.wikipedia.org/wiki/Selection_sort)\n * implementation using recursion\n */</span>\n<span class=\"hljs-keyword\">namespace</span> selection_sort_recursive {\n<span class=\"hljs-comment\">/**\n * @brief The main function finds the index of the minimum element\n * @tparam T type of array\n * @param in_arr array whose minimum element is to be returned\n * @param current_position position/index from where the in_arr starts\n * @returns index of the minimum element\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">findMinIndex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;T&gt; &amp;in_arr,\n                      <span class=\"hljs-type\">uint64_t</span> current_position = <span class=\"hljs-number\">0</span>)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (current_position + <span class=\"hljs-number\">1</span> == in_arr.<span class=\"hljs-built_in\">size</span>()) {\n        <span class=\"hljs-keyword\">return</span> current_position;\n    }\n    <span class=\"hljs-type\">uint64_t</span> answer = <span class=\"hljs-built_in\">findMinIndex</span>(in_arr, current_position + <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">if</span> (in_arr[current_position] &lt; in_arr[answer]) {\n        answer = current_position;\n    }\n    <span class=\"hljs-keyword\">return</span> answer;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief The main function implements Selection sort\n * @tparam T type of array\n * @param in_arr array to be sorted,\n * @param current_position position/index from where the in_arr starts\n * @returns void\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">selectionSortRecursive</span><span class=\"hljs-params\">(std::vector&lt;T&gt; &amp;in_arr,\n                            <span class=\"hljs-type\">uint64_t</span> current_position = <span class=\"hljs-number\">0</span>)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (current_position == in_arr.<span class=\"hljs-built_in\">size</span>()) {\n        <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-type\">uint64_t</span> min_element_idx =\n        selection_sort_recursive::<span class=\"hljs-built_in\">findMinIndex</span>(in_arr, current_position);\n    <span class=\"hljs-keyword\">if</span> (min_element_idx != current_position) {\n        std::<span class=\"hljs-built_in\">swap</span>(in_arr[min_element_idx], in_arr[current_position]);\n    }\n    <span class=\"hljs-built_in\">selectionSortRecursive</span>(in_arr, current_position + <span class=\"hljs-number\">1</span>);\n}\n}  <span class=\"hljs-comment\">// namespace selection_sort_recursive</span>\n}  <span class=\"hljs-comment\">// namespace sorting</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// 1st test</span>\n    <span class=\"hljs-comment\">// [1, 0, 2, 1] return [0, 1, 1, 2]</span>\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; array1 = {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;1st test... &quot;</span>;\n    sorting::selection_sort_recursive::<span class=\"hljs-built_in\">selectionSortRecursive</span>(array1);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(array1), std::<span class=\"hljs-built_in\">end</span>(array1)));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// 2nd test</span>\n    <span class=\"hljs-comment\">// [1, 0, 0, 1, 1, 0, 2, 1] return [0, 0, 0, 1, 1, 1, 1, 2]</span>\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; array2 = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;2nd test... &quot;</span>;\n    sorting::selection_sort_recursive::<span class=\"hljs-built_in\">selectionSortRecursive</span>(array2);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(array2), std::<span class=\"hljs-built_in\">end</span>(array2)));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// 3rd test</span>\n    <span class=\"hljs-comment\">// [1, 1, 0, 0, 1, 2, 2, 0, 2, 1] return [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]</span>\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; array3 = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;3rd test... &quot;</span>;\n    sorting::selection_sort_recursive::<span class=\"hljs-built_in\">selectionSortRecursive</span>(array3);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(array3), std::<span class=\"hljs-built_in\">end</span>(array3)));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// 4th test</span>\n    <span class=\"hljs-comment\">// [2, 2, 2, 0, 0, 1, 1] return [0, 0, 1, 1, 2, 2, 2]</span>\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; array4 = {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;4th test... &quot;</span>;\n    sorting::selection_sort_recursive::<span class=\"hljs-built_in\">selectionSortRecursive</span>(array4);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(array4), std::<span class=\"hljs-built_in\">end</span>(array4)));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "c": {
      "dir": "sorting/selection_sort_recursive.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/selection_sort_recursive.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @author [Dhruv Pasricha](https://github.com/DhruvPasricha)\n * @brief [Selection Sort](https://en.wikipedia.org/wiki/Selection_sort)\n * implementation using recursion.\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span>     <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span>      <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span>     <span class=\"hljs-comment\">/// for dynamic memory allocation</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span>       <span class=\"hljs-comment\">/// for random numbers generation</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;inttypes.h&gt;</span>   <span class=\"hljs-comment\">/// for uint8_t, int8_t</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief Swapped two numbers using pointer\n * @param first pointer of first number\n * @param second pointer of second number\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int8_t</span> *first, <span class=\"hljs-type\">int8_t</span> *second)</span>\n{\n    <span class=\"hljs-type\">int8_t</span> temp = *first;\n    *first = *second;\n    *second = temp;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Returns the index having minimum value using recursion\n * @param arr array to be sorted\n * @param size size of array\n * @return min_index index of an element having a minimum value\n*/</span>\n<span class=\"hljs-type\">uint8_t</span> <span class=\"hljs-title function_\">findIndex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int8_t</span> *arr, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">uint8_t</span> size)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (size == <span class=\"hljs-number\">1</span>)\n    {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">// marking recursive call to reach starting element</span>\n    <span class=\"hljs-type\">uint8_t</span> min_index = findIndex(arr, size - <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-keyword\">if</span> (arr[size - <span class=\"hljs-number\">1</span>] &lt; arr[min_index])\n    {\n        min_index = size - <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> min_index;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Selection Sort algorithm implemented using recursion\n * @param arr array to be sorted\n * @param size size of the array\n * @returns void\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">selectionSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int8_t</span> *arr, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">uint8_t</span> size)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (size &lt;= <span class=\"hljs-number\">1</span>)\n    {\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">/* findIndex(arr, size) returned the index having min value*/</span>\n    <span class=\"hljs-type\">uint8_t</span> min_index = findIndex(arr, size);\n    <span class=\"hljs-comment\">/* arr[min_index] is the minimum value in the array*/</span>\n\n    <span class=\"hljs-keyword\">if</span> (min_index != <span class=\"hljs-number\">0</span>)\n    {\n        swap(&amp;arr[<span class=\"hljs-number\">0</span>], &amp;arr[min_index]);\n    }\n\n    <span class=\"hljs-comment\">/*sorted the remaining array recursively*/</span>\n    selectionSort(arr + <span class=\"hljs-number\">1</span>, size - <span class=\"hljs-number\">1</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">uint8_t</span> size = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-type\">int8_t</span> *arr = (<span class=\"hljs-type\">int8_t</span> *)<span class=\"hljs-built_in\">calloc</span>(size, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int8_t</span>));\n\n    <span class=\"hljs-comment\">/* generate size random numbers from 0 to 100 */</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++)\n    {\n        arr[i] = rand() % <span class=\"hljs-number\">100</span>;\n    }\n    selectionSort(arr, size);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; size - <span class=\"hljs-number\">1</span>; ++i)\n    {\n        assert(arr[i] &lt;= arr[i + <span class=\"hljs-number\">1</span>]);\n    }\n    <span class=\"hljs-built_in\">free</span>(arr);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-comment\">/* Intializes random number generator */</span>\n    srand(time(<span class=\"hljs-literal\">NULL</span>));\n\n    test();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "DhruvPasricha",
      "email": "dhruvpasricha0002@gmail.com",
      "commits": 1
    },
    {
      "name": "tGautot",
      "email": "44877251+tGautot@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Tushar Khanduri",
      "email": "62638544+Tushar-K24@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 5
    },
    {
      "name": "Dhruv Pasricha",
      "email": "78498002+DhruvPasricha@users.noreply.github.com",
      "commits": 23
    }
  ],
  "explanationUrl": {}
}