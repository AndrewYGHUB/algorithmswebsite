{
  "slug": "set-kth-bit",
  "name": "Set Kth Bit",
  "categories": [
    "bitmanipulation"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "bit_manipulation/set_kth_bit.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/bit_manipulation/set_kth_bit.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation to [From the right, set the Kth bit in the binary\n * representation of N]\n * (https://practice.geeksforgeeks.org/problems/set-kth-bit3724/1/) in an\n * integer.\n *\n * @details\n * Given a number N and a value K. From the right, set the Kth bit in the binary\n * representation of N. The position of Least Significant Bit(or last bit) is 0,\n * the second last bit is 1 and so on. in it.\n *\n * A binary number consists of two digits. They are 0 &amp; 1. Digit 1 is known as\n * set bit in computer terms.\n * Worst Case Time Complexity: O(1)\n * Space complexity: O(1)\n\n * @author [Aman Raj](https://github.com/aman2000raj)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace bit_manipulation\n * @brief Bit manipulation algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> bit_manipulation {\n<span class=\"hljs-comment\">/**\n * @namespace setKthBit\n * @brief Functions for the [From the right, set the Kth bit in the binary\n * representation of N]\n * (https://practice.geeksforgeeks.org/problems/set-kth-bit3724/1/)\n * implementation\n */</span>\n<span class=\"hljs-keyword\">namespace</span> set_kth_bit {\n<span class=\"hljs-comment\">/**\n * @brief The main function implements set kth bit\n * @param N is the number whose kth bit will be set\n * @returns returns an integer after setting the K&#x27;th bit in N\n */</span>\n<span class=\"hljs-function\">std::<span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">setKthBit</span><span class=\"hljs-params\">(std ::<span class=\"hljs-type\">int64_t</span> N,\n                        std ::<span class=\"hljs-type\">int64_t</span> k)</span> </span>{  <span class=\"hljs-comment\">// int64_t is preferred over int so</span>\n                                            <span class=\"hljs-comment\">// that no Overflow can be there.</span>\n\n    <span class=\"hljs-type\">int</span> pos =\n        <span class=\"hljs-number\">1</span> &lt;&lt; k;  <span class=\"hljs-comment\">// &quot;pos&quot; variable is used to store 1 at kth postion and</span>\n                 <span class=\"hljs-comment\">// rest bits are 0. in binary representation of number &#x27;n&#x27;</span>\n\n    <span class=\"hljs-keyword\">return</span> N | pos;  <span class=\"hljs-comment\">// by taking or with the pos and the N we set the bit of N</span>\n                     <span class=\"hljs-comment\">// at kth position.</span>\n}\n}  <span class=\"hljs-comment\">// namespace set_kth_bit</span>\n}  <span class=\"hljs-comment\">// namespace bit_manipulation</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// n = 10,2 return 14</span>\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::set_kth_bit::<span class=\"hljs-built_in\">setKthBit</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">2</span>) == <span class=\"hljs-number\">14</span>);\n    <span class=\"hljs-comment\">// n = 25,1 return 27</span>\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::set_kth_bit::<span class=\"hljs-built_in\">setKthBit</span>(<span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">27</span>);\n    <span class=\"hljs-comment\">// n = 400001,5 return 400033</span>\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::set_kth_bit::<span class=\"hljs-built_in\">setKthBit</span>(<span class=\"hljs-number\">400001</span>, <span class=\"hljs-number\">5</span>) == <span class=\"hljs-number\">400033</span>);\n    <span class=\"hljs-comment\">// n = 123 return 123</span>\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::set_kth_bit::<span class=\"hljs-built_in\">setKthBit</span>(<span class=\"hljs-number\">123</span>, <span class=\"hljs-number\">3</span>) == <span class=\"hljs-number\">123</span>);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;All test cases successfully passed!&quot;</span> &lt;&lt; std::endl;\n}\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Aman Raj",
      "email": "66414882+aman2000raj@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}