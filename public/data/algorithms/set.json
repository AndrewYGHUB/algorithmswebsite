{
  "slug": "set",
  "name": "Set",
  "categories": [
    "structure"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "structure/set/set.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/structure/set/set.go",
      "code": "<span class=\"hljs-comment\">// package set implements a Set using a golang map.</span>\n<span class=\"hljs-comment\">// This implies that only the types that are accepted as valid map keys can be used as set elements.</span>\n<span class=\"hljs-comment\">// For instance, do not try to Add a slice, or the program will panic.</span>\n<span class=\"hljs-keyword\">package</span> set\n\n<span class=\"hljs-comment\">// New gives new set.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">New</span><span class=\"hljs-params\">(items ...any)</span></span> Set {\n\tst := set{\n\t\telements: <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[any]<span class=\"hljs-type\">bool</span>),\n\t}\n\t<span class=\"hljs-keyword\">for</span> _, item := <span class=\"hljs-keyword\">range</span> items {\n\t\tst.Add(item)\n\t}\n\t<span class=\"hljs-keyword\">return</span> &amp;st\n}\n\n<span class=\"hljs-comment\">// Set is an interface of possible methods on &#x27;set&#x27;.</span>\n<span class=\"hljs-keyword\">type</span> Set <span class=\"hljs-keyword\">interface</span> {\n\t<span class=\"hljs-comment\">// Add: adds new element to the set</span>\n\tAdd(item any)\n\t<span class=\"hljs-comment\">// Delete: deletes the passed element from the set if present</span>\n\tDelete(item any)\n\t<span class=\"hljs-comment\">// Len: gives the length of the set (total no. of elements in set)</span>\n\tLen() <span class=\"hljs-type\">int</span>\n\t<span class=\"hljs-comment\">// GetItems: gives the array( []any ) of elements of the set.</span>\n\tGetItems() []any\n\t<span class=\"hljs-comment\">// In: checks whether item is present in set or not.</span>\n\tIn(item any) <span class=\"hljs-type\">bool</span>\n\t<span class=\"hljs-comment\">// IsSubsetOf: checks whether set is subset of set2 or not.</span>\n\tIsSubsetOf(set2 Set) <span class=\"hljs-type\">bool</span>\n\t<span class=\"hljs-comment\">// IsSupersetOf: checks whether set is superset of set2 or not.</span>\n\tIsSupersetOf(set2 Set) <span class=\"hljs-type\">bool</span>\n\t<span class=\"hljs-comment\">// Union: gives new union set of both sets.</span>\n\t<span class=\"hljs-comment\">// ex: [1,2,3] union [3,4,5] -&gt; [1,2,3,4,5]</span>\n\tUnion(set2 Set) Set\n\t<span class=\"hljs-comment\">// Intersection: gives new intersection set of both sets.</span>\n\t<span class=\"hljs-comment\">// ex: [1,2,3] Intersection [3,4,5] -&gt; [3]</span>\n\tIntersection(set2 Set) Set\n\t<span class=\"hljs-comment\">// Difference: gives new difference set of both sets.</span>\n\t<span class=\"hljs-comment\">// ex: [1,2,3] Difference [3,4,5] -&gt; [1,2]</span>\n\tDifference(set2 Set) Set\n\t<span class=\"hljs-comment\">// SymmetricDifference: gives new symmetric difference set of both sets.</span>\n\t<span class=\"hljs-comment\">// ex: [1,2,3] SymmetricDifference [3,4,5] -&gt; [1,2,4,5]</span>\n\tSymmetricDifference(set2 Set) Set\n}\n\n<span class=\"hljs-keyword\">type</span> set <span class=\"hljs-keyword\">struct</span> {\n\telements <span class=\"hljs-keyword\">map</span>[any]<span class=\"hljs-type\">bool</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(st *set)</span></span> Add(value any) {\n\tst.elements[value] = <span class=\"hljs-literal\">true</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(st *set)</span></span> Delete(value any) {\n\t<span class=\"hljs-built_in\">delete</span>(st.elements, value)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(st *set)</span></span> GetItems() []any {\n\tkeys := <span class=\"hljs-built_in\">make</span>([]any, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(st.elements))\n\t<span class=\"hljs-keyword\">for</span> k := <span class=\"hljs-keyword\">range</span> st.elements {\n\t\tkeys = <span class=\"hljs-built_in\">append</span>(keys, k)\n\t}\n\t<span class=\"hljs-keyword\">return</span> keys\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(st *set)</span></span> Len() <span class=\"hljs-type\">int</span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(st.elements)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(st *set)</span></span> In(value any) <span class=\"hljs-type\">bool</span> {\n\t<span class=\"hljs-keyword\">if</span> _, in := st.elements[value]; in {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(st *set)</span></span> IsSubsetOf(superSet Set) <span class=\"hljs-type\">bool</span> {\n\t<span class=\"hljs-keyword\">if</span> st.Len() &gt; superSet.Len() {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n\t}\n\n\t<span class=\"hljs-keyword\">for</span> _, item := <span class=\"hljs-keyword\">range</span> st.GetItems() {\n\t\t<span class=\"hljs-keyword\">if</span> !superSet.In(item) {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(st *set)</span></span> IsSupersetOf(subSet Set) <span class=\"hljs-type\">bool</span> {\n\t<span class=\"hljs-keyword\">return</span> subSet.IsSubsetOf(st)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(st *set)</span></span> Union(st2 Set) Set {\n\tunionSet := New()\n\t<span class=\"hljs-keyword\">for</span> _, item := <span class=\"hljs-keyword\">range</span> st.GetItems() {\n\t\tunionSet.Add(item)\n\t}\n\t<span class=\"hljs-keyword\">for</span> _, item := <span class=\"hljs-keyword\">range</span> st2.GetItems() {\n\t\tunionSet.Add(item)\n\t}\n\t<span class=\"hljs-keyword\">return</span> unionSet\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(st *set)</span></span> Intersection(st2 Set) Set {\n\tintersectionSet := New()\n\t<span class=\"hljs-keyword\">var</span> minSet, maxSet Set\n\t<span class=\"hljs-keyword\">if</span> st.Len() &gt; st2.Len() {\n\t\tminSet = st2\n\t\tmaxSet = st\n\t} <span class=\"hljs-keyword\">else</span> {\n\t\tminSet = st\n\t\tmaxSet = st2\n\t}\n\t<span class=\"hljs-keyword\">for</span> _, item := <span class=\"hljs-keyword\">range</span> minSet.GetItems() {\n\t\t<span class=\"hljs-keyword\">if</span> maxSet.In(item) {\n\t\t\tintersectionSet.Add(item)\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> intersectionSet\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(st *set)</span></span> Difference(st2 Set) Set {\n\tdifferenceSet := New()\n\t<span class=\"hljs-keyword\">for</span> _, item := <span class=\"hljs-keyword\">range</span> st.GetItems() {\n\t\t<span class=\"hljs-keyword\">if</span> !st2.In(item) {\n\t\t\tdifferenceSet.Add(item)\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> differenceSet\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(st *set)</span></span> SymmetricDifference(st2 Set) Set {\n\tsymmetricDifferenceSet := New()\n\tdropSet := New()\n\t<span class=\"hljs-keyword\">for</span> _, item := <span class=\"hljs-keyword\">range</span> st.GetItems() {\n\t\t<span class=\"hljs-keyword\">if</span> st2.In(item) {\n\t\t\tdropSet.Add(item)\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\tsymmetricDifferenceSet.Add(item)\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">for</span> _, item := <span class=\"hljs-keyword\">range</span> st2.GetItems() {\n\t\t<span class=\"hljs-keyword\">if</span> !dropSet.In(item) {\n\t\t\tsymmetricDifferenceSet.Add(item)\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> symmetricDifferenceSet\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ritik Bhandari",
      "email": "ritikbhandari68@gmail.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}