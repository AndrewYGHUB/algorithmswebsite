{
  "slug": "sha-1",
  "name": "Sha 1",
  "categories": [
    "hashing"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "hashes/sha1.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/hashes/sha1.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nDemonstrates implementation of SHA1 Hash function in a Python class and gives utilities\nto find hash of string or hash of text from a file.\nUsage: python sha1.py --string &quot;Hello World!!&quot;\n       python sha1.py --file &quot;hello_world.txt&quot;\n       When run without any arguments, it prints the hash of the string &quot;Hello World!!\n       Welcome to Cryptography&quot;\nAlso contains a Test class to verify that the generated Hash is same as that\nreturned by the hashlib library\n\nSHA1 hash or SHA1 sum of a string is a cryptographic function which means it is easy\nto calculate forwards but extremely difficult to calculate backwards. What this means\nis, you can easily calculate the hash of  a string, but it is extremely difficult to\nknow the original string if you have its hash. This property is useful to communicate\nsecurely, send encrypted messages and is very useful in payment systems, blockchain\nand cryptocurrency etc.\nThe Algorithm as described in the reference:\nFirst we start with a message. The message is padded and the length of the message\nis added to the end. It is then split into blocks of 512 bits or 64 bytes. The blocks\nare then processed one at a time. Each block must be expanded and compressed.\nThe value after each compression is added to a 160bit buffer called the current hash\nstate. After the last block is processed the current hash state is returned as\nthe final hash.\nReference: https://deadhacker.com/2006/02/21/sha-1-illustrated/\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">import</span> argparse\n<span class=\"hljs-keyword\">import</span> hashlib  <span class=\"hljs-comment\"># hashlib is only used inside the Test class</span>\n<span class=\"hljs-keyword\">import</span> struct\n<span class=\"hljs-keyword\">import</span> unittest\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SHA1Hash</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Class to contain the entire pipeline for SHA1 Hashing Algorithm\n    &gt;&gt;&gt; SHA1Hash(bytes(&#x27;Allan&#x27;, &#x27;utf-8&#x27;)).final_hash()\n    &#x27;872af2d8ac3d8695387e7c804bf0e02c18df9e6e&#x27;\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Inititates the variables data and h. h is a list of 5 8-digit Hexadecimal\n        numbers corresponding to\n        (1732584193, 4023233417, 2562383102, 271733878, 3285377520)\n        respectively. We will start with this as a message digest. 0x is how you write\n        Hexadecimal numbers in Python\n        &quot;&quot;&quot;</span>\n        self.data = data\n        self.h = [<span class=\"hljs-number\">0x67452301</span>, <span class=\"hljs-number\">0xEFCDAB89</span>, <span class=\"hljs-number\">0x98BADCFE</span>, <span class=\"hljs-number\">0x10325476</span>, <span class=\"hljs-number\">0xC3D2E1F0</span>]\n\n<span class=\"hljs-meta\">    @staticmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rotate</span>(<span class=\"hljs-params\">n, b</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Static method to be used inside other methods. Left rotates n by b.\n        &gt;&gt;&gt; SHA1Hash(&#x27;&#x27;).rotate(12,2)\n        48\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> ((n &lt;&lt; b) | (n &gt;&gt; (<span class=\"hljs-number\">32</span> - b))) &amp; <span class=\"hljs-number\">0xFFFFFFFF</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">padding</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Pads the input message with zeros so that padded_data has 64 bytes or 512 bits\n        &quot;&quot;&quot;</span>\n        padding = <span class=\"hljs-string\">b&quot;\\x80&quot;</span> + <span class=\"hljs-string\">b&quot;\\x00&quot;</span> * (<span class=\"hljs-number\">63</span> - (<span class=\"hljs-built_in\">len</span>(self.data) + <span class=\"hljs-number\">8</span>) % <span class=\"hljs-number\">64</span>)\n        padded_data = self.data + padding + struct.pack(<span class=\"hljs-string\">&quot;&gt;Q&quot;</span>, <span class=\"hljs-number\">8</span> * <span class=\"hljs-built_in\">len</span>(self.data))\n        <span class=\"hljs-keyword\">return</span> padded_data\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">split_blocks</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Returns a list of bytestrings each of length 64\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> [\n            self.padded_data[i : i + <span class=\"hljs-number\">64</span>] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(self.padded_data), <span class=\"hljs-number\">64</span>)\n        ]\n\n    <span class=\"hljs-comment\"># @staticmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">expand_block</span>(<span class=\"hljs-params\">self, block</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Takes a bytestring-block of length 64, unpacks it to a list of integers and\n        returns a list of 80 integers after some bit operations\n        &quot;&quot;&quot;</span>\n        w = <span class=\"hljs-built_in\">list</span>(struct.unpack(<span class=\"hljs-string\">&quot;&gt;16L&quot;</span>, block)) + [<span class=\"hljs-number\">0</span>] * <span class=\"hljs-number\">64</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">80</span>):\n            w[i] = self.rotate((w[i - <span class=\"hljs-number\">3</span>] ^ w[i - <span class=\"hljs-number\">8</span>] ^ w[i - <span class=\"hljs-number\">14</span>] ^ w[i - <span class=\"hljs-number\">16</span>]), <span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">return</span> w\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">final_hash</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Calls all the other methods to process the input. Pads the data, then splits\n        into blocks and then does a series of operations for each block (including\n        expansion).\n        For each block, the variable h that was initialized is copied to a,b,c,d,e\n        and these 5 variables a,b,c,d,e undergo several changes. After all the blocks\n        are processed, these 5 variables are pairwise added to h ie a to h[0], b to h[1]\n        and so on.  This h becomes our final hash which is returned.\n        &quot;&quot;&quot;</span>\n        self.padded_data = self.padding()\n        self.blocks = self.split_blocks()\n        <span class=\"hljs-keyword\">for</span> block <span class=\"hljs-keyword\">in</span> self.blocks:\n            expanded_block = self.expand_block(block)\n            a, b, c, d, e = self.h\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">80</span>):\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">0</span> &lt;= i &lt; <span class=\"hljs-number\">20</span>:\n                    f = (b &amp; c) | ((~b) &amp; d)\n                    k = <span class=\"hljs-number\">0x5A827999</span>\n                <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-number\">20</span> &lt;= i &lt; <span class=\"hljs-number\">40</span>:\n                    f = b ^ c ^ d\n                    k = <span class=\"hljs-number\">0x6ED9EBA1</span>\n                <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-number\">40</span> &lt;= i &lt; <span class=\"hljs-number\">60</span>:\n                    f = (b &amp; c) | (b &amp; d) | (c &amp; d)\n                    k = <span class=\"hljs-number\">0x8F1BBCDC</span>\n                <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-number\">60</span> &lt;= i &lt; <span class=\"hljs-number\">80</span>:\n                    f = b ^ c ^ d\n                    k = <span class=\"hljs-number\">0xCA62C1D6</span>\n                a, b, c, d, e = (\n                    self.rotate(a, <span class=\"hljs-number\">5</span>) + f + e + k + expanded_block[i] &amp; <span class=\"hljs-number\">0xFFFFFFFF</span>,\n                    a,\n                    self.rotate(b, <span class=\"hljs-number\">30</span>),\n                    c,\n                    d,\n                )\n            self.h = (\n                self.h[<span class=\"hljs-number\">0</span>] + a &amp; <span class=\"hljs-number\">0xFFFFFFFF</span>,\n                self.h[<span class=\"hljs-number\">1</span>] + b &amp; <span class=\"hljs-number\">0xFFFFFFFF</span>,\n                self.h[<span class=\"hljs-number\">2</span>] + c &amp; <span class=\"hljs-number\">0xFFFFFFFF</span>,\n                self.h[<span class=\"hljs-number\">3</span>] + d &amp; <span class=\"hljs-number\">0xFFFFFFFF</span>,\n                self.h[<span class=\"hljs-number\">4</span>] + e &amp; <span class=\"hljs-number\">0xFFFFFFFF</span>,\n            )\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;%08x%08x%08x%08x%08x&quot;</span> % <span class=\"hljs-built_in\">tuple</span>(self.h)\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SHA1HashTest</span>(unittest.TestCase):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Test class for the SHA1Hash class. Inherits the TestCase class from unittest\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">testMatchHashes</span>(<span class=\"hljs-params\">self</span>):\n        msg = <span class=\"hljs-built_in\">bytes</span>(<span class=\"hljs-string\">&quot;Test String&quot;</span>, <span class=\"hljs-string\">&quot;utf-8&quot;</span>)\n        self.assertEqual(SHA1Hash(msg).final_hash(), hashlib.sha1(msg).hexdigest())\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Provides option &#x27;string&#x27; or &#x27;file&#x27; to take input and prints the calculated SHA1\n    hash.  unittest.main() has been commented because we probably don&#x27;t want to run\n    the test each time.\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># unittest.main()</span>\n    parser = argparse.ArgumentParser(description=<span class=\"hljs-string\">&quot;Process some strings or files&quot;</span>)\n    parser.add_argument(\n        <span class=\"hljs-string\">&quot;--string&quot;</span>,\n        dest=<span class=\"hljs-string\">&quot;input_string&quot;</span>,\n        default=<span class=\"hljs-string\">&quot;Hello World!! Welcome to Cryptography&quot;</span>,\n        <span class=\"hljs-built_in\">help</span>=<span class=\"hljs-string\">&quot;Hash the string&quot;</span>,\n    )\n    parser.add_argument(<span class=\"hljs-string\">&quot;--file&quot;</span>, dest=<span class=\"hljs-string\">&quot;input_file&quot;</span>, <span class=\"hljs-built_in\">help</span>=<span class=\"hljs-string\">&quot;Hash contents of a file&quot;</span>)\n    args = parser.parse_args()\n    input_string = args.input_string\n    <span class=\"hljs-comment\"># In any case hash input should be a bytestring</span>\n    <span class=\"hljs-keyword\">if</span> args.input_file:\n        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(args.input_file, <span class=\"hljs-string\">&quot;rb&quot;</span>) <span class=\"hljs-keyword\">as</span> f:\n            hash_input = f.read()\n    <span class=\"hljs-keyword\">else</span>:\n        hash_input = <span class=\"hljs-built_in\">bytes</span>(input_string, <span class=\"hljs-string\">&quot;utf-8&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(SHA1Hash(hash_input).final_hash())\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "javascript": {
      "dir": "Hashes/SHA1.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Hashes/SHA1.js",
      "code": "<span class=\"hljs-comment\">//= ===============================================================</span>\n<span class=\"hljs-comment\">// SHA1.js</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// Module that replicates the SHA-1 Cryptographic Hash</span>\n<span class=\"hljs-comment\">// function in Javascript.</span>\n<span class=\"hljs-comment\">//= ===============================================================</span>\n\n<span class=\"hljs-comment\">// main variables</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">CHAR_SIZE</span> = <span class=\"hljs-number\">8</span>\n\n<span class=\"hljs-comment\">/**\n * Adds padding to binary/hex string representation\n *\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} <span class=\"hljs-variable\">str</span> - string representation (binary/hex)\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">int</span>} <span class=\"hljs-variable\">bits</span> - total number of bits wanted\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">string</span>} - string representation padding with empty (0) bits\n *\n * <span class=\"hljs-doctag\">@example</span>\n *      pad(&quot;10011&quot;, 8); // &quot;00010011&quot;\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">pad</span> (str, bits) {\n  <span class=\"hljs-keyword\">let</span> res = str\n  <span class=\"hljs-keyword\">while</span> (res.<span class=\"hljs-property\">length</span> % bits !== <span class=\"hljs-number\">0</span>) {\n    res = <span class=\"hljs-string\">&#x27;0&#x27;</span> + res\n  }\n  <span class=\"hljs-keyword\">return</span> res\n}\n\n<span class=\"hljs-comment\">/**\n * Separates string into chunks of the same size\n *\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} <span class=\"hljs-variable\">str</span> - string to separate into chunks\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">int</span>} <span class=\"hljs-variable\">size</span> - number of characters wanted in each chunk\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">array</span>} - array of original string split into chunks\n *\n * <span class=\"hljs-doctag\">@example</span>\n *      chunkify(&quot;this is a test&quot;, 2)\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">chunkify</span> (str, size) {\n  <span class=\"hljs-keyword\">const</span> chunks = []\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; str.<span class=\"hljs-property\">length</span>; i += size) {\n    chunks.<span class=\"hljs-title function_\">push</span>(str.<span class=\"hljs-title function_\">slice</span>(i, i + size))\n  }\n  <span class=\"hljs-keyword\">return</span> chunks\n}\n\n<span class=\"hljs-comment\">/**\n * Rotates string representation of bits to the left\n *\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} <span class=\"hljs-variable\">bits</span> - string representation of bits\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">int</span>} <span class=\"hljs-variable\">turns</span> - number of rotations to make\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">string</span>} - string representation of bits after rotation\n *\n * <span class=\"hljs-doctag\">@example</span>\n *      rotateLeft(&quot;1011&quot;, 3); // &quot;1101&quot;\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">rotateLeft</span> (bits, turns) {\n  <span class=\"hljs-keyword\">return</span> bits.<span class=\"hljs-title function_\">substr</span>(turns) + bits.<span class=\"hljs-title function_\">substr</span>(<span class=\"hljs-number\">0</span>, turns)\n}\n\n<span class=\"hljs-comment\">/**\n * Pre-processes message to feed the algorithm loop\n *\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} <span class=\"hljs-variable\">message</span> - message to pre-process\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">string</span>} - processed message\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">preProcess</span> (message) {\n  <span class=\"hljs-comment\">// convert message to binary representation padded to</span>\n  <span class=\"hljs-comment\">// 8 bits, and add 1</span>\n  <span class=\"hljs-keyword\">let</span> m = message.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n    .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> e.<span class=\"hljs-title function_\">charCodeAt</span>(<span class=\"hljs-number\">0</span>))\n    .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> e.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-number\">2</span>))\n    .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> <span class=\"hljs-title function_\">pad</span>(e, <span class=\"hljs-number\">8</span>))\n    .<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>) + <span class=\"hljs-string\">&#x27;1&#x27;</span>\n\n  <span class=\"hljs-comment\">// extend message by adding empty bits (0)</span>\n  <span class=\"hljs-keyword\">while</span> (m.<span class=\"hljs-property\">length</span> % <span class=\"hljs-number\">512</span> !== <span class=\"hljs-number\">448</span>) {\n    m += <span class=\"hljs-string\">&#x27;0&#x27;</span>\n  }\n\n  <span class=\"hljs-comment\">// length of message in binary, padded, and extended</span>\n  <span class=\"hljs-comment\">// to a 64 bit representation</span>\n  <span class=\"hljs-keyword\">let</span> ml = (message.<span class=\"hljs-property\">length</span> * <span class=\"hljs-variable constant_\">CHAR_SIZE</span>).<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-number\">2</span>)\n  ml = <span class=\"hljs-title function_\">pad</span>(ml, <span class=\"hljs-number\">8</span>)\n  ml = <span class=\"hljs-string\">&#x27;0&#x27;</span>.<span class=\"hljs-title function_\">repeat</span>(<span class=\"hljs-number\">64</span> - ml.<span class=\"hljs-property\">length</span>) + ml\n\n  <span class=\"hljs-keyword\">return</span> m + ml\n}\n\n<span class=\"hljs-comment\">/**\n * Hashes message using SHA-1 Cryptographic Hash Function\n *\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} <span class=\"hljs-variable\">message</span> - message to hash\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">string</span>} - message digest (hash value)\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SHA1</span> (message) {\n  <span class=\"hljs-comment\">// main variables</span>\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable constant_\">H0</span> = <span class=\"hljs-number\">0x67452301</span>\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable constant_\">H1</span> = <span class=\"hljs-number\">0xEFCDAB89</span>\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable constant_\">H2</span> = <span class=\"hljs-number\">0x98BADCFE</span>\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable constant_\">H3</span> = <span class=\"hljs-number\">0x10325476</span>\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable constant_\">H4</span> = <span class=\"hljs-number\">0xC3D2E1F0</span>\n\n  <span class=\"hljs-comment\">// pre-process message and split into 512 bit chunks</span>\n  <span class=\"hljs-keyword\">const</span> bits = <span class=\"hljs-title function_\">preProcess</span>(message)\n  <span class=\"hljs-keyword\">const</span> chunks = <span class=\"hljs-title function_\">chunkify</span>(bits, <span class=\"hljs-number\">512</span>)\n\n  chunks.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">chunk, i</span>) {\n    <span class=\"hljs-comment\">// break each chunk into 16 32-bit words</span>\n    <span class=\"hljs-keyword\">const</span> words = <span class=\"hljs-title function_\">chunkify</span>(chunk, <span class=\"hljs-number\">32</span>)\n\n    <span class=\"hljs-comment\">// extend 16 32-bit words to 80 32-bit words</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">16</span>; i &lt; <span class=\"hljs-number\">80</span>; i++) {\n      <span class=\"hljs-keyword\">const</span> val = [words[i - <span class=\"hljs-number\">3</span>], words[i - <span class=\"hljs-number\">8</span>], words[i - <span class=\"hljs-number\">14</span>], words[i - <span class=\"hljs-number\">16</span>]]\n        .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> <span class=\"hljs-built_in\">parseInt</span>(e, <span class=\"hljs-number\">2</span>))\n        .<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, curr</span>) =&gt;</span> curr ^ acc, <span class=\"hljs-number\">0</span>)\n      <span class=\"hljs-keyword\">const</span> bin = (val &gt;&gt;&gt; <span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-number\">2</span>)\n      <span class=\"hljs-keyword\">const</span> paddedBin = <span class=\"hljs-title function_\">pad</span>(bin, <span class=\"hljs-number\">32</span>)\n      <span class=\"hljs-keyword\">const</span> word = <span class=\"hljs-title function_\">rotateLeft</span>(paddedBin, <span class=\"hljs-number\">1</span>)\n      words.<span class=\"hljs-title function_\">push</span>(word)\n    }\n\n    <span class=\"hljs-comment\">// initialize variables for this chunk</span>\n    <span class=\"hljs-keyword\">let</span> [a, b, c, d, e] = [<span class=\"hljs-variable constant_\">H0</span>, <span class=\"hljs-variable constant_\">H1</span>, <span class=\"hljs-variable constant_\">H2</span>, <span class=\"hljs-variable constant_\">H3</span>, <span class=\"hljs-variable constant_\">H4</span>]\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">80</span>; i++) {\n      <span class=\"hljs-keyword\">let</span> f, k\n      <span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-number\">20</span>) {\n        f = (b &amp; c) | (~b &amp; d)\n        k = <span class=\"hljs-number\">0x5A827999</span>\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-number\">40</span>) {\n        f = b ^ c ^ d\n        k = <span class=\"hljs-number\">0x6ED9EBA1</span>\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-number\">60</span>) {\n        f = (b &amp; c) | (b &amp; d) | (c &amp; d)\n        k = <span class=\"hljs-number\">0x8F1BBCDC</span>\n      } <span class=\"hljs-keyword\">else</span> {\n        f = b ^ c ^ d\n        k = <span class=\"hljs-number\">0xCA62C1D6</span>\n      }\n      <span class=\"hljs-comment\">// make sure f is unsigned</span>\n      f &gt;&gt;&gt;= <span class=\"hljs-number\">0</span>\n\n      <span class=\"hljs-keyword\">const</span> aRot = <span class=\"hljs-title function_\">rotateLeft</span>(<span class=\"hljs-title function_\">pad</span>(a.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">32</span>), <span class=\"hljs-number\">5</span>)\n      <span class=\"hljs-keyword\">const</span> aInt = <span class=\"hljs-built_in\">parseInt</span>(aRot, <span class=\"hljs-number\">2</span>) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">const</span> wordInt = <span class=\"hljs-built_in\">parseInt</span>(words[i], <span class=\"hljs-number\">2</span>) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">const</span> t = aInt + f + e + k + wordInt\n      e = d &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n      d = c &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">const</span> bRot = <span class=\"hljs-title function_\">rotateLeft</span>(<span class=\"hljs-title function_\">pad</span>(b.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">32</span>), <span class=\"hljs-number\">30</span>)\n      c = <span class=\"hljs-built_in\">parseInt</span>(bRot, <span class=\"hljs-number\">2</span>) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n      b = a &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n      a = t &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n    }\n\n    <span class=\"hljs-comment\">// add values for this chunk to main hash variables (unsigned)</span>\n    <span class=\"hljs-variable constant_\">H0</span> = (<span class=\"hljs-variable constant_\">H0</span> + a) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable constant_\">H1</span> = (<span class=\"hljs-variable constant_\">H1</span> + b) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable constant_\">H2</span> = (<span class=\"hljs-variable constant_\">H2</span> + c) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable constant_\">H3</span> = (<span class=\"hljs-variable constant_\">H3</span> + d) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable constant_\">H4</span> = (<span class=\"hljs-variable constant_\">H4</span> + e) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n  })\n\n  <span class=\"hljs-comment\">// combine hash values of main hash variables and return</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">HH</span> = [<span class=\"hljs-variable constant_\">H0</span>, <span class=\"hljs-variable constant_\">H1</span>, <span class=\"hljs-variable constant_\">H2</span>, <span class=\"hljs-variable constant_\">H3</span>, <span class=\"hljs-variable constant_\">H4</span>]\n    .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> e.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-number\">16</span>))\n    .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> <span class=\"hljs-title function_\">pad</span>(e, <span class=\"hljs-number\">8</span>))\n    .<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable constant_\">HH</span>\n}\n\n<span class=\"hljs-comment\">// export SHA1 function</span>\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">SHA1</span> }\n"
    },
    "c-plus-plus": {
      "dir": "hashing/sha1.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/hashing/sha1.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @author [tGautot](https://github.com/tGautot)\n * @brief Simple C++ implementation of the [SHA-1 Hashing\n * Algorithm](https://en.wikipedia.org/wiki/SHA-1)\n *\n * @details\n * [SHA-1](https://en.wikipedia.org/wiki/SHA-1) is a cryptographic hash function\n * that was developped by the\n * [NSA](https://en.wikipedia.org/wiki/National_Security_Agency) 1995.\n * SHA-1 is not considered secure since around 2010.\n *\n * ### Algorithm\n * The first step of the algorithm is to pad the message for its length to\n * be a multiple of 64 (bytes). This is done by first adding 0x80 (10000000)\n * and then only zeroes until the last 8 bytes must be filled, where then the\n * 64 bit size of the input will be added\n *\n * Once this is done, the algo breaks down this padded message\n * into 64 bytes chunks. Each chunk is used for one *round*, a round\n * breaks the chunk into 16 blocks of 4 bytes. These 16 blocks are then extended\n * to 80 blocks using XOR operations on existing blocks (see code for more\n * details). The algorithm will then update its 160-bit state (here represented\n * used 5 32-bits integer) using partial hashes computed using special functions\n * on the blocks previously built. Please take a look at the [wikipedia\n * article](https://en.wikipedia.org/wiki/SHA-1#SHA-1_pseudocode) for more\n * precision on these operations\n * @note This is a simple implementation for a byte string but\n * some implmenetations can work on bytestream, messages of unknown length.\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">/// For std::copy</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span>      <span class=\"hljs-comment\">/// For std::array</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">/// For assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span>    <span class=\"hljs-comment\">/// For std::memcopy</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">/// For IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span>     <span class=\"hljs-comment\">/// For strings</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>     <span class=\"hljs-comment\">/// For std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace hashing\n * @brief Hashing algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> hashing {\n<span class=\"hljs-comment\">/**\n * @namespace SHA-1\n * @brief Functions for the [SHA-1](https://en.wikipedia.org/wiki/SHA-1)\n * algorithm implementation\n */</span>\n<span class=\"hljs-keyword\">namespace</span> sha1 {\n<span class=\"hljs-comment\">/**\n * @brief Rotates the bits of a 32-bit unsigned integer\n * @param n Integer to rotate\n * @param rotate How many bits for the rotation\n * @return uint32_t The rotated integer\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint32_t</span> <span class=\"hljs-title\">leftRotate32bits</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint32_t</span> n, std::<span class=\"hljs-type\">size_t</span> rotate)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> (n &lt;&lt; rotate) | (n &gt;&gt; (<span class=\"hljs-number\">32</span> - rotate));\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Transforms the 160-bit SHA-1 signature into a 40 char hex string\n * @param sig The SHA-1 signature (Expected 20 bytes)\n * @return std::string The hex signature\n */</span>\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">sig2hex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>* sig)</span> </span>{\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* hexChars = <span class=\"hljs-string\">&quot;0123456789abcdef&quot;</span>;\n    <span class=\"hljs-keyword\">auto</span>* intsig = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">uint8_t</span>*&gt;(sig);\n    std::string hex = <span class=\"hljs-string\">&quot;&quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">20</span>; i++) {\n        hex.<span class=\"hljs-built_in\">push_back</span>(hexChars[(intsig[i] &gt;&gt; <span class=\"hljs-number\">4</span>) &amp; <span class=\"hljs-number\">0xF</span>]);\n        hex.<span class=\"hljs-built_in\">push_back</span>(hexChars[(intsig[i]) &amp; <span class=\"hljs-number\">0xF</span>]);\n    }\n    <span class=\"hljs-keyword\">return</span> hex;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief The SHA-1 algorithm itself, taking in a bytestring\n * @param input_bs The bytestring to hash\n * @param input_size The size (in BYTES) of the input\n * @return void* Pointer to the 160-bit signature\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span>* <span class=\"hljs-title\">hash_bs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">void</span>* input_bs, <span class=\"hljs-type\">uint64_t</span> input_size)</span> </span>{\n    <span class=\"hljs-keyword\">auto</span>* input = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">uint8_t</span>*&gt;(input_bs);\n\n    <span class=\"hljs-comment\">// Step 0: The initial 160-bit state</span>\n    <span class=\"hljs-type\">uint32_t</span> h0 = <span class=\"hljs-number\">0x67452301</span>, a = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">uint32_t</span> h1 = <span class=\"hljs-number\">0xEFCDAB89</span>, b = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">uint32_t</span> h2 = <span class=\"hljs-number\">0x98BADCFE</span>, c = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">uint32_t</span> h3 = <span class=\"hljs-number\">0x10325476</span>, d = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">uint32_t</span> h4 = <span class=\"hljs-number\">0xC3D2E1F0</span>, e = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">// Step 1: Processing the bytestring</span>\n    <span class=\"hljs-comment\">// First compute the size the padded message will have</span>\n    <span class=\"hljs-comment\">// so it is possible to allocate the right amount of memory</span>\n    <span class=\"hljs-type\">uint64_t</span> padded_message_size = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">if</span> (input_size % <span class=\"hljs-number\">64</span> &lt; <span class=\"hljs-number\">56</span>) {\n        padded_message_size = input_size + <span class=\"hljs-number\">64</span> - (input_size % <span class=\"hljs-number\">64</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n        padded_message_size = input_size + <span class=\"hljs-number\">128</span> - (input_size % <span class=\"hljs-number\">64</span>);\n    }\n\n    <span class=\"hljs-comment\">// Allocate the memory for the padded message</span>\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint8_t</span>&gt; <span class=\"hljs-title\">padded_message</span><span class=\"hljs-params\">(padded_message_size)</span></span>;\n\n    <span class=\"hljs-comment\">// Beginning of the padded message is the original message</span>\n    std::<span class=\"hljs-built_in\">copy</span>(input, input + input_size, padded_message.<span class=\"hljs-built_in\">begin</span>());\n\n    <span class=\"hljs-comment\">// Afterwards comes a single 1 bit and then only zeroes</span>\n    padded_message[input_size] = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">7</span>;  <span class=\"hljs-comment\">// 10000000</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = input_size; i % <span class=\"hljs-number\">64</span> != <span class=\"hljs-number\">56</span>; i++) {\n        <span class=\"hljs-keyword\">if</span> (i == input_size) {\n            <span class=\"hljs-keyword\">continue</span>;  <span class=\"hljs-comment\">// pass first iteration</span>\n        }\n        padded_message[i] = <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">// We then have to add the 64-bit size of the message in bits (hence the</span>\n    <span class=\"hljs-comment\">// times 8) in the last 8 bytes</span>\n    <span class=\"hljs-type\">uint64_t</span> input_bitsize = input_size * <span class=\"hljs-number\">8</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">8</span>; i++) {\n        padded_message[padded_message_size - <span class=\"hljs-number\">8</span> + i] =\n            (input_bitsize &gt;&gt; (<span class=\"hljs-number\">56</span> - <span class=\"hljs-number\">8</span> * i)) &amp; <span class=\"hljs-number\">0xFF</span>;\n    }\n\n    <span class=\"hljs-comment\">// Already allocate memory for blocks</span>\n    std::array&lt;<span class=\"hljs-type\">uint32_t</span>, 80&gt; blocks{};\n\n    <span class=\"hljs-comment\">// Rounds</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> chunk = <span class=\"hljs-number\">0</span>; chunk * <span class=\"hljs-number\">64</span> &lt; padded_message_size; chunk++) {\n        <span class=\"hljs-comment\">// First, build 16 32-bits blocks from the chunk</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> bid = <span class=\"hljs-number\">0</span>; bid &lt; <span class=\"hljs-number\">16</span>; bid++) {\n            blocks[bid] = <span class=\"hljs-number\">0</span>;\n\n            <span class=\"hljs-comment\">// Having to build a 32-bit word from 4-bit words</span>\n            <span class=\"hljs-comment\">// Add each and shift them to the left</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> cid = <span class=\"hljs-number\">0</span>; cid &lt; <span class=\"hljs-number\">4</span>; cid++) {\n                blocks[bid] = (blocks[bid] &lt;&lt; <span class=\"hljs-number\">8</span>) +\n                              padded_message[chunk * <span class=\"hljs-number\">64</span> + bid * <span class=\"hljs-number\">4</span> + cid];\n            }\n\n            <span class=\"hljs-comment\">// Extend the 16 32-bit words into 80 32-bit words</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> i = <span class=\"hljs-number\">16</span>; i &lt; <span class=\"hljs-number\">80</span>; i++) {\n                blocks[i] =\n                    <span class=\"hljs-built_in\">leftRotate32bits</span>(blocks[i - <span class=\"hljs-number\">3</span>] ^ blocks[i - <span class=\"hljs-number\">8</span>] ^\n                                         blocks[i - <span class=\"hljs-number\">14</span>] ^ blocks[i - <span class=\"hljs-number\">16</span>],\n                                     <span class=\"hljs-number\">1</span>);\n            }\n        }\n\n        a = h0;\n        b = h1;\n        c = h2;\n        d = h3;\n        e = h4;\n\n        <span class=\"hljs-comment\">// Main &quot;hashing&quot; loop</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">80</span>; i++) {\n            <span class=\"hljs-type\">uint32_t</span> F = <span class=\"hljs-number\">0</span>, g = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-number\">20</span>) {\n                F = (b &amp; c) | ((~b) &amp; d);\n                g = <span class=\"hljs-number\">0x5A827999</span>;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-number\">40</span>) {\n                F = b ^ c ^ d;\n                g = <span class=\"hljs-number\">0x6ED9EBA1</span>;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-number\">60</span>) {\n                F = (b &amp; c) | (b &amp; d) | (c &amp; d);\n                g = <span class=\"hljs-number\">0x8F1BBCDC</span>;\n            } <span class=\"hljs-keyword\">else</span> {\n                F = b ^ c ^ d;\n                g = <span class=\"hljs-number\">0xCA62C1D6</span>;\n            }\n\n            <span class=\"hljs-comment\">// Update the accumulators</span>\n            <span class=\"hljs-type\">uint32_t</span> temp = <span class=\"hljs-built_in\">leftRotate32bits</span>(a, <span class=\"hljs-number\">5</span>) + F + e + g + blocks[i];\n            e = d;\n            d = c;\n            c = <span class=\"hljs-built_in\">leftRotate32bits</span>(b, <span class=\"hljs-number\">30</span>);\n            b = a;\n            a = temp;\n        }\n        <span class=\"hljs-comment\">// Update the state with this chunk&#x27;s hash</span>\n        h0 += a;\n        h1 += b;\n        h2 += c;\n        h3 += d;\n        h4 += e;\n    }\n\n    <span class=\"hljs-comment\">// Build signature from state</span>\n    <span class=\"hljs-comment\">// Note, any type could be used for the signature</span>\n    <span class=\"hljs-comment\">// uint8_t was used to make the 20 bytes obvious</span>\n    <span class=\"hljs-keyword\">auto</span>* sig = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">uint8_t</span>[<span class=\"hljs-number\">20</span>];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++) {\n        sig[i] = (h0 &gt;&gt; (<span class=\"hljs-number\">24</span> - <span class=\"hljs-number\">8</span> * i)) &amp; <span class=\"hljs-number\">0xFF</span>;\n        sig[i + <span class=\"hljs-number\">4</span>] = (h1 &gt;&gt; (<span class=\"hljs-number\">24</span> - <span class=\"hljs-number\">8</span> * i)) &amp; <span class=\"hljs-number\">0xFF</span>;\n        sig[i + <span class=\"hljs-number\">8</span>] = (h2 &gt;&gt; (<span class=\"hljs-number\">24</span> - <span class=\"hljs-number\">8</span> * i)) &amp; <span class=\"hljs-number\">0xFF</span>;\n        sig[i + <span class=\"hljs-number\">12</span>] = (h3 &gt;&gt; (<span class=\"hljs-number\">24</span> - <span class=\"hljs-number\">8</span> * i)) &amp; <span class=\"hljs-number\">0xFF</span>;\n        sig[i + <span class=\"hljs-number\">16</span>] = (h4 &gt;&gt; (<span class=\"hljs-number\">24</span> - <span class=\"hljs-number\">8</span> * i)) &amp; <span class=\"hljs-number\">0xFF</span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> sig;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Converts the string to bytestring and calls the main algorithm\n * @param message Plain character message to hash\n * @return void* Pointer to the SHA-1 signature\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span>* <span class=\"hljs-title\">hash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::string&amp; message)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">hash_bs</span>(&amp;message[<span class=\"hljs-number\">0</span>], message.<span class=\"hljs-built_in\">size</span>());\n}\n}  <span class=\"hljs-comment\">// namespace sha1</span>\n}  <span class=\"hljs-comment\">// namespace hashing</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations of well-known SHA-1 hashes\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Hashes empty string and stores signature</span>\n    <span class=\"hljs-type\">void</span>* sig = hashing::sha1::<span class=\"hljs-built_in\">hash</span>(<span class=\"hljs-string\">&quot;&quot;</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Hashing empty string&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// Prints signature hex representation</span>\n    std::cout &lt;&lt; hashing::sha1::<span class=\"hljs-built_in\">sig2hex</span>(sig) &lt;&lt; std::endl &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// Test with cassert wether sig is correct from expected value</span>\n    <span class=\"hljs-built_in\">assert</span>(hashing::sha1::<span class=\"hljs-built_in\">sig2hex</span>(sig).<span class=\"hljs-built_in\">compare</span>(\n               <span class=\"hljs-string\">&quot;da39a3ee5e6b4b0d3255bfef95601890afd80709&quot;</span>) == <span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-comment\">// Hashes &quot;The quick brown fox jumps over the lazy dog&quot; and stores signature</span>\n    <span class=\"hljs-type\">void</span>* sig2 =\n        hashing::sha1::<span class=\"hljs-built_in\">hash</span>(<span class=\"hljs-string\">&quot;The quick brown fox jumps over the lazy dog&quot;</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Hashing The quick brown fox jumps over the lazy dog&quot;</span>\n              &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// Prints signature hex representation</span>\n    std::cout &lt;&lt; hashing::sha1::<span class=\"hljs-built_in\">sig2hex</span>(sig2) &lt;&lt; std::endl &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// Test with cassert wether sig is correct from expected value</span>\n    <span class=\"hljs-built_in\">assert</span>(hashing::sha1::<span class=\"hljs-built_in\">sig2hex</span>(sig2).<span class=\"hljs-built_in\">compare</span>(\n               <span class=\"hljs-string\">&quot;2fd4e1c67a2d28fced849ee1bb76e7391b93eb12&quot;</span>) == <span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-comment\">// Hashes &quot;The quick brown fox jumps over the lazy dog.&quot; (notice the</span>\n    <span class=\"hljs-comment\">// additional period) and stores signature</span>\n    <span class=\"hljs-type\">void</span>* sig3 =\n        hashing::sha1::<span class=\"hljs-built_in\">hash</span>(<span class=\"hljs-string\">&quot;The quick brown fox jumps over the lazy dog.&quot;</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Hashing &quot;</span>\n                 <span class=\"hljs-string\">&quot;The quick brown fox jumps over the lazy dog.&quot;</span>\n              &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// Prints signature hex representation</span>\n    std::cout &lt;&lt; hashing::sha1::<span class=\"hljs-built_in\">sig2hex</span>(sig3) &lt;&lt; std::endl &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// Test with cassert wether sig is correct from expected value</span>\n    <span class=\"hljs-built_in\">assert</span>(hashing::sha1::<span class=\"hljs-built_in\">sig2hex</span>(sig3).<span class=\"hljs-built_in\">compare</span>(\n               <span class=\"hljs-string\">&quot;408d94384216f890ff7a0c3528e8bed1e0b01621&quot;</span>) == <span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-comment\">// Hashes &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>\n    <span class=\"hljs-comment\">// and stores signature</span>\n    <span class=\"hljs-type\">void</span>* sig4 = hashing::sha1::<span class=\"hljs-built_in\">hash</span>(\n        <span class=\"hljs-string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>);\n    std::cout\n        &lt;&lt; <span class=\"hljs-string\">&quot;Hashing &quot;</span>\n           <span class=\"hljs-string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>\n        &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// Prints signature hex representation</span>\n    std::cout &lt;&lt; hashing::sha1::<span class=\"hljs-built_in\">sig2hex</span>(sig4) &lt;&lt; std::endl &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// Test with cassert wether sig is correct from expected value</span>\n    <span class=\"hljs-built_in\">assert</span>(hashing::sha1::<span class=\"hljs-built_in\">sig2hex</span>(sig4).<span class=\"hljs-built_in\">compare</span>(\n               <span class=\"hljs-string\">&quot;761c457bf73b14d27e9e9265c46f4b4dda11f940&quot;</span>) == <span class=\"hljs-number\">0</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Puts user in a loop where inputs can be given and SHA-1 hash will be\n * computed and printed\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">interactive</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n        std::string input;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter a message to be hashed (Ctrl-C to exit): &quot;</span>\n                  &lt;&lt; std::endl;\n        std::<span class=\"hljs-built_in\">getline</span>(std::cin, input);\n        <span class=\"hljs-type\">void</span>* sig = hashing::sha1::<span class=\"hljs-built_in\">hash</span>(input);\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Hash is: &quot;</span> &lt;&lt; hashing::sha1::<span class=\"hljs-built_in\">sig2hex</span>(sig) &lt;&lt; std::endl;\n\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Want to enter another message? (y/n) &quot;</span>;\n            std::<span class=\"hljs-built_in\">getline</span>(std::cin, input);\n            <span class=\"hljs-keyword\">if</span> (input.<span class=\"hljs-built_in\">compare</span>(<span class=\"hljs-string\">&quot;y&quot;</span>) == <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-keyword\">break</span>;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (input.<span class=\"hljs-built_in\">compare</span>(<span class=\"hljs-string\">&quot;n&quot;</span>) == <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-keyword\">return</span>;\n            }\n        }\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n\n    <span class=\"hljs-comment\">// Launch interactive mode where user can input messages and see</span>\n    <span class=\"hljs-comment\">// their hash</span>\n    <span class=\"hljs-built_in\">interactive</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "aarch64_assembly": {
      "dir": "misc/sha1.s",
      "url": "https://github.com/TheAlgorithms/aarch64_assembly/tree/master/misc/sha1.s",
      "code": "<span class=\"hljs-comment\">/* ARM assembly AARCH64 Raspberry PI 3B */</span>\n<span class=\"hljs-comment\">/*  program sha1_64.s   */</span>\n \n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* Constantes file                         */</span>\n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly*/</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeConstantesARM64.inc&quot;</span>\n \n<span class=\"hljs-symbol\">.equ</span> SHA_DIGEST_LENGTH, <span class=\"hljs-number\">20</span>\n \n<span class=\"hljs-comment\">//.include &quot;../../ficmacros64.s&quot;</span>\n \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* Initialized data              */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.data</span>\n<span class=\"hljs-symbol\">szMessRosetta:</span>         <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Rosetta Code&quot;</span>\n<span class=\"hljs-symbol\">szMessTest1:</span>           <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;abc&quot;</span> \n<span class=\"hljs-symbol\">szMessSup64:</span>           <span class=\"hljs-meta\">.ascii</span> <span class=\"hljs-string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>\n                       <span class=\"hljs-meta\">.ascii</span> <span class=\"hljs-string\">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>\n                       <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;1234567890AZERTYUIOP&quot;</span>\n<span class=\"hljs-symbol\">szMessTest2:</span>           <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq&quot;</span>\n<span class=\"hljs-symbol\">szMessFinPgm:</span>          <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Program End ok.\\n&quot;</span>\n<span class=\"hljs-symbol\">szMessResult:</span>          <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Rosetta Code =&gt; &quot;</span>\n<span class=\"hljs-symbol\">szCarriageReturn:</span>      <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;\\n&quot;</span>\n \n<span class=\"hljs-comment\">/* array constantes Hi */</span>\n<span class=\"hljs-symbol\">tbConstHi:</span>           .int <span class=\"hljs-number\">0x67452301</span>       <span class=\"hljs-comment\">// H0</span>\n                     .int <span class=\"hljs-number\">0xEFCDAB89</span>       <span class=\"hljs-comment\">// H1</span>\n                     .int <span class=\"hljs-number\">0x98BADCFE</span>       <span class=\"hljs-comment\">// H2</span>\n                     .int <span class=\"hljs-number\">0x10325476</span>       <span class=\"hljs-comment\">// H3</span>\n                     .int <span class=\"hljs-number\">0xC3D2E1F0</span>       <span class=\"hljs-comment\">// H4</span>\n<span class=\"hljs-comment\">/* array constantes Kt */</span>\n<span class=\"hljs-symbol\">tbConstKt:</span>           .int <span class=\"hljs-number\">0x5A827999</span>\n                     .int <span class=\"hljs-number\">0x6ED9EBA1</span>\n                     .int <span class=\"hljs-number\">0x8F1BBCDC</span>\n                     .int <span class=\"hljs-number\">0xCA62C1D6</span>\n \n \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* UnInitialized data            */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.bss</span>\n<span class=\"hljs-symbol\">.align</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-symbol\">iNbBlocs:</span>                    <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">8</span>\n<span class=\"hljs-symbol\">sZoneConv:</span>                   <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">24</span>\n<span class=\"hljs-symbol\">sZoneResult:</span>                 <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">24</span>\n<span class=\"hljs-symbol\">sZoneTrav:</span>                   <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">1000</span>\n<span class=\"hljs-symbol\">tbH:</span>                         <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">4</span> * <span class=\"hljs-number\">5</span>         <span class=\"hljs-comment\">// 5 variables H</span>\n<span class=\"hljs-symbol\">tbW:</span>                         <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">4</span> * <span class=\"hljs-number\">80</span>        <span class=\"hljs-comment\">// 80 words W</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/*  code section                 */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.text</span>\n<span class=\"hljs-symbol\">.global</span> main \n<span class=\"hljs-symbol\">main:</span>                                      <span class=\"hljs-comment\">// entry of program </span>\n \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessRosetta\n    <span class=\"hljs-comment\">//ldr x0,qAdrszMessTest1</span>\n    <span class=\"hljs-comment\">//ldr x0,qAdrszMessTest2</span>\n    <span class=\"hljs-comment\">//ldr x0,qAdrszMessSup64</span>\n    <span class=\"hljs-keyword\">bl</span> computeSHA1                         <span class=\"hljs-comment\">// call routine SHA1</span>\n \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessResult\n    <span class=\"hljs-keyword\">bl</span> affichageMess                       <span class=\"hljs-comment\">// display message</span>\n \n    <span class=\"hljs-keyword\">ldr</span> x0, qAdrsZoneResult\n    <span class=\"hljs-keyword\">bl</span> displaySHA1\n \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessFinPgm\n    <span class=\"hljs-keyword\">bl</span> affichageMess                       <span class=\"hljs-comment\">// display message</span>\n \n \n<span class=\"hljs-number\">100</span>:                                       <span class=\"hljs-comment\">// standard end of the program </span>\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                               <span class=\"hljs-comment\">// return code</span>\n    <span class=\"hljs-keyword\">mov</span> x8,EXIT                            <span class=\"hljs-comment\">// request to exit program</span>\n    <span class=\"hljs-keyword\">svc</span> <span class=\"hljs-number\">0</span>                                  <span class=\"hljs-comment\">// perform the system call</span>\n \n<span class=\"hljs-symbol\">qAdrszCarriageReturn:</span>     .quad szCarriageReturn\n<span class=\"hljs-symbol\">qAdrszMessResult:</span>         .quad szMessResult\n<span class=\"hljs-symbol\">qAdrszMessRosetta:</span>        .quad szMessRosetta\n<span class=\"hljs-symbol\">qAdrszMessTest1:</span>          .quad szMessTest1\n<span class=\"hljs-symbol\">qAdrszMessTest2:</span>          .quad szMessTest2\n<span class=\"hljs-symbol\">qAdrsZoneTrav:</span>            .quad sZoneTrav\n<span class=\"hljs-symbol\">qAdrsZoneConv:</span>            .quad sZoneConv\n<span class=\"hljs-symbol\">qAdrszMessFinPgm:</span>         .quad szMessFinPgm\n<span class=\"hljs-symbol\">qAdrszMessSup64:</span>          .quad szMessSup64\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*     compute SHA1                         */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of the message */</span>\n<span class=\"hljs-symbol\">computeSHA1:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!       <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneTrav\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">#0</span>                <span class=\"hljs-comment\">// counter length </span>\n<span class=\"hljs-symbol\">debCopy:</span>                     <span class=\"hljs-comment\">// copy string in work area</span>\n    <span class=\"hljs-keyword\">ldrb</span> w3,[x0,x2]\n    <span class=\"hljs-keyword\">strb</span> w3,[x1,x2]\n    <span class=\"hljs-keyword\">cmp</span> x3,<span class=\"hljs-number\">#0</span>\n    <span class=\"hljs-keyword\">add</span> x4,x2,<span class=\"hljs-number\">1</span>\n    csel x2,x4,x2,ne\n    <span class=\"hljs-keyword\">bne</span> debCopy\n    <span class=\"hljs-keyword\">lsl</span> x6,x2,<span class=\"hljs-number\">#3</span>             <span class=\"hljs-comment\">// initial message length in bits </span>\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">#0b10000000</span>       <span class=\"hljs-comment\">// add bit 1 at end of string</span>\n    <span class=\"hljs-keyword\">strb</span> w3,[x1,x2]\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">#1</span>             <span class=\"hljs-comment\">// length in bytes</span>\n    <span class=\"hljs-keyword\">lsl</span> x4,x2,<span class=\"hljs-number\">#3</span>             <span class=\"hljs-comment\">// length in bits</span>\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">#0</span>\n<span class=\"hljs-symbol\">addZeroes:</span>\n    <span class=\"hljs-keyword\">lsr</span> x5,x2,<span class=\"hljs-number\">#6</span>\n    <span class=\"hljs-keyword\">lsl</span> x5,x5,<span class=\"hljs-number\">#6</span>\n    <span class=\"hljs-keyword\">sub</span> x5,x2,x5\n    <span class=\"hljs-keyword\">cmp</span> x5,<span class=\"hljs-number\">#56</span>\n    <span class=\"hljs-keyword\">beq</span> storeLength          <span class=\"hljs-comment\">// yes -&gt; end add</span>\n    <span class=\"hljs-keyword\">strb</span> w3,[x1,x2]          <span class=\"hljs-comment\">// add zero at message end</span>\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">#1</span>                <span class=\"hljs-comment\">// increment lenght bytes </span>\n    <span class=\"hljs-keyword\">add</span> x4,x4,<span class=\"hljs-number\">#8</span>                <span class=\"hljs-comment\">// increment length in bits</span>\n    <span class=\"hljs-keyword\">b</span> addZeroes\n<span class=\"hljs-symbol\">storeLength:</span>\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">#4</span>                <span class=\"hljs-comment\">// add four bytes</span>\n    <span class=\"hljs-keyword\">rev</span> w6,w6                <span class=\"hljs-comment\">// inversion bits initials message length</span>\n    <span class=\"hljs-keyword\">str</span> w6,[x1,x2]           <span class=\"hljs-comment\">// and store at end</span>\n \n    <span class=\"hljs-keyword\">ldr</span> x7,qAdrtbConstHi     <span class=\"hljs-comment\">// constantes H address</span>\n    <span class=\"hljs-keyword\">ldr</span> x4,qAdrtbH           <span class=\"hljs-comment\">// start area H</span>\n    <span class=\"hljs-keyword\">mov</span> x5,<span class=\"hljs-number\">#0</span>\n<span class=\"hljs-symbol\">loopConst:</span>                   <span class=\"hljs-comment\">// init array H with start constantes</span>\n    <span class=\"hljs-keyword\">ldr</span> w6,[x7,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]    <span class=\"hljs-comment\">// load constante</span>\n    <span class=\"hljs-keyword\">str</span> w6,[x4,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]    <span class=\"hljs-comment\">// and store</span>\n    <span class=\"hljs-keyword\">add</span> x5,x5,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">cmp</span> x5,<span class=\"hljs-number\">#5</span>\n    <span class=\"hljs-keyword\">blt</span> loopConst\n                             <span class=\"hljs-comment\">// split into block of 64 bytes</span>\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">#4</span>                <span class=\"hljs-comment\">//  TODO : à revoir</span>\n    <span class=\"hljs-keyword\">lsr</span> x4,x2,<span class=\"hljs-number\">#6</span>             <span class=\"hljs-comment\">// blocks number</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdriNbBlocs\n    <span class=\"hljs-keyword\">str</span> x4,[x0]              <span class=\"hljs-comment\">// save block maxi</span>\n    <span class=\"hljs-keyword\">mov</span> x7,<span class=\"hljs-number\">#0</span>                <span class=\"hljs-comment\">// n° de block et x1 contient l&#x27;adresse zone de travail</span>\n<span class=\"hljs-symbol\">loopBlock:</span>                   <span class=\"hljs-comment\">// begin loop of each block of 64 bytes</span>\n    <span class=\"hljs-keyword\">mov</span> x0,x7\n    <span class=\"hljs-keyword\">bl</span> inversion             <span class=\"hljs-comment\">// inversion each word because little indian</span>\n    <span class=\"hljs-keyword\">ldr</span> x3,qAdrtbW           <span class=\"hljs-comment\">// working area W address</span>\n    <span class=\"hljs-keyword\">mov</span> x6,<span class=\"hljs-number\">#0</span>                <span class=\"hljs-comment\">// indice t</span>\n                             <span class=\"hljs-comment\">/* x2  address begin each block */</span>\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneTrav\n    <span class=\"hljs-keyword\">add</span> x2,x1,x7,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#6</span>      <span class=\"hljs-comment\">//  compute block begin  indice * 4 * 16</span>\n \n<span class=\"hljs-symbol\">loopPrep:</span>                    <span class=\"hljs-comment\">// loop for expand 80 words</span>\n    <span class=\"hljs-keyword\">cmp</span> x6,<span class=\"hljs-number\">#15</span>               <span class=\"hljs-comment\">// </span>\n    <span class=\"hljs-keyword\">bgt</span> expand1\n    <span class=\"hljs-keyword\">ldr</span> w0,[x2,x6,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]    <span class=\"hljs-comment\">// load four byte message</span>\n    <span class=\"hljs-keyword\">str</span> w0,[x3,x6,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]    <span class=\"hljs-comment\">// store in first 16 block </span>\n    <span class=\"hljs-keyword\">b</span> expandEnd\n<span class=\"hljs-symbol\">expand1:</span>\n    <span class=\"hljs-keyword\">sub</span> x8,x6,<span class=\"hljs-number\">#3</span>\n    <span class=\"hljs-keyword\">ldr</span> w9,[x3,x8,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]\n    <span class=\"hljs-keyword\">sub</span> x8,x6,<span class=\"hljs-number\">#8</span>\n    <span class=\"hljs-keyword\">ldr</span> w10,[x3,x8,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]\n    <span class=\"hljs-keyword\">eor</span> x9,x9,x10\n    <span class=\"hljs-keyword\">sub</span> x8,x6,<span class=\"hljs-number\">#14</span>\n    <span class=\"hljs-keyword\">ldr</span> w10,[x3,x8,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]\n    <span class=\"hljs-keyword\">eor</span> x9,x9,x10\n    <span class=\"hljs-keyword\">sub</span> x8,x6,<span class=\"hljs-number\">#16</span>\n    <span class=\"hljs-keyword\">ldr</span> w10,[x3,x8,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]\n    <span class=\"hljs-keyword\">eor</span> x9,x9,x10\n    <span class=\"hljs-keyword\">ror</span> w9,w9,<span class=\"hljs-number\">#31</span>\n \n    <span class=\"hljs-keyword\">str</span> w9,[x3,x6,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>] \n<span class=\"hljs-symbol\">expandEnd:</span>\n    <span class=\"hljs-keyword\">add</span> x6,x6,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">cmp</span> x6,<span class=\"hljs-number\">#80</span>                 <span class=\"hljs-comment\">// 80 words ?</span>\n    <span class=\"hljs-keyword\">blt</span> loopPrep               <span class=\"hljs-comment\">// and loop</span>\n    <span class=\"hljs-comment\">/* COMPUTING THE MESSAGE DIGEST */</span>\n    <span class=\"hljs-comment\">/* x1  area H constantes address */</span>\n    <span class=\"hljs-comment\">/* x3  working area W address  */</span>\n    <span class=\"hljs-comment\">/* x5  address constantes K   */</span>\n    <span class=\"hljs-comment\">/* x6  counter t */</span>\n    <span class=\"hljs-comment\">/* x7  block counter */</span>\n    <span class=\"hljs-comment\">/* x8  a, x9 b, x10 c, x11 d, x12 e */</span>\n \n                               <span class=\"hljs-comment\">// init variable a b c d e</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrtbH\n    <span class=\"hljs-keyword\">ldr</span> w8,[x0]\n    <span class=\"hljs-keyword\">ldr</span> w9,[x0,<span class=\"hljs-number\">#4</span>]\n    <span class=\"hljs-keyword\">ldr</span> w10,[x0,<span class=\"hljs-number\">#8</span>]\n    <span class=\"hljs-keyword\">ldr</span> w11,[x0,<span class=\"hljs-number\">#12</span>]\n    <span class=\"hljs-keyword\">ldr</span> w12,[x0,<span class=\"hljs-number\">#16</span>]\n \n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrtbConstHi\n    <span class=\"hljs-keyword\">ldr</span> x5,qAdrtbConstKt\n    <span class=\"hljs-keyword\">mov</span> x6,<span class=\"hljs-number\">#0</span>\n<span class=\"hljs-symbol\">loop80T:</span>                       <span class=\"hljs-comment\">// begin loop 80 t</span>\n    <span class=\"hljs-keyword\">cmp</span> x6,<span class=\"hljs-number\">#19</span>\n    <span class=\"hljs-keyword\">bgt</span> T2\n    <span class=\"hljs-keyword\">ldr</span> w0,[x5]                <span class=\"hljs-comment\">// load constantes k0</span>\n    <span class=\"hljs-keyword\">and</span> x2,x9,x10              <span class=\"hljs-comment\">// b and c</span>\n    <span class=\"hljs-keyword\">mvn</span> w4,w9                  <span class=\"hljs-comment\">// not b</span>\n    <span class=\"hljs-keyword\">and</span> x4,x4,x11              <span class=\"hljs-comment\">// and d</span>\n    <span class=\"hljs-keyword\">orr</span> x2,x2,x4\n    <span class=\"hljs-keyword\">b</span> T_fin\n<span class=\"hljs-symbol\">T2:</span>\n    <span class=\"hljs-keyword\">cmp</span> x6,<span class=\"hljs-number\">#39</span>             \n    <span class=\"hljs-keyword\">bgt</span> T3\n    <span class=\"hljs-keyword\">ldr</span> w0,[x5,<span class=\"hljs-number\">#4</span>]             <span class=\"hljs-comment\">// load constantes k1</span>\n    <span class=\"hljs-keyword\">eor</span> x2,x9,x10\n    <span class=\"hljs-keyword\">eor</span> x2,x2,x11\n    <span class=\"hljs-keyword\">b</span> T_fin\n<span class=\"hljs-symbol\">T3:</span>\n    <span class=\"hljs-keyword\">cmp</span> x6,<span class=\"hljs-number\">#59</span>             \n    <span class=\"hljs-keyword\">bgt</span> T4\n    <span class=\"hljs-keyword\">ldr</span> w0,[x5,<span class=\"hljs-number\">#8</span>]             <span class=\"hljs-comment\">// load constantes k2</span>\n    <span class=\"hljs-keyword\">and</span> x2,x9,x10\n    <span class=\"hljs-keyword\">and</span> x4,x9,x11\n    <span class=\"hljs-keyword\">orr</span> x2,x2,x4\n    <span class=\"hljs-keyword\">and</span> x4,x10,x11\n    <span class=\"hljs-keyword\">orr</span> x2,x2,x4\n    <span class=\"hljs-keyword\">b</span> T_fin\n<span class=\"hljs-symbol\">T4:</span>\n    <span class=\"hljs-keyword\">ldr</span> w0,[x5,<span class=\"hljs-number\">#12</span>]            <span class=\"hljs-comment\">// load constantes k3</span>\n    <span class=\"hljs-keyword\">eor</span> x2,x9,x10\n    <span class=\"hljs-keyword\">eor</span> x2,x2,x11\n    <span class=\"hljs-keyword\">b</span> T_fin\n<span class=\"hljs-symbol\">T_fin:</span>\n    <span class=\"hljs-keyword\">ror</span> w4,w8,<span class=\"hljs-number\">#27</span>            <span class=\"hljs-comment\">// left rotate a to 5</span>\n    <span class=\"hljs-keyword\">add</span> w2,w2,w4\n    <span class=\"hljs-comment\">//affregtit Tfin 0</span>\n    <span class=\"hljs-comment\">//affregtit Tfin 8</span>\n    <span class=\"hljs-keyword\">add</span> w2,w2,w12\n    <span class=\"hljs-keyword\">ldr</span> w4,[x3,x6,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]    <span class=\"hljs-comment\">// Wt</span>\n    <span class=\"hljs-keyword\">add</span> w2,w2,w4\n    <span class=\"hljs-keyword\">add</span> w2,w2,w0                <span class=\"hljs-comment\">// Kt</span>\n    <span class=\"hljs-keyword\">mov</span> x12,x11              <span class=\"hljs-comment\">// e = d</span>\n    <span class=\"hljs-keyword\">mov</span> x11,x10              <span class=\"hljs-comment\">// d = c</span>\n    <span class=\"hljs-keyword\">ror</span> w10,w9,<span class=\"hljs-number\">#2</span>            <span class=\"hljs-comment\">// c</span>\n    <span class=\"hljs-keyword\">mov</span> x9,x8                <span class=\"hljs-comment\">// b = a</span>\n    <span class=\"hljs-keyword\">mov</span> x8,x2                <span class=\"hljs-comment\">// nouveau a</span>\n \n    <span class=\"hljs-keyword\">add</span> x6,x6,<span class=\"hljs-number\">#1</span>             <span class=\"hljs-comment\">// increment t</span>\n    <span class=\"hljs-keyword\">cmp</span> x6,<span class=\"hljs-number\">#80</span>\n    <span class=\"hljs-keyword\">blt</span> loop80T\n                             <span class=\"hljs-comment\">// other bloc</span>\n    <span class=\"hljs-keyword\">add</span> x7,x7,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// increment block</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdriNbBlocs\n    <span class=\"hljs-keyword\">ldr</span> w4,[x0]              <span class=\"hljs-comment\">// restaur maxi block</span>\n    <span class=\"hljs-keyword\">cmp</span> x7,x4                <span class=\"hljs-comment\">// maxi ?</span>\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-meta\">End</span>\n                             <span class=\"hljs-comment\">// End block</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrtbH           <span class=\"hljs-comment\">// start area H</span>\n    <span class=\"hljs-keyword\">ldr</span> w3,[x0]\n    <span class=\"hljs-keyword\">add</span> w3,w3,w8\n    <span class=\"hljs-keyword\">str</span> w3,[x0]              <span class=\"hljs-comment\">// store a in H0</span>\n    <span class=\"hljs-keyword\">ldr</span> w3,[x0,<span class=\"hljs-number\">#4</span>]\n    <span class=\"hljs-keyword\">add</span> w3,w3,w9\n    <span class=\"hljs-keyword\">str</span> w3,[x0,<span class=\"hljs-number\">#4</span>]           <span class=\"hljs-comment\">// store b in H1</span>\n    <span class=\"hljs-keyword\">ldr</span> w3,[x0,<span class=\"hljs-number\">#8</span>]\n    <span class=\"hljs-keyword\">add</span> w3,w3,w10\n    <span class=\"hljs-keyword\">str</span> w3,[x0,<span class=\"hljs-number\">#8</span>]           <span class=\"hljs-comment\">// store c in H2</span>\n    <span class=\"hljs-keyword\">ldr</span> w3,[x0,<span class=\"hljs-number\">#12</span>]\n    <span class=\"hljs-keyword\">add</span> w3,w3,w11\n    <span class=\"hljs-keyword\">str</span> w3,[x0,<span class=\"hljs-number\">#12</span>]          <span class=\"hljs-comment\">// store d in H3</span>\n    <span class=\"hljs-keyword\">ldr</span> w3,[x0,<span class=\"hljs-number\">#16</span>]\n    <span class=\"hljs-keyword\">add</span> w3,w3,w12\n    <span class=\"hljs-keyword\">str</span> w3,[x0,<span class=\"hljs-number\">#16</span>]          <span class=\"hljs-comment\">// store e in H4</span>\n    <span class=\"hljs-keyword\">b</span> loopBlock              <span class=\"hljs-comment\">//  loop</span>\n \n<span class=\"hljs-symbol\">End:</span>\n                             <span class=\"hljs-comment\">// compute final result</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrtbH           <span class=\"hljs-comment\">// start area H</span>\n    <span class=\"hljs-keyword\">ldr</span> x2,qAdrsZoneResult\n    <span class=\"hljs-keyword\">ldr</span> w1,[x0]\n    <span class=\"hljs-keyword\">add</span> x1,x1,x8\n    <span class=\"hljs-keyword\">rev</span> w1,w1\n    <span class=\"hljs-keyword\">str</span> w1,[x2]\n    <span class=\"hljs-keyword\">ldr</span> w1,[x0,<span class=\"hljs-number\">#4</span>]\n    <span class=\"hljs-keyword\">add</span> x1,x1,x9\n    <span class=\"hljs-keyword\">rev</span> w1,w1\n    <span class=\"hljs-keyword\">str</span> w1,[x2,<span class=\"hljs-number\">#4</span>]\n    <span class=\"hljs-keyword\">ldr</span> w1,[x0,<span class=\"hljs-number\">#8</span>]\n    <span class=\"hljs-keyword\">add</span> x1,x1,x10\n    <span class=\"hljs-keyword\">rev</span> w1,w1\n    <span class=\"hljs-keyword\">str</span> w1,[x2,<span class=\"hljs-number\">#8</span>]\n    <span class=\"hljs-keyword\">ldr</span> w1,[x0,<span class=\"hljs-number\">#12</span>]\n    <span class=\"hljs-keyword\">add</span> x1,x1,x11\n    <span class=\"hljs-keyword\">rev</span> w1,w1\n    <span class=\"hljs-keyword\">str</span> w1,[x2,<span class=\"hljs-number\">#12</span>]\n    <span class=\"hljs-keyword\">ldr</span> w1,[x0,<span class=\"hljs-number\">#16</span>]\n    <span class=\"hljs-keyword\">add</span> x1,x1,x12\n    <span class=\"hljs-keyword\">rev</span> w1,w1\n    <span class=\"hljs-keyword\">str</span> w1,[x2,<span class=\"hljs-number\">#16</span>]\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#0</span>                    <span class=\"hljs-comment\">// routine OK</span>\n<span class=\"hljs-number\">100</span>:\n \n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-symbol\">qAdrtbConstHi:</span>            .quad tbConstHi\n<span class=\"hljs-symbol\">qAdrtbConstKt:</span>            .quad tbConstKt\n<span class=\"hljs-symbol\">qAdrtbH:</span>                  .quad <span class=\"hljs-keyword\">tbH</span>\n<span class=\"hljs-symbol\">qAdrtbW:</span>                  .quad tbW\n<span class=\"hljs-symbol\">qAdrsZoneResult:</span>          .quad sZoneResult\n<span class=\"hljs-symbol\">qAdriNbBlocs:</span>             .quad iNbBlocs\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*     inversion des mots de 32 bits d&#x27;un bloc                    */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains N° block   */</span>\n<span class=\"hljs-symbol\">inversion:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!          <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!          <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneTrav\n    <span class=\"hljs-keyword\">add</span> x1,x1,x0,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">6</span>           <span class=\"hljs-comment\">// debut du bloc</span>\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">#0</span>\n<span class=\"hljs-number\">1</span>:                               <span class=\"hljs-comment\">// start loop</span>\n    <span class=\"hljs-keyword\">ldr</span> w3,[x1,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]\n    <span class=\"hljs-keyword\">rev</span> w3,w3\n    <span class=\"hljs-keyword\">str</span> w3,[x1,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">cmp</span> x2,<span class=\"hljs-number\">#16</span>\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">1</span>b\n<span class=\"hljs-number\">100</span>:\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>            <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>            <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                          <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*     display hash  SHA1                         */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of hash  */</span>\n<span class=\"hljs-symbol\">displaySHA1:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!       <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!       <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x3,x0\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">#0</span>\n<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">ldr</span> w0,[x3,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]          <span class=\"hljs-comment\">// load 4 bytes</span>\n    <span class=\"hljs-keyword\">rev</span> w0,w0                      <span class=\"hljs-comment\">// reverse bytes</span>\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\n    <span class=\"hljs-keyword\">bl</span> conversion16_4W                <span class=\"hljs-comment\">// conversion hexa</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrsZoneConv\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">cmp</span> x2,<span class=\"hljs-symbol\">#SHA_DIGEST_LENGTH</span> / <span class=\"hljs-number\">4</span>\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">1</span>b                         <span class=\"hljs-comment\">// and loop</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszCarriageReturn\n    <span class=\"hljs-keyword\">bl</span> affichageMess               <span class=\"hljs-comment\">// display message</span>\n<span class=\"hljs-number\">100</span>:\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*     conversion  hexadecimal register 32 bits                   */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains value and x1 address zone receptrice   */</span>\n<span class=\"hljs-symbol\">conversion16_4W:</span>\n    stp x0,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">48</span>]!        <span class=\"hljs-comment\">// save  registres</span>\n    stp x1,x2,[<span class=\"hljs-built_in\">sp</span>,<span class=\"hljs-number\">32</span>]          <span class=\"hljs-comment\">// save  registres</span>\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,<span class=\"hljs-number\">16</span>]          <span class=\"hljs-comment\">// save  registres</span>\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">#28</span>                 <span class=\"hljs-comment\">// start bit position</span>\n    <span class=\"hljs-keyword\">mov</span> x4,<span class=\"hljs-number\">#0xF0000000</span>         <span class=\"hljs-comment\">// mask</span>\n    <span class=\"hljs-keyword\">mov</span> x3,x0                  <span class=\"hljs-comment\">// save entry value</span>\n<span class=\"hljs-number\">1</span>:                             <span class=\"hljs-comment\">// start loop</span>\n    <span class=\"hljs-keyword\">and</span> x0,x3,x4               <span class=\"hljs-comment\">// value register and mask</span>\n    <span class=\"hljs-keyword\">lsr</span> x0,x0,x2               <span class=\"hljs-comment\">// right shift</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">#10</span>                 <span class=\"hljs-comment\">// &gt;= 10 ?</span>\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">2</span>f                     <span class=\"hljs-comment\">// yes</span>\n    <span class=\"hljs-keyword\">add</span> x0,x0,<span class=\"hljs-number\">#48</span>              <span class=\"hljs-comment\">// no is digit</span>\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">3</span>f\n<span class=\"hljs-number\">2</span>:\n    <span class=\"hljs-keyword\">add</span> x0,x0,<span class=\"hljs-number\">#55</span>              <span class=\"hljs-comment\">// else is a letter A-F</span>\n<span class=\"hljs-number\">3</span>:\n    <span class=\"hljs-keyword\">strb</span> w0,[x1],<span class=\"hljs-number\">#1</span>            <span class=\"hljs-comment\">// load result  and + 1 in address</span>\n    <span class=\"hljs-keyword\">lsr</span> x4,x4,<span class=\"hljs-number\">#4</span>               <span class=\"hljs-comment\">// shift mask 4 bits left</span>\n    <span class=\"hljs-keyword\">subs</span> x2,x2,<span class=\"hljs-number\">#4</span>              <span class=\"hljs-comment\">// decrement counter 4 bits &lt;= zero  ?</span>\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">1</span>b                     <span class=\"hljs-comment\">// no -&gt; loop</span>\n \n<span class=\"hljs-number\">100</span>:                           <span class=\"hljs-comment\">// fin standard de la fonction</span>\n    ldp x3,x4,[<span class=\"hljs-built_in\">sp</span>,<span class=\"hljs-number\">16</span>]          <span class=\"hljs-comment\">// restaur des  2 registres</span>\n    ldp x1,x2,[<span class=\"hljs-built_in\">sp</span>,<span class=\"hljs-number\">32</span>]          <span class=\"hljs-comment\">// restaur des  2 registres</span>\n    ldp x0,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">48</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\n    ret    \n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/*        File Include fonctions                        */</span>\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeARM64.inc&quot;</span>\n"
    }
  },
  "contributors": [
    {
      "name": "QuantumNovice",
      "email": "43876848+QuantumNovice@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Keshav Bohra",
      "email": "keshav2016@gmail.com",
      "commits": 1
    },
    {
      "name": "Ravi Patel",
      "email": "ravi.patel1245@gmail.com",
      "commits": 1
    },
    {
      "name": "tGautot",
      "email": "44877251+tGautot@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "bum_fuzzle",
      "email": "72404701+bumfuzzle33@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "CapofWeird",
      "email": "40702379+CapofWeird@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Mickaël Schoentgen",
      "email": "contact@tiger-222.fr",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    },
    {
      "name": "piyush-kgp",
      "email": "piyushsinghkgpian@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}