{
  "slug": "sha-256",
  "name": "Sha 256",
  "categories": [
    "hashing"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "hashes/sha256.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/hashes/sha256.py",
      "code": "<span class=\"hljs-comment\"># Author: M. Yathurshan</span>\r\n<span class=\"hljs-comment\"># Black Formatter: True</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\nImplementation of SHA256 Hash function in a Python class and provides utilities\r\nto find hash of string or hash of text from a file.\r\n\r\nUsage: python sha256.py --string &quot;Hello World!!&quot;\r\n       python sha256.py --file &quot;hello_world.txt&quot;\r\n       When run without any arguments,\r\n       it prints the hash of the string &quot;Hello World!! Welcome to Cryptography&quot;\r\n\r\nReferences:\r\nhttps://qvault.io/cryptography/how-sha-2-works-step-by-step-sha-256/\r\nhttps://en.wikipedia.org/wiki/SHA-2\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> argparse\r\n<span class=\"hljs-keyword\">import</span> struct\r\n<span class=\"hljs-keyword\">import</span> unittest\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SHA256</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Class to contain the entire pipeline for SHA1 Hashing Algorithm\r\n\r\n    &gt;&gt;&gt; SHA256(b&#x27;Python&#x27;).hash\r\n    &#x27;18885f27b5af9012df19e496460f9294d5ab76128824c6f993787004f6d9a7db&#x27;\r\n\r\n    &gt;&gt;&gt; SHA256(b&#x27;hello world&#x27;).hash\r\n    &#x27;b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9&#x27;\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-built_in\">bytes</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.data = data\r\n\r\n        <span class=\"hljs-comment\"># Initialize hash values</span>\r\n        self.hashes = [\r\n            <span class=\"hljs-number\">0x6A09E667</span>,\r\n            <span class=\"hljs-number\">0xBB67AE85</span>,\r\n            <span class=\"hljs-number\">0x3C6EF372</span>,\r\n            <span class=\"hljs-number\">0xA54FF53A</span>,\r\n            <span class=\"hljs-number\">0x510E527F</span>,\r\n            <span class=\"hljs-number\">0x9B05688C</span>,\r\n            <span class=\"hljs-number\">0x1F83D9AB</span>,\r\n            <span class=\"hljs-number\">0x5BE0CD19</span>,\r\n        ]\r\n\r\n        <span class=\"hljs-comment\"># Initialize round constants</span>\r\n        self.round_constants = [\r\n            <span class=\"hljs-number\">0x428A2F98</span>,\r\n            <span class=\"hljs-number\">0x71374491</span>,\r\n            <span class=\"hljs-number\">0xB5C0FBCF</span>,\r\n            <span class=\"hljs-number\">0xE9B5DBA5</span>,\r\n            <span class=\"hljs-number\">0x3956C25B</span>,\r\n            <span class=\"hljs-number\">0x59F111F1</span>,\r\n            <span class=\"hljs-number\">0x923F82A4</span>,\r\n            <span class=\"hljs-number\">0xAB1C5ED5</span>,\r\n            <span class=\"hljs-number\">0xD807AA98</span>,\r\n            <span class=\"hljs-number\">0x12835B01</span>,\r\n            <span class=\"hljs-number\">0x243185BE</span>,\r\n            <span class=\"hljs-number\">0x550C7DC3</span>,\r\n            <span class=\"hljs-number\">0x72BE5D74</span>,\r\n            <span class=\"hljs-number\">0x80DEB1FE</span>,\r\n            <span class=\"hljs-number\">0x9BDC06A7</span>,\r\n            <span class=\"hljs-number\">0xC19BF174</span>,\r\n            <span class=\"hljs-number\">0xE49B69C1</span>,\r\n            <span class=\"hljs-number\">0xEFBE4786</span>,\r\n            <span class=\"hljs-number\">0x0FC19DC6</span>,\r\n            <span class=\"hljs-number\">0x240CA1CC</span>,\r\n            <span class=\"hljs-number\">0x2DE92C6F</span>,\r\n            <span class=\"hljs-number\">0x4A7484AA</span>,\r\n            <span class=\"hljs-number\">0x5CB0A9DC</span>,\r\n            <span class=\"hljs-number\">0x76F988DA</span>,\r\n            <span class=\"hljs-number\">0x983E5152</span>,\r\n            <span class=\"hljs-number\">0xA831C66D</span>,\r\n            <span class=\"hljs-number\">0xB00327C8</span>,\r\n            <span class=\"hljs-number\">0xBF597FC7</span>,\r\n            <span class=\"hljs-number\">0xC6E00BF3</span>,\r\n            <span class=\"hljs-number\">0xD5A79147</span>,\r\n            <span class=\"hljs-number\">0x06CA6351</span>,\r\n            <span class=\"hljs-number\">0x14292967</span>,\r\n            <span class=\"hljs-number\">0x27B70A85</span>,\r\n            <span class=\"hljs-number\">0x2E1B2138</span>,\r\n            <span class=\"hljs-number\">0x4D2C6DFC</span>,\r\n            <span class=\"hljs-number\">0x53380D13</span>,\r\n            <span class=\"hljs-number\">0x650A7354</span>,\r\n            <span class=\"hljs-number\">0x766A0ABB</span>,\r\n            <span class=\"hljs-number\">0x81C2C92E</span>,\r\n            <span class=\"hljs-number\">0x92722C85</span>,\r\n            <span class=\"hljs-number\">0xA2BFE8A1</span>,\r\n            <span class=\"hljs-number\">0xA81A664B</span>,\r\n            <span class=\"hljs-number\">0xC24B8B70</span>,\r\n            <span class=\"hljs-number\">0xC76C51A3</span>,\r\n            <span class=\"hljs-number\">0xD192E819</span>,\r\n            <span class=\"hljs-number\">0xD6990624</span>,\r\n            <span class=\"hljs-number\">0xF40E3585</span>,\r\n            <span class=\"hljs-number\">0x106AA070</span>,\r\n            <span class=\"hljs-number\">0x19A4C116</span>,\r\n            <span class=\"hljs-number\">0x1E376C08</span>,\r\n            <span class=\"hljs-number\">0x2748774C</span>,\r\n            <span class=\"hljs-number\">0x34B0BCB5</span>,\r\n            <span class=\"hljs-number\">0x391C0CB3</span>,\r\n            <span class=\"hljs-number\">0x4ED8AA4A</span>,\r\n            <span class=\"hljs-number\">0x5B9CCA4F</span>,\r\n            <span class=\"hljs-number\">0x682E6FF3</span>,\r\n            <span class=\"hljs-number\">0x748F82EE</span>,\r\n            <span class=\"hljs-number\">0x78A5636F</span>,\r\n            <span class=\"hljs-number\">0x84C87814</span>,\r\n            <span class=\"hljs-number\">0x8CC70208</span>,\r\n            <span class=\"hljs-number\">0x90BEFFFA</span>,\r\n            <span class=\"hljs-number\">0xA4506CEB</span>,\r\n            <span class=\"hljs-number\">0xBEF9A3F7</span>,\r\n            <span class=\"hljs-number\">0xC67178F2</span>,\r\n        ]\r\n\r\n        self.preprocessed_data = self.preprocessing(self.data)\r\n        self.final_hash()\r\n\r\n<span class=\"hljs-meta\">    @staticmethod</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">preprocessing</span>(<span class=\"hljs-params\">data: <span class=\"hljs-built_in\">bytes</span></span>) -&gt; <span class=\"hljs-built_in\">bytes</span>:\r\n        padding = <span class=\"hljs-string\">b&quot;\\x80&quot;</span> + (<span class=\"hljs-string\">b&quot;\\x00&quot;</span> * (<span class=\"hljs-number\">63</span> - (<span class=\"hljs-built_in\">len</span>(data) + <span class=\"hljs-number\">8</span>) % <span class=\"hljs-number\">64</span>))\r\n        big_endian_integer = struct.pack(<span class=\"hljs-string\">&quot;&gt;Q&quot;</span>, (<span class=\"hljs-built_in\">len</span>(data) * <span class=\"hljs-number\">8</span>))\r\n        <span class=\"hljs-keyword\">return</span> data + padding + big_endian_integer\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">final_hash</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-comment\"># Convert into blocks of 64 bytes</span>\r\n        self.blocks = [\r\n            self.preprocessed_data[x : x + <span class=\"hljs-number\">64</span>]\r\n            <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(self.preprocessed_data), <span class=\"hljs-number\">64</span>)\r\n        ]\r\n\r\n        <span class=\"hljs-keyword\">for</span> block <span class=\"hljs-keyword\">in</span> self.blocks:\r\n            <span class=\"hljs-comment\"># Convert the given block into a list of 4 byte integers</span>\r\n            words = <span class=\"hljs-built_in\">list</span>(struct.unpack(<span class=\"hljs-string\">&quot;&gt;16L&quot;</span>, block))\r\n            <span class=\"hljs-comment\"># add 48 0-ed integers</span>\r\n            words += [<span class=\"hljs-number\">0</span>] * <span class=\"hljs-number\">48</span>\r\n\r\n            a, b, c, d, e, f, g, h = self.hashes\r\n\r\n            <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">64</span>):\r\n                <span class=\"hljs-keyword\">if</span> index &gt; <span class=\"hljs-number\">15</span>:\r\n                    <span class=\"hljs-comment\"># modify the zero-ed indexes at the end of the array</span>\r\n                    s0 = (\r\n                        self.ror(words[index - <span class=\"hljs-number\">15</span>], <span class=\"hljs-number\">7</span>)\r\n                        ^ self.ror(words[index - <span class=\"hljs-number\">15</span>], <span class=\"hljs-number\">18</span>)\r\n                        ^ (words[index - <span class=\"hljs-number\">15</span>] &gt;&gt; <span class=\"hljs-number\">3</span>)\r\n                    )\r\n                    s1 = (\r\n                        self.ror(words[index - <span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">17</span>)\r\n                        ^ self.ror(words[index - <span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">19</span>)\r\n                        ^ (words[index - <span class=\"hljs-number\">2</span>] &gt;&gt; <span class=\"hljs-number\">10</span>)\r\n                    )\r\n\r\n                    words[index] = (\r\n                        words[index - <span class=\"hljs-number\">16</span>] + s0 + words[index - <span class=\"hljs-number\">7</span>] + s1\r\n                    ) % <span class=\"hljs-number\">0x100000000</span>\r\n\r\n                <span class=\"hljs-comment\"># Compression</span>\r\n                S1 = self.ror(e, <span class=\"hljs-number\">6</span>) ^ self.ror(e, <span class=\"hljs-number\">11</span>) ^ self.ror(e, <span class=\"hljs-number\">25</span>)\r\n                ch = (e &amp; f) ^ ((~e &amp; (<span class=\"hljs-number\">0xFFFFFFFF</span>)) &amp; g)\r\n                temp1 = (\r\n                    h + S1 + ch + self.round_constants[index] + words[index]\r\n                ) % <span class=\"hljs-number\">0x100000000</span>\r\n                S0 = self.ror(a, <span class=\"hljs-number\">2</span>) ^ self.ror(a, <span class=\"hljs-number\">13</span>) ^ self.ror(a, <span class=\"hljs-number\">22</span>)\r\n                maj = (a &amp; b) ^ (a &amp; c) ^ (b &amp; c)\r\n                temp2 = (S0 + maj) % <span class=\"hljs-number\">0x100000000</span>\r\n\r\n                h, g, f, e, d, c, b, a = (\r\n                    g,\r\n                    f,\r\n                    e,\r\n                    ((d + temp1) % <span class=\"hljs-number\">0x100000000</span>),\r\n                    c,\r\n                    b,\r\n                    a,\r\n                    ((temp1 + temp2) % <span class=\"hljs-number\">0x100000000</span>),\r\n                )\r\n\r\n            mutated_hash_values = [a, b, c, d, e, f, g, h]\r\n\r\n            <span class=\"hljs-comment\"># Modify final values</span>\r\n            self.hashes = [\r\n                ((element + mutated_hash_values[index]) % <span class=\"hljs-number\">0x100000000</span>)\r\n                <span class=\"hljs-keyword\">for</span> index, element <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(self.hashes)\r\n            ]\r\n\r\n        self.<span class=\"hljs-built_in\">hash</span> = <span class=\"hljs-string\">&quot;&quot;</span>.join([<span class=\"hljs-built_in\">hex</span>(value)[<span class=\"hljs-number\">2</span>:].zfill(<span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">for</span> value <span class=\"hljs-keyword\">in</span> self.hashes])\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">ror</span>(<span class=\"hljs-params\">self, value: <span class=\"hljs-built_in\">int</span>, rotations: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Right rotate a given unsigned number by a certain amount of rotations\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0xFFFFFFFF</span> &amp; (value &lt;&lt; (<span class=\"hljs-number\">32</span> - rotations)) | (value &gt;&gt; rotations)\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SHA256HashTest</span>(unittest.TestCase):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Test class for the SHA256 class. Inherits the TestCase class from unittest\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_match_hashes</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-keyword\">import</span> hashlib\r\n\r\n        msg = <span class=\"hljs-built_in\">bytes</span>(<span class=\"hljs-string\">&quot;Test String&quot;</span>, <span class=\"hljs-string\">&quot;utf-8&quot;</span>)\r\n        self.assertEqual(SHA256(msg).<span class=\"hljs-built_in\">hash</span>, hashlib.sha256(msg).hexdigest())\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>() -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Provides option &#x27;string&#x27; or &#x27;file&#x27; to take input\r\n    and prints the calculated SHA-256 hash\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-comment\"># unittest.main()</span>\r\n\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n\r\n    parser = argparse.ArgumentParser()\r\n    parser.add_argument(\r\n        <span class=\"hljs-string\">&quot;-s&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;--string&quot;</span>,\r\n        dest=<span class=\"hljs-string\">&quot;input_string&quot;</span>,\r\n        default=<span class=\"hljs-string\">&quot;Hello World!! Welcome to Cryptography&quot;</span>,\r\n        <span class=\"hljs-built_in\">help</span>=<span class=\"hljs-string\">&quot;Hash the string&quot;</span>,\r\n    )\r\n    parser.add_argument(\r\n        <span class=\"hljs-string\">&quot;-f&quot;</span>, <span class=\"hljs-string\">&quot;--file&quot;</span>, dest=<span class=\"hljs-string\">&quot;input_file&quot;</span>, <span class=\"hljs-built_in\">help</span>=<span class=\"hljs-string\">&quot;Hash contents of a file&quot;</span>\r\n    )\r\n\r\n    args = parser.parse_args()\r\n\r\n    input_string = args.input_string\r\n\r\n    <span class=\"hljs-comment\"># hash input should be a bytestring</span>\r\n    <span class=\"hljs-keyword\">if</span> args.input_file:\r\n        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(args.input_file, <span class=\"hljs-string\">&quot;rb&quot;</span>) <span class=\"hljs-keyword\">as</span> f:\r\n            hash_input = f.read()\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        hash_input = <span class=\"hljs-built_in\">bytes</span>(input_string, <span class=\"hljs-string\">&quot;utf-8&quot;</span>)\r\n\r\n    <span class=\"hljs-built_in\">print</span>(SHA256(hash_input).<span class=\"hljs-built_in\">hash</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    main()\r\n"
    },
    "javascript": {
      "dir": "Hashes/SHA256.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Hashes/SHA256.js",
      "code": "<span class=\"hljs-comment\">//= ===============================================================</span>\n<span class=\"hljs-comment\">// SHA256.js</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// Module that replicates the SHA-256 Cryptographic Hash</span>\n<span class=\"hljs-comment\">// function in Javascript.</span>\n<span class=\"hljs-comment\">//= ===============================================================</span>\n\n<span class=\"hljs-comment\">// main variables</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">CHAR_SIZE</span> = <span class=\"hljs-number\">8</span>\n\n<span class=\"hljs-keyword\">const</span> K = [\n  <span class=\"hljs-number\">0x428a2f98</span>, <span class=\"hljs-number\">0x71374491</span>, <span class=\"hljs-number\">0xb5c0fbcf</span>, <span class=\"hljs-number\">0xe9b5dba5</span>, <span class=\"hljs-number\">0x3956c25b</span>, <span class=\"hljs-number\">0x59f111f1</span>, <span class=\"hljs-number\">0x923f82a4</span>, <span class=\"hljs-number\">0xab1c5ed5</span>,\n  <span class=\"hljs-number\">0xd807aa98</span>, <span class=\"hljs-number\">0x12835b01</span>, <span class=\"hljs-number\">0x243185be</span>, <span class=\"hljs-number\">0x550c7dc3</span>, <span class=\"hljs-number\">0x72be5d74</span>, <span class=\"hljs-number\">0x80deb1fe</span>, <span class=\"hljs-number\">0x9bdc06a7</span>, <span class=\"hljs-number\">0xc19bf174</span>,\n  <span class=\"hljs-number\">0xe49b69c1</span>, <span class=\"hljs-number\">0xefbe4786</span>, <span class=\"hljs-number\">0x0fc19dc6</span>, <span class=\"hljs-number\">0x240ca1cc</span>, <span class=\"hljs-number\">0x2de92c6f</span>, <span class=\"hljs-number\">0x4a7484aa</span>, <span class=\"hljs-number\">0x5cb0a9dc</span>, <span class=\"hljs-number\">0x76f988da</span>,\n  <span class=\"hljs-number\">0x983e5152</span>, <span class=\"hljs-number\">0xa831c66d</span>, <span class=\"hljs-number\">0xb00327c8</span>, <span class=\"hljs-number\">0xbf597fc7</span>, <span class=\"hljs-number\">0xc6e00bf3</span>, <span class=\"hljs-number\">0xd5a79147</span>, <span class=\"hljs-number\">0x06ca6351</span>, <span class=\"hljs-number\">0x14292967</span>,\n  <span class=\"hljs-number\">0x27b70a85</span>, <span class=\"hljs-number\">0x2e1b2138</span>, <span class=\"hljs-number\">0x4d2c6dfc</span>, <span class=\"hljs-number\">0x53380d13</span>, <span class=\"hljs-number\">0x650a7354</span>, <span class=\"hljs-number\">0x766a0abb</span>, <span class=\"hljs-number\">0x81c2c92e</span>, <span class=\"hljs-number\">0x92722c85</span>,\n  <span class=\"hljs-number\">0xa2bfe8a1</span>, <span class=\"hljs-number\">0xa81a664b</span>, <span class=\"hljs-number\">0xc24b8b70</span>, <span class=\"hljs-number\">0xc76c51a3</span>, <span class=\"hljs-number\">0xd192e819</span>, <span class=\"hljs-number\">0xd6990624</span>, <span class=\"hljs-number\">0xf40e3585</span>, <span class=\"hljs-number\">0x106aa070</span>,\n  <span class=\"hljs-number\">0x19a4c116</span>, <span class=\"hljs-number\">0x1e376c08</span>, <span class=\"hljs-number\">0x2748774c</span>, <span class=\"hljs-number\">0x34b0bcb5</span>, <span class=\"hljs-number\">0x391c0cb3</span>, <span class=\"hljs-number\">0x4ed8aa4a</span>, <span class=\"hljs-number\">0x5b9cca4f</span>, <span class=\"hljs-number\">0x682e6ff3</span>,\n  <span class=\"hljs-number\">0x748f82ee</span>, <span class=\"hljs-number\">0x78a5636f</span>, <span class=\"hljs-number\">0x84c87814</span>, <span class=\"hljs-number\">0x8cc70208</span>, <span class=\"hljs-number\">0x90befffa</span>, <span class=\"hljs-number\">0xa4506ceb</span>, <span class=\"hljs-number\">0xbef9a3f7</span>, <span class=\"hljs-number\">0xc67178f2</span>\n]\n\n<span class=\"hljs-comment\">/**\n * Adds padding to binary/hex string representation\n *\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} <span class=\"hljs-variable\">str</span> - string representation (binary/hex)\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">int</span>} <span class=\"hljs-variable\">bits</span> - total number of bits wanted\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">string</span>} - string representation padding with empty (0) bits\n *\n * <span class=\"hljs-doctag\">@example</span>\n *      pad(&quot;10011&quot;, 8); // &quot;00010011&quot;\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">pad</span> (str, bits) {\n  <span class=\"hljs-keyword\">let</span> res = str\n  <span class=\"hljs-keyword\">while</span> (res.<span class=\"hljs-property\">length</span> % bits !== <span class=\"hljs-number\">0</span>) {\n    res = <span class=\"hljs-string\">&#x27;0&#x27;</span> + res\n  }\n  <span class=\"hljs-keyword\">return</span> res\n}\n\n<span class=\"hljs-comment\">/**\n * Separates string into chunks of the same size\n *\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} <span class=\"hljs-variable\">str</span> - string to separate into chunks\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">int</span>} <span class=\"hljs-variable\">size</span> - number of characters wanted in each chunk\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">array</span>} - array of original string split into chunks\n *\n * <span class=\"hljs-doctag\">@example</span>\n *      chunkify(&quot;this is a test&quot;, 2)\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">chunkify</span> (str, size) {\n  <span class=\"hljs-keyword\">const</span> chunks = []\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; str.<span class=\"hljs-property\">length</span>; i += size) {\n    chunks.<span class=\"hljs-title function_\">push</span>(str.<span class=\"hljs-title function_\">slice</span>(i, i + size))\n  }\n  <span class=\"hljs-keyword\">return</span> chunks\n}\n\n<span class=\"hljs-comment\">/**\n * Rotates string representation of bits to th left\n *\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} <span class=\"hljs-variable\">bits</span> - string representation of bits\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">int</span>} <span class=\"hljs-variable\">turns</span> - number of rotations to make\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">string</span>} - string representation of bits after rotation\n *\n * <span class=\"hljs-doctag\">@example</span>\n *      rotateLeft(&quot;1011&quot;, 3); // &quot;1101&quot;\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">rotateRight</span> (bits, turns) {\n  <span class=\"hljs-keyword\">return</span> bits.<span class=\"hljs-title function_\">substr</span>(bits.<span class=\"hljs-property\">length</span> - turns) + bits.<span class=\"hljs-title function_\">substr</span>(<span class=\"hljs-number\">0</span>, bits.<span class=\"hljs-property\">length</span> - turns)\n}\n\n<span class=\"hljs-comment\">/**\n * Pre-processes message to feed the algorithm loop\n *\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} <span class=\"hljs-variable\">message</span> - message to pre-process\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">string</span>} - processed message\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">preProcess</span> (message) {\n  <span class=\"hljs-comment\">// convert message to binary representation padded to</span>\n  <span class=\"hljs-comment\">// 8 bits, and add 1</span>\n  <span class=\"hljs-keyword\">let</span> m = message.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n    .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> e.<span class=\"hljs-title function_\">charCodeAt</span>(<span class=\"hljs-number\">0</span>))\n    .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> e.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-number\">2</span>))\n    .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> <span class=\"hljs-title function_\">pad</span>(e, <span class=\"hljs-number\">8</span>))\n    .<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>) + <span class=\"hljs-string\">&#x27;1&#x27;</span>\n\n  <span class=\"hljs-comment\">// extend message by adding empty bits (0)</span>\n  <span class=\"hljs-keyword\">while</span> (m.<span class=\"hljs-property\">length</span> % <span class=\"hljs-number\">512</span> !== <span class=\"hljs-number\">448</span>) {\n    m += <span class=\"hljs-string\">&#x27;0&#x27;</span>\n  }\n\n  <span class=\"hljs-comment\">// length of message in binary, padded, and extended</span>\n  <span class=\"hljs-comment\">// to a 64 bit representation</span>\n  <span class=\"hljs-keyword\">let</span> ml = (message.<span class=\"hljs-property\">length</span> * <span class=\"hljs-variable constant_\">CHAR_SIZE</span>).<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-number\">2</span>)\n  ml = <span class=\"hljs-title function_\">pad</span>(ml, <span class=\"hljs-number\">8</span>)\n  ml = <span class=\"hljs-string\">&#x27;0&#x27;</span>.<span class=\"hljs-title function_\">repeat</span>(<span class=\"hljs-number\">64</span> - ml.<span class=\"hljs-property\">length</span>) + ml\n\n  <span class=\"hljs-keyword\">return</span> m + ml\n}\n\n<span class=\"hljs-comment\">/**\n * Hashes message using SHA-256 Cryptographic Hash Function\n *\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} <span class=\"hljs-variable\">message</span> - message to hash\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">string</span>} - message digest (hash value)\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SHA256</span> (message) {\n  <span class=\"hljs-comment\">// initial hash variables</span>\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable constant_\">H0</span> = <span class=\"hljs-number\">0x6a09e667</span>\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable constant_\">H1</span> = <span class=\"hljs-number\">0xbb67ae85</span>\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable constant_\">H2</span> = <span class=\"hljs-number\">0x3c6ef372</span>\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable constant_\">H3</span> = <span class=\"hljs-number\">0xa54ff53a</span>\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable constant_\">H4</span> = <span class=\"hljs-number\">0x510e527f</span>\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable constant_\">H5</span> = <span class=\"hljs-number\">0x9b05688c</span>\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable constant_\">H6</span> = <span class=\"hljs-number\">0x1f83d9ab</span>\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable constant_\">H7</span> = <span class=\"hljs-number\">0x5be0cd19</span>\n\n  <span class=\"hljs-comment\">// pre-process message and split into 512 bit chunks</span>\n  <span class=\"hljs-keyword\">const</span> bits = <span class=\"hljs-title function_\">preProcess</span>(message)\n  <span class=\"hljs-keyword\">const</span> chunks = <span class=\"hljs-title function_\">chunkify</span>(bits, <span class=\"hljs-number\">512</span>)\n\n  chunks.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">chunk, i</span>) {\n    <span class=\"hljs-comment\">// break each chunk into 16 32-bit words</span>\n    <span class=\"hljs-keyword\">const</span> words = <span class=\"hljs-title function_\">chunkify</span>(chunk, <span class=\"hljs-number\">32</span>)\n\n    <span class=\"hljs-comment\">// extend 16 32-bit words to 80 32-bit words</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">16</span>; i &lt; <span class=\"hljs-number\">64</span>; i++) {\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">W1</span> = words[i - <span class=\"hljs-number\">15</span>]\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">W2</span> = words[i - <span class=\"hljs-number\">2</span>]\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">R1</span> = <span class=\"hljs-title function_\">rotateRight</span>(<span class=\"hljs-variable constant_\">W1</span>, <span class=\"hljs-number\">7</span>)\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">R2</span> = <span class=\"hljs-title function_\">rotateRight</span>(<span class=\"hljs-variable constant_\">W1</span>, <span class=\"hljs-number\">18</span>)\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">R3</span> = <span class=\"hljs-title function_\">rotateRight</span>(<span class=\"hljs-variable constant_\">W2</span>, <span class=\"hljs-number\">17</span>)\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">R4</span> = <span class=\"hljs-title function_\">rotateRight</span>(<span class=\"hljs-variable constant_\">W2</span>, <span class=\"hljs-number\">19</span>)\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">S0</span> = <span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-variable constant_\">R1</span>, <span class=\"hljs-number\">2</span>) ^ <span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-variable constant_\">R2</span>, <span class=\"hljs-number\">2</span>) ^ (<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-variable constant_\">W1</span>, <span class=\"hljs-number\">2</span>) &gt;&gt;&gt; <span class=\"hljs-number\">3</span>)\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">S1</span> = <span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-variable constant_\">R3</span>, <span class=\"hljs-number\">2</span>) ^ <span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-variable constant_\">R4</span>, <span class=\"hljs-number\">2</span>) ^ (<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-variable constant_\">W2</span>, <span class=\"hljs-number\">2</span>) &gt;&gt;&gt; <span class=\"hljs-number\">10</span>)\n      <span class=\"hljs-keyword\">const</span> val = <span class=\"hljs-built_in\">parseInt</span>(words[i - <span class=\"hljs-number\">16</span>], <span class=\"hljs-number\">2</span>) + <span class=\"hljs-variable constant_\">S0</span> + <span class=\"hljs-built_in\">parseInt</span>(words[i - <span class=\"hljs-number\">7</span>], <span class=\"hljs-number\">2</span>) + <span class=\"hljs-variable constant_\">S1</span>\n      words[i] = <span class=\"hljs-title function_\">pad</span>((val &gt;&gt;&gt; <span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">32</span>)\n    }\n\n    <span class=\"hljs-comment\">// initialize variables for this chunk</span>\n    <span class=\"hljs-keyword\">let</span> [a, b, c, d, e, f, g, h] = [<span class=\"hljs-variable constant_\">H0</span>, <span class=\"hljs-variable constant_\">H1</span>, <span class=\"hljs-variable constant_\">H2</span>, <span class=\"hljs-variable constant_\">H3</span>, <span class=\"hljs-variable constant_\">H4</span>, <span class=\"hljs-variable constant_\">H5</span>, <span class=\"hljs-variable constant_\">H6</span>, <span class=\"hljs-variable constant_\">H7</span>]\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">64</span>; i++) {\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">S1</span> = [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">25</span>]\n        .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">turns</span> =&gt;</span> <span class=\"hljs-title function_\">rotateRight</span>(<span class=\"hljs-title function_\">pad</span>(e.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">32</span>), turns))\n        .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">bitstring</span> =&gt;</span> <span class=\"hljs-built_in\">parseInt</span>(bitstring, <span class=\"hljs-number\">2</span>))\n        .<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, curr</span>) =&gt;</span> acc ^ curr, <span class=\"hljs-number\">0</span>) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">CH</span> = ((e &amp; f) ^ (~e &amp; g)) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">const</span> temp1 = (h + <span class=\"hljs-variable constant_\">S1</span> + <span class=\"hljs-variable constant_\">CH</span> + K[i] + <span class=\"hljs-built_in\">parseInt</span>(words[i], <span class=\"hljs-number\">2</span>)) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">S0</span> = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">22</span>]\n        .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">turns</span> =&gt;</span> <span class=\"hljs-title function_\">rotateRight</span>(<span class=\"hljs-title function_\">pad</span>(a.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">32</span>), turns))\n        .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">bitstring</span> =&gt;</span> <span class=\"hljs-built_in\">parseInt</span>(bitstring, <span class=\"hljs-number\">2</span>))\n        .<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, curr</span>) =&gt;</span> acc ^ curr, <span class=\"hljs-number\">0</span>) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">const</span> maj = ((a &amp; b) ^ (a &amp; c) ^ (b &amp; c)) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">const</span> temp2 = (<span class=\"hljs-variable constant_\">S0</span> + maj) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n\n      h = g\n      g = f\n      f = e\n      e = (d + temp1) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n      d = c\n      c = b\n      b = a\n      a = (temp1 + temp2) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n    }\n\n    <span class=\"hljs-comment\">// add values for this chunk to main hash variables (unsigned)</span>\n    <span class=\"hljs-variable constant_\">H0</span> = (<span class=\"hljs-variable constant_\">H0</span> + a) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable constant_\">H1</span> = (<span class=\"hljs-variable constant_\">H1</span> + b) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable constant_\">H2</span> = (<span class=\"hljs-variable constant_\">H2</span> + c) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable constant_\">H3</span> = (<span class=\"hljs-variable constant_\">H3</span> + d) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable constant_\">H4</span> = (<span class=\"hljs-variable constant_\">H4</span> + e) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable constant_\">H5</span> = (<span class=\"hljs-variable constant_\">H5</span> + f) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable constant_\">H6</span> = (<span class=\"hljs-variable constant_\">H6</span> + g) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable constant_\">H7</span> = (<span class=\"hljs-variable constant_\">H7</span> + h) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>\n  })\n\n  <span class=\"hljs-comment\">// combine hash values of main hash variables and return</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">HH</span> = [<span class=\"hljs-variable constant_\">H0</span>, <span class=\"hljs-variable constant_\">H1</span>, <span class=\"hljs-variable constant_\">H2</span>, <span class=\"hljs-variable constant_\">H3</span>, <span class=\"hljs-variable constant_\">H4</span>, <span class=\"hljs-variable constant_\">H5</span>, <span class=\"hljs-variable constant_\">H6</span>, <span class=\"hljs-variable constant_\">H7</span>]\n    .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> e.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-number\">16</span>))\n    .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> <span class=\"hljs-title function_\">pad</span>(e, <span class=\"hljs-number\">8</span>))\n    .<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable constant_\">HH</span>\n}\n\n<span class=\"hljs-comment\">// export SHA256 function</span>\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">SHA256</span> }\n"
    },
    "go": {
      "dir": "hashing/sha256/sha256.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/hashing/sha256/sha256.go",
      "code": "<span class=\"hljs-comment\">// sha256.go</span>\n<span class=\"hljs-comment\">// description: The sha256 cryptographic hash function as defined in the RFC6234 standard.</span>\n<span class=\"hljs-comment\">// author: [Paul Leydier] (https://github.com/paul-leydier)</span>\n<span class=\"hljs-comment\">// ref: https://datatracker.ietf.org/doc/html/rfc6234</span>\n<span class=\"hljs-comment\">// ref: https://en.wikipedia.org/wiki/SHA-2</span>\n<span class=\"hljs-comment\">// see sha256_test.go</span>\n\n<span class=\"hljs-keyword\">package</span> sha256\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;encoding/binary&quot;</span> <span class=\"hljs-comment\">// Used for interacting with uint at the byte level</span>\n\t<span class=\"hljs-string\">&quot;math/bits&quot;</span>       <span class=\"hljs-comment\">// Used for bits rotation operations</span>\n)\n\n<span class=\"hljs-keyword\">var</span> K = [<span class=\"hljs-number\">64</span>]<span class=\"hljs-type\">uint32</span>{\n\t<span class=\"hljs-number\">0x428a2f98</span>, <span class=\"hljs-number\">0x71374491</span>, <span class=\"hljs-number\">0xb5c0fbcf</span>, <span class=\"hljs-number\">0xe9b5dba5</span>, <span class=\"hljs-number\">0x3956c25b</span>, <span class=\"hljs-number\">0x59f111f1</span>, <span class=\"hljs-number\">0x923f82a4</span>, <span class=\"hljs-number\">0xab1c5ed5</span>,\n\t<span class=\"hljs-number\">0xd807aa98</span>, <span class=\"hljs-number\">0x12835b01</span>, <span class=\"hljs-number\">0x243185be</span>, <span class=\"hljs-number\">0x550c7dc3</span>, <span class=\"hljs-number\">0x72be5d74</span>, <span class=\"hljs-number\">0x80deb1fe</span>, <span class=\"hljs-number\">0x9bdc06a7</span>, <span class=\"hljs-number\">0xc19bf174</span>,\n\t<span class=\"hljs-number\">0xe49b69c1</span>, <span class=\"hljs-number\">0xefbe4786</span>, <span class=\"hljs-number\">0x0fc19dc6</span>, <span class=\"hljs-number\">0x240ca1cc</span>, <span class=\"hljs-number\">0x2de92c6f</span>, <span class=\"hljs-number\">0x4a7484aa</span>, <span class=\"hljs-number\">0x5cb0a9dc</span>, <span class=\"hljs-number\">0x76f988da</span>,\n\t<span class=\"hljs-number\">0x983e5152</span>, <span class=\"hljs-number\">0xa831c66d</span>, <span class=\"hljs-number\">0xb00327c8</span>, <span class=\"hljs-number\">0xbf597fc7</span>, <span class=\"hljs-number\">0xc6e00bf3</span>, <span class=\"hljs-number\">0xd5a79147</span>, <span class=\"hljs-number\">0x06ca6351</span>, <span class=\"hljs-number\">0x14292967</span>,\n\t<span class=\"hljs-number\">0x27b70a85</span>, <span class=\"hljs-number\">0x2e1b2138</span>, <span class=\"hljs-number\">0x4d2c6dfc</span>, <span class=\"hljs-number\">0x53380d13</span>, <span class=\"hljs-number\">0x650a7354</span>, <span class=\"hljs-number\">0x766a0abb</span>, <span class=\"hljs-number\">0x81c2c92e</span>, <span class=\"hljs-number\">0x92722c85</span>,\n\t<span class=\"hljs-number\">0xa2bfe8a1</span>, <span class=\"hljs-number\">0xa81a664b</span>, <span class=\"hljs-number\">0xc24b8b70</span>, <span class=\"hljs-number\">0xc76c51a3</span>, <span class=\"hljs-number\">0xd192e819</span>, <span class=\"hljs-number\">0xd6990624</span>, <span class=\"hljs-number\">0xf40e3585</span>, <span class=\"hljs-number\">0x106aa070</span>,\n\t<span class=\"hljs-number\">0x19a4c116</span>, <span class=\"hljs-number\">0x1e376c08</span>, <span class=\"hljs-number\">0x2748774c</span>, <span class=\"hljs-number\">0x34b0bcb5</span>, <span class=\"hljs-number\">0x391c0cb3</span>, <span class=\"hljs-number\">0x4ed8aa4a</span>, <span class=\"hljs-number\">0x5b9cca4f</span>, <span class=\"hljs-number\">0x682e6ff3</span>,\n\t<span class=\"hljs-number\">0x748f82ee</span>, <span class=\"hljs-number\">0x78a5636f</span>, <span class=\"hljs-number\">0x84c87814</span>, <span class=\"hljs-number\">0x8cc70208</span>, <span class=\"hljs-number\">0x90befffa</span>, <span class=\"hljs-number\">0xa4506ceb</span>, <span class=\"hljs-number\">0xbef9a3f7</span>, <span class=\"hljs-number\">0xc67178f2</span>,\n}\n\n<span class=\"hljs-keyword\">const</span> chunkSize = <span class=\"hljs-number\">64</span>\n\n<span class=\"hljs-comment\">// pad returns a padded version of the input message, such as the padded message&#x27;s length is a multiple</span>\n<span class=\"hljs-comment\">// of 512 bits.</span>\n<span class=\"hljs-comment\">// The padding methodology is as follows:</span>\n<span class=\"hljs-comment\">// A &quot;1&quot; bit is appended at the end of the input message, followed by m &quot;0&quot; bits such as the length is</span>\n<span class=\"hljs-comment\">// 64 bits short of a 512 bits multiple. The remaining 64 bits are filled with the initial length of the</span>\n<span class=\"hljs-comment\">// message, represented as a 64-bits unsigned integer.</span>\n<span class=\"hljs-comment\">// For more details, see: https://datatracker.ietf.org/doc/html/rfc6234#section-4.1</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">pad</span><span class=\"hljs-params\">(message []<span class=\"hljs-type\">byte</span>)</span></span> []<span class=\"hljs-type\">byte</span> {\n\tL := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">byte</span>, <span class=\"hljs-number\">8</span>)\n\tbinary.BigEndian.PutUint64(L, <span class=\"hljs-type\">uint64</span>(<span class=\"hljs-built_in\">len</span>(message)*<span class=\"hljs-number\">8</span>))\n\tmessage = <span class=\"hljs-built_in\">append</span>(message, <span class=\"hljs-number\">0x80</span>) <span class=\"hljs-comment\">// &quot;1&quot; bit followed by 7 &quot;0&quot; bits</span>\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">len</span>(message)+<span class=\"hljs-number\">8</span>)%<span class=\"hljs-number\">64</span> != <span class=\"hljs-number\">0</span> {\n\t\tmessage = <span class=\"hljs-built_in\">append</span>(message, <span class=\"hljs-number\">0x00</span>) <span class=\"hljs-comment\">// 8 &quot;0&quot; bits</span>\n\t}\n\tmessage = <span class=\"hljs-built_in\">append</span>(message, L...)\n\n\t<span class=\"hljs-keyword\">return</span> message\n}\n\n<span class=\"hljs-comment\">// Hash hashes the input message using the sha256 hashing function, and return a 32 byte array.</span>\n<span class=\"hljs-comment\">// The implementation follows the RGC6234 standard, which is documented</span>\n<span class=\"hljs-comment\">// at https://datatracker.ietf.org/doc/html/rfc6234</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Hash</span><span class=\"hljs-params\">(message []<span class=\"hljs-type\">byte</span>)</span></span> [<span class=\"hljs-number\">32</span>]<span class=\"hljs-type\">byte</span> {\n\tmessage = pad(message)\n\n\t<span class=\"hljs-comment\">// Initialize round constants</span>\n\th0, h1, h2, h3, h4, h5, h6, h7 := <span class=\"hljs-type\">uint32</span>(<span class=\"hljs-number\">0x6a09e667</span>), <span class=\"hljs-type\">uint32</span>(<span class=\"hljs-number\">0xbb67ae85</span>), <span class=\"hljs-type\">uint32</span>(<span class=\"hljs-number\">0x3c6ef372</span>), <span class=\"hljs-type\">uint32</span>(<span class=\"hljs-number\">0xa54ff53a</span>),\n\t\t<span class=\"hljs-type\">uint32</span>(<span class=\"hljs-number\">0x510e527f</span>), <span class=\"hljs-type\">uint32</span>(<span class=\"hljs-number\">0x9b05688c</span>), <span class=\"hljs-type\">uint32</span>(<span class=\"hljs-number\">0x1f83d9ab</span>), <span class=\"hljs-type\">uint32</span>(<span class=\"hljs-number\">0x5be0cd19</span>)\n\n\t<span class=\"hljs-comment\">// Iterate through 512-bit chunks</span>\n\t<span class=\"hljs-keyword\">for</span> chunkStart := <span class=\"hljs-number\">0</span>; chunkStart &lt; <span class=\"hljs-built_in\">len</span>(message); chunkStart += chunkSize {\n\t\t<span class=\"hljs-comment\">// Message schedule</span>\n\t\t<span class=\"hljs-keyword\">var</span> w [<span class=\"hljs-number\">64</span>]<span class=\"hljs-type\">uint32</span>\n\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i*<span class=\"hljs-number\">4</span> &lt; chunkSize; i++ {\n\t\t\tw[i] = binary.BigEndian.Uint32(message[chunkStart+i*<span class=\"hljs-number\">4</span> : chunkStart+(i+<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">4</span>])\n\t\t}\n\n\t\t<span class=\"hljs-comment\">// Extend the 16 bytes chunk to the whole 64 bytes message schedule</span>\n\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">16</span>; i &lt; <span class=\"hljs-number\">64</span>; i++ {\n\t\t\ts0 := bits.RotateLeft32(w[i<span class=\"hljs-number\">-15</span>], <span class=\"hljs-number\">-7</span>) ^ bits.RotateLeft32(w[i<span class=\"hljs-number\">-15</span>], <span class=\"hljs-number\">-18</span>) ^ (w[i<span class=\"hljs-number\">-15</span>] &gt;&gt; <span class=\"hljs-number\">3</span>)\n\t\t\ts1 := bits.RotateLeft32(w[i<span class=\"hljs-number\">-2</span>], <span class=\"hljs-number\">-17</span>) ^ bits.RotateLeft32(w[i<span class=\"hljs-number\">-2</span>], <span class=\"hljs-number\">-19</span>) ^ (w[i<span class=\"hljs-number\">-2</span>] &gt;&gt; <span class=\"hljs-number\">10</span>)\n\t\t\tw[i] = w[i<span class=\"hljs-number\">-16</span>] + s0 + w[i<span class=\"hljs-number\">-7</span>] + s1\n\t\t}\n\n\t\t<span class=\"hljs-comment\">// Actual hashing loop</span>\n\t\ta, b, c, d, e, f, g, h := h0, h1, h2, h3, h4, h5, h6, h7\n\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">64</span>; i++ {\n\t\t\tS1 := bits.RotateLeft32(e, <span class=\"hljs-number\">-6</span>) ^ bits.RotateLeft32(e, <span class=\"hljs-number\">-11</span>) ^ bits.RotateLeft32(e, <span class=\"hljs-number\">-25</span>)\n\t\t\tch := (e &amp; f) ^ ((^e) &amp; g)\n\t\t\ttmp1 := h + S1 + ch + K[i] + w[i]\n\t\t\tS0 := bits.RotateLeft32(a, <span class=\"hljs-number\">-2</span>) ^ bits.RotateLeft32(a, <span class=\"hljs-number\">-13</span>) ^ bits.RotateLeft32(a, <span class=\"hljs-number\">-22</span>)\n\t\t\tmaj := (a &amp; b) ^ (a &amp; c) ^ (b &amp; c)\n\t\t\ttmp2 := S0 + maj\n\t\t\th = g\n\t\t\tg = f\n\t\t\tf = e\n\t\t\te = d + tmp1\n\t\t\td = c\n\t\t\tc = b\n\t\t\tb = a\n\t\t\ta = tmp1 + tmp2\n\t\t}\n\t\th0 += a\n\t\th1 += b\n\t\th2 += c\n\t\th3 += d\n\t\th4 += e\n\t\th5 += f\n\t\th6 += g\n\t\th7 += h\n\t}\n\n\t<span class=\"hljs-comment\">// Export digest</span>\n\tdigest := [<span class=\"hljs-number\">32</span>]<span class=\"hljs-type\">byte</span>{}\n\tbinary.BigEndian.PutUint32(digest[:<span class=\"hljs-number\">4</span>], h0)\n\tbinary.BigEndian.PutUint32(digest[<span class=\"hljs-number\">4</span>:<span class=\"hljs-number\">8</span>], h1)\n\tbinary.BigEndian.PutUint32(digest[<span class=\"hljs-number\">8</span>:<span class=\"hljs-number\">12</span>], h2)\n\tbinary.BigEndian.PutUint32(digest[<span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">16</span>], h3)\n\tbinary.BigEndian.PutUint32(digest[<span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">20</span>], h4)\n\tbinary.BigEndian.PutUint32(digest[<span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">24</span>], h5)\n\tbinary.BigEndian.PutUint32(digest[<span class=\"hljs-number\">24</span>:<span class=\"hljs-number\">28</span>], h6)\n\tbinary.BigEndian.PutUint32(digest[<span class=\"hljs-number\">28</span>:], h7)\n\n\t<span class=\"hljs-keyword\">return</span> digest\n}\n"
    },
    "rust": {
      "dir": "src/ciphers/sha256.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/ciphers/sha256.rs",
      "code": "<span class=\"hljs-comment\">//! SHA-2 (256 Bit)</span>\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">BufState</span> {\n    data: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u8</span>&gt;,\n    len: <span class=\"hljs-type\">usize</span>,\n    total_len: <span class=\"hljs-type\">usize</span>,\n    single: <span class=\"hljs-type\">bool</span>,\n    total: <span class=\"hljs-type\">bool</span>,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">sha256</span>(data: &amp;[<span class=\"hljs-type\">u8</span>]) <span class=\"hljs-punctuation\">-&gt;</span> [<span class=\"hljs-type\">u8</span>; <span class=\"hljs-number\">32</span>] {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">hash</span>: [<span class=\"hljs-type\">u8</span>; <span class=\"hljs-number\">32</span>] = [<span class=\"hljs-number\">0</span>; <span class=\"hljs-number\">32</span>];\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">h</span>: [<span class=\"hljs-type\">u32</span>; <span class=\"hljs-number\">8</span>] = [\n        <span class=\"hljs-number\">0x6a09e667</span>, <span class=\"hljs-number\">0xbb67ae85</span>, <span class=\"hljs-number\">0x3c6ef372</span>, <span class=\"hljs-number\">0xa54ff53a</span>, <span class=\"hljs-number\">0x510e527f</span>, <span class=\"hljs-number\">0x9b05688c</span>, <span class=\"hljs-number\">0x1f83d9ab</span>,\n        <span class=\"hljs-number\">0x5be0cd19</span>,\n    ];\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">k</span>: [<span class=\"hljs-type\">u32</span>; <span class=\"hljs-number\">64</span>] = [\n        <span class=\"hljs-number\">0x428a2f98</span>, <span class=\"hljs-number\">0x71374491</span>, <span class=\"hljs-number\">0xb5c0fbcf</span>, <span class=\"hljs-number\">0xe9b5dba5</span>, <span class=\"hljs-number\">0x3956c25b</span>, <span class=\"hljs-number\">0x59f111f1</span>, <span class=\"hljs-number\">0x923f82a4</span>,\n        <span class=\"hljs-number\">0xab1c5ed5</span>, <span class=\"hljs-number\">0xd807aa98</span>, <span class=\"hljs-number\">0x12835b01</span>, <span class=\"hljs-number\">0x243185be</span>, <span class=\"hljs-number\">0x550c7dc3</span>, <span class=\"hljs-number\">0x72be5d74</span>, <span class=\"hljs-number\">0x80deb1fe</span>,\n        <span class=\"hljs-number\">0x9bdc06a7</span>, <span class=\"hljs-number\">0xc19bf174</span>, <span class=\"hljs-number\">0xe49b69c1</span>, <span class=\"hljs-number\">0xefbe4786</span>, <span class=\"hljs-number\">0x0fc19dc6</span>, <span class=\"hljs-number\">0x240ca1cc</span>, <span class=\"hljs-number\">0x2de92c6f</span>,\n        <span class=\"hljs-number\">0x4a7484aa</span>, <span class=\"hljs-number\">0x5cb0a9dc</span>, <span class=\"hljs-number\">0x76f988da</span>, <span class=\"hljs-number\">0x983e5152</span>, <span class=\"hljs-number\">0xa831c66d</span>, <span class=\"hljs-number\">0xb00327c8</span>, <span class=\"hljs-number\">0xbf597fc7</span>,\n        <span class=\"hljs-number\">0xc6e00bf3</span>, <span class=\"hljs-number\">0xd5a79147</span>, <span class=\"hljs-number\">0x06ca6351</span>, <span class=\"hljs-number\">0x14292967</span>, <span class=\"hljs-number\">0x27b70a85</span>, <span class=\"hljs-number\">0x2e1b2138</span>, <span class=\"hljs-number\">0x4d2c6dfc</span>,\n        <span class=\"hljs-number\">0x53380d13</span>, <span class=\"hljs-number\">0x650a7354</span>, <span class=\"hljs-number\">0x766a0abb</span>, <span class=\"hljs-number\">0x81c2c92e</span>, <span class=\"hljs-number\">0x92722c85</span>, <span class=\"hljs-number\">0xa2bfe8a1</span>, <span class=\"hljs-number\">0xa81a664b</span>,\n        <span class=\"hljs-number\">0xc24b8b70</span>, <span class=\"hljs-number\">0xc76c51a3</span>, <span class=\"hljs-number\">0xd192e819</span>, <span class=\"hljs-number\">0xd6990624</span>, <span class=\"hljs-number\">0xf40e3585</span>, <span class=\"hljs-number\">0x106aa070</span>, <span class=\"hljs-number\">0x19a4c116</span>,\n        <span class=\"hljs-number\">0x1e376c08</span>, <span class=\"hljs-number\">0x2748774c</span>, <span class=\"hljs-number\">0x34b0bcb5</span>, <span class=\"hljs-number\">0x391c0cb3</span>, <span class=\"hljs-number\">0x4ed8aa4a</span>, <span class=\"hljs-number\">0x5b9cca4f</span>, <span class=\"hljs-number\">0x682e6ff3</span>,\n        <span class=\"hljs-number\">0x748f82ee</span>, <span class=\"hljs-number\">0x78a5636f</span>, <span class=\"hljs-number\">0x84c87814</span>, <span class=\"hljs-number\">0x8cc70208</span>, <span class=\"hljs-number\">0x90befffa</span>, <span class=\"hljs-number\">0xa4506ceb</span>, <span class=\"hljs-number\">0xbef9a3f7</span>,\n        <span class=\"hljs-number\">0xc67178f2</span>,\n    ];\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">chunk</span>: [<span class=\"hljs-type\">u8</span>; <span class=\"hljs-number\">64</span>] = [<span class=\"hljs-number\">0</span>; <span class=\"hljs-number\">64</span>];\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">state</span>: BufState = BufState {\n        data: (*data).<span class=\"hljs-title function_ invoke__\">to_owned</span>(),\n        len: data.<span class=\"hljs-title function_ invoke__\">len</span>(),\n        total_len: data.<span class=\"hljs-title function_ invoke__\">len</span>(),\n        single: <span class=\"hljs-literal\">false</span>,\n        total: <span class=\"hljs-literal\">false</span>,\n    };\n\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-title function_ invoke__\">calc_chunk</span>(&amp;<span class=\"hljs-keyword\">mut</span> chunk, &amp;<span class=\"hljs-keyword\">mut</span> state) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">ah</span>: [<span class=\"hljs-type\">u32</span>; <span class=\"hljs-number\">8</span>] = h;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">w</span>: [<span class=\"hljs-type\">u32</span>; <span class=\"hljs-number\">16</span>] = [<span class=\"hljs-number\">0</span>; <span class=\"hljs-number\">16</span>];\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">4</span> {\n            <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">16</span> {\n                <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span> {\n                    w[j] = ((chunk[j * <span class=\"hljs-number\">4</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>) &lt;&lt; <span class=\"hljs-number\">24</span>)\n                        | ((chunk[j * <span class=\"hljs-number\">4</span> + <span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>) &lt;&lt; <span class=\"hljs-number\">16</span>)\n                        | ((chunk[j * <span class=\"hljs-number\">4</span> + <span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>) &lt;&lt; <span class=\"hljs-number\">8</span>)\n                        | (chunk[j * <span class=\"hljs-number\">4</span> + <span class=\"hljs-number\">3</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>);\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">s0</span> = (w[(j + <span class=\"hljs-number\">1</span>) &amp; <span class=\"hljs-number\">0xf</span>].<span class=\"hljs-title function_ invoke__\">rotate_right</span>(<span class=\"hljs-number\">7</span>) ^ w[(j + <span class=\"hljs-number\">1</span>) &amp; <span class=\"hljs-number\">0xf</span>].<span class=\"hljs-title function_ invoke__\">rotate_right</span>(<span class=\"hljs-number\">18</span>))\n                        ^ (w[(j + <span class=\"hljs-number\">1</span>) &amp; <span class=\"hljs-number\">0xf</span>] &gt;&gt; <span class=\"hljs-number\">3</span>);\n                    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">s1</span> = w[(j + <span class=\"hljs-number\">14</span>) &amp; <span class=\"hljs-number\">0xf</span>].<span class=\"hljs-title function_ invoke__\">rotate_right</span>(<span class=\"hljs-number\">17</span>)\n                        ^ w[(j + <span class=\"hljs-number\">14</span>) &amp; <span class=\"hljs-number\">0xf</span>].<span class=\"hljs-title function_ invoke__\">rotate_right</span>(<span class=\"hljs-number\">19</span>)\n                        ^ (w[(j + <span class=\"hljs-number\">14</span>) &amp; <span class=\"hljs-number\">0xf</span>] &gt;&gt; <span class=\"hljs-number\">10</span>);\n                    w[j] = w[j]\n                        .<span class=\"hljs-title function_ invoke__\">wrapping_add</span>(s0)\n                        .<span class=\"hljs-title function_ invoke__\">wrapping_add</span>(w[(j + <span class=\"hljs-number\">9</span>) &amp; <span class=\"hljs-number\">0xf</span>])\n                        .<span class=\"hljs-title function_ invoke__\">wrapping_add</span>(s1);\n                }\n\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">s1</span>: <span class=\"hljs-type\">u32</span> =\n                    ah[<span class=\"hljs-number\">4</span>].<span class=\"hljs-title function_ invoke__\">rotate_right</span>(<span class=\"hljs-number\">6</span>) ^ ah[<span class=\"hljs-number\">4</span>].<span class=\"hljs-title function_ invoke__\">rotate_right</span>(<span class=\"hljs-number\">11</span>) ^ ah[<span class=\"hljs-number\">4</span>].<span class=\"hljs-title function_ invoke__\">rotate_right</span>(<span class=\"hljs-number\">25</span>);\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">ch</span>: <span class=\"hljs-type\">u32</span> = (ah[<span class=\"hljs-number\">4</span>] &amp; ah[<span class=\"hljs-number\">5</span>]) ^ (!ah[<span class=\"hljs-number\">4</span>] &amp; ah[<span class=\"hljs-number\">6</span>]);\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">temp1</span>: <span class=\"hljs-type\">u32</span> = ah[<span class=\"hljs-number\">7</span>]\n                    .<span class=\"hljs-title function_ invoke__\">wrapping_add</span>(s1)\n                    .<span class=\"hljs-title function_ invoke__\">wrapping_add</span>(ch)\n                    .<span class=\"hljs-title function_ invoke__\">wrapping_add</span>(k[i &lt;&lt; <span class=\"hljs-number\">4</span> | j])\n                    .<span class=\"hljs-title function_ invoke__\">wrapping_add</span>(w[j]);\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">s0</span>: <span class=\"hljs-type\">u32</span> =\n                    ah[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_ invoke__\">rotate_right</span>(<span class=\"hljs-number\">2</span>) ^ ah[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_ invoke__\">rotate_right</span>(<span class=\"hljs-number\">13</span>) ^ ah[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_ invoke__\">rotate_right</span>(<span class=\"hljs-number\">22</span>);\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">maj</span>: <span class=\"hljs-type\">u32</span> = (ah[<span class=\"hljs-number\">0</span>] &amp; ah[<span class=\"hljs-number\">1</span>]) ^ (ah[<span class=\"hljs-number\">0</span>] &amp; ah[<span class=\"hljs-number\">2</span>]) ^ (ah[<span class=\"hljs-number\">1</span>] &amp; ah[<span class=\"hljs-number\">2</span>]);\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">temp2</span>: <span class=\"hljs-type\">u32</span> = s0.<span class=\"hljs-title function_ invoke__\">wrapping_add</span>(maj);\n\n                ah[<span class=\"hljs-number\">7</span>] = ah[<span class=\"hljs-number\">6</span>];\n                ah[<span class=\"hljs-number\">6</span>] = ah[<span class=\"hljs-number\">5</span>];\n                ah[<span class=\"hljs-number\">5</span>] = ah[<span class=\"hljs-number\">4</span>];\n                ah[<span class=\"hljs-number\">4</span>] = ah[<span class=\"hljs-number\">3</span>].<span class=\"hljs-title function_ invoke__\">wrapping_add</span>(temp1);\n                ah[<span class=\"hljs-number\">3</span>] = ah[<span class=\"hljs-number\">2</span>];\n                ah[<span class=\"hljs-number\">2</span>] = ah[<span class=\"hljs-number\">1</span>];\n                ah[<span class=\"hljs-number\">1</span>] = ah[<span class=\"hljs-number\">0</span>];\n                ah[<span class=\"hljs-number\">0</span>] = temp1.<span class=\"hljs-title function_ invoke__\">wrapping_add</span>(temp2);\n            }\n        }\n\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">8</span> {\n            h[i] = h[i].<span class=\"hljs-title function_ invoke__\">wrapping_add</span>(ah[i]);\n        }\n        chunk = [<span class=\"hljs-number\">0</span>; <span class=\"hljs-number\">64</span>];\n    }\n\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">8</span> {\n        hash[i * <span class=\"hljs-number\">4</span>] = (h[i] &gt;&gt; <span class=\"hljs-number\">24</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>;\n        hash[i * <span class=\"hljs-number\">4</span> + <span class=\"hljs-number\">1</span>] = (h[i] &gt;&gt; <span class=\"hljs-number\">16</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>;\n        hash[i * <span class=\"hljs-number\">4</span> + <span class=\"hljs-number\">2</span>] = (h[i] &gt;&gt; <span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>;\n        hash[i * <span class=\"hljs-number\">4</span> + <span class=\"hljs-number\">3</span>] = h[i] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>;\n    }\n\n    hash\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">calc_chunk</span>(chunk: &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-type\">u8</span>; <span class=\"hljs-number\">64</span>], state: &amp;<span class=\"hljs-keyword\">mut</span> BufState) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n    <span class=\"hljs-keyword\">if</span> state.total {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-keyword\">if</span> state.len &gt;= <span class=\"hljs-number\">64</span> {\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-keyword\">in</span> chunk {\n            *x = state.data[<span class=\"hljs-number\">0</span>];\n            state.data.<span class=\"hljs-title function_ invoke__\">remove</span>(<span class=\"hljs-number\">0</span>);\n        }\n        state.len -= <span class=\"hljs-number\">64</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">remaining</span>: <span class=\"hljs-type\">usize</span> = state.data.<span class=\"hljs-title function_ invoke__\">len</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">space</span>: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-number\">64</span> - remaining;\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-keyword\">in</span> chunk.<span class=\"hljs-title function_ invoke__\">iter_mut</span>().<span class=\"hljs-title function_ invoke__\">take</span>(state.data.<span class=\"hljs-title function_ invoke__\">len</span>()) {\n        *x = state.data[<span class=\"hljs-number\">0</span>];\n        state.data.<span class=\"hljs-title function_ invoke__\">remove</span>(<span class=\"hljs-number\">0</span>);\n    }\n\n    <span class=\"hljs-keyword\">if</span> !state.single {\n        chunk[remaining] = <span class=\"hljs-number\">0x80</span>;\n        state.single = <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-keyword\">if</span> space &gt;= <span class=\"hljs-number\">8</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">len</span> = state.total_len;\n        chunk[<span class=\"hljs-number\">63</span>] = (len &lt;&lt; <span class=\"hljs-number\">3</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>;\n        len &gt;&gt;= <span class=\"hljs-number\">5</span>;\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">8</span> {\n            chunk[(<span class=\"hljs-number\">63</span> - i)] = len <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>;\n            len &gt;&gt;= <span class=\"hljs-number\">8</span>;\n        }\n        state.total = <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-literal\">true</span>\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">sha256</span>(&amp;Vec::<span class=\"hljs-title function_ invoke__\">new</span>()),\n            [\n                <span class=\"hljs-number\">0xe3</span>, <span class=\"hljs-number\">0xb0</span>, <span class=\"hljs-number\">0xc4</span>, <span class=\"hljs-number\">0x42</span>, <span class=\"hljs-number\">0x98</span>, <span class=\"hljs-number\">0xfc</span>, <span class=\"hljs-number\">0x1c</span>, <span class=\"hljs-number\">0x14</span>, <span class=\"hljs-number\">0x9a</span>, <span class=\"hljs-number\">0xfb</span>, <span class=\"hljs-number\">0xf4</span>, <span class=\"hljs-number\">0xc8</span>, <span class=\"hljs-number\">0x99</span>, <span class=\"hljs-number\">0x6f</span>,\n                <span class=\"hljs-number\">0xb9</span>, <span class=\"hljs-number\">0x24</span>, <span class=\"hljs-number\">0x27</span>, <span class=\"hljs-number\">0xae</span>, <span class=\"hljs-number\">0x41</span>, <span class=\"hljs-number\">0xe4</span>, <span class=\"hljs-number\">0x64</span>, <span class=\"hljs-number\">0x9b</span>, <span class=\"hljs-number\">0x93</span>, <span class=\"hljs-number\">0x4c</span>, <span class=\"hljs-number\">0xa4</span>, <span class=\"hljs-number\">0x95</span>, <span class=\"hljs-number\">0x99</span>, <span class=\"hljs-number\">0x1b</span>,\n                <span class=\"hljs-number\">0x78</span>, <span class=\"hljs-number\">0x52</span>, <span class=\"hljs-number\">0xb8</span>, <span class=\"hljs-number\">0x55</span>\n            ]\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">ascii</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">sha256</span>(&amp;<span class=\"hljs-string\">b&quot;The quick brown fox jumps over the lazy dog&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_vec</span>()),\n            [\n                <span class=\"hljs-number\">0xD7</span>, <span class=\"hljs-number\">0xA8</span>, <span class=\"hljs-number\">0xFB</span>, <span class=\"hljs-number\">0xB3</span>, <span class=\"hljs-number\">0x07</span>, <span class=\"hljs-number\">0xD7</span>, <span class=\"hljs-number\">0x80</span>, <span class=\"hljs-number\">0x94</span>, <span class=\"hljs-number\">0x69</span>, <span class=\"hljs-number\">0xCA</span>, <span class=\"hljs-number\">0x9A</span>, <span class=\"hljs-number\">0xBC</span>, <span class=\"hljs-number\">0xB0</span>, <span class=\"hljs-number\">0x08</span>,\n                <span class=\"hljs-number\">0x2E</span>, <span class=\"hljs-number\">0x4F</span>, <span class=\"hljs-number\">0x8D</span>, <span class=\"hljs-number\">0x56</span>, <span class=\"hljs-number\">0x51</span>, <span class=\"hljs-number\">0xE4</span>, <span class=\"hljs-number\">0x6D</span>, <span class=\"hljs-number\">0x3C</span>, <span class=\"hljs-number\">0xDB</span>, <span class=\"hljs-number\">0x76</span>, <span class=\"hljs-number\">0x2D</span>, <span class=\"hljs-number\">0x02</span>, <span class=\"hljs-number\">0xD0</span>, <span class=\"hljs-number\">0xBF</span>,\n                <span class=\"hljs-number\">0x37</span>, <span class=\"hljs-number\">0xC9</span>, <span class=\"hljs-number\">0xE5</span>, <span class=\"hljs-number\">0x92</span>\n            ]\n        )\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">ascii_avalanche</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">sha256</span>(&amp;<span class=\"hljs-string\">b&quot;The quick brown fox jumps over the lazy dog.&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_vec</span>()),\n            [\n                <span class=\"hljs-number\">0xEF</span>, <span class=\"hljs-number\">0x53</span>, <span class=\"hljs-number\">0x7F</span>, <span class=\"hljs-number\">0x25</span>, <span class=\"hljs-number\">0xC8</span>, <span class=\"hljs-number\">0x95</span>, <span class=\"hljs-number\">0xBF</span>, <span class=\"hljs-number\">0xA7</span>, <span class=\"hljs-number\">0x82</span>, <span class=\"hljs-number\">0x52</span>, <span class=\"hljs-number\">0x65</span>, <span class=\"hljs-number\">0x29</span>, <span class=\"hljs-number\">0xA9</span>, <span class=\"hljs-number\">0xB6</span>,\n                <span class=\"hljs-number\">0x3D</span>, <span class=\"hljs-number\">0x97</span>, <span class=\"hljs-number\">0xAA</span>, <span class=\"hljs-number\">0x63</span>, <span class=\"hljs-number\">0x15</span>, <span class=\"hljs-number\">0x64</span>, <span class=\"hljs-number\">0xD5</span>, <span class=\"hljs-number\">0xD7</span>, <span class=\"hljs-number\">0x89</span>, <span class=\"hljs-number\">0xC2</span>, <span class=\"hljs-number\">0xB7</span>, <span class=\"hljs-number\">0x65</span>, <span class=\"hljs-number\">0x44</span>, <span class=\"hljs-number\">0x8C</span>,\n                <span class=\"hljs-number\">0x86</span>, <span class=\"hljs-number\">0x35</span>, <span class=\"hljs-number\">0xFB</span>, <span class=\"hljs-number\">0x6C</span>\n            ]\n        )\n    }\n}\n"
    },
    "aarch64_assembly": {
      "dir": "misc/sha256.s",
      "url": "https://github.com/TheAlgorithms/aarch64_assembly/tree/master/misc/sha256.s",
      "code": "<span class=\"hljs-comment\">/* ARM assembly AARCH64 Raspberry PI 3B */</span>\n<span class=\"hljs-comment\">/*  program sha256_64.s   */</span>\n \n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* Constantes file                         */</span>\n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly*/</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeConstantesARM64.inc&quot;</span>\n \n<span class=\"hljs-symbol\">.equ</span> LGHASH, <span class=\"hljs-number\">32</span>                  <span class=\"hljs-comment\">// result length </span>\n \n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* Structures                               */</span>\n<span class=\"hljs-comment\">/********************************************/</span>\n<span class=\"hljs-comment\">/* example structure  variables  */</span>\n    .struct  <span class=\"hljs-number\">0</span>\n<span class=\"hljs-symbol\">var_a:</span>                     <span class=\"hljs-comment\">// a</span>\n    .struct  var_a + <span class=\"hljs-number\">4</span>\n<span class=\"hljs-symbol\">var_b:</span>                     <span class=\"hljs-comment\">// b</span>\n    .struct  var_b + <span class=\"hljs-number\">4</span>\n<span class=\"hljs-symbol\">var_c:</span>                     <span class=\"hljs-comment\">// c</span>\n    .struct  var_c + <span class=\"hljs-number\">4</span>\n<span class=\"hljs-symbol\">var_d:</span>                     <span class=\"hljs-comment\">// d</span>\n    .struct  var_d + <span class=\"hljs-number\">4</span>\n<span class=\"hljs-symbol\">var_e:</span>                     <span class=\"hljs-comment\">// e</span>\n    .struct  var_e + <span class=\"hljs-number\">4</span>\n<span class=\"hljs-symbol\">var_f:</span>                     <span class=\"hljs-comment\">// f</span>\n    .struct  var_f + <span class=\"hljs-number\">4</span>\n<span class=\"hljs-symbol\">var_g:</span>                     <span class=\"hljs-comment\">// g</span>\n    .struct  var_g + <span class=\"hljs-number\">4</span>\n<span class=\"hljs-symbol\">var_h:</span>                     <span class=\"hljs-comment\">// h</span>\n    .struct  var_h + <span class=\"hljs-number\">4</span>\n \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* Initialized data              */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.data</span>\n<span class=\"hljs-symbol\">szMessRosetta:</span>        <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Rosetta code&quot;</span>\n<span class=\"hljs-symbol\">szMessTest1:</span>           <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;abc&quot;</span> \n<span class=\"hljs-symbol\">szMessSup64:</span>           <span class=\"hljs-meta\">.ascii</span> <span class=\"hljs-string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>\n                       <span class=\"hljs-meta\">.ascii</span> <span class=\"hljs-string\">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>\n                       <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;1234567890AZERTYUIOP&quot;</span>\n<span class=\"hljs-symbol\">szMessTest2:</span>           <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq&quot;</span>\n<span class=\"hljs-symbol\">szMessFinPgm:</span>          <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Program End ok.\\n&quot;</span>\n<span class=\"hljs-symbol\">szMessResult:</span>          <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Rosetta code =&gt; &quot;</span>\n<span class=\"hljs-symbol\">szCarriageReturn:</span>   <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;\\n&quot;</span>\n \n<span class=\"hljs-comment\">/* array constantes Hi */</span>\n<span class=\"hljs-symbol\">tbConstHi:</span>           .int <span class=\"hljs-number\">0x6A09E667</span>       <span class=\"hljs-comment\">// H0</span>\n                     .int <span class=\"hljs-number\">0xBB67AE85</span>       <span class=\"hljs-comment\">// H1</span>\n                     .int <span class=\"hljs-number\">0x3C6EF372</span>       <span class=\"hljs-comment\">// H2</span>\n                     .int <span class=\"hljs-number\">0xA54FF53A</span>       <span class=\"hljs-comment\">// H3</span>\n                     .int <span class=\"hljs-number\">0x510E527F</span>       <span class=\"hljs-comment\">// H4</span>\n                     .int <span class=\"hljs-number\">0x9B05688C</span>       <span class=\"hljs-comment\">// H5</span>\n                     .int <span class=\"hljs-number\">0x1F83D9AB</span>       <span class=\"hljs-comment\">// H6</span>\n                     .int <span class=\"hljs-number\">0x5BE0CD19</span>       <span class=\"hljs-comment\">// H7</span>\n<span class=\"hljs-comment\">/* array  64 constantes Kt */</span>\n<span class=\"hljs-symbol\">tbConstKt:</span>\n  .int <span class=\"hljs-number\">0x428a2f98</span>, <span class=\"hljs-number\">0x71374491</span>, <span class=\"hljs-number\">0xb5c0fbcf</span>, <span class=\"hljs-number\">0xe9b5dba5</span>, <span class=\"hljs-number\">0x3956c25b</span>, <span class=\"hljs-number\">0x59f111f1</span>, <span class=\"hljs-number\">0x923f82a4</span>, <span class=\"hljs-number\">0xab1c5ed5</span>\n  .int <span class=\"hljs-number\">0xd807aa98</span>, <span class=\"hljs-number\">0x12835b01</span>, <span class=\"hljs-number\">0x243185be</span>, <span class=\"hljs-number\">0x550c7dc3</span>, <span class=\"hljs-number\">0x72be5d74</span>, <span class=\"hljs-number\">0x80deb1fe</span>, <span class=\"hljs-number\">0x9bdc06a7</span>, <span class=\"hljs-number\">0xc19bf174</span>\n  .int <span class=\"hljs-number\">0xe49b69c1</span>, <span class=\"hljs-number\">0xefbe4786</span>, <span class=\"hljs-number\">0x0fc19dc6</span>, <span class=\"hljs-number\">0x240ca1cc</span>, <span class=\"hljs-number\">0x2de92c6f</span>, <span class=\"hljs-number\">0x4a7484aa</span>, <span class=\"hljs-number\">0x5cb0a9dc</span>, <span class=\"hljs-number\">0x76f988da</span>\n  .int <span class=\"hljs-number\">0x983e5152</span>, <span class=\"hljs-number\">0xa831c66d</span>, <span class=\"hljs-number\">0xb00327c8</span>, <span class=\"hljs-number\">0xbf597fc7</span>, <span class=\"hljs-number\">0xc6e00bf3</span>, <span class=\"hljs-number\">0xd5a79147</span>, <span class=\"hljs-number\">0x06ca6351</span>, <span class=\"hljs-number\">0x14292967</span>\n  .int <span class=\"hljs-number\">0x27b70a85</span>, <span class=\"hljs-number\">0x2e1b2138</span>, <span class=\"hljs-number\">0x4d2c6dfc</span>, <span class=\"hljs-number\">0x53380d13</span>, <span class=\"hljs-number\">0x650a7354</span>, <span class=\"hljs-number\">0x766a0abb</span>, <span class=\"hljs-number\">0x81c2c92e</span>, <span class=\"hljs-number\">0x92722c85</span>\n  .int <span class=\"hljs-number\">0xa2bfe8a1</span>, <span class=\"hljs-number\">0xa81a664b</span>, <span class=\"hljs-number\">0xc24b8b70</span>, <span class=\"hljs-number\">0xc76c51a3</span>, <span class=\"hljs-number\">0xd192e819</span>, <span class=\"hljs-number\">0xd6990624</span>, <span class=\"hljs-number\">0xf40e3585</span>, <span class=\"hljs-number\">0x106aa070</span>\n  .int <span class=\"hljs-number\">0x19a4c116</span>, <span class=\"hljs-number\">0x1e376c08</span>, <span class=\"hljs-number\">0x2748774c</span>, <span class=\"hljs-number\">0x34b0bcb5</span>, <span class=\"hljs-number\">0x391c0cb3</span>, <span class=\"hljs-number\">0x4ed8aa4a</span>, <span class=\"hljs-number\">0x5b9cca4f</span>, <span class=\"hljs-number\">0x682e6ff3</span>\n  .int <span class=\"hljs-number\">0x748f82ee</span>, <span class=\"hljs-number\">0x78a5636f</span>, <span class=\"hljs-number\">0x84c87814</span>, <span class=\"hljs-number\">0x8cc70208</span>, <span class=\"hljs-number\">0x90befffa</span>, <span class=\"hljs-number\">0xa4506ceb</span>, <span class=\"hljs-number\">0xbef9a3f7</span>, <span class=\"hljs-number\">0xc67178f2</span>\n \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* UnInitialized data            */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.bss</span>\n<span class=\"hljs-symbol\">.align</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-symbol\">qNbBlocs:</span>                    <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">8</span>\n<span class=\"hljs-symbol\">sZoneConv:</span>                   <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">24</span>\n<span class=\"hljs-symbol\">sZoneTrav:</span>                   <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">1000</span>\n<span class=\"hljs-symbol\">.align</span> <span class=\"hljs-number\">8</span>\n<span class=\"hljs-symbol\">tbH:</span>                         <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">4</span> * <span class=\"hljs-number\">8</span>         <span class=\"hljs-comment\">// 8 variables H</span>\n<span class=\"hljs-symbol\">tbabcdefgh:</span>                  <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">4</span> * <span class=\"hljs-number\">8</span>\n<span class=\"hljs-symbol\">tbW:</span>                         <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">4</span> * <span class=\"hljs-number\">64</span>        <span class=\"hljs-comment\">// 64 words W</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/*  code section                 */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.text</span>\n<span class=\"hljs-symbol\">.global</span> main \n<span class=\"hljs-symbol\">main:</span>                                      <span class=\"hljs-comment\">// entry of program </span>\n \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessRosetta\n    <span class=\"hljs-comment\">//ldr x0,qAdrszMessTest1</span>\n    <span class=\"hljs-comment\">//ldr x0,qAdrszMessTest2</span>\n    <span class=\"hljs-comment\">//ldr x0,qAdrszMessSup64</span>\n    <span class=\"hljs-keyword\">bl</span> computeSHA256                       <span class=\"hljs-comment\">// call routine SHA1</span>\n \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessResult\n    <span class=\"hljs-keyword\">bl</span> affichageMess                       <span class=\"hljs-comment\">// display message</span>\n \n    <span class=\"hljs-keyword\">ldr</span> x0, qAdrtbH\n    <span class=\"hljs-keyword\">bl</span> displaySHA1\n \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessFinPgm\n    <span class=\"hljs-keyword\">bl</span> affichageMess                       <span class=\"hljs-comment\">// display message</span>\n \n \n<span class=\"hljs-number\">100</span>:                                       <span class=\"hljs-comment\">// standard end of the program </span>\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                               <span class=\"hljs-comment\">// return code</span>\n    <span class=\"hljs-keyword\">mov</span> x8,EXIT                            <span class=\"hljs-comment\">// request to exit program</span>\n    <span class=\"hljs-keyword\">svc</span> <span class=\"hljs-number\">0</span>                                  <span class=\"hljs-comment\">// perform the system call</span>\n \n<span class=\"hljs-symbol\">qAdrszCarriageReturn:</span>     .quad szCarriageReturn\n<span class=\"hljs-symbol\">qAdrszMessResult:</span>         .quad szMessResult\n<span class=\"hljs-symbol\">qAdrszMessRosetta:</span>        .quad szMessRosetta\n<span class=\"hljs-symbol\">qAdrszMessTest1:</span>          .quad szMessTest1\n<span class=\"hljs-symbol\">qAdrszMessTest2:</span>          .quad szMessTest2\n<span class=\"hljs-symbol\">qAdrsZoneTrav:</span>            .quad sZoneTrav\n<span class=\"hljs-symbol\">qAdrsZoneConv:</span>            .quad sZoneConv\n<span class=\"hljs-symbol\">qAdrszMessFinPgm:</span>         .quad szMessFinPgm\n<span class=\"hljs-symbol\">qAdrszMessSup64:</span>          .quad szMessSup64\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*     compute SHA1                         */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of the message */</span>\n<span class=\"hljs-symbol\">computeSHA256:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!      <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneTrav\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">#0</span>                <span class=\"hljs-comment\">// counter length </span>\n<span class=\"hljs-symbol\">debCopy:</span>                     <span class=\"hljs-comment\">// copy string in work area</span>\n    <span class=\"hljs-keyword\">ldrb</span> w3,[x0,x2]\n    <span class=\"hljs-keyword\">strb</span> w3,[x1,x2]\n    <span class=\"hljs-keyword\">cmp</span> x3,<span class=\"hljs-number\">#0</span>\n    <span class=\"hljs-keyword\">add</span> x4,x2,<span class=\"hljs-number\">1</span>\n    csel x2,x4,x2,ne\n    <span class=\"hljs-keyword\">bne</span> debCopy\n    <span class=\"hljs-keyword\">lsl</span> x6,x2,<span class=\"hljs-number\">#3</span>             <span class=\"hljs-comment\">// initial message length in bits </span>\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">#0b10000000</span>       <span class=\"hljs-comment\">// add bit 1 at end of string</span>\n    <span class=\"hljs-keyword\">strb</span> w3,[x1,x2]\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">#1</span>             <span class=\"hljs-comment\">// length in bytes</span>\n    <span class=\"hljs-keyword\">lsl</span> x4,x2,<span class=\"hljs-number\">#3</span>             <span class=\"hljs-comment\">// length in bits</span>\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">#0</span>\n<span class=\"hljs-symbol\">addZeroes:</span>\n    <span class=\"hljs-keyword\">lsr</span> x5,x2,<span class=\"hljs-number\">#6</span>\n    <span class=\"hljs-keyword\">lsl</span> x5,x5,<span class=\"hljs-number\">#6</span>\n    <span class=\"hljs-keyword\">sub</span> x5,x2,x5\n    <span class=\"hljs-keyword\">cmp</span> x5,<span class=\"hljs-number\">#56</span>\n    <span class=\"hljs-keyword\">beq</span> storeLength          <span class=\"hljs-comment\">// yes -&gt; end add</span>\n    <span class=\"hljs-keyword\">strb</span> w3,[x1,x2]          <span class=\"hljs-comment\">// add zero at message end</span>\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">#1</span>              <span class=\"hljs-comment\">// increment lenght bytes </span>\n    <span class=\"hljs-keyword\">add</span> x4,x4,<span class=\"hljs-number\">#8</span>             <span class=\"hljs-comment\">// increment length in bits</span>\n    <span class=\"hljs-keyword\">b</span> addZeroes\n<span class=\"hljs-symbol\">storeLength:</span>\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">#4</span>             <span class=\"hljs-comment\">// add four bytes</span>\n    <span class=\"hljs-keyword\">rev</span> w6,w6                <span class=\"hljs-comment\">// inversion bits initials message length</span>\n    <span class=\"hljs-keyword\">str</span> w6,[x1,x2]           <span class=\"hljs-comment\">// and store at end</span>\n \n    <span class=\"hljs-keyword\">ldr</span> x7,qAdrtbConstHi     <span class=\"hljs-comment\">// constantes H address</span>\n    <span class=\"hljs-keyword\">ldr</span> x4,qAdrtbH           <span class=\"hljs-comment\">// start area H</span>\n    <span class=\"hljs-keyword\">mov</span> x5,<span class=\"hljs-number\">#0</span>\n<span class=\"hljs-symbol\">loopConst:</span>                   <span class=\"hljs-comment\">// init array H with start constantes</span>\n    <span class=\"hljs-keyword\">ldr</span> w6,[x7,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]    <span class=\"hljs-comment\">// load constante</span>\n    <span class=\"hljs-keyword\">str</span> w6,[x4,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]    <span class=\"hljs-comment\">// and store</span>\n    <span class=\"hljs-keyword\">add</span> x5,x5,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">cmp</span> x5,<span class=\"hljs-number\">#8</span>\n    <span class=\"hljs-keyword\">blt</span> loopConst\n                             <span class=\"hljs-comment\">// split into block of 64 bytes</span>\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">#4</span>                <span class=\"hljs-comment\">// </span>\n    <span class=\"hljs-keyword\">lsr</span> x4,x2,<span class=\"hljs-number\">#6</span>             <span class=\"hljs-comment\">// blocks number</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrqNbBlocs\n    <span class=\"hljs-keyword\">str</span> x4,[x0]              <span class=\"hljs-comment\">// save block maxi</span>\n    <span class=\"hljs-keyword\">mov</span> x7,<span class=\"hljs-number\">#0</span>                <span class=\"hljs-comment\">// n° de block et x1 contient l adresse zone de travail</span>\n<span class=\"hljs-symbol\">loopBlock:</span>                   <span class=\"hljs-comment\">// begin loop of each block of 64 bytes</span>\n    <span class=\"hljs-keyword\">mov</span> x0,x7\n    <span class=\"hljs-keyword\">bl</span> inversion             <span class=\"hljs-comment\">// inversion each word because little indian</span>\n    <span class=\"hljs-keyword\">ldr</span> x3,qAdrtbW           <span class=\"hljs-comment\">// working area W address</span>\n    <span class=\"hljs-keyword\">mov</span> x6,<span class=\"hljs-number\">#0</span>                <span class=\"hljs-comment\">// indice t</span>\n                             <span class=\"hljs-comment\">/* x2  address begin each block */</span>\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneTrav\n    <span class=\"hljs-keyword\">add</span> x2,x1,x7,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#6</span>      <span class=\"hljs-comment\">//  compute block begin  indice * 4 * 16</span>\n    <span class=\"hljs-comment\">//vidregtit avantloop</span>\n    <span class=\"hljs-comment\">//mov x0,x2</span>\n    <span class=\"hljs-comment\">//vidmemtit  verifBloc x0 10</span>\n<span class=\"hljs-symbol\">loopPrep:</span>                    <span class=\"hljs-comment\">// loop for expand 80 words</span>\n    <span class=\"hljs-keyword\">cmp</span> x6,<span class=\"hljs-number\">#15</span>               <span class=\"hljs-comment\">// </span>\n    <span class=\"hljs-keyword\">bgt</span> expand1\n    <span class=\"hljs-keyword\">ldr</span> w0,[x2,x6,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]    <span class=\"hljs-comment\">// load word message</span>\n    <span class=\"hljs-keyword\">str</span> w0,[x3,x6,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]    <span class=\"hljs-comment\">// store in first 16 block </span>\n    <span class=\"hljs-keyword\">b</span> expandEnd\n \n<span class=\"hljs-symbol\">expand1:</span>\n    <span class=\"hljs-keyword\">sub</span> x8,x6,<span class=\"hljs-number\">#2</span>\n    <span class=\"hljs-keyword\">ldr</span> w9,[x3,x8,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]\n    <span class=\"hljs-keyword\">ror</span> w10,w9,<span class=\"hljs-number\">#17</span>           <span class=\"hljs-comment\">// fonction e1 (256)</span>\n    <span class=\"hljs-keyword\">ror</span> w11,w9,<span class=\"hljs-number\">#19</span>\n    <span class=\"hljs-keyword\">eor</span> w10,w10,w11\n    <span class=\"hljs-keyword\">lsr</span> w11,w9,<span class=\"hljs-number\">#10</span>\n    <span class=\"hljs-keyword\">eor</span> w10,w10,w11\n    <span class=\"hljs-keyword\">sub</span> x8,x6,<span class=\"hljs-number\">#7</span>\n    <span class=\"hljs-keyword\">ldr</span> w9,[x3,x8,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]\n    <span class=\"hljs-keyword\">add</span> w9,w9,w10            <span class=\"hljs-comment\">// + w - 7</span>\n    <span class=\"hljs-keyword\">sub</span> x8,x6,<span class=\"hljs-number\">#15</span>\n    <span class=\"hljs-keyword\">ldr</span> w10,[x3,x8,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]\n    <span class=\"hljs-keyword\">ror</span> w11,w10,<span class=\"hljs-number\">#7</span>          <span class=\"hljs-comment\">// fonction e0 (256)</span>\n    <span class=\"hljs-keyword\">ror</span> w12,w10,<span class=\"hljs-number\">#18</span>\n    <span class=\"hljs-keyword\">eor</span> w11,w11,w12\n    <span class=\"hljs-keyword\">lsr</span> w12,w10,<span class=\"hljs-number\">#3</span>\n    <span class=\"hljs-keyword\">eor</span> w10,w11,w12\n    <span class=\"hljs-keyword\">add</span> w9,w9,w10\n    <span class=\"hljs-keyword\">sub</span> x8,x6,<span class=\"hljs-number\">#16</span>\n    <span class=\"hljs-keyword\">ldr</span> w11,[x3,x8,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]\n    <span class=\"hljs-keyword\">add</span> w9,w9,w11\n \n    <span class=\"hljs-keyword\">str</span> w9,[x3,x6,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>] \n<span class=\"hljs-symbol\">expandEnd:</span>\n    <span class=\"hljs-keyword\">add</span> x6,x6,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">cmp</span> x6,<span class=\"hljs-number\">#64</span>                 <span class=\"hljs-comment\">// 64 words ?</span>\n    <span class=\"hljs-keyword\">blt</span> loopPrep               <span class=\"hljs-comment\">// and loop</span>\n \n \n    <span class=\"hljs-comment\">/* COMPUTING THE MESSAGE DIGEST */</span>\n    <span class=\"hljs-comment\">/* x1  area H constantes address */</span>\n    <span class=\"hljs-comment\">/* x3  working area W address  */</span>\n    <span class=\"hljs-comment\">/* x5  address constantes K   */</span>\n    <span class=\"hljs-comment\">/* x6  counter t */</span>\n    <span class=\"hljs-comment\">/* x7  block counter */</span>\n    <span class=\"hljs-comment\">/* x8  addresse variables a b c d e f g h  */</span>\n    <span class=\"hljs-comment\">//ldr x0,qAdrtbW</span>\n    <span class=\"hljs-comment\">//vidmemtit  verifW80 x0 20</span>\n                               <span class=\"hljs-comment\">// init variable a b c d e f g h</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrtbH\n    <span class=\"hljs-keyword\">ldr</span> x8,qAdrtbabcdefgh\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-number\">#0</span>\n<span class=\"hljs-symbol\">loopInita:</span>\n    <span class=\"hljs-keyword\">ldr</span> w9,[x0,x1,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]\n    <span class=\"hljs-keyword\">str</span> w9,[x8,x1,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]\n    <span class=\"hljs-keyword\">add</span> x1,x1,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">cmp</span> x1,<span class=\"hljs-number\">#8</span>\n    <span class=\"hljs-keyword\">blt</span> loopInita\n \n \n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrtbConstHi\n    <span class=\"hljs-keyword\">ldr</span> x5,qAdrtbConstKt\n    <span class=\"hljs-keyword\">mov</span> x6,<span class=\"hljs-number\">#0</span>\n<span class=\"hljs-symbol\">loop64T:</span>                      <span class=\"hljs-comment\">// begin loop 64 t</span>\n    <span class=\"hljs-keyword\">ldr</span> w9,[x8,<span class=\"hljs-symbol\">#var_h</span>]\n    <span class=\"hljs-keyword\">ldr</span> w10,[x8,<span class=\"hljs-symbol\">#var_e</span>]       <span class=\"hljs-comment\">// calcul T1</span>\n    <span class=\"hljs-keyword\">ror</span> w11,w10,<span class=\"hljs-number\">#6</span>            <span class=\"hljs-comment\">// fonction sigma 1</span>\n    <span class=\"hljs-keyword\">ror</span> w12,w10,<span class=\"hljs-number\">#11</span>\n    <span class=\"hljs-keyword\">eor</span> w11,w11,w12\n    <span class=\"hljs-keyword\">ror</span> w12,w10,<span class=\"hljs-number\">#25</span>\n    <span class=\"hljs-keyword\">eor</span> w11,w11,w12\n    <span class=\"hljs-keyword\">add</span> w9,w9,w11             <span class=\"hljs-comment\">// h + sigma1 (e)</span>\n    <span class=\"hljs-keyword\">ldr</span> w0,[x8,<span class=\"hljs-symbol\">#var_f</span>]        <span class=\"hljs-comment\">//  fonction ch  x and y xor (non x and z)</span>\n    <span class=\"hljs-keyword\">ldr</span> w4,[x8,<span class=\"hljs-symbol\">#var_g</span>]\n    <span class=\"hljs-keyword\">and</span> w11,w10,w0\n    <span class=\"hljs-keyword\">mvn</span> w12,w10\n    <span class=\"hljs-keyword\">and</span> w12,w12,w4\n    <span class=\"hljs-keyword\">eor</span> w11,w11,w12\n    <span class=\"hljs-keyword\">add</span> w9,w9,w11             <span class=\"hljs-comment\">// h + sigma1 (e) + ch (e,f,g)</span>\n    <span class=\"hljs-keyword\">ldr</span> w0,[x5,x6,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]     <span class=\"hljs-comment\">// load constantes k0</span>\n    <span class=\"hljs-keyword\">add</span> w9,w9,w0\n    <span class=\"hljs-keyword\">ldr</span> w0,[x3,x6,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]     <span class=\"hljs-comment\">// Wt</span>\n    <span class=\"hljs-keyword\">add</span> w9,w9,w0\n                              <span class=\"hljs-comment\">// calcul T2</span>\n    <span class=\"hljs-keyword\">ldr</span> w10,[x8,<span class=\"hljs-symbol\">#var_a</span>]       <span class=\"hljs-comment\">// fonction sigma 0</span>\n    <span class=\"hljs-keyword\">ror</span> w11,w10,<span class=\"hljs-number\">#2</span>\n    <span class=\"hljs-keyword\">ror</span> w12,w10,<span class=\"hljs-number\">#13</span>\n    <span class=\"hljs-keyword\">eor</span> w11,w11,w12\n    <span class=\"hljs-keyword\">ror</span> w12,w10,<span class=\"hljs-number\">#22</span>\n    <span class=\"hljs-keyword\">eor</span> w11,w11,w12\n    <span class=\"hljs-keyword\">ldr</span> w2,[x8,<span class=\"hljs-symbol\">#var_b</span>]\n    <span class=\"hljs-keyword\">ldr</span> w4,[x8,<span class=\"hljs-symbol\">#var_c</span>]\n                              <span class=\"hljs-comment\">// fonction maj x and y xor x and z xor y and z</span>\n    <span class=\"hljs-keyword\">and</span> w12,w10,w2\n    <span class=\"hljs-keyword\">and</span> w0,w10,w4\n    <span class=\"hljs-keyword\">eor</span> w12,w12,w0\n    <span class=\"hljs-keyword\">and</span> w0,w2,w4\n    <span class=\"hljs-keyword\">eor</span> w12,w12,w0            <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-keyword\">add</span> w12,w12,w11           <span class=\"hljs-comment\">// T2</span>\n                              <span class=\"hljs-comment\">// compute variables</span>\n    <span class=\"hljs-keyword\">ldr</span> w4,[x8,<span class=\"hljs-symbol\">#var_g</span>]\n    <span class=\"hljs-keyword\">str</span> w4,[x8,<span class=\"hljs-symbol\">#var_h</span>]\n    <span class=\"hljs-keyword\">ldr</span> w4,[x8,<span class=\"hljs-symbol\">#var_f</span>]\n    <span class=\"hljs-keyword\">str</span> w4,[x8,<span class=\"hljs-symbol\">#var_g</span>]\n    <span class=\"hljs-keyword\">ldr</span> w4,[x8,<span class=\"hljs-symbol\">#var_e</span>]\n    <span class=\"hljs-keyword\">str</span> w4,[x8,<span class=\"hljs-symbol\">#var_f</span>]\n    <span class=\"hljs-keyword\">ldr</span> w4,[x8,<span class=\"hljs-symbol\">#var_d</span>]\n    <span class=\"hljs-keyword\">add</span> w4,w4,w9              <span class=\"hljs-comment\">// add T1</span>\n    <span class=\"hljs-keyword\">str</span> w4,[x8,<span class=\"hljs-symbol\">#var_e</span>]\n    <span class=\"hljs-keyword\">ldr</span> w4,[x8,<span class=\"hljs-symbol\">#var_c</span>]\n    <span class=\"hljs-keyword\">str</span> w4,[x8,<span class=\"hljs-symbol\">#var_d</span>]\n    <span class=\"hljs-keyword\">ldr</span> w4,[x8,<span class=\"hljs-symbol\">#var_b</span>]\n    <span class=\"hljs-keyword\">str</span> w4,[x8,<span class=\"hljs-symbol\">#var_c</span>]\n    <span class=\"hljs-keyword\">ldr</span> w4,[x8,<span class=\"hljs-symbol\">#var_a</span>]\n    <span class=\"hljs-keyword\">str</span> w4,[x8,<span class=\"hljs-symbol\">#var_b</span>]\n    <span class=\"hljs-keyword\">add</span> w4,w9,w12             <span class=\"hljs-comment\">// add T1 T2</span>\n    <span class=\"hljs-keyword\">str</span> w4,[x8,<span class=\"hljs-symbol\">#var_a</span>]\n \n    <span class=\"hljs-keyword\">add</span> x6,x6,<span class=\"hljs-number\">#1</span>              <span class=\"hljs-comment\">// increment t</span>\n    <span class=\"hljs-keyword\">cmp</span> x6,<span class=\"hljs-number\">#64</span>\n    <span class=\"hljs-keyword\">blt</span> loop64T\n                              <span class=\"hljs-comment\">// End block</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrtbH            <span class=\"hljs-comment\">// start area H</span>\n    <span class=\"hljs-keyword\">mov</span> x10,<span class=\"hljs-number\">#0</span>\n<span class=\"hljs-symbol\">loopStoreH:</span>\n    <span class=\"hljs-keyword\">ldr</span> w9,[x8,x10,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]\n    <span class=\"hljs-keyword\">ldr</span> w3,[x0,x10,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]\n    <span class=\"hljs-keyword\">add</span> w3,w3,w9\n    <span class=\"hljs-keyword\">str</span> w3,[x0,x10,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]    <span class=\"hljs-comment\">// store variables in H0</span>\n    <span class=\"hljs-keyword\">add</span> x10,x10,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">cmp</span> x10,<span class=\"hljs-number\">#8</span>\n    <span class=\"hljs-keyword\">blt</span> loopStoreH\n                              <span class=\"hljs-comment\">// other bloc</span>\n    <span class=\"hljs-keyword\">add</span> x7,x7,<span class=\"hljs-number\">#1</span>                 <span class=\"hljs-comment\">// increment block</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrqNbBlocs\n    <span class=\"hljs-keyword\">ldr</span> x4,[x0]               <span class=\"hljs-comment\">// restaur maxi block</span>\n    <span class=\"hljs-keyword\">cmp</span> x7,x4                 <span class=\"hljs-comment\">// maxi ?</span>\n \n    <span class=\"hljs-keyword\">blt</span> loopBlock             <span class=\"hljs-comment\">//  loop other block</span>\n \n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#0</span>                 <span class=\"hljs-comment\">// routine OK</span>\n<span class=\"hljs-number\">100</span>:\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-symbol\">qAdrtbConstHi:</span>            .quad tbConstHi\n<span class=\"hljs-symbol\">qAdrtbConstKt:</span>            .quad tbConstKt\n<span class=\"hljs-symbol\">qAdrtbH:</span>                  .quad <span class=\"hljs-keyword\">tbH</span>\n<span class=\"hljs-symbol\">qAdrtbW:</span>                  .quad tbW\n<span class=\"hljs-symbol\">qAdrtbabcdefgh:</span>           .quad tbabcdefgh\n<span class=\"hljs-symbol\">qAdrqNbBlocs:</span>             .quad qNbBlocs\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*     inversion des mots de 32 bits d un bloc                    */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains N° block   */</span>\n<span class=\"hljs-symbol\">inversion:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneTrav\n    <span class=\"hljs-keyword\">add</span> x1,x1,x0,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#6</span>           <span class=\"hljs-comment\">// debut du bloc</span>\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">#0</span>\n<span class=\"hljs-number\">1</span>:                                                  <span class=\"hljs-comment\">// start loop</span>\n    <span class=\"hljs-keyword\">ldr</span> w3,[x1,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]\n    <span class=\"hljs-keyword\">rev</span> w3,w3\n    <span class=\"hljs-keyword\">str</span> w3,[x1,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">cmp</span> x2,<span class=\"hljs-number\">#16</span>\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">1</span>b\n<span class=\"hljs-number\">100</span>:\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*     display hash  SHA1                         */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of hash  */</span>\n<span class=\"hljs-symbol\">displaySHA1:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x3,x0\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">#0</span>\n<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">ldr</span> w0,[x3,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#2</span>]          <span class=\"hljs-comment\">// load 4 bytes</span>\n    <span class=\"hljs-comment\">//rev x0,x0                    // reverse bytes</span>\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\n    <span class=\"hljs-keyword\">bl</span> conversion16_4W             <span class=\"hljs-comment\">// conversion hexa</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrsZoneConv\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">cmp</span> x2,<span class=\"hljs-symbol\">#LGHASH</span> / <span class=\"hljs-number\">4</span>\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">1</span>b                         <span class=\"hljs-comment\">// and loop</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszCarriageReturn\n    <span class=\"hljs-keyword\">bl</span> affichageMess               <span class=\"hljs-comment\">// display message</span>\n<span class=\"hljs-number\">100</span>:\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*     conversion  hexadecimal register 32 bits                   */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains value and x1 address zone receptrice   */</span>\n<span class=\"hljs-symbol\">conversion16_4W:</span>\n    stp x0,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">48</span>]!        <span class=\"hljs-comment\">// save  registres</span>\n    stp x1,x2,[<span class=\"hljs-built_in\">sp</span>,<span class=\"hljs-number\">32</span>]          <span class=\"hljs-comment\">// save  registres</span>\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,<span class=\"hljs-number\">16</span>]          <span class=\"hljs-comment\">// save  registres</span>\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">#28</span>                 <span class=\"hljs-comment\">// start bit position</span>\n    <span class=\"hljs-keyword\">mov</span> x4,<span class=\"hljs-number\">#0xF0000000</span>         <span class=\"hljs-comment\">// mask</span>\n    <span class=\"hljs-keyword\">mov</span> x3,x0                  <span class=\"hljs-comment\">// save entry value</span>\n<span class=\"hljs-number\">1</span>:                             <span class=\"hljs-comment\">// start loop</span>\n    <span class=\"hljs-keyword\">and</span> x0,x3,x4               <span class=\"hljs-comment\">// value register and mask</span>\n    <span class=\"hljs-keyword\">lsr</span> x0,x0,x2               <span class=\"hljs-comment\">// right shift</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">#10</span>                 <span class=\"hljs-comment\">// &gt;= 10 ?</span>\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">2</span>f                     <span class=\"hljs-comment\">// yes</span>\n    <span class=\"hljs-keyword\">add</span> x0,x0,<span class=\"hljs-number\">#48</span>              <span class=\"hljs-comment\">// no is digit</span>\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">3</span>f\n<span class=\"hljs-number\">2</span>:\n    <span class=\"hljs-keyword\">add</span> x0,x0,<span class=\"hljs-number\">#55</span>              <span class=\"hljs-comment\">// else is a letter A-F</span>\n<span class=\"hljs-number\">3</span>:\n    <span class=\"hljs-keyword\">strb</span> w0,[x1],<span class=\"hljs-number\">#1</span>            <span class=\"hljs-comment\">// load result  and + 1 in address</span>\n    <span class=\"hljs-keyword\">lsr</span> x4,x4,<span class=\"hljs-number\">#4</span>               <span class=\"hljs-comment\">// shift mask 4 bits left</span>\n    <span class=\"hljs-keyword\">subs</span> x2,x2,<span class=\"hljs-number\">#4</span>              <span class=\"hljs-comment\">// decrement counter 4 bits &lt;= zero  ?</span>\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">1</span>b                     <span class=\"hljs-comment\">// no -&gt; loop</span>\n \n<span class=\"hljs-number\">100</span>:                           <span class=\"hljs-comment\">// fin standard de la fonction</span>\n    ldp x3,x4,[<span class=\"hljs-built_in\">sp</span>,<span class=\"hljs-number\">16</span>]          <span class=\"hljs-comment\">// restaur des  2 registres</span>\n    ldp x1,x2,[<span class=\"hljs-built_in\">sp</span>,<span class=\"hljs-number\">32</span>]          <span class=\"hljs-comment\">// restaur des  2 registres</span>\n    ldp x0,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">48</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\n    ret    \n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/*        File Include fonctions                        */</span>\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeARM64.inc&quot;</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Torben Lehmann",
      "email": "rabiet@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 1
    },
    {
      "name": "Paul Leydier",
      "email": "75126792+paul-leydier@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Keshav Bohra",
      "email": "keshav2016@gmail.com",
      "commits": 1
    },
    {
      "name": "Ravi Patel",
      "email": "ravi.patel1245@gmail.com",
      "commits": 1
    },
    {
      "name": "Studiex",
      "email": "80968515+Studiex@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}