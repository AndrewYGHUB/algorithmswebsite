{
  "slug": "shortest-common-supersequence-length",
  "name": "Shortest Common Supersequence Length",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/dynamicprogramming/ShortestCommonSupersequenceLength.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/dynamicprogramming/ShortestCommonSupersequenceLength.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\n\n<span class=\"hljs-comment\">// Java program to find length of the shortest supersequence</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ShortestSuperSequence</span> {\n\n    <span class=\"hljs-comment\">// Function to find length of the</span>\n    <span class=\"hljs-comment\">// shortest supersequence of X and Y.</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">shortestSuperSequence</span><span class=\"hljs-params\">(String X, String Y)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">m</span> <span class=\"hljs-operator\">=</span> X.length();\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> Y.length();\n\n        <span class=\"hljs-comment\">// find lcs</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">l</span> <span class=\"hljs-operator\">=</span> lcs(X, Y, m, n);\n\n        <span class=\"hljs-comment\">// Result is sum of input string</span>\n        <span class=\"hljs-comment\">// lengths - length of lcs</span>\n        <span class=\"hljs-keyword\">return</span> (m + n - l);\n    }\n\n    <span class=\"hljs-comment\">// Returns length of LCS</span>\n    <span class=\"hljs-comment\">// for X[0..m - 1], Y[0..n - 1]</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">lcs</span><span class=\"hljs-params\">(String X, String Y, <span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n)</span> {\n        <span class=\"hljs-type\">int</span>[][] L = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[m + <span class=\"hljs-number\">1</span>][n + <span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-type\">int</span> i, j;\n\n        <span class=\"hljs-comment\">// Following steps build L[m + 1][n + 1]</span>\n        <span class=\"hljs-comment\">// in bottom up fashion. Note that</span>\n        <span class=\"hljs-comment\">// L[i][j] contains length of LCS</span>\n        <span class=\"hljs-comment\">// of X[0..i - 1]and Y[0..j - 1]</span>\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt;= m; i++) {\n            <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt;= n; j++) {\n                <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span> || j == <span class=\"hljs-number\">0</span>) {\n                    L[i][j] = <span class=\"hljs-number\">0</span>;\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (X.charAt(i - <span class=\"hljs-number\">1</span>) == Y.charAt(j - <span class=\"hljs-number\">1</span>)) {\n                    L[i][j] = L[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>;\n                } <span class=\"hljs-keyword\">else</span> {\n                    L[i][j] = Math.max(L[i - <span class=\"hljs-number\">1</span>][j],\n                            L[i][j - <span class=\"hljs-number\">1</span>]);\n                }\n            }\n        }\n\n        <span class=\"hljs-comment\">// L[m][n] contains length of LCS</span>\n        <span class=\"hljs-comment\">// for X[0..n - 1] and Y[0..m - 1]</span>\n        <span class=\"hljs-keyword\">return</span> L[m][n];\n    }\n\n    <span class=\"hljs-comment\">// Driver code</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">X</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;AGGTAB&quot;</span>;\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">Y</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;GXTXAYB&quot;</span>;\n\n        System.out.println(<span class=\"hljs-string\">&quot;Length of the shortest &quot;</span>\n                + <span class=\"hljs-string\">&quot;supersequence is &quot;</span>\n                + shortestSuperSequence(X, Y));\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Madhav Bhat K",
      "email": "54632221+kmadhav907@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}