{
  "slug": "shortest-common-supersequence",
  "name": "Shortest Common Supersequence",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "dynamic_programming/shortest_common_supersequence.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming/shortest_common_supersequence.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief SCS is a string Z which is the shortest supersequence of strings X and Y (may not be continuous in Z, but order is maintained).\n *\n * @details\n * The idea is to use lookup table method as used in LCS.\n * For example: example 1:-\n * X: &#x27;ABCXYZ&#x27;, Y: &#x27;ABZ&#x27; then Z will be &#x27;ABCXYZ&#x27; (y is not continuous but in order)\n * \n * For example: example 2:-\n * X: &#x27;AGGTAB&#x27;, Y: &#x27;GXTXAYB&#x27; then Z will be &#x27;AGGXTXAYB&#x27;\n * @author [Ridhish Jain](https://github.com/ridhishjain)\n * @see more on [SCS](https://en.wikipedia.org/wiki/Shortest_common_supersequence_problem)\n * @see related problem [Leetcode](https://leetcode.com/problems/shortest-common-supersequence/)\n*/</span>\n\n<span class=\"hljs-comment\">// header files</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace dynamic_programming\n * @brief Dynamic Programming algorithms\n*/</span>\n<span class=\"hljs-keyword\">namespace</span> dynamic_programming {\n\n    <span class=\"hljs-comment\">/**\n    * @namespace shortest_common_supersequence\n    * @brief Shortest Common Super Sequence algorithm\n    */</span>\n    <span class=\"hljs-keyword\">namespace</span> shortest_common_supersequence {\n        \n        <span class=\"hljs-comment\">/**\n         * Function implementing Shortest Common Super-Sequence algorithm using look-up table method.\n         * @param str1 first string &#x27;X&#x27;\n         * @param str2 second string &#x27;Y&#x27;\n         * @returns string &#x27;Z&#x27;, superSequence of X and Y \n        */</span>\n        <span class=\"hljs-function\">std::string <span class=\"hljs-title\">scs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::string &amp;str1, <span class=\"hljs-type\">const</span> std::string &amp;str2)</span> </span>{\n\n            <span class=\"hljs-comment\">// Edge cases</span>\n            <span class=\"hljs-comment\">// If either str1 or str2 or both are empty</span>\n            <span class=\"hljs-keyword\">if</span>(str1.<span class=\"hljs-built_in\">empty</span>() &amp;&amp; str2.<span class=\"hljs-built_in\">empty</span>()) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(str1.<span class=\"hljs-built_in\">empty</span>()) {\n                <span class=\"hljs-keyword\">return</span> str2;\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(str2.<span class=\"hljs-built_in\">empty</span>()) {\n                <span class=\"hljs-keyword\">return</span> str1;\n            }\n\n            <span class=\"hljs-comment\">// creating lookup table</span>\n            std::vector &lt;std::vector &lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">lookup</span>(str1.<span class=\"hljs-built_in\">length</span>() + <span class=\"hljs-number\">1</span>, std::vector &lt;<span class=\"hljs-type\">int</span>&gt; (str2.<span class=\"hljs-built_in\">length</span>() + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>));\n      \n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i &lt;= str1.<span class=\"hljs-built_in\">length</span>(); i++) {\n                <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j &lt;= str2.<span class=\"hljs-built_in\">length</span>(); j++) {\n                    <span class=\"hljs-keyword\">if</span>(str1[i<span class=\"hljs-number\">-1</span>] == str2[j<span class=\"hljs-number\">-1</span>]) {\n                        lookup[i][j] = lookup[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>] + <span class=\"hljs-number\">1</span>;\n                    }\n                    <span class=\"hljs-keyword\">else</span> {\n                        lookup[i][j] = std::<span class=\"hljs-built_in\">max</span>(lookup[i<span class=\"hljs-number\">-1</span>][j], lookup[i][j<span class=\"hljs-number\">-1</span>]);\n                    }\n                }\n            }\n\n            <span class=\"hljs-comment\">// making supersequence</span>\n            <span class=\"hljs-comment\">// i and j are initially pointed towards end of strings</span>\n            <span class=\"hljs-comment\">// Super-sequence will be constructed backwards</span>\n            <span class=\"hljs-type\">int</span> i=str1.<span class=\"hljs-built_in\">length</span>();\n            <span class=\"hljs-type\">int</span> j=str2.<span class=\"hljs-built_in\">length</span>();\n            std::string s;\n      \n            <span class=\"hljs-keyword\">while</span>(i&gt;<span class=\"hljs-number\">0</span> &amp;&amp; j&gt;<span class=\"hljs-number\">0</span>) {\n\n                <span class=\"hljs-comment\">// If the characters at i and j of both strings are same</span>\n                <span class=\"hljs-comment\">// We only need to add them once in s</span>\n                <span class=\"hljs-keyword\">if</span>(str1[i<span class=\"hljs-number\">-1</span>] == str2[j<span class=\"hljs-number\">-1</span>]) {\n                    s.<span class=\"hljs-built_in\">push_back</span>(str1[i<span class=\"hljs-number\">-1</span>]);\n                    i--;\n                    j--;\n                }\n                <span class=\"hljs-comment\">// otherwise we check lookup table for recurrences of characters</span>\n                <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-keyword\">if</span>(lookup[i<span class=\"hljs-number\">-1</span>][j] &gt; lookup[i][j<span class=\"hljs-number\">-1</span>]) {\n                        s.<span class=\"hljs-built_in\">push_back</span>(str1[i<span class=\"hljs-number\">-1</span>]);\n                        i--;\n                    }\n                    <span class=\"hljs-keyword\">else</span> {\n                        s.<span class=\"hljs-built_in\">push_back</span>(str2[j<span class=\"hljs-number\">-1</span>]);\n                        j--;\n                    }\n                }\n            }\n\n            <span class=\"hljs-comment\">// copying remaining elements</span>\n            <span class=\"hljs-comment\">// if j becomes 0 before i</span>\n            <span class=\"hljs-keyword\">while</span>(i &gt; <span class=\"hljs-number\">0</span>) {\n                s.<span class=\"hljs-built_in\">push_back</span>(str1[i<span class=\"hljs-number\">-1</span>]);\n                i--;\n            }\n\n            <span class=\"hljs-comment\">// if i becomes 0 before j</span>\n            <span class=\"hljs-keyword\">while</span>(j &gt; <span class=\"hljs-number\">0</span>) {\n                s.<span class=\"hljs-built_in\">push_back</span>(str2[j<span class=\"hljs-number\">-1</span>]);\n                j--;\n            }\n\n            <span class=\"hljs-comment\">// As the super sequence is constructd backwards</span>\n            <span class=\"hljs-comment\">// reversing the string before returning gives us the correct output  </span>\n            <span class=\"hljs-built_in\">reverse</span>(s.<span class=\"hljs-built_in\">begin</span>(), s.<span class=\"hljs-built_in\">end</span>());\n            <span class=\"hljs-keyword\">return</span> s;\n        }\n    } <span class=\"hljs-comment\">// namespace shortest_common_supersequence</span>\n} <span class=\"hljs-comment\">// namespace dynamic_programming</span>\n\n<span class=\"hljs-comment\">/** \n * Test Function\n * @return void \n*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// custom input vector</span>\n    std::vector &lt;std::vector &lt;std::string&gt;&gt; scsStrings {\n        {<span class=\"hljs-string\">&quot;ABCXYZ&quot;</span>, <span class=\"hljs-string\">&quot;ABZ&quot;</span>},\n        {<span class=\"hljs-string\">&quot;ABZ&quot;</span>, <span class=\"hljs-string\">&quot;ABCXYZ&quot;</span>},\n        {<span class=\"hljs-string\">&quot;AGGTAB&quot;</span>, <span class=\"hljs-string\">&quot;GXTXAYB&quot;</span>},\n        {<span class=\"hljs-string\">&quot;X&quot;</span>, <span class=\"hljs-string\">&quot;Y&quot;</span>},\n    };\n\n    <span class=\"hljs-comment\">// calculated output vector by scs function</span>\n    std::vector &lt;std::string&gt; <span class=\"hljs-built_in\">calculatedOutput</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">&quot;&quot;</span>);\n    <span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span> &amp; scsString : scsStrings) {\n        \n        calculatedOutput[i] = dynamic_programming::shortest_common_supersequence::<span class=\"hljs-built_in\">scs</span>(\n            scsString[<span class=\"hljs-number\">0</span>], scsString[<span class=\"hljs-number\">1</span>]\n        );\n        i++;\n    }\n\n    <span class=\"hljs-comment\">// expected output vector acc to problem statement</span>\n    std::vector &lt;std::string&gt; expectedOutput {\n        <span class=\"hljs-string\">&quot;ABCXYZ&quot;</span>,\n        <span class=\"hljs-string\">&quot;ABCXYZ&quot;</span>,\n        <span class=\"hljs-string\">&quot;AGGXTXAYB&quot;</span>,\n        <span class=\"hljs-string\">&quot;XY&quot;</span>\n    };\n\n    <span class=\"hljs-comment\">// Testing implementation via assert function</span>\n    <span class=\"hljs-comment\">// It will throw error if any of the expected test fails</span>\n    <span class=\"hljs-comment\">// Else it will give nothing</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i &lt; scsStrings.<span class=\"hljs-built_in\">size</span>(); i++) {\n        <span class=\"hljs-built_in\">assert</span>(expectedOutput[i] == calculatedOutput[i]);\n    }\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;All tests passed successfully!\\n&quot;</span>;\n    <span class=\"hljs-keyword\">return</span>;\n}\n\n<span class=\"hljs-comment\">/** Main function (driver code)*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// test for implementation</span>\n    <span class=\"hljs-built_in\">test</span>();\n\n    <span class=\"hljs-comment\">// user input</span>\n    std::string s1, s2;\n    std::cin &gt;&gt; s1;\n    std::cin &gt;&gt; s2;\n\n    std::string ans;\n\n    <span class=\"hljs-comment\">// user output</span>\n    ans = dynamic_programming::shortest_common_supersequence::<span class=\"hljs-built_in\">scs</span>(s1, s2);\n    std::cout &lt;&lt; ans;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "ridhishjain",
      "email": "ultimate.ridhish@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}