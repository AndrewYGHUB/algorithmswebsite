{
  "slug": "shortest-job-first",
  "name": "Shortest Job First",
  "categories": [
    "scheduling"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "scheduling/shortest_job_first.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/scheduling/shortest_job_first.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nShortest job remaining first\nPlease note arrival time and burst\nPlease use spaces to separate times entered.\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calculate_waitingtime</span>(<span class=\"hljs-params\">\n    arrival_time: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], burst_time: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], no_of_processes: <span class=\"hljs-built_in\">int</span>\n</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculate the waiting time of each processes\n    Return: List of waiting times.\n    &gt;&gt;&gt; calculate_waitingtime([1,2,3,4],[3,3,5,1],4)\n    [0, 3, 5, 0]\n    &gt;&gt;&gt; calculate_waitingtime([1,2,3],[2,5,1],3)\n    [0, 2, 0]\n    &gt;&gt;&gt; calculate_waitingtime([2,3],[5,1],2)\n    [1, 0]\n    &quot;&quot;&quot;</span>\n    remaining_time = [<span class=\"hljs-number\">0</span>] * no_of_processes\n    waiting_time = [<span class=\"hljs-number\">0</span>] * no_of_processes\n    <span class=\"hljs-comment\"># Copy the burst time into remaining_time[]</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(no_of_processes):\n        remaining_time[i] = burst_time[i]\n\n    complete = <span class=\"hljs-number\">0</span>\n    increment_time = <span class=\"hljs-number\">0</span>\n    minm = <span class=\"hljs-number\">999999999</span>\n    short = <span class=\"hljs-number\">0</span>\n    check = <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-comment\"># Process until all processes are completed</span>\n    <span class=\"hljs-keyword\">while</span> complete != no_of_processes:\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(no_of_processes):\n            <span class=\"hljs-keyword\">if</span> arrival_time[j] &lt;= increment_time:\n                <span class=\"hljs-keyword\">if</span> remaining_time[j] &gt; <span class=\"hljs-number\">0</span>:\n                    <span class=\"hljs-keyword\">if</span> remaining_time[j] &lt; minm:\n                        minm = remaining_time[j]\n                        short = j\n                        check = <span class=\"hljs-literal\">True</span>\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> check:\n            increment_time += <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">continue</span>\n        remaining_time[short] -= <span class=\"hljs-number\">1</span>\n\n        minm = remaining_time[short]\n        <span class=\"hljs-keyword\">if</span> minm == <span class=\"hljs-number\">0</span>:\n            minm = <span class=\"hljs-number\">999999999</span>\n\n        <span class=\"hljs-keyword\">if</span> remaining_time[short] == <span class=\"hljs-number\">0</span>:\n            complete += <span class=\"hljs-number\">1</span>\n            check = <span class=\"hljs-literal\">False</span>\n\n            <span class=\"hljs-comment\"># Find finish time of current process</span>\n            finish_time = increment_time + <span class=\"hljs-number\">1</span>\n\n            <span class=\"hljs-comment\"># Calculate waiting time</span>\n            finar = finish_time - arrival_time[short]\n            waiting_time[short] = finar - burst_time[short]\n\n            <span class=\"hljs-keyword\">if</span> waiting_time[short] &lt; <span class=\"hljs-number\">0</span>:\n                waiting_time[short] = <span class=\"hljs-number\">0</span>\n\n        <span class=\"hljs-comment\"># Increment time</span>\n        increment_time += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> waiting_time\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calculate_turnaroundtime</span>(<span class=\"hljs-params\">\n    burst_time: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], no_of_processes: <span class=\"hljs-built_in\">int</span>, waiting_time: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]\n</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculate the turn around time of each Processes\n    Return: list of turn around times.\n    &gt;&gt;&gt; calculate_turnaroundtime([3,3,5,1], 4, [0,3,5,0])\n    [3, 6, 10, 1]\n    &gt;&gt;&gt; calculate_turnaroundtime([3,3], 2, [0,3])\n    [3, 6]\n    &gt;&gt;&gt; calculate_turnaroundtime([8,10,1], 3, [1,0,3])\n    [9, 10, 4]\n    &quot;&quot;&quot;</span>\n    turn_around_time = [<span class=\"hljs-number\">0</span>] * no_of_processes\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(no_of_processes):\n        turn_around_time[i] = burst_time[i] + waiting_time[i]\n    <span class=\"hljs-keyword\">return</span> turn_around_time\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calculate_average_times</span>(<span class=\"hljs-params\">\n    waiting_time: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], turn_around_time: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], no_of_processes: <span class=\"hljs-built_in\">int</span>\n</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    This function calculates the average of the waiting &amp; turnaround times\n    Prints: Average Waiting time &amp; Average Turn Around Time\n    &gt;&gt;&gt; calculate_average_times([0,3,5,0],[3,6,10,1],4)\n    Average waiting time = 2.00000\n    Average turn around time = 5.0\n    &gt;&gt;&gt; calculate_average_times([2,3],[3,6],2)\n    Average waiting time = 2.50000\n    Average turn around time = 4.5\n    &gt;&gt;&gt; calculate_average_times([10,4,3],[2,7,6],3)\n    Average waiting time = 5.66667\n    Average turn around time = 5.0\n    &quot;&quot;&quot;</span>\n    total_waiting_time = <span class=\"hljs-number\">0</span>\n    total_turn_around_time = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(no_of_processes):\n        total_waiting_time = total_waiting_time + waiting_time[i]\n        total_turn_around_time = total_turn_around_time + turn_around_time[i]\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Average waiting time = <span class=\"hljs-subst\">{total_waiting_time / no_of_processes:<span class=\"hljs-number\">.5</span>f}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Average turn around time =&quot;</span>, total_turn_around_time / no_of_processes)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Enter how many process you want to analyze&quot;</span>)\n    no_of_processes = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>())\n    burst_time = [<span class=\"hljs-number\">0</span>] * no_of_processes\n    arrival_time = [<span class=\"hljs-number\">0</span>] * no_of_processes\n    processes = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, no_of_processes + <span class=\"hljs-number\">1</span>))\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(no_of_processes):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Enter the arrival time and burst time for process:--&quot;</span> + <span class=\"hljs-built_in\">str</span>(i + <span class=\"hljs-number\">1</span>))\n        arrival_time[i], burst_time[i] = <span class=\"hljs-built_in\">map</span>(<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">input</span>().split())\n\n    waiting_time = calculate_waitingtime(arrival_time, burst_time, no_of_processes)\n\n    bt = burst_time\n    n = no_of_processes\n    wt = waiting_time\n    turn_around_time = calculate_turnaroundtime(bt, n, wt)\n\n    calculate_average_times(waiting_time, turn_around_time, no_of_processes)\n\n    fcfs = pd.DataFrame(\n        <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">zip</span>(processes, burst_time, arrival_time, waiting_time, turn_around_time)),\n        columns=[\n            <span class=\"hljs-string\">&quot;Process&quot;</span>,\n            <span class=\"hljs-string\">&quot;BurstTime&quot;</span>,\n            <span class=\"hljs-string\">&quot;ArrivalTime&quot;</span>,\n            <span class=\"hljs-string\">&quot;WaitingTime&quot;</span>,\n            <span class=\"hljs-string\">&quot;TurnAroundTime&quot;</span>,\n        ],\n    )\n\n    <span class=\"hljs-comment\"># Printing the dataFrame</span>\n    pd.set_option(<span class=\"hljs-string\">&quot;display.max_rows&quot;</span>, fcfs.shape[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-built_in\">print</span>(fcfs)\n"
    }
  },
  "contributors": [
    {
      "name": "Vardhaman",
      "email": "83634399+cyai@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Leoriem-code",
      "email": "73761711+Leoriem-code@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Shantanu Joshi",
      "email": "42472191+shan7030@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hasenn",
      "email": "eliottarloveyrier@live.fr",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}