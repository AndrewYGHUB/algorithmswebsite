{
  "slug": "show-response",
  "name": "Show Response",
  "categories": [
    "audiofilters"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "audio_filters/show_response.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/audio_filters/show_response.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> pi\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> Protocol\n\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FilterType</span>(<span class=\"hljs-title class_ inherited__\">Protocol</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">process</span>(<span class=\"hljs-params\">self, sample: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Calculate y[n]\n\n        &gt;&gt;&gt; issubclass(FilterType, Protocol)\n        True\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0.0</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_bounds</span>(<span class=\"hljs-params\">\n    fft_results: np.ndarray, samplerate: <span class=\"hljs-built_in\">int</span>\n</span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span> | <span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-built_in\">float</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Get bounds for printing fft results\n\n    &gt;&gt;&gt; import numpy\n    &gt;&gt;&gt; array = numpy.linspace(-20.0, 20.0, 1000)\n    &gt;&gt;&gt; get_bounds(array, 1000)\n    (-20, 20)\n    &quot;&quot;&quot;</span>\n    lowest = <span class=\"hljs-built_in\">min</span>([-<span class=\"hljs-number\">20</span>, np.<span class=\"hljs-built_in\">min</span>(fft_results[<span class=\"hljs-number\">1</span> : samplerate // <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>])])\n    highest = <span class=\"hljs-built_in\">max</span>([<span class=\"hljs-number\">20</span>, np.<span class=\"hljs-built_in\">max</span>(fft_results[<span class=\"hljs-number\">1</span> : samplerate // <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>])])\n    <span class=\"hljs-keyword\">return</span> lowest, highest\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show_frequency_response</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">filter</span>: FilterType, samplerate: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Show frequency response of a filter\n\n    &gt;&gt;&gt; from audio_filters.iir_filter import IIRFilter\n    &gt;&gt;&gt; filt = IIRFilter(4)\n    &gt;&gt;&gt; show_frequency_response(filt, 48000)\n    &quot;&quot;&quot;</span>\n\n    size = <span class=\"hljs-number\">512</span>\n    inputs = [<span class=\"hljs-number\">1</span>] + [<span class=\"hljs-number\">0</span>] * (size - <span class=\"hljs-number\">1</span>)\n    outputs = [<span class=\"hljs-built_in\">filter</span>.process(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> inputs]\n\n    filler = [<span class=\"hljs-number\">0</span>] * (samplerate - size)  <span class=\"hljs-comment\"># zero-padding</span>\n    outputs += filler\n    fft_out = np.<span class=\"hljs-built_in\">abs</span>(np.fft.fft(outputs))\n    fft_db = <span class=\"hljs-number\">20</span> * np.log10(fft_out)\n\n    <span class=\"hljs-comment\"># Frequencies on log scale from 24 to nyquist frequency</span>\n    plt.xlim(<span class=\"hljs-number\">24</span>, samplerate / <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>)\n    plt.xlabel(<span class=\"hljs-string\">&quot;Frequency (Hz)&quot;</span>)\n    plt.xscale(<span class=\"hljs-string\">&quot;log&quot;</span>)\n\n    <span class=\"hljs-comment\"># Display within reasonable bounds</span>\n    bounds = get_bounds(fft_db, samplerate)\n    plt.ylim(<span class=\"hljs-built_in\">max</span>([-<span class=\"hljs-number\">80</span>, bounds[<span class=\"hljs-number\">0</span>]]), <span class=\"hljs-built_in\">min</span>([<span class=\"hljs-number\">80</span>, bounds[<span class=\"hljs-number\">1</span>]]))\n    plt.ylabel(<span class=\"hljs-string\">&quot;Gain (dB)&quot;</span>)\n\n    plt.plot(fft_db)\n    plt.show()\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show_phase_response</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">filter</span>: FilterType, samplerate: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Show phase response of a filter\n\n    &gt;&gt;&gt; from audio_filters.iir_filter import IIRFilter\n    &gt;&gt;&gt; filt = IIRFilter(4)\n    &gt;&gt;&gt; show_phase_response(filt, 48000)\n    &quot;&quot;&quot;</span>\n\n    size = <span class=\"hljs-number\">512</span>\n    inputs = [<span class=\"hljs-number\">1</span>] + [<span class=\"hljs-number\">0</span>] * (size - <span class=\"hljs-number\">1</span>)\n    outputs = [<span class=\"hljs-built_in\">filter</span>.process(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> inputs]\n\n    filler = [<span class=\"hljs-number\">0</span>] * (samplerate - size)  <span class=\"hljs-comment\"># zero-padding</span>\n    outputs += filler\n    fft_out = np.angle(np.fft.fft(outputs))\n\n    <span class=\"hljs-comment\"># Frequencies on log scale from 24 to nyquist frequency</span>\n    plt.xlim(<span class=\"hljs-number\">24</span>, samplerate / <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>)\n    plt.xlabel(<span class=\"hljs-string\">&quot;Frequency (Hz)&quot;</span>)\n    plt.xscale(<span class=\"hljs-string\">&quot;log&quot;</span>)\n\n    plt.ylim(-<span class=\"hljs-number\">2</span> * pi, <span class=\"hljs-number\">2</span> * pi)\n    plt.ylabel(<span class=\"hljs-string\">&quot;Phase shift (Radians)&quot;</span>)\n    plt.plot(np.unwrap(fft_out, -<span class=\"hljs-number\">2</span> * pi))\n    plt.show()\n"
    }
  },
  "contributors": [
    {
      "name": "Martmists",
      "email": "mail@martmists.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}