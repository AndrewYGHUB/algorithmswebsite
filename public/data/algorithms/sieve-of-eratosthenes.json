{
  "slug": "sieve-of-eratosthenes",
  "name": "Sieve of Eratosthenes",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/sieve_of_eratosthenes.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/sieve_of_eratosthenes.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nSieve of Eratosthones\r\n\r\nThe sieve of Eratosthenes is an algorithm used to find prime numbers, less than or\r\nequal to a given value.\r\nIllustration:\r\nhttps://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif\r\nReference: https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\r\n\r\ndoctest provider: Bruno Simas Hadlich (https://github.com/brunohadlich)\r\nAlso thanks to Dmitry (https://github.com/LizardWizzard) for finding the problem\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">import</span> math\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">prime_sieve</span>(<span class=\"hljs-params\">num: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Returns a list with all prime numbers up to n.\r\n\r\n    &gt;&gt;&gt; prime_sieve(50)\r\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\r\n    &gt;&gt;&gt; prime_sieve(25)\r\n    [2, 3, 5, 7, 11, 13, 17, 19, 23]\r\n    &gt;&gt;&gt; prime_sieve(10)\r\n    [2, 3, 5, 7]\r\n    &gt;&gt;&gt; prime_sieve(9)\r\n    [2, 3, 5, 7]\r\n    &gt;&gt;&gt; prime_sieve(2)\r\n    [2]\r\n    &gt;&gt;&gt; prime_sieve(1)\r\n    []\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> num &lt;= <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{num}</span>: Invalid input, please enter a positive integer.&quot;</span>)\r\n\r\n    sieve = [<span class=\"hljs-literal\">True</span>] * (num + <span class=\"hljs-number\">1</span>)\r\n    prime = []\r\n    start = <span class=\"hljs-number\">2</span>\r\n    end = <span class=\"hljs-built_in\">int</span>(math.sqrt(num))\r\n\r\n    <span class=\"hljs-keyword\">while</span> start &lt;= end:\r\n        <span class=\"hljs-comment\"># If start is a prime</span>\r\n        <span class=\"hljs-keyword\">if</span> sieve[start] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>:\r\n            prime.append(start)\r\n\r\n            <span class=\"hljs-comment\"># Set multiples of start be False</span>\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(start * start, num + <span class=\"hljs-number\">1</span>, start):\r\n                <span class=\"hljs-keyword\">if</span> sieve[i] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>:\r\n                    sieve[i] = <span class=\"hljs-literal\">False</span>\r\n\r\n        start += <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(end + <span class=\"hljs-number\">1</span>, num + <span class=\"hljs-number\">1</span>):\r\n        <span class=\"hljs-keyword\">if</span> sieve[j] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>:\r\n            prime.append(j)\r\n\r\n    <span class=\"hljs-keyword\">return</span> prime\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-built_in\">print</span>(prime_sieve(<span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter a positive integer: &quot;</span>).strip())))\r\n"
    },
    "javascript": {
      "dir": "Maths/SieveOfEratosthenes.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/SieveOfEratosthenes.js",
      "code": "<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">sieveOfEratosthenes</span> = (<span class=\"hljs-params\">n</span>) =&gt; {\n  <span class=\"hljs-comment\">/*\n   * Calculates prime numbers till a number n\n   * :param n: Number up to which to calculate primes\n   * :return: A boolean list containing only primes\n   */</span>\n  <span class=\"hljs-keyword\">const</span> primes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(n + <span class=\"hljs-number\">1</span>)\n  primes.<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-literal\">true</span>) <span class=\"hljs-comment\">// set all as true initially</span>\n  primes[<span class=\"hljs-number\">0</span>] = primes[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// Handling case for 0 and 1</span>\n  <span class=\"hljs-keyword\">const</span> sqrtn = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">ceil</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">sqrt</span>(n))\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">2</span>; i &lt;= sqrtn; i++) {\n    <span class=\"hljs-keyword\">if</span> (primes[i]) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = i * i; j &lt;= n; j += i) {\n        <span class=\"hljs-comment\">/*\n        Optimization.\n        Let j start from i * i, not 2 * i, because smaller multiples of i have been marked false.\n\n        For example, let i = 4.\n        We do not have to check from 8(4 * 2) to 12(4 * 3)\n        because they have been already marked false when i=2 and i=3.\n        */</span>\n        primes[j] = <span class=\"hljs-literal\">false</span>\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> primes\n}\n\n<span class=\"hljs-keyword\">export</span> { sieveOfEratosthenes }\n"
    },
    "c-plus-plus": {
      "dir": "math/sieve_of_eratosthenes.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/sieve_of_eratosthenes.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Get list of prime numbers using Sieve of Eratosthenes\n * @details\n * Sieve of Eratosthenes is an algorithm that finds all the primes\n * between 2 and N.\n *\n * Time Complexity  : \\f$O(N \\cdot\\log \\log N)\\f$\n * &lt;br/&gt;Space Complexity : \\f$O(N)\\f$\n *\n * @see primes_up_to_billion.cpp prime_numbers.cpp\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * This is the function that finds the primes and eliminates the multiples.\n * Contains a common optimization to start eliminating multiples of\n * a prime p starting from p * p since all of the lower multiples\n * have been already eliminated.\n * @param N number of primes to check\n * @return is_prime a vector of `N + 1` booleans identifying if `i`^th number is a prime or not\n */</span>\n<span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; <span class=\"hljs-title\">sieve</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint32_t</span> N)</span> </span>{\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; <span class=\"hljs-title\">is_prime</span><span class=\"hljs-params\">(N + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">true</span>)</span></span>;\n    is_prime[<span class=\"hljs-number\">0</span>] = is_prime[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> i = <span class=\"hljs-number\">2</span>; i * i &lt;= N; i++) {\n        <span class=\"hljs-keyword\">if</span> (is_prime[i]) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> j = i * i; j &lt;= N; j += i) {\n                is_prime[j] = <span class=\"hljs-literal\">false</span>;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> is_prime;\n}\n\n<span class=\"hljs-comment\">/**\n * This function prints out the primes to STDOUT\n * @param N number of primes to check\n * @param is_prime a vector of `N + 1` booleans identifying if `i`^th number is a prime or not\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint32_t</span> N, <span class=\"hljs-type\">const</span> std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; &amp;is_prime)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> i = <span class=\"hljs-number\">2</span>; i &lt;= N; i++) {\n        <span class=\"hljs-keyword\">if</span> (is_prime[i]) {\n            std::cout &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&#x27; &#x27;</span>;\n        }\n    }\n    std::cout &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * Test implementations\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">tests</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">//                    0      1      2     3     4      5     6      7     8      9      10</span>\n  std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; ans{<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">false</span>};\n  <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">sieve</span>(<span class=\"hljs-number\">10</span>) == ans);\n}\n\n<span class=\"hljs-comment\">/**\n * Main function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">tests</span>();\n\n    <span class=\"hljs-type\">uint32_t</span> N = <span class=\"hljs-number\">100</span>;\n    std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; is_prime = <span class=\"hljs-built_in\">sieve</span>(N);\n    <span class=\"hljs-built_in\">print</span>(N, is_prime);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/others/SieveOfEratosthenes.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/others/SieveOfEratosthenes.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.others;\n\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n\n<span class=\"hljs-comment\">/**\n * Sieve of Eratosthenes is an ancient algorithm for finding all prime numbers\n * up to any given limit. It does so by iteratively marking as composite (i.e.,\n * not prime) the multiples of each prime, starting with the first prime number,\n * 2. The multiples of a given prime are generated as a sequence of numbers\n * starting from that prime, with constant difference between them that is equal\n * to that prime. This is the sieve&#x27;s key distinction from using trial division\n * to sequentially test each candidate number for divisibility by each prime.\n * Once all the multiples of each discovered prime have been marked as\n * composites, the remaining unmarked numbers are primes.\n * &lt;p&gt;\n * Poetry about Sieve of Eratosthenes:\n * &lt;p&gt;\n * &lt;i&gt;Sift the Two&#x27;s and Sift the Three&#x27;s:&lt;/i&gt;&lt;/p&gt;\n * &lt;p&gt;\n * &lt;i&gt;The Sieve of Eratosthenes.&lt;/i&gt;&lt;/p&gt;\n * &lt;p&gt;\n * &lt;i&gt;When the multiples sublime,&lt;/i&gt;&lt;/p&gt;\n * &lt;p&gt;\n * &lt;i&gt;The numbers that remain are Prime.&lt;/i&gt;&lt;/p&gt;\n *\n * <span class=\"hljs-doctag\">@see</span> &lt;a href=&quot;https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes&quot;&gt;Wiki&lt;/a&gt;\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SieveOfEratosthenes</span> {\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@param</span> n The number till which we have to check for prime Prints all the\n     * prime numbers till n. Should be more than 1.\n     * <span class=\"hljs-doctag\">@return</span> array of all prime numbers between 0 to n\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] findPrimesTill(<span class=\"hljs-type\">int</span> n) {\n        <span class=\"hljs-comment\">// Create array where index is number and value is flag - is that number a prime or not.</span>\n        <span class=\"hljs-comment\">// size of array is n + 1 cause in Java array indexes starts with 0</span>\n        Type[] numbers = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Type</span>[n + <span class=\"hljs-number\">1</span>];\n\n        <span class=\"hljs-comment\">// Start with assumption that all numbers except 0 and 1 are primes.</span>\n        Arrays.fill(numbers, Type.PRIME);\n        numbers[<span class=\"hljs-number\">0</span>] = numbers[<span class=\"hljs-number\">1</span>] = Type.NOT_PRIME;\n\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">cap</span> <span class=\"hljs-operator\">=</span> Math.sqrt(n);\n        <span class=\"hljs-comment\">// Main algorithm: mark all numbers which are multiples of some other values as not prime</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; i &lt;= cap; i++) {\n            <span class=\"hljs-keyword\">if</span> (numbers[i] == Type.PRIME) {\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; i * j &lt;= n; j++) {\n                    numbers[i * j] = Type.NOT_PRIME;\n                }\n            }\n        }\n\n        <span class=\"hljs-comment\">//Write all primes to result array</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">primesCount</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">int</span>) Arrays.stream(numbers)\n                .filter(element -&gt; element == Type.PRIME)\n                .count();\n        <span class=\"hljs-type\">int</span>[] primes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[primesCount];\n\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">primeIndex</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n + <span class=\"hljs-number\">1</span>; i++) {\n            <span class=\"hljs-keyword\">if</span> (numbers[i] == Type.PRIME) {\n                primes[primeIndex++] = i;\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> primes;\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Type</span> {\n        PRIME, NOT_PRIME\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100</span>;\n        System.out.println(<span class=\"hljs-string\">&quot;Searching for all primes from zero to &quot;</span> + n);\n        <span class=\"hljs-type\">int</span>[] primes = findPrimesTill(n);\n        System.out.println(<span class=\"hljs-string\">&quot;Found: &quot;</span> + Arrays.toString(primes));\n    }\n}\n"
    },
    "rust": {
      "dir": "src/math/sieve_of_eratosthenes.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/math/sieve_of_eratosthenes.rs",
      "code": "<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">sieve_of_eratosthenes</span>(num: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n    <span class=\"hljs-keyword\">if</span> num == <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-keyword\">return</span> result;\n    }\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">start</span>: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">end</span>: <span class=\"hljs-type\">usize</span> = (num <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f64</span>).<span class=\"hljs-title function_ invoke__\">sqrt</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">sieve</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">bool</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-literal\">true</span>; num + <span class=\"hljs-number\">1</span>];\n\n    <span class=\"hljs-keyword\">while</span> start &lt;= end {\n        <span class=\"hljs-keyword\">if</span> sieve[start] {\n            result.<span class=\"hljs-title function_ invoke__\">push</span>(start);\n            <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> (start * start..num + <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">step_by</span>(start) {\n                <span class=\"hljs-keyword\">if</span> sieve[i] {\n                    sieve[i] = <span class=\"hljs-literal\">false</span>;\n                }\n            }\n        }\n        start += <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-title function_ invoke__\">for</span> (i, item) <span class=\"hljs-keyword\">in</span> sieve.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>().<span class=\"hljs-title function_ invoke__\">take</span>(num + <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">skip</span>(end + <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">if</span> *item {\n            result.<span class=\"hljs-title function_ invoke__\">push</span>(i)\n        }\n    }\n    result\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">basic</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">sieve_of_eratosthenes</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-built_in\">vec!</span>[]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">sieve_of_eratosthenes</span>(<span class=\"hljs-number\">11</span>), <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">sieve_of_eratosthenes</span>(<span class=\"hljs-number\">25</span>),\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">23</span>]\n        );\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">sieve_of_eratosthenes</span>(<span class=\"hljs-number\">33</span>),\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">29</span>, <span class=\"hljs-number\">31</span>]\n        );\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">sieve_of_eratosthenes</span>(<span class=\"hljs-number\">100</span>),\n            <span class=\"hljs-built_in\">vec!</span>[\n                <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">29</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">37</span>, <span class=\"hljs-number\">41</span>, <span class=\"hljs-number\">43</span>, <span class=\"hljs-number\">47</span>, <span class=\"hljs-number\">53</span>, <span class=\"hljs-number\">59</span>, <span class=\"hljs-number\">61</span>, <span class=\"hljs-number\">67</span>, <span class=\"hljs-number\">71</span>, <span class=\"hljs-number\">73</span>, <span class=\"hljs-number\">79</span>,\n                <span class=\"hljs-number\">83</span>, <span class=\"hljs-number\">89</span>, <span class=\"hljs-number\">97</span>\n            ]\n        );\n    }\n}\n"
    },
    "dart": {
      "dir": "maths/sieve_of_eratosthenes.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths/sieve_of_eratosthenes.dart",
      "code": "<span class=\"hljs-comment\">/*\n  * Source:\n  *   https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n  * \n  * Description:\n  *   Calculates prime numbers till a number n\n  * \n  * Time Complexity:\n  *   O(n log(log(n)))\n  */</span>\n\n<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">bool</span>&gt; sieve_of_eratosthenes(<span class=\"hljs-built_in\">int</span> n) {\n  <span class=\"hljs-comment\">// Input: n: int</span>\n  <span class=\"hljs-comment\">// Output: is_prime: List&lt;bool&gt; denoting whether ith element is prime or not</span>\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">bool</span>&gt; is_prime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">List</span>.filled(n + <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">true</span>);\n  is_prime[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-keyword\">false</span>;\n  is_prime[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-keyword\">false</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">2</span>; i * i &lt;= n; i++) {\n    <span class=\"hljs-keyword\">if</span> (is_prime[i]) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = i * i; j &lt;= n; j += i) {\n        <span class=\"hljs-comment\">// mark all multiples of i as false</span>\n        is_prime[j] = <span class=\"hljs-keyword\">false</span>;\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> is_prime;\n}\n\nmain() {\n  <span class=\"hljs-comment\">// Prints all the primes under 50</span>\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">bool</span>&gt; primes = sieve_of_eratosthenes(<span class=\"hljs-number\">50</span>);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt;= <span class=\"hljs-number\">50</span>; i++) {\n    <span class=\"hljs-keyword\">if</span> (primes[i]) {\n      <span class=\"hljs-built_in\">print</span>(i);\n    }\n  }\n}\n"
    },
    "julia": {
      "dir": "src/math/sieve_of_eratosthenes.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/math/sieve_of_eratosthenes.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nSieve of Eratosthenes is an algorithm for finding all the primes upto a limit `n`.\n\nReference:\n-https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> eratosthenes(n)\n    primes = fill(<span class=\"hljs-literal\">true</span>, n)\n    primes[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">2</span>:n\n        primes[p] || <span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">2</span>:div(n, p)\n            primes[p*i] = <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> findall(primes)\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "lua": {
      "dir": "src/math/prime/sieve_of_eratosthenes.lua",
      "url": "https://github.com/TheAlgorithms/lua/tree/master/src/math/prime/sieve_of_eratosthenes.lua",
      "code": "<span class=\"hljs-comment\">-- Sieve of Eratosthenes</span>\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(\n\tn <span class=\"hljs-comment\">-- number</span>\n)</span></span>\n\t<span class=\"hljs-keyword\">local</span> is_prime = { <span class=\"hljs-literal\">false</span> }\n\t<span class=\"hljs-keyword\">for</span> m = <span class=\"hljs-number\">2</span>, n <span class=\"hljs-keyword\">do</span> <span class=\"hljs-comment\">-- mark as prime</span>\n\t\tis_prime[m] = <span class=\"hljs-literal\">true</span>\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">for</span> m = <span class=\"hljs-number\">2</span>, n / <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">do</span> <span class=\"hljs-comment\">-- iterate possible primes</span>\n\t\t<span class=\"hljs-keyword\">if</span> is_prime[m] <span class=\"hljs-keyword\">then</span>\n\t\t\t<span class=\"hljs-keyword\">for</span> l = <span class=\"hljs-number\">2</span> * m, n, m <span class=\"hljs-keyword\">do</span> <span class=\"hljs-comment\">-- iterate multiples</span>\n\t\t\t\tis_prime[l] = <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">-- &quot;cross out&quot; composite</span>\n\t\t\t<span class=\"hljs-keyword\">end</span>\n\t\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">return</span> is_prime <span class=\"hljs-comment\">-- list [m] = `true` if m is a prime, `false` otherwise for m in range 1 to n (inclusive)</span>\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Other/SieveOfEratosthenes.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/Algorithms/Other/SieveOfEratosthenes.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n<span class=\"hljs-keyword\">using</span> System.Linq;\n<span class=\"hljs-keyword\">using</span> System.Numerics;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Other</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     TODO.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SieveOfEratosthenes</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     TODO.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;count&quot;&gt;</span>TODO. 2.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>TODO. 3.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> List&lt;BigInteger&gt; <span class=\"hljs-title\">GetPrimeNumbers</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> count</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> output = <span class=\"hljs-keyword\">new</span> List&lt;BigInteger&gt;();\n            <span class=\"hljs-keyword\">for</span> (BigInteger n = <span class=\"hljs-number\">2</span>; output.Count &lt; count; n++)\n            {\n                <span class=\"hljs-keyword\">if</span> (output.All(x =&gt; n % x != <span class=\"hljs-number\">0</span>))\n                {\n                    output.Add(n);\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> output;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Lars Mueller",
      "email": "appgurulars@gmx.de",
      "commits": 1
    },
    {
      "name": "varunu28",
      "email": "varun.u28@gmail.com",
      "commits": 1
    },
    {
      "name": "DONSIMON92",
      "email": "47272787+DONSIMON92@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Ihjass Thasbekha",
      "email": "44056715+Ihjass@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ved Mahajan",
      "email": "vsmahajan2k@gmail.com",
      "commits": 1
    },
    {
      "name": "utkarsh",
      "email": "ucponia@gmail.com",
      "commits": 1
    },
    {
      "name": "Daniil Efimenko",
      "email": "dan.ef1999@gmail.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "JimmyJoo",
      "email": "jimmyjoo1029@gmail.com",
      "commits": 1
    },
    {
      "name": "Samarth Jain",
      "email": "53353139+samjain2907@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "Mohit Sharma",
      "email": "mohit1532.cse16@chitkara.edu.in",
      "commits": 1
    },
    {
      "name": "Artem Boiarshinov",
      "email": "54187376+Boiarshinov@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "obelisk0114",
      "email": "obelisk0114@yahoo.com.tw",
      "commits": 1
    },
    {
      "name": "Joyce",
      "email": "jycyeo@yahoo.com.sg",
      "commits": 1
    },
    {
      "name": "Farhan",
      "email": "farhankasmani956@gmail.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 2
    },
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 2
    },
    {
      "name": "YATIN KATHURIA",
      "email": "47096348+Yatin-kathuria@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Keshav Bohra",
      "email": "keshav2016@gmail.com",
      "commits": 2
    },
    {
      "name": "Ephraim Atta-Duncan",
      "email": "55143799+dephraiim@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 6
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 7
    }
  ],
  "explanationUrl": {}
}