{
  "slug": "sieve",
  "name": "Sieve",
  "categories": [
    "math",
    "prime"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "math/prime/sieve.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/math/prime/sieve.go",
      "code": "<span class=\"hljs-comment\">// sieve.go</span>\n<span class=\"hljs-comment\">// description: Algorithms for generating prime numbers efficiently</span>\n<span class=\"hljs-comment\">// author(s) [Taj](https://github.com/tjgurwara99)</span>\n<span class=\"hljs-comment\">// see sieve_test.go</span>\n\n<span class=\"hljs-keyword\">package</span> prime\n\n<span class=\"hljs-comment\">// Generate generates the sequence of integers starting at 2 and sends it to the channel `ch`</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GenerateChannel</span><span class=\"hljs-params\">(ch <span class=\"hljs-keyword\">chan</span>&lt;- <span class=\"hljs-type\">int</span>)</span></span> {\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">2</span>; ; i++ {\n\t\tch &lt;- i\n\t}\n}\n\n<span class=\"hljs-comment\">// Sieve Sieving the numbers that are not prime from the channel - basically removing them from the channels</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Sieve</span><span class=\"hljs-params\">(in &lt;-<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-type\">int</span>, out <span class=\"hljs-keyword\">chan</span>&lt;- <span class=\"hljs-type\">int</span>, prime <span class=\"hljs-type\">int</span>)</span></span> {\n\t<span class=\"hljs-keyword\">for</span> {\n\t\ti := &lt;-in\n\t\t<span class=\"hljs-keyword\">if</span> i%prime != <span class=\"hljs-number\">0</span> {\n\t\t\tout &lt;- i\n\t\t}\n\t}\n}\n\n<span class=\"hljs-comment\">// Generate returns a int slice of prime numbers up to the limit</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Generate</span><span class=\"hljs-params\">(limit <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> {\n\t<span class=\"hljs-keyword\">var</span> primes []<span class=\"hljs-type\">int</span>\n\n\tch := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-type\">int</span>)\n\t<span class=\"hljs-keyword\">go</span> GenerateChannel(ch)\n\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; limit; i++ {\n\t\tprimes = <span class=\"hljs-built_in\">append</span>(primes, &lt;-ch)\n\t\tch1 := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-type\">int</span>)\n\t\t<span class=\"hljs-keyword\">go</span> Sieve(ch, ch1, primes[i])\n\t\tch = ch1\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> primes\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}