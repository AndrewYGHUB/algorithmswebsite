{
  "slug": "simple-sub-cipher",
  "name": "Simple Sub Cipher",
  "categories": [
    "ciphers"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/ciphers/SimpleSubCipher.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/ciphers/SimpleSubCipher.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.ciphers;\n\n<span class=\"hljs-keyword\">import</span> java.util.HashMap;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n\n<span class=\"hljs-comment\">/**\n * The simple substitution cipher is a cipher that has been in use for many\n * hundreds of years (an excellent history is given in Simon Singhs &#x27;the Code\n * Book&#x27;). It basically consists of substituting every plaintext character for a\n * different ciphertext character. It differs from the Caesar cipher in that the\n * cipher alphabet is not simply the alphabet shifted, it is completely jumbled.\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SimpleSubCipher</span> {\n\n    <span class=\"hljs-comment\">/**\n     * Encrypt text by replacing each element with its opposite character.\n     *\n     * <span class=\"hljs-doctag\">@param</span> message\n     * <span class=\"hljs-doctag\">@param</span> cipherSmall\n     * <span class=\"hljs-doctag\">@return</span> Encrypted message\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">encode</span><span class=\"hljs-params\">(String message, String cipherSmall)</span> {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">encoded</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n\n        <span class=\"hljs-comment\">// This map is used to encode</span>\n        Map&lt;Character, Character&gt; cipherMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n\n        <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">beginSmallLetter</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>;\n        <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">beginCapitalLetter</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;A&#x27;</span>;\n\n        cipherSmall = cipherSmall.toLowerCase();\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">cipherCapital</span> <span class=\"hljs-operator\">=</span> cipherSmall.toUpperCase();\n\n        <span class=\"hljs-comment\">// To handle Small and Capital letters</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; cipherSmall.length(); i++) {\n            cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));\n            cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));\n        }\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; message.length(); i++) {\n            <span class=\"hljs-keyword\">if</span> (Character.isAlphabetic(message.charAt(i))) {\n                encoded += cipherMap.get(message.charAt(i));\n            } <span class=\"hljs-keyword\">else</span> {\n                encoded += message.charAt(i);\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> encoded;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Decrypt message by replacing each element with its opposite character in\n     * cipher.\n     *\n     * <span class=\"hljs-doctag\">@param</span> encryptedMessage\n     * <span class=\"hljs-doctag\">@param</span> cipherSmall\n     * <span class=\"hljs-doctag\">@return</span> message\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">decode</span><span class=\"hljs-params\">(String encryptedMessage, String cipherSmall)</span> {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">decoded</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n\n        Map&lt;Character, Character&gt; cipherMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;Character, Character&gt;();\n\n        <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">beginSmallLetter</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>;\n        <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">beginCapitalLetter</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;A&#x27;</span>;\n\n        cipherSmall = cipherSmall.toLowerCase();\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">cipherCapital</span> <span class=\"hljs-operator\">=</span> cipherSmall.toUpperCase();\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; cipherSmall.length(); i++) {\n            cipherMap.put(cipherSmall.charAt(i), beginSmallLetter++);\n            cipherMap.put(cipherCapital.charAt(i), beginCapitalLetter++);\n        }\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; encryptedMessage.length(); i++) {\n            <span class=\"hljs-keyword\">if</span> (Character.isAlphabetic(encryptedMessage.charAt(i))) {\n                decoded += cipherMap.get(encryptedMessage.charAt(i));\n            } <span class=\"hljs-keyword\">else</span> {\n                decoded += encryptedMessage.charAt(i);\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> decoded;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> encode(<span class=\"hljs-string\">&quot;defend the east wall of the castle&quot;</span>, <span class=\"hljs-string\">&quot;phqgiumeaylnofdxjkrcvstzwb&quot;</span>);\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> decode(a, <span class=\"hljs-string\">&quot;phqgiumeaylnofdxjkrcvstzwb&quot;</span>);\n        System.out.println(b);\n    }\n\n}\n"
    }
  },
  "contributors": [
    {
      "name": "patrick-steve",
      "email": "75305373+patrick-steve@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}