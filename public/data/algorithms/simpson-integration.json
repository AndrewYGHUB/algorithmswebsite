{
  "slug": "simpson-integration",
  "name": "Simpson Integration",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Maths/SimpsonIntegration.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/SimpsonIntegration.js",
      "code": "<span class=\"hljs-comment\">/*\n*\n* @file\n* @title Composite Simpson&#x27;s rule for definite integral evaluation\n* @author: [ggkogkou](https://github.com/ggkogkou)\n* @brief Calculate definite integrals using composite Simpson&#x27;s numerical method\n*\n* @details The idea is to split the interval in an EVEN number N of intervals and use as interpolation points the xi\n* for which it applies that xi = x0 + i*h, where h is a step defined as h = (b-a)/N where a and b are the\n* first and last points of the interval of the integration [a, b].\n*\n* We create a table of the xi and their corresponding f(xi) values and we evaluate the integral by the formula:\n* I = h/3 * {f(x0) + 4*f(x1) + 2*f(x2) + ... + 2*f(xN-2) + 4*f(xN-1) + f(xN)}\n*\n* That means that the first and last indexed i f(xi) are multiplied by 1,\n* the odd indexed f(xi) by 4 and the even by 2.\n*\n* N must be even number and a&lt;b. By increasing N, we also increase precision\n*\n* More info: [Wikipedia link](https://en.wikipedia.org/wiki/Simpson%27s_rule#Composite_Simpson&#x27;s_rule)\n*\n*/</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">integralEvaluation</span> (N, a, b, func) {\n  <span class=\"hljs-comment\">// Check if N is an even integer</span>\n  <span class=\"hljs-keyword\">let</span> isNEven = <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">if</span> (N % <span class=\"hljs-number\">2</span> !== <span class=\"hljs-number\">0</span>) isNEven = <span class=\"hljs-literal\">false</span>\n\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Number</span>.<span class=\"hljs-title function_\">isInteger</span>(N) || <span class=\"hljs-title class_\">Number</span>.<span class=\"hljs-built_in\">isNaN</span>(a) || <span class=\"hljs-title class_\">Number</span>.<span class=\"hljs-built_in\">isNaN</span>(b)) { <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;Expected integer N and finite a, b&#x27;</span>) }\n  <span class=\"hljs-keyword\">if</span> (!isNEven) { <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;N is not an even number&#x27;</span>) }\n  <span class=\"hljs-keyword\">if</span> (N &lt;= <span class=\"hljs-number\">0</span>) { <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;N has to be &gt;= 2&#x27;</span>) }\n\n  <span class=\"hljs-comment\">// Check if a &lt; b</span>\n  <span class=\"hljs-keyword\">if</span> (a &gt; b) { <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;a must be less or equal than b&#x27;</span>) }\n  <span class=\"hljs-keyword\">if</span> (a === b) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-comment\">// Calculate the step h</span>\n  <span class=\"hljs-keyword\">const</span> h = (b - a) / N\n\n  <span class=\"hljs-comment\">// Find interpolation points</span>\n  <span class=\"hljs-keyword\">let</span> xi = a <span class=\"hljs-comment\">// initialize xi = x0</span>\n  <span class=\"hljs-keyword\">const</span> pointsArray = []\n\n  <span class=\"hljs-comment\">// Find the sum {f(x0) + 4*f(x1) + 2*f(x2) + ... + 2*f(xN-2) + 4*f(xN-1) + f(xN)}</span>\n  <span class=\"hljs-keyword\">let</span> temp\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; N + <span class=\"hljs-number\">1</span>; i++) {\n    <span class=\"hljs-keyword\">if</span> (i === <span class=\"hljs-number\">0</span> || i === N) temp = <span class=\"hljs-title function_\">func</span>(xi)\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>) temp = <span class=\"hljs-number\">2</span> * <span class=\"hljs-title function_\">func</span>(xi)\n    <span class=\"hljs-keyword\">else</span> temp = <span class=\"hljs-number\">4</span> * <span class=\"hljs-title function_\">func</span>(xi)\n\n    pointsArray.<span class=\"hljs-title function_\">push</span>(temp)\n    xi += h\n  }\n\n  <span class=\"hljs-comment\">// Calculate the integral</span>\n  <span class=\"hljs-keyword\">let</span> result = h / <span class=\"hljs-number\">3</span>\n  temp = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; pointsArray.<span class=\"hljs-property\">length</span>; i++) temp += pointsArray[i]\n\n  result *= temp\n\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Number</span>.<span class=\"hljs-built_in\">isNaN</span>(result)) { <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;Result is NaN. The input interval doesn&#x27;t belong to the functions domain&quot;</span>) }\n\n  <span class=\"hljs-keyword\">return</span> result\n}\n\n<span class=\"hljs-keyword\">export</span> { integralEvaluation }\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/maths/SimpsonIntegration.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/maths/SimpsonIntegration.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\n\n<span class=\"hljs-keyword\">import</span> java.util.TreeMap;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SimpsonIntegration</span> {\n\n    <span class=\"hljs-comment\">/*\n     * Calculate definite integrals by using Composite Simpson&#x27;s rule.\n     * Wiki: https://en.wikipedia.org/wiki/Simpson%27s_rule#Composite_Simpson&#x27;s_rule\n     * Given f a function and an even number N of intervals that divide the integration interval e.g. [a, b],\n     * we calculate the step h = (b-a)/N and create a table that contains all the x points of\n     * the real axis xi = x0 + i*h and the value f(xi) that corresponds to these xi.\n     *\n     * To evaluate the integral i use the formula below:\n     * I = h/3 * {f(x0) + 4*f(x1) + 2*f(x2) + 4*f(x3) + ... + 2*f(xN-2) + 4*f(xN-1) + f(xN)}\n     *\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">SimpsonIntegration</span> <span class=\"hljs-variable\">integration</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpsonIntegration</span>();\n\n        <span class=\"hljs-comment\">// Give random data for the example purposes</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">N</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">16</span>;\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3</span>;\n\n        <span class=\"hljs-comment\">// Check so that N is even</span>\n        <span class=\"hljs-keyword\">if</span> (N % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>) {\n            System.out.println(<span class=\"hljs-string\">&quot;N must be even number for Simpsons method. Aborted&quot;</span>);\n            System.exit(<span class=\"hljs-number\">1</span>);\n        }\n\n        <span class=\"hljs-comment\">// Calculate step h and evaluate the integral</span>\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">h</span> <span class=\"hljs-operator\">=</span> (b - a) / (<span class=\"hljs-type\">double</span>) N;\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">integralEvaluation</span> <span class=\"hljs-operator\">=</span> integration.simpsonsMethod(N, h, a);\n        System.out.println(<span class=\"hljs-string\">&quot;The integral is equal to: &quot;</span> + integralEvaluation);\n    }\n\n    <span class=\"hljs-comment\">/*\n     * @param N: Number of intervals (must be even number N=2*k)\n     * @param h: Step h = (b-a)/N\n     * @param a: Starting point of the interval\n     * @param b: Ending point of the interval\n     *\n     * The interpolation points xi = x0 + i*h are stored the treeMap data\n     *\n     * @return result of the integral evaluation\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">simpsonsMethod</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> N, <span class=\"hljs-type\">double</span> h, <span class=\"hljs-type\">double</span> a)</span> {\n        TreeMap&lt;Integer, Double&gt; data = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeMap</span>&lt;&gt;(); <span class=\"hljs-comment\">// Key: i, Value: f(xi)</span>\n        <span class=\"hljs-type\">double</span> temp;\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">xi</span> <span class=\"hljs-operator\">=</span> a; <span class=\"hljs-comment\">// Initialize the variable xi = x0 + 0*h</span>\n\n        <span class=\"hljs-comment\">// Create the table of xi and yi points</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt;= N; i++) {\n            temp = f(xi); <span class=\"hljs-comment\">// Get the value of the function at that point</span>\n            data.put(i, temp);\n            xi += h; <span class=\"hljs-comment\">// Increase the xi to the next point</span>\n        }\n\n        <span class=\"hljs-comment\">// Apply the formula</span>\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">integralEvaluation</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; data.size(); i++) {\n            <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span> || i == data.size() - <span class=\"hljs-number\">1</span>) {\n                integralEvaluation += data.get(i);\n                System.out.println(<span class=\"hljs-string\">&quot;Multiply f(x&quot;</span> + i + <span class=\"hljs-string\">&quot;) by 1&quot;</span>);\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>) {\n                integralEvaluation += (<span class=\"hljs-type\">double</span>) <span class=\"hljs-number\">4</span> * data.get(i);\n                System.out.println(<span class=\"hljs-string\">&quot;Multiply f(x&quot;</span> + i + <span class=\"hljs-string\">&quot;) by 4&quot;</span>);\n            } <span class=\"hljs-keyword\">else</span> {\n                integralEvaluation += (<span class=\"hljs-type\">double</span>) <span class=\"hljs-number\">2</span> * data.get(i);\n                System.out.println(<span class=\"hljs-string\">&quot;Multiply f(x&quot;</span> + i + <span class=\"hljs-string\">&quot;) by 2&quot;</span>);\n            }\n        }\n\n        <span class=\"hljs-comment\">// Multiply by h/3</span>\n        integralEvaluation = h / <span class=\"hljs-number\">3</span> * integralEvaluation;\n\n        <span class=\"hljs-comment\">// Return the result</span>\n        <span class=\"hljs-keyword\">return</span> integralEvaluation;\n    }\n\n    <span class=\"hljs-comment\">// Sample function f</span>\n    <span class=\"hljs-comment\">// Function f(x) = e^(-x) * (4 - x^2)</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">f</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> x)</span> {\n        <span class=\"hljs-keyword\">return</span> Math.exp(-x) * (<span class=\"hljs-number\">4</span> - Math.pow(x, <span class=\"hljs-number\">2</span>));\n<span class=\"hljs-comment\">//        return Math.sqrt(x);</span>\n    }\n\n}\n"
    },
    "rust": {
      "dir": "src/math/simpson_integration.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/math/simpson_integration.rs",
      "code": "<span class=\"hljs-comment\">// This gives a better approximation than naive approach</span>\n<span class=\"hljs-comment\">// See https://en.wikipedia.org/wiki/Simpson%27s_rule</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">simpson_integration</span>&lt;F: <span class=\"hljs-title function_ invoke__\">Fn</span>(<span class=\"hljs-type\">f64</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span>&gt;(\n    start: <span class=\"hljs-type\">f64</span>,\n    end: <span class=\"hljs-type\">f64</span>,\n    steps: <span class=\"hljs-type\">u64</span>,\n    function: F,\n) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span> = <span class=\"hljs-title function_ invoke__\">function</span>(start) + <span class=\"hljs-title function_ invoke__\">function</span>(end);\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">step</span> = (end - start) / steps <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f64</span>;\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..steps {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">x</span> = start + step * i <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f64</span>;\n        <span class=\"hljs-keyword\">match</span> i % <span class=\"hljs-number\">2</span> {\n            <span class=\"hljs-number\">0</span> =&gt; result += <span class=\"hljs-title function_ invoke__\">function</span>(x) * <span class=\"hljs-number\">2.0</span>,\n            <span class=\"hljs-number\">1</span> =&gt; result += <span class=\"hljs-title function_ invoke__\">function</span>(x) * <span class=\"hljs-number\">4.0</span>,\n            _ =&gt; <span class=\"hljs-built_in\">unreachable!</span>(),\n        }\n    }\n    result *= step / <span class=\"hljs-number\">3.0</span>;\n    result\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n\n    <span class=\"hljs-keyword\">use</span> super::*;\n    <span class=\"hljs-keyword\">const</span> EPSILON: <span class=\"hljs-type\">f64</span> = <span class=\"hljs-number\">1e-9</span>;\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">almost_equal</span>(a: <span class=\"hljs-type\">f64</span>, b: <span class=\"hljs-type\">f64</span>, eps: <span class=\"hljs-type\">f64</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        (a - b).<span class=\"hljs-title function_ invoke__\">abs</span>() &lt; eps\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">parabola_curve_length</span>() {\n        <span class=\"hljs-comment\">// Calculate the length of the curve f(x) = x^2 for -5 &lt;= x &lt;= 5</span>\n        <span class=\"hljs-comment\">// We should integrate sqrt(1 + (f&#x27;(x))^2)</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">function</span> = |x: <span class=\"hljs-type\">f64</span>| <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span> { (<span class=\"hljs-number\">1.0</span> + <span class=\"hljs-number\">4.0</span> * x * x).<span class=\"hljs-title function_ invoke__\">sqrt</span>() };\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">result</span> = <span class=\"hljs-title function_ invoke__\">simpson_integration</span>(-<span class=\"hljs-number\">5.0</span>, <span class=\"hljs-number\">5.0</span>, <span class=\"hljs-number\">1_000</span>, function);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">integrated</span> = |x: <span class=\"hljs-type\">f64</span>| <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span> { (x * <span class=\"hljs-title function_ invoke__\">function</span>(x) / <span class=\"hljs-number\">2.0</span>) + ((<span class=\"hljs-number\">2.0</span> * x).<span class=\"hljs-title function_ invoke__\">asinh</span>() / <span class=\"hljs-number\">4.0</span>) };\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">expected</span> = <span class=\"hljs-title function_ invoke__\">integrated</span>(<span class=\"hljs-number\">5.0</span>) - <span class=\"hljs-title function_ invoke__\">integrated</span>(-<span class=\"hljs-number\">5.0</span>);\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">almost_equal</span>(result, expected, EPSILON));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">area_under_cosine</span>() {\n        <span class=\"hljs-keyword\">use</span> std::f64::consts::PI;\n        <span class=\"hljs-comment\">// Calculate area under f(x) = cos(x) + 5 for -pi &lt;= x &lt;= pi</span>\n        <span class=\"hljs-comment\">// cosine should cancel out and the answer should be 2pi * 5</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">function</span> = |x: <span class=\"hljs-type\">f64</span>| <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span> { x.<span class=\"hljs-title function_ invoke__\">cos</span>() + <span class=\"hljs-number\">5.0</span> };\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">result</span> = <span class=\"hljs-title function_ invoke__\">simpson_integration</span>(-PI, PI, <span class=\"hljs-number\">1_000</span>, function);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">expected</span> = <span class=\"hljs-number\">2.0</span> * PI * <span class=\"hljs-number\">5.0</span>;\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">almost_equal</span>(result, expected, EPSILON));\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Erfan Khadem",
      "email": "45465346+er888kh@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 1
    },
    {
      "name": "ggkogkou",
      "email": "76820848+ggkogkou@users.noreply.github.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}