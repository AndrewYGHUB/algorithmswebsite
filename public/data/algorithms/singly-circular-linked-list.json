{
  "slug": "singly-circular-linked-list",
  "name": "Singly Circular Linked List",
  "categories": [
    "datastructures",
    "linkedlist"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Data-Structures/Linked-List/SinglyCircularLinkedList.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures/Linked-List/SinglyCircularLinkedList.js",
      "code": "<span class=\"hljs-comment\">// Methods - size, head, isEmpty, getElementAt, addAtFirst, add, clean, insertAt, remove, removeData, printData, get, clear</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Node</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./SinglyLinkedList.js&#x27;</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SinglyCircularLinkedList</span> {\n  <span class=\"hljs-title function_\">constructor</span> () {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">headNode</span> = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span> = <span class=\"hljs-number\">0</span>\n  }\n\n  <span class=\"hljs-comment\">// Get size of the linkedList</span>\n  size = <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-comment\">// Get the headNode data</span>\n  head = <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">headNode</span>?.<span class=\"hljs-property\">data</span> || <span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-comment\">// Check if the linkedList is empty</span>\n  isEmpty = <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-comment\">// initiate the node and index</span>\n  initiateNodeAndIndex () {\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">currentNode</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">headNode</span>, <span class=\"hljs-attr\">currentIndex</span>: <span class=\"hljs-number\">0</span> }\n  }\n\n  <span class=\"hljs-comment\">// get the data specific to an index</span>\n  getElementAt (index) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span> !== <span class=\"hljs-number\">0</span> &amp;&amp; index &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; index &lt;= <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>) {\n      <span class=\"hljs-keyword\">let</span> { currentNode } = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">initiateNodeAndIndex</span>()\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; index &amp;&amp; currentNode !== <span class=\"hljs-literal\">null</span>; i++) {\n        currentNode = currentNode.<span class=\"hljs-property\">next</span>\n      }\n      <span class=\"hljs-keyword\">return</span> currentNode\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>\n  }\n\n  <span class=\"hljs-comment\">// Add the element in the first position</span>\n  addAtFirst (data) {\n    <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(data)\n    node.<span class=\"hljs-property\">next</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">headNode</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">headNode</span> = node\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>++\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>\n  }\n\n  <span class=\"hljs-comment\">// Add any data to the end of the linkedList</span>\n  add (data) {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">headNode</span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">addAtFirst</span>(data) }\n    <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(data)\n    <span class=\"hljs-comment\">// Getting the last node</span>\n    <span class=\"hljs-keyword\">const</span> currentNode = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getElementAt</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>)\n    currentNode.<span class=\"hljs-property\">next</span> = node\n    node.<span class=\"hljs-property\">next</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">headNode</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>++\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>\n  }\n\n  <span class=\"hljs-comment\">// insert data at a specific position</span>\n  insertAt (index, data) {\n    <span class=\"hljs-keyword\">if</span> (index === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">addAtFirst</span>(data)\n    <span class=\"hljs-keyword\">if</span> (index === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">add</span>(data)\n    <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span> || index &gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RangeError</span>(<span class=\"hljs-string\">`Index is out of range max <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.length}</span>`</span>)\n    <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(data)\n    <span class=\"hljs-keyword\">const</span> previousNode = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getElementAt</span>(index - <span class=\"hljs-number\">1</span>)\n    node.<span class=\"hljs-property\">next</span> = previousNode.<span class=\"hljs-property\">next</span>\n    previousNode.<span class=\"hljs-property\">next</span> = node\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>++\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>\n  }\n\n  <span class=\"hljs-comment\">// find the first index of the data</span>\n  indexOf (data) {\n    <span class=\"hljs-keyword\">let</span> { currentNode } = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">initiateNodeAndIndex</span>()\n    <span class=\"hljs-comment\">// initializing currentIndex as -1</span>\n    <span class=\"hljs-keyword\">let</span> currentIndex = -<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> (currentNode) {\n      <span class=\"hljs-keyword\">if</span> (currentNode.<span class=\"hljs-property\">data</span> === data) {\n        <span class=\"hljs-keyword\">return</span> currentIndex + <span class=\"hljs-number\">1</span>\n      }\n      currentIndex++\n      currentNode = currentNode.<span class=\"hljs-property\">next</span>\n    }\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n  }\n\n  <span class=\"hljs-comment\">// remove the data from the end of the list</span>\n  remove () {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">isEmpty</span>()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">const</span> secondLastNode = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getElementAt</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">const</span> removedNode = secondLastNode.<span class=\"hljs-property\">next</span>\n    secondLastNode.<span class=\"hljs-property\">next</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">headNode</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>--\n    <span class=\"hljs-keyword\">return</span> removedNode.<span class=\"hljs-property\">data</span> || <span class=\"hljs-literal\">null</span>\n  }\n\n  <span class=\"hljs-comment\">// remove the data from the first of the list</span>\n  removeFirst () {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">isEmpty</span>()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">const</span> removedNode = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">headNode</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">clear</span>()\n      <span class=\"hljs-keyword\">return</span> removedNode.<span class=\"hljs-property\">data</span>\n    }\n    <span class=\"hljs-keyword\">const</span> lastNode = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getElementAt</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">headNode</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">headNode</span>.<span class=\"hljs-property\">next</span>\n    lastNode.<span class=\"hljs-property\">next</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">headNode</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>--\n    <span class=\"hljs-keyword\">return</span> removedNode.<span class=\"hljs-property\">data</span> || <span class=\"hljs-literal\">null</span>\n  }\n\n  <span class=\"hljs-comment\">// remove the data from the index</span>\n  removeAt (index) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">isEmpty</span>()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">if</span> (index === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">removeFirst</span>()\n    <span class=\"hljs-keyword\">if</span> (index === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">remove</span>()\n    <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span> &amp;&amp; index &gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">const</span> previousNode = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getElementAt</span>(index - <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">const</span> currentNode = previousNode.<span class=\"hljs-property\">next</span>\n    previousNode.<span class=\"hljs-property\">next</span> = currentNode.<span class=\"hljs-property\">next</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>--\n    <span class=\"hljs-keyword\">return</span> currentNode.<span class=\"hljs-property\">data</span> || <span class=\"hljs-literal\">null</span>\n  }\n\n  <span class=\"hljs-comment\">// remove if the data is present</span>\n  removeData (data) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">isEmpty</span>()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">const</span> index = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">indexOf</span>(data)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">removeAt</span>(index)\n  }\n\n  <span class=\"hljs-comment\">// logs the data</span>\n  printData (output = <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value)) {\n    <span class=\"hljs-keyword\">let</span> { currentIndex, currentNode } = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">initiateNodeAndIndex</span>()\n\n    <span class=\"hljs-keyword\">while</span> (currentNode !== <span class=\"hljs-literal\">null</span> &amp;&amp; currentIndex &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>) {\n      <span class=\"hljs-title function_\">output</span>(currentNode.<span class=\"hljs-property\">data</span>)\n      currentNode = currentNode.<span class=\"hljs-property\">next</span>\n      currentIndex++\n    }\n  }\n\n  <span class=\"hljs-comment\">// get the data from the linkedList</span>\n  get () {\n    <span class=\"hljs-keyword\">let</span> { currentIndex, currentNode } = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">initiateNodeAndIndex</span>()\n    <span class=\"hljs-keyword\">const</span> list = []\n    <span class=\"hljs-keyword\">while</span> (currentNode !== <span class=\"hljs-literal\">null</span> &amp;&amp; currentIndex &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>) {\n      list.<span class=\"hljs-title function_\">push</span>(currentNode.<span class=\"hljs-property\">data</span>)\n      currentNode = currentNode.<span class=\"hljs-property\">next</span>\n      currentIndex++\n    }\n    <span class=\"hljs-keyword\">return</span> list\n  }\n\n  clear () {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">headNode</span> = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span> = <span class=\"hljs-number\">0</span>\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">SinglyCircularLinkedList</span> }\n"
    }
  },
  "contributors": [
    {
      "name": "Rahul Raj",
      "email": "43320722+rraj798@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}