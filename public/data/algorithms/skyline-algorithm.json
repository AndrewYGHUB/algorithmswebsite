{
  "slug": "skyline-algorithm",
  "name": "Skyline Algorithm",
  "categories": [
    "divideandconquer"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/divideandconquer/SkylineAlgorithm.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/divideandconquer/SkylineAlgorithm.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.divideandconquer;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.Comparator;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> dimgrichr\n * &lt;p&gt;\n * Space complexity: O(n) Time complexity: O(nlogn), because it is a divide and\n * conquer algorithm\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SkylineAlgorithm</span> {\n\n    <span class=\"hljs-keyword\">private</span> ArrayList&lt;Point&gt; points;\n\n    <span class=\"hljs-comment\">/**\n     * Main constructor of the application. ArrayList points gets created, which\n     * represents the sum of all edges.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">SkylineAlgorithm</span><span class=\"hljs-params\">()</span> {\n        points = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@return</span> points, the ArrayList that includes all points.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ArrayList&lt;Point&gt; <span class=\"hljs-title function_\">getPoints</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> points;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * The main divide and conquer, and also recursive algorithm. It gets an\n     * ArrayList full of points as an argument. If the size of that ArrayList is\n     * 1 or 2, the ArrayList is returned as it is, or with one less point (if\n     * the initial size is 2 and one of it&#x27;s points, is dominated by the other\n     * one). On the other hand, if the ArrayList&#x27;s size is bigger than 2, the\n     * function is called again, twice, with arguments the corresponding half of\n     * the initial ArrayList each time. Once the flashback has ended, the\n     * function produceFinalSkyLine gets called, in order to produce the final\n     * skyline, and return it.\n     *\n     * <span class=\"hljs-doctag\">@param</span> list, the initial list of points\n     * <span class=\"hljs-doctag\">@return</span> leftSkyLine, the combination of first half&#x27;s and second half&#x27;s\n     * skyline\n     * <span class=\"hljs-doctag\">@see</span> Point\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ArrayList&lt;Point&gt; <span class=\"hljs-title function_\">produceSubSkyLines</span><span class=\"hljs-params\">(ArrayList&lt;Point&gt; list)</span> {\n\n        <span class=\"hljs-comment\">// part where function exits flashback</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> list.size();\n        <span class=\"hljs-keyword\">if</span> (size == <span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-keyword\">return</span> list;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (size == <span class=\"hljs-number\">2</span>) {\n            <span class=\"hljs-keyword\">if</span> (list.get(<span class=\"hljs-number\">0</span>).dominates(list.get(<span class=\"hljs-number\">1</span>))) {\n                list.remove(<span class=\"hljs-number\">1</span>);\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">if</span> (list.get(<span class=\"hljs-number\">1</span>).dominates(list.get(<span class=\"hljs-number\">0</span>))) {\n                    list.remove(<span class=\"hljs-number\">0</span>);\n                }\n            }\n            <span class=\"hljs-keyword\">return</span> list;\n        }\n\n        <span class=\"hljs-comment\">// recursive part of the function</span>\n        ArrayList&lt;Point&gt; leftHalf = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        ArrayList&lt;Point&gt; rightHalf = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; list.size(); i++) {\n            <span class=\"hljs-keyword\">if</span> (i &lt; list.size() / <span class=\"hljs-number\">2</span>) {\n                leftHalf.add(list.get(i));\n            } <span class=\"hljs-keyword\">else</span> {\n                rightHalf.add(list.get(i));\n            }\n        }\n        ArrayList&lt;Point&gt; leftSubSkyLine = produceSubSkyLines(leftHalf);\n        ArrayList&lt;Point&gt; rightSubSkyLine = produceSubSkyLines(rightHalf);\n\n        <span class=\"hljs-comment\">// skyline is produced</span>\n        <span class=\"hljs-keyword\">return</span> produceFinalSkyLine(leftSubSkyLine, rightSubSkyLine);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * The first half&#x27;s skyline gets cleared from some points that are not part\n     * of the final skyline (Points with same x-value and different y=values.\n     * The point with the smallest y-value is kept). Then, the minimum y-value\n     * of the points of first half&#x27;s skyline is found. That helps us to clear\n     * the second half&#x27;s skyline, because, the points of second half&#x27;s skyline\n     * that have greater y-value of the minimum y-value that we found before,\n     * are dominated, so they are not part of the final skyline. Finally, the\n     * &quot;cleaned&quot; first half&#x27;s and second half&#x27;s skylines, are combined,\n     * producing the final skyline, which is returned.\n     *\n     * <span class=\"hljs-doctag\">@param</span> left the skyline of the left part of points\n     * <span class=\"hljs-doctag\">@param</span> right the skyline of the right part of points\n     * <span class=\"hljs-doctag\">@return</span> left the final skyline\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ArrayList&lt;Point&gt; <span class=\"hljs-title function_\">produceFinalSkyLine</span><span class=\"hljs-params\">(ArrayList&lt;Point&gt; left, ArrayList&lt;Point&gt; right)</span> {\n\n        <span class=\"hljs-comment\">// dominated points of ArrayList left are removed</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; left.size() - <span class=\"hljs-number\">1</span>; i++) {\n            <span class=\"hljs-keyword\">if</span> (left.get(i).x == left.get(i + <span class=\"hljs-number\">1</span>).x &amp;&amp; left.get(i).y &gt; left.get(i + <span class=\"hljs-number\">1</span>).y) {\n                left.remove(i);\n                i--;\n            }\n        }\n\n        <span class=\"hljs-comment\">// minimum y-value is found</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> left.get(<span class=\"hljs-number\">0</span>).y;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; left.size(); i++) {\n            <span class=\"hljs-keyword\">if</span> (min &gt; left.get(i).y) {\n                min = left.get(i).y;\n                <span class=\"hljs-keyword\">if</span> (min == <span class=\"hljs-number\">1</span>) {\n                    i = left.size();\n                }\n            }\n        }\n\n        <span class=\"hljs-comment\">// dominated points of ArrayList right are removed</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; right.size(); i++) {\n            <span class=\"hljs-keyword\">if</span> (right.get(i).y &gt;= min) {\n                right.remove(i);\n                i--;\n            }\n        }\n\n        <span class=\"hljs-comment\">// final skyline found and returned</span>\n        left.addAll(right);\n        <span class=\"hljs-keyword\">return</span> left;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Point</span> {\n\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> x;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> y;\n\n        <span class=\"hljs-comment\">/**\n         * The main constructor of Point Class, used to represent the 2\n         * Dimension points.\n         *\n         * <span class=\"hljs-doctag\">@param</span> x the point&#x27;s x-value.\n         * <span class=\"hljs-doctag\">@param</span> y the point&#x27;s y-value.\n         */</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Point</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span> {\n            <span class=\"hljs-built_in\">this</span>.x = x;\n            <span class=\"hljs-built_in\">this</span>.y = y;\n        }\n\n        <span class=\"hljs-comment\">/**\n         * <span class=\"hljs-doctag\">@return</span> x, the x-value\n         */</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getX</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> x;\n        }\n\n        <span class=\"hljs-comment\">/**\n         * <span class=\"hljs-doctag\">@return</span> y, the y-value\n         */</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getY</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> y;\n        }\n\n        <span class=\"hljs-comment\">/**\n         * Based on the skyline theory, it checks if the point that calls the\n         * function dominates the argument point.\n         *\n         * <span class=\"hljs-doctag\">@param</span> p1 the point that is compared\n         * <span class=\"hljs-doctag\">@return</span> true if the point wich calls the function dominates p1 false\n         * otherwise.\n         */</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">dominates</span><span class=\"hljs-params\">(Point p1)</span> {\n            <span class=\"hljs-comment\">// checks if p1 is dominated</span>\n            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">this</span>.x &lt; p1.x &amp;&amp; <span class=\"hljs-built_in\">this</span>.y &lt;= p1.y) || (<span class=\"hljs-built_in\">this</span>.x &lt;= p1.x &amp;&amp; <span class=\"hljs-built_in\">this</span>.y &lt; p1.y);\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * It is used to compare the 2 Dimension points, based on their x-values, in\n     * order get sorted later.\n     */</span>\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">XComparator</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Comparator</span>&lt;Point&gt; {\n\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(Point a, Point b)</span> {\n            <span class=\"hljs-keyword\">return</span> Integer.compare(a.x, b.x);\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "dimgrichr",
      "email": "32580033+dimgrichr@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}