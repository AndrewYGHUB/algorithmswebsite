{
  "slug": "snail",
  "name": "Snail",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/dynamic_programming/snail.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/dynamic_programming/snail.rs",
      "code": "<span class=\"hljs-comment\">/// ## Spiral Sorting</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// Given an n x m array, return the array elements arranged from outermost elements</span>\r\n<span class=\"hljs-comment\">/// to the middle element, traveling INWARD FROM TOP-LEFT, CLOCKWISE.</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">snail</span>&lt;T: <span class=\"hljs-built_in\">Copy</span>&gt;(matrix: &amp;[<span class=\"hljs-type\">Vec</span>&lt;T&gt;]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;T&gt; {\r\n    <span class=\"hljs-comment\">// break on empty matrix</span>\r\n    <span class=\"hljs-keyword\">if</span> matrix.<span class=\"hljs-title function_ invoke__\">is_empty</span>() || matrix[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_ invoke__\">is_empty</span>() {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">vec!</span>[];\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">col_count</span> = matrix[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_ invoke__\">len</span>();\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">row_count</span> = matrix.<span class=\"hljs-title function_ invoke__\">len</span>();\r\n\r\n    <span class=\"hljs-comment\">// Initial maximum/minimum indices</span>\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">max_col</span> = col_count - <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">min_col</span> = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">max_row</span> = row_count - <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">min_row</span> = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">// Initial direction is Right because</span>\r\n    <span class=\"hljs-comment\">// we start from the top-left corner of the matrix at indices [0][0]</span>\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">dir</span> = Direction::Right;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">row</span> = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">col</span> = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span> = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n\r\n    <span class=\"hljs-keyword\">while</span> result.<span class=\"hljs-title function_ invoke__\">len</span>() &lt; row_count * col_count {\r\n        result.<span class=\"hljs-title function_ invoke__\">push</span>(matrix[row][col]);\r\n        dir.<span class=\"hljs-title function_ invoke__\">snail_move</span>(\r\n            &amp;<span class=\"hljs-keyword\">mut</span> col,\r\n            &amp;<span class=\"hljs-keyword\">mut</span> row,\r\n            &amp;<span class=\"hljs-keyword\">mut</span> min_col,\r\n            &amp;<span class=\"hljs-keyword\">mut</span> max_col,\r\n            &amp;<span class=\"hljs-keyword\">mut</span> min_row,\r\n            &amp;<span class=\"hljs-keyword\">mut</span> max_row,\r\n        );\r\n    }\r\n\r\n    result\r\n}\r\n\r\n<span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Direction</span> {\r\n    Right,\r\n    Left,\r\n    Down,\r\n    Up,\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Direction</span> {\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">snail_move</span>(\r\n        &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>,\r\n        col: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">usize</span>,\r\n        row: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">usize</span>,\r\n        min_col: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">usize</span>,\r\n        max_col: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">usize</span>,\r\n        min_row: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">usize</span>,\r\n        max_row: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">usize</span>,\r\n    ) {\r\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span> {\r\n            <span class=\"hljs-keyword\">Self</span>::Right =&gt; {\r\n                *col = <span class=\"hljs-keyword\">if</span> *col &lt; *max_col {\r\n                    *col + <span class=\"hljs-number\">1</span>\r\n                } <span class=\"hljs-keyword\">else</span> {\r\n                    *<span class=\"hljs-keyword\">self</span> = <span class=\"hljs-keyword\">Self</span>::Down;\r\n                    *min_row += <span class=\"hljs-number\">1</span>;\r\n                    *row = *min_row;\r\n                    *col\r\n                };\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">Self</span>::Down =&gt; {\r\n                *row = <span class=\"hljs-keyword\">if</span> *row &lt; *max_row {\r\n                    *row + <span class=\"hljs-number\">1</span>\r\n                } <span class=\"hljs-keyword\">else</span> {\r\n                    *<span class=\"hljs-keyword\">self</span> = <span class=\"hljs-keyword\">Self</span>::Left;\r\n                    *max_col -= <span class=\"hljs-number\">1</span>;\r\n                    *col = *max_col;\r\n                    *row\r\n                };\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">Self</span>::Left =&gt; {\r\n                *col = <span class=\"hljs-keyword\">if</span> *col &gt; usize::MIN &amp;&amp; *col &gt; *min_col {\r\n                    *col - <span class=\"hljs-number\">1</span>\r\n                } <span class=\"hljs-keyword\">else</span> {\r\n                    *<span class=\"hljs-keyword\">self</span> = <span class=\"hljs-keyword\">Self</span>::Up;\r\n                    *max_row -= <span class=\"hljs-number\">1</span>;\r\n                    *row = *max_row;\r\n                    *col\r\n                };\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">Self</span>::Up =&gt; {\r\n                *row = <span class=\"hljs-keyword\">if</span> *row &gt; usize::MIN &amp;&amp; *row &gt; *min_row {\r\n                    *row - <span class=\"hljs-number\">1</span>\r\n                } <span class=\"hljs-keyword\">else</span> {\r\n                    *<span class=\"hljs-keyword\">self</span> = <span class=\"hljs-keyword\">Self</span>::Right;\r\n                    *min_col += <span class=\"hljs-number\">1</span>;\r\n                    *col = *min_col;\r\n                    *row\r\n                };\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> test {\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_empty</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">empty</span>: &amp;[<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;] = &amp;[<span class=\"hljs-built_in\">vec!</span>[]];\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">snail</span>(&amp;empty), <span class=\"hljs-built_in\">vec!</span>[]);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_int</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">square</span> = &amp;[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>]];\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">snail</span>(square), <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_char</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">square</span> = &amp;[\r\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&#x27;S&#x27;</span>, <span class=\"hljs-string\">&#x27;O&#x27;</span>, <span class=\"hljs-string\">&#x27;M&#x27;</span>],\r\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&#x27;E&#x27;</span>, <span class=\"hljs-string\">&#x27;T&#x27;</span>, <span class=\"hljs-string\">&#x27;H&#x27;</span>],\r\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&#x27;I&#x27;</span>, <span class=\"hljs-string\">&#x27;N&#x27;</span>, <span class=\"hljs-string\">&#x27;G&#x27;</span>],\r\n        ];\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">snail</span>(square),\r\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&#x27;S&#x27;</span>, <span class=\"hljs-string\">&#x27;O&#x27;</span>, <span class=\"hljs-string\">&#x27;M&#x27;</span>, <span class=\"hljs-string\">&#x27;H&#x27;</span>, <span class=\"hljs-string\">&#x27;G&#x27;</span>, <span class=\"hljs-string\">&#x27;N&#x27;</span>, <span class=\"hljs-string\">&#x27;I&#x27;</span>, <span class=\"hljs-string\">&#x27;E&#x27;</span>, <span class=\"hljs-string\">&#x27;T&#x27;</span>]\r\n        );\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_rect</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">square</span> = &amp;[\r\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&#x27;H&#x27;</span>, <span class=\"hljs-string\">&#x27;E&#x27;</span>, <span class=\"hljs-string\">&#x27;L&#x27;</span>, <span class=\"hljs-string\">&#x27;L&#x27;</span>],\r\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&#x27;O&#x27;</span>, <span class=\"hljs-string\">&#x27; &#x27;</span>, <span class=\"hljs-string\">&#x27;W&#x27;</span>, <span class=\"hljs-string\">&#x27;O&#x27;</span>],\r\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&#x27;R&#x27;</span>, <span class=\"hljs-string\">&#x27;L&#x27;</span>, <span class=\"hljs-string\">&#x27;D&#x27;</span>, <span class=\"hljs-string\">&#x27; &#x27;</span>],\r\n        ];\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">snail</span>(square),\r\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&#x27;H&#x27;</span>, <span class=\"hljs-string\">&#x27;E&#x27;</span>, <span class=\"hljs-string\">&#x27;L&#x27;</span>, <span class=\"hljs-string\">&#x27;L&#x27;</span>, <span class=\"hljs-string\">&#x27;O&#x27;</span>, <span class=\"hljs-string\">&#x27; &#x27;</span>, <span class=\"hljs-string\">&#x27;D&#x27;</span>, <span class=\"hljs-string\">&#x27;L&#x27;</span>, <span class=\"hljs-string\">&#x27;R&#x27;</span>, <span class=\"hljs-string\">&#x27;O&#x27;</span>, <span class=\"hljs-string\">&#x27; &#x27;</span>, <span class=\"hljs-string\">&#x27;W&#x27;</span>]\r\n        );\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "anwsonwsymous",
      "email": "anwsonwsymous@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}