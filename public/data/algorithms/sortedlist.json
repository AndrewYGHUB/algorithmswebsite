{
  "slug": "sortedlist",
  "name": "SortedList",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./DataStructures/SortedList.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/DataStructures/SortedList.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System.Collections;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">DataStructures</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Implementation of SortedList using binary search.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Generic Type.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SortedList</span>&lt;<span class=\"hljs-title\">T</span>&gt; : <span class=\"hljs-title\">IEnumerable</span>&lt;<span class=\"hljs-title\">T</span>&gt;\n    {\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> IComparer&lt;T&gt; comparer;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> List&lt;T&gt; memory;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;SortedList{T}&quot; /&gt;</span> class. Uses a Comparer.Default for type T.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">SortedList</span>()\n            : <span class=\"hljs-title\">this</span>(<span class=\"hljs-params\">Comparer&lt;T&gt;.Default</span>)</span>\n        {\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets the number of elements containing in <span class=\"hljs-doctag\">&lt;see cref=&quot;SortedList{T}&quot; /&gt;</span>.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> Count =&gt; memory.Count;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;SortedList{T}&quot; /&gt;</span> class.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;comparer&quot;&gt;</span>Comparer user for binary search.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">SortedList</span>(<span class=\"hljs-params\">IComparer&lt;T&gt; comparer</span>)</span>\n        {\n            memory = <span class=\"hljs-keyword\">new</span> List&lt;T&gt;();\n            <span class=\"hljs-keyword\">this</span>.comparer = comparer;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Adds new item to <span class=\"hljs-doctag\">&lt;see cref=&quot;SortedList{T}&quot; /&gt;</span> instance, maintaining the order.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;item&quot;&gt;</span>An element to insert.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Add</span>(<span class=\"hljs-params\">T item</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> index = IndexFor(item, <span class=\"hljs-keyword\">out</span> _);\n            memory.Insert(index, item);\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets an element of <span class=\"hljs-doctag\">&lt;see cref=&quot;SortedList{T}&quot; /&gt;</span> at specified index.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;i&quot;&gt;</span>Index.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-keyword\">public</span> T <span class=\"hljs-keyword\">this</span>[<span class=\"hljs-built_in\">int</span> i] =&gt; memory[i];\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Removes all elements from <span class=\"hljs-doctag\">&lt;see cref=&quot;SortedList{T}&quot; /&gt;</span>.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Clear</span>()</span>\n            =&gt; memory.Clear();\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Indicates whether a <span class=\"hljs-doctag\">&lt;see cref=&quot;SortedList{T}&quot; /&gt;</span> contains a certain element.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;item&quot;&gt;</span>An element to search.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>true - <span class=\"hljs-doctag\">&lt;see cref=&quot;SortedList{T}&quot; /&gt;</span> contains an element, otherwise - false.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">Contains</span>(<span class=\"hljs-params\">T item</span>)</span>\n        {\n            _ = IndexFor(item, <span class=\"hljs-keyword\">out</span> <span class=\"hljs-keyword\">var</span> found);\n            <span class=\"hljs-keyword\">return</span> found;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Removes a certain element from <span class=\"hljs-doctag\">&lt;see cref=&quot;SortedList{T}&quot; /&gt;</span>.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;item&quot;&gt;</span>An element to remove.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>true - element is found and removed, otherwise false.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">TryRemove</span>(<span class=\"hljs-params\">T item</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> index = IndexFor(item, <span class=\"hljs-keyword\">out</span> <span class=\"hljs-keyword\">var</span> found);\n\n            <span class=\"hljs-keyword\">if</span> (found)\n            {\n                memory.RemoveAt(index);\n            }\n\n            <span class=\"hljs-keyword\">return</span> found;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Returns an enumerator that iterates through the <span class=\"hljs-doctag\">&lt;see cref=&quot;SortedList{T}&quot; /&gt;</span>.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>A Enumerator for the <span class=\"hljs-doctag\">&lt;see cref=&quot;SortedList{T}&quot; /&gt;</span>.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> IEnumerator&lt;T&gt; <span class=\"hljs-title\">GetEnumerator</span>()</span>\n            =&gt; memory.GetEnumerator();\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;inheritdoc cref=&quot;IEnumerable.GetEnumerator&quot;/&gt;</span></span>\n        IEnumerator IEnumerable.GetEnumerator()\n            =&gt; GetEnumerator();\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Binary search algorithm for finding element index in <span class=\"hljs-doctag\">&lt;see cref=&quot;SortedList{T}&quot; /&gt;</span>.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;item&quot;&gt;</span>Element.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;found&quot;&gt;</span>Indicates whether the equal value was found in <span class=\"hljs-doctag\">&lt;see cref=&quot;SortedList{T}&quot; /&gt;</span>.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Index for the Element.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">IndexFor</span>(<span class=\"hljs-params\">T item, <span class=\"hljs-keyword\">out</span> <span class=\"hljs-built_in\">bool</span> found</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> left = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">var</span> right = memory.Count;\n\n            <span class=\"hljs-keyword\">while</span> (right - left &gt; <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">var</span> mid = (left + right) / <span class=\"hljs-number\">2</span>;\n\n                <span class=\"hljs-keyword\">switch</span> (comparer.Compare(item, memory[mid]))\n                {\n                    <span class=\"hljs-keyword\">case</span> &gt; <span class=\"hljs-number\">0</span>:\n                        left = mid + <span class=\"hljs-number\">1</span>;\n                        <span class=\"hljs-keyword\">break</span>;\n                    <span class=\"hljs-keyword\">case</span> &lt; <span class=\"hljs-number\">0</span>:\n                        right = mid;\n                        <span class=\"hljs-keyword\">break</span>;\n                    <span class=\"hljs-literal\">default</span>:\n                        found = <span class=\"hljs-literal\">true</span>;\n                        <span class=\"hljs-keyword\">return</span> mid;\n                }\n            }\n\n            found = <span class=\"hljs-literal\">false</span>;\n            <span class=\"hljs-keyword\">return</span> left;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "ronimizy",
      "email": "71693183+ronimizy@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}