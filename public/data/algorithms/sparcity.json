{
  "slug": "sparcity",
  "name": "Sparcity",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/misc/Sparcity.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/misc/Sparcity.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.misc;\n\n<span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-comment\">/*\n*A matrix is sparse if many of its coefficients are zero (In general if 2/3rd of matrix elements are 0, it is considered as sparse). \n*The interest in sparsity arises because its exploitation can lead to enormous computational savings and because many large matrix problems that occur in practice are sparse.\n*\n* @author Ojasva Jain\n */</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Sparcity</span> {\n\n    <span class=\"hljs-comment\">/*\n    * @return Sparcity of matrix\n    * \n    * where sparcity = number of zeroes/total elements in matrix\n    *\n     */</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">sparcity</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span>[][] mat)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">zero</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-comment\">//Traversing the matrix to count number of zeroes </span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; mat.length; i++) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; mat[i].length; j++) {\n                <span class=\"hljs-keyword\">if</span> (mat[i][j] == <span class=\"hljs-number\">0</span>) {\n                    zero++;\n                }\n            }\n        }\n        <span class=\"hljs-comment\">//return sparcity</span>\n        <span class=\"hljs-keyword\">return</span> ((<span class=\"hljs-type\">double</span>) zero / (mat.length * mat[<span class=\"hljs-number\">1</span>].length));\n    }\n\n    <span class=\"hljs-comment\">//Driver method</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n        System.out.println(<span class=\"hljs-string\">&quot;Enter number of rows in matrix: &quot;</span>);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> in.nextInt();\n        System.out.println(<span class=\"hljs-string\">&quot;Enter number of Columns in matrix: &quot;</span>);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">m</span> <span class=\"hljs-operator\">=</span> in.nextInt();\n\n        System.out.println(<span class=\"hljs-string\">&quot;Enter Matrix elements: &quot;</span>);\n        <span class=\"hljs-type\">double</span>[][] mat = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[n][m];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; m; j++) {\n                mat[i][j] = in.nextDouble();\n            }\n        }\n        System.out.println(<span class=\"hljs-string\">&quot;Sparcity of matrix is: &quot;</span> + sparcity(mat));\n    }\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}