{
  "slug": "stack-linked-list-with-list",
  "name": "Stack Linked List with List",
  "categories": [
    "structure",
    "stacks"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "structure/stack/stacklinkedlistwithlist.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/structure/stack/stacklinkedlistwithlist.go",
      "code": "<span class=\"hljs-comment\">// Stack Linked-List with standard library (Container/List)</span>\n<span class=\"hljs-comment\">// description: based on `geeksforgeeks` description Stack is a linear data structure which follows a particular order in which the operations are performed.</span>\n<span class=\"hljs-comment\">//\tThe order may be LIFO(Last In First Out) or FILO(First In Last Out).</span>\n<span class=\"hljs-comment\">// details:</span>\n<span class=\"hljs-comment\">// \tStack Data Structure : https://www.geeksforgeeks.org/stack-data-structure-introduction-program/</span>\n<span class=\"hljs-comment\">// \tStack (abstract data type) : https://en.wikipedia.org/wiki/Stack_(abstract_data_type)</span>\n<span class=\"hljs-comment\">// author [Milad](https://github.com/miraddo)</span>\n<span class=\"hljs-comment\">// see stacklinkedlist.go, stackarray.go, stack_test.go</span>\n\n<span class=\"hljs-keyword\">package</span> stack\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;container/list&quot;</span>\n\t<span class=\"hljs-string\">&quot;fmt&quot;</span>\n)\n\n<span class=\"hljs-comment\">// SList is our struct that point to stack with container/list.List library</span>\n<span class=\"hljs-keyword\">type</span> SList <span class=\"hljs-keyword\">struct</span> {\n\tstack *list.List\n}\n\n<span class=\"hljs-comment\">// Push add a value into our stack</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(sl *SList)</span></span> Push(val any) {\n\tsl.stack.PushFront(val)\n}\n\n<span class=\"hljs-comment\">// Peak is return last value that insert into our stack</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(sl *SList)</span></span> Peak() (any, <span class=\"hljs-type\">error</span>) {\n\t<span class=\"hljs-keyword\">if</span> !sl.Empty() {\n\t\telement := sl.stack.Front()\n\t\t<span class=\"hljs-keyword\">return</span> element.Value, <span class=\"hljs-literal\">nil</span>\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;stack list is empty&quot;</span>)\n}\n\n<span class=\"hljs-comment\">// Pop is return last value that insert into our stack</span>\n<span class=\"hljs-comment\">//also it will remove it in our stack</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(sl *SList)</span></span> Pop() (any, <span class=\"hljs-type\">error</span>) {\n\t<span class=\"hljs-keyword\">if</span> !sl.Empty() {\n\t\t<span class=\"hljs-comment\">// get last element that insert into stack</span>\n\t\telement := sl.stack.Front()\n\t\t<span class=\"hljs-comment\">// remove element in stack</span>\n\t\tsl.stack.Remove(element)\n\t\t<span class=\"hljs-comment\">// return element value</span>\n\t\t<span class=\"hljs-keyword\">return</span> element.Value, <span class=\"hljs-literal\">nil</span>\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;stack list is empty&quot;</span>)\n}\n\n<span class=\"hljs-comment\">// Length return length of our stack</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(sl *SList)</span></span> Length() <span class=\"hljs-type\">int</span> {\n\t<span class=\"hljs-keyword\">return</span> sl.stack.Len()\n}\n\n<span class=\"hljs-comment\">// Empty check our stack has value or not</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(sl *SList)</span></span> Empty() <span class=\"hljs-type\">bool</span> {\n\t<span class=\"hljs-comment\">// check our stack is empty or not</span>\n\t<span class=\"hljs-comment\">// if is 0 it means our stack is empty otherwise is not empty</span>\n\t<span class=\"hljs-keyword\">return</span> sl.stack.Len() == <span class=\"hljs-number\">0</span>\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ritik Bhandari",
      "email": "ritikbhandari68@gmail.com",
      "commits": 1
    },
    {
      "name": "Milad",
      "email": "14594374+Miraddo@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}