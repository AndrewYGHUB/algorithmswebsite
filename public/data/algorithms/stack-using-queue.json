{
  "slug": "stack-using-queue",
  "name": "Stack Using Queue",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "data_structures/stack_using_queue.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/stack_using_queue.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @brief Stack Data Structure Using the Queue Data Structure\n * @details\n * Using 2 Queues inside the Stack class, we can easily implement Stack\n * data structure with heavy computation in push function.\n *\n * References used:\n * [StudyTonight](https://www.studytonight.com/data-structures/stack-using-queue)\n * @author [tushar2407](https://github.com/tushar2407)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span>     <span class=\"hljs-comment\">/// for queue data structure</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace data_strcutres\n * @brief Data structures algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> data_structures {\n<span class=\"hljs-comment\">/**\n * @namespace stack_using_queue\n * @brief Functions for the [Stack Using\n * Queue](https://www.studytonight.com/data-structures/stack-using-queue)\n * implementation\n */</span>\n<span class=\"hljs-keyword\">namespace</span> stack_using_queue {\n<span class=\"hljs-comment\">/**\n * @brief Stack Class implementation for basic methods of Stack Data Structure.\n */</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Stack</span> {\n    std::queue&lt;<span class=\"hljs-type\">int64_t</span>&gt; main_q;       <span class=\"hljs-comment\">///&lt; stores the current state of the stack</span>\n    std::queue&lt;<span class=\"hljs-type\">int64_t</span>&gt; auxiliary_q;  <span class=\"hljs-comment\">///&lt; used to carry out intermediate</span>\n                                      <span class=\"hljs-comment\">///&lt; operations to implement stack</span>\n    <span class=\"hljs-type\">uint32_t</span> current_size = <span class=\"hljs-number\">0</span>;        <span class=\"hljs-comment\">///&lt; stores the current size of the stack</span>\n\n    <span class=\"hljs-comment\">/**\n     * Returns the top most element of the stack\n     * @returns top element of the queue\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">top</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> main_q.<span class=\"hljs-built_in\">front</span>(); }\n\n    <span class=\"hljs-comment\">/**\n     * @brief Inserts an element to the top of the stack.\n     * @param val the element that will be inserted into the stack\n     * @returns void\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> val)</span> </span>{\n        auxiliary_q.<span class=\"hljs-built_in\">push</span>(val);\n        <span class=\"hljs-keyword\">while</span> (!main_q.<span class=\"hljs-built_in\">empty</span>()) {\n            auxiliary_q.<span class=\"hljs-built_in\">push</span>(main_q.<span class=\"hljs-built_in\">front</span>());\n            main_q.<span class=\"hljs-built_in\">pop</span>();\n        }\n        <span class=\"hljs-built_in\">swap</span>(main_q, auxiliary_q);\n        current_size++;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief Removes the topmost element from the stack\n     * @returns void\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (main_q.<span class=\"hljs-built_in\">empty</span>()) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        main_q.<span class=\"hljs-built_in\">pop</span>();\n        current_size--;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief Utility function to return the current size of the stack\n     * @returns current size of stack\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">size</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> current_size; }\n};\n}  <span class=\"hljs-comment\">// namespace stack_using_queue</span>\n}  <span class=\"hljs-comment\">// namespace data_structures</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    data_structures::stack_using_queue::Stack s;\n    s.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">/// insert an element into the stack</span>\n    s.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">/// insert an element into the stack</span>\n    s.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-number\">3</span>);  <span class=\"hljs-comment\">/// insert an element into the stack</span>\n\n    <span class=\"hljs-built_in\">assert</span>(s.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">3</span>);  <span class=\"hljs-comment\">/// size should be 3</span>\n\n    <span class=\"hljs-built_in\">assert</span>(s.<span class=\"hljs-built_in\">top</span>() == <span class=\"hljs-number\">3</span>);  <span class=\"hljs-comment\">/// topmost element in the stack should be 3</span>\n\n    s.<span class=\"hljs-built_in\">pop</span>();               <span class=\"hljs-comment\">/// remove the topmost element from the stack</span>\n    <span class=\"hljs-built_in\">assert</span>(s.<span class=\"hljs-built_in\">top</span>() == <span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">/// topmost element in the stack should now be 2</span>\n\n    s.<span class=\"hljs-built_in\">pop</span>();  <span class=\"hljs-comment\">/// remove the topmost element from the stack</span>\n    <span class=\"hljs-built_in\">assert</span>(s.<span class=\"hljs-built_in\">top</span>() == <span class=\"hljs-number\">1</span>);\n\n    s.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-number\">5</span>);             <span class=\"hljs-comment\">/// insert an element into the stack</span>\n    <span class=\"hljs-built_in\">assert</span>(s.<span class=\"hljs-built_in\">top</span>() == <span class=\"hljs-number\">5</span>);  <span class=\"hljs-comment\">/// topmost element in the stack should now be 5</span>\n\n    s.<span class=\"hljs-built_in\">pop</span>();               <span class=\"hljs-comment\">/// remove the topmost element from the stack</span>\n    <span class=\"hljs-built_in\">assert</span>(s.<span class=\"hljs-built_in\">top</span>() == <span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">/// topmost element in the stack should now be 1</span>\n\n    <span class=\"hljs-built_in\">assert</span>(s.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">/// size should be 1</span>\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * Creates a stack and pushed some value into it.\n * Through a series of push and pop functions on stack,\n * it demostrates the functionality of the custom stack\n * declared above.\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Lajat5",
      "email": "64376519+Lazeeez@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Tushar Mohan",
      "email": "tushar.mohan2001@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}