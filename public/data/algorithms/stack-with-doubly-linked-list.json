{
  "slug": "stack-with-doubly-linked-list",
  "name": "Stack with Doubly Linked List",
  "categories": [
    "datastructures",
    "stacks"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/stacks/stack_with_doubly_linked_list.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/stacks/stack_with_doubly_linked_list.py",
      "code": "<span class=\"hljs-comment\"># A complete working Python program to demonstrate all</span>\r\n<span class=\"hljs-comment\"># stack operations using a doubly linked list</span>\r\n\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Generic</span>, TypeVar\r\n\r\nT = TypeVar(<span class=\"hljs-string\">&quot;T&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>(<span class=\"hljs-type\">Generic</span>[T]):\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data: T</span>):\r\n        self.data = data  <span class=\"hljs-comment\"># Assign data</span>\r\n        self.<span class=\"hljs-built_in\">next</span>: Node[T] | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>  <span class=\"hljs-comment\"># Initialize next as null</span>\r\n        self.prev: Node[T] | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>  <span class=\"hljs-comment\"># Initialize prev as null</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Stack</span>(<span class=\"hljs-type\">Generic</span>[T]):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; stack = Stack()\r\n    &gt;&gt;&gt; stack.is_empty()\r\n    True\r\n    &gt;&gt;&gt; stack.print_stack()\r\n    stack elements are:\r\n    &gt;&gt;&gt; for i in range(4):\r\n    ...     stack.push(i)\r\n    ...\r\n    &gt;&gt;&gt; stack.is_empty()\r\n    False\r\n    &gt;&gt;&gt; stack.print_stack()\r\n    stack elements are:\r\n    3-&gt;2-&gt;1-&gt;0-&gt;\r\n    &gt;&gt;&gt; stack.top()\r\n    3\r\n    &gt;&gt;&gt; len(stack)\r\n    4\r\n    &gt;&gt;&gt; stack.pop()\r\n    3\r\n    &gt;&gt;&gt; stack.print_stack()\r\n    stack elements are:\r\n    2-&gt;1-&gt;0-&gt;\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.head: Node[T] | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-params\">self, data: T</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;add a Node to the stack&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            self.head = Node(data)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            new_node = Node(data)\r\n            self.head.prev = new_node\r\n            new_node.<span class=\"hljs-built_in\">next</span> = self.head\r\n            new_node.prev = <span class=\"hljs-literal\">None</span>\r\n            self.head = new_node\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pop</span>(<span class=\"hljs-params\">self</span>) -&gt; T | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;pop the top element off the stack&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">assert</span> self.head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n            temp = self.head.data\r\n            self.head = self.head.<span class=\"hljs-built_in\">next</span>\r\n            <span class=\"hljs-keyword\">if</span> self.head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n                self.head.prev = <span class=\"hljs-literal\">None</span>\r\n            <span class=\"hljs-keyword\">return</span> temp\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">top</span>(<span class=\"hljs-params\">self</span>) -&gt; T | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;return the top element of the stack&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> self.head.data <span class=\"hljs-keyword\">if</span> self.head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__len__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        temp = self.head\r\n        count = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">while</span> temp <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            count += <span class=\"hljs-number\">1</span>\r\n            temp = temp.<span class=\"hljs-built_in\">next</span>\r\n        <span class=\"hljs-keyword\">return</span> count\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-keyword\">return</span> self.head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_stack</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;stack elements are:&quot;</span>)\r\n        temp = self.head\r\n        <span class=\"hljs-keyword\">while</span> temp <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-built_in\">print</span>(temp.data, end=<span class=\"hljs-string\">&quot;-&gt;&quot;</span>)\r\n            temp = temp.<span class=\"hljs-built_in\">next</span>\r\n\r\n\r\n<span class=\"hljs-comment\"># Code execution starts here</span>\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n\r\n    <span class=\"hljs-comment\"># Start with the empty stack</span>\r\n    stack: Stack[<span class=\"hljs-built_in\">int</span>] = Stack()\r\n\r\n    <span class=\"hljs-comment\"># Insert 4 at the beginning. So stack becomes 4-&gt;None</span>\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Stack operations using Doubly LinkedList&quot;</span>)\r\n    stack.push(<span class=\"hljs-number\">4</span>)\r\n\r\n    <span class=\"hljs-comment\"># Insert 5 at the beginning. So stack becomes 4-&gt;5-&gt;None</span>\r\n    stack.push(<span class=\"hljs-number\">5</span>)\r\n\r\n    <span class=\"hljs-comment\"># Insert 6 at the beginning. So stack becomes 4-&gt;5-&gt;6-&gt;None</span>\r\n    stack.push(<span class=\"hljs-number\">6</span>)\r\n\r\n    <span class=\"hljs-comment\"># Insert 7 at the beginning. So stack becomes 4-&gt;5-&gt;6-&gt;7-&gt;None</span>\r\n    stack.push(<span class=\"hljs-number\">7</span>)\r\n\r\n    <span class=\"hljs-comment\"># Print the stack</span>\r\n    stack.print_stack()\r\n\r\n    <span class=\"hljs-comment\"># Print the top element</span>\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nTop element is &quot;</span>, stack.top())\r\n\r\n    <span class=\"hljs-comment\"># Print the stack size</span>\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Size of the stack is &quot;</span>, <span class=\"hljs-built_in\">len</span>(stack))\r\n\r\n    <span class=\"hljs-comment\"># pop the top element</span>\r\n    stack.pop()\r\n\r\n    <span class=\"hljs-comment\"># pop the top element</span>\r\n    stack.pop()\r\n\r\n    <span class=\"hljs-comment\"># two elements have now been popped off</span>\r\n    stack.print_stack()\r\n\r\n    <span class=\"hljs-comment\"># Print True if the stack is empty else False</span>\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nstack is empty:&quot;</span>, stack.is_empty())\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}