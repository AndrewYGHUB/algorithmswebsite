{
  "slug": "stack-with-singly-linked-list",
  "name": "Stack with Singly Linked List",
  "categories": [
    "datastructures",
    "stacks"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/stacks/stack_with_singly_linked_list.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/stacks/stack_with_singly_linked_list.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot; A Stack using a linked list like structure &quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">from</span> collections.abc <span class=\"hljs-keyword\">import</span> Iterator\r\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Generic</span>, TypeVar\r\n\r\nT = TypeVar(<span class=\"hljs-string\">&quot;T&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>(<span class=\"hljs-type\">Generic</span>[T]):\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data: T</span>):\r\n        self.data = data\r\n        self.<span class=\"hljs-built_in\">next</span>: Node[T] | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{self.data}</span>&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinkedStack</span>(<span class=\"hljs-type\">Generic</span>[T]):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Linked List Stack implementing push (to top),\r\n    pop (from top) and is_empty\r\n\r\n    &gt;&gt;&gt; stack = LinkedStack()\r\n    &gt;&gt;&gt; stack.is_empty()\r\n    True\r\n    &gt;&gt;&gt; stack.push(5)\r\n    &gt;&gt;&gt; stack.push(9)\r\n    &gt;&gt;&gt; stack.push(&#x27;python&#x27;)\r\n    &gt;&gt;&gt; stack.is_empty()\r\n    False\r\n    &gt;&gt;&gt; stack.pop()\r\n    &#x27;python&#x27;\r\n    &gt;&gt;&gt; stack.push(&#x27;algorithms&#x27;)\r\n    &gt;&gt;&gt; stack.pop()\r\n    &#x27;algorithms&#x27;\r\n    &gt;&gt;&gt; stack.pop()\r\n    9\r\n    &gt;&gt;&gt; stack.pop()\r\n    5\r\n    &gt;&gt;&gt; stack.is_empty()\r\n    True\r\n    &gt;&gt;&gt; stack.pop()\r\n    Traceback (most recent call last):\r\n        ...\r\n    IndexError: pop from empty stack\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.top: Node[T] | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__iter__</span>(<span class=\"hljs-params\">self</span>) -&gt; Iterator[T]:\r\n        node = self.top\r\n        <span class=\"hljs-keyword\">while</span> node:\r\n            <span class=\"hljs-keyword\">yield</span> node.data\r\n            node = node.<span class=\"hljs-built_in\">next</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; stack = LinkedStack()\r\n        &gt;&gt;&gt; stack.push(&quot;c&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;b&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;a&quot;)\r\n        &gt;&gt;&gt; str(stack)\r\n        &#x27;a-&gt;b-&gt;c&#x27;\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join([<span class=\"hljs-built_in\">str</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> self])\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__len__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; stack = LinkedStack()\r\n        &gt;&gt;&gt; len(stack) == 0\r\n        True\r\n        &gt;&gt;&gt; stack.push(&quot;c&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;b&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;a&quot;)\r\n        &gt;&gt;&gt; len(stack) == 3\r\n        True\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">tuple</span>(<span class=\"hljs-built_in\">iter</span>(self)))\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; stack = LinkedStack()\r\n        &gt;&gt;&gt; stack.is_empty()\r\n        True\r\n        &gt;&gt;&gt; stack.push(1)\r\n        &gt;&gt;&gt; stack.is_empty()\r\n        False\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> self.top <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-params\">self, item: T</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; stack = LinkedStack()\r\n        &gt;&gt;&gt; stack.push(&quot;Python&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;Java&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;C&quot;)\r\n        &gt;&gt;&gt; str(stack)\r\n        &#x27;C-&gt;Java-&gt;Python&#x27;\r\n        &quot;&quot;&quot;</span>\r\n        node = Node(item)\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.is_empty():\r\n            node.<span class=\"hljs-built_in\">next</span> = self.top\r\n        self.top = node\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pop</span>(<span class=\"hljs-params\">self</span>) -&gt; T:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; stack = LinkedStack()\r\n        &gt;&gt;&gt; stack.pop()\r\n        Traceback (most recent call last):\r\n        ...\r\n        IndexError: pop from empty stack\r\n        &gt;&gt;&gt; stack.push(&quot;c&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;b&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;a&quot;)\r\n        &gt;&gt;&gt; stack.pop() == &#x27;a&#x27;\r\n        True\r\n        &gt;&gt;&gt; stack.pop() == &#x27;b&#x27;\r\n        True\r\n        &gt;&gt;&gt; stack.pop() == &#x27;c&#x27;\r\n        True\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.is_empty():\r\n            <span class=\"hljs-keyword\">raise</span> IndexError(<span class=\"hljs-string\">&quot;pop from empty stack&quot;</span>)\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(self.top, Node)\r\n        pop_node = self.top\r\n        self.top = self.top.<span class=\"hljs-built_in\">next</span>\r\n        <span class=\"hljs-keyword\">return</span> pop_node.data\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">peek</span>(<span class=\"hljs-params\">self</span>) -&gt; T:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; stack = LinkedStack()\r\n        &gt;&gt;&gt; stack.push(&quot;Java&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;C&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;Python&quot;)\r\n        &gt;&gt;&gt; stack.peek()\r\n        &#x27;Python&#x27;\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.is_empty():\r\n            <span class=\"hljs-keyword\">raise</span> IndexError(<span class=\"hljs-string\">&quot;peek from empty stack&quot;</span>)\r\n\r\n        <span class=\"hljs-keyword\">assert</span> self.top <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">return</span> self.top.data\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">clear</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; stack = LinkedStack()\r\n        &gt;&gt;&gt; stack.push(&quot;Java&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;C&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;Python&quot;)\r\n        &gt;&gt;&gt; str(stack)\r\n        &#x27;Python-&gt;C-&gt;Java&#x27;\r\n        &gt;&gt;&gt; stack.clear()\r\n        &gt;&gt;&gt; len(stack) == 0\r\n        True\r\n        &quot;&quot;&quot;</span>\r\n        self.top = <span class=\"hljs-literal\">None</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\r\n\r\n    testmod()\r\n"
    },
    "c-plus-plus": {
      "dir": "data_structures/stack_using_linked_list.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/stack_using_linked_list.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span> {\n    <span class=\"hljs-type\">int</span> val;\n    node *next;\n};\n\nnode *top_var;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>{\n    node *n = <span class=\"hljs-keyword\">new</span> node;\n    n-&gt;val = x;\n    n-&gt;next = top_var;\n    top_var = n;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (top_var == <span class=\"hljs-literal\">nullptr</span>) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nUnderflow&quot;</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        node *t = top_var;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span> &lt;&lt; t-&gt;val &lt;&lt; <span class=\"hljs-string\">&quot; deleted&quot;</span>;\n        top_var = top_var-&gt;next;\n        <span class=\"hljs-keyword\">delete</span> t;\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">show</span><span class=\"hljs-params\">()</span> </span>{\n    node *t = top_var;\n    <span class=\"hljs-keyword\">while</span> (t != <span class=\"hljs-literal\">nullptr</span>) {\n        std::cout &lt;&lt; t-&gt;val &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n        t = t-&gt;next;\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> ch = <span class=\"hljs-number\">0</span>, x = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">do</span> {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n0. Exit or Ctrl+C&quot;</span>;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n1. Push&quot;</span>;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n2. Pop&quot;</span>;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n3. Print&quot;</span>;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter Your Choice: &quot;</span>;\n        std::cin &gt;&gt; ch;\n        <span class=\"hljs-keyword\">switch</span> (ch) {\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n                std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nInsert : &quot;</span>;\n                std::cin &gt;&gt; x;\n                <span class=\"hljs-built_in\">push</span>(x);\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n                <span class=\"hljs-built_in\">pop</span>();\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n                <span class=\"hljs-built_in\">show</span>();\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">default</span>:\n                std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Invalid option!\\n&quot;</span>;\n                <span class=\"hljs-keyword\">break</span>;\n        }\n    } <span class=\"hljs-keyword\">while</span> (ch != <span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/stacks/StackOfLinkedList.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/stacks/StackOfLinkedList.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.stacks;\n\n<span class=\"hljs-keyword\">import</span> java.util.NoSuchElementException;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> Varun Upadhyay (https://github.com/varunu28)\n */</span>\n<span class=\"hljs-comment\">// An implementation of a Stack using a Linked List</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StackOfLinkedList</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n        <span class=\"hljs-type\">LinkedListStack</span> <span class=\"hljs-variable\">stack</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedListStack</span>();\n        stack.push(<span class=\"hljs-number\">1</span>);\n        stack.push(<span class=\"hljs-number\">2</span>);\n        stack.push(<span class=\"hljs-number\">3</span>);\n        stack.push(<span class=\"hljs-number\">4</span>);\n        stack.push(<span class=\"hljs-number\">5</span>);\n\n        System.out.println(stack);\n\n        System.out.println(<span class=\"hljs-string\">&quot;Size of stack currently is: &quot;</span> + stack.getSize());\n\n        <span class=\"hljs-keyword\">assert</span> stack.pop() == <span class=\"hljs-number\">5</span>;\n        <span class=\"hljs-keyword\">assert</span> stack.pop() == <span class=\"hljs-number\">4</span>;\n\n        System.out.println(<span class=\"hljs-string\">&quot;Top element of stack currently is: &quot;</span> + stack.peek());\n    }\n}\n\n<span class=\"hljs-comment\">// A node class</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> data;\n    <span class=\"hljs-keyword\">public</span> Node next;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data)</span> {\n        <span class=\"hljs-built_in\">this</span>.data = data;\n        <span class=\"hljs-built_in\">this</span>.next = <span class=\"hljs-literal\">null</span>;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * A class which implements a stack using a linked list\n *\n * &lt;p&gt;\n * Contains all the stack methods : push, pop, printStack, isEmpty\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinkedListStack</span> {\n\n    <span class=\"hljs-comment\">/**\n     * Top of stack\n     */</span>\n    Node head;\n\n    <span class=\"hljs-comment\">/**\n     * Size of stack\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> size;\n\n    <span class=\"hljs-comment\">/**\n     * Init properties\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">LinkedListStack</span><span class=\"hljs-params\">()</span> {\n        head = <span class=\"hljs-literal\">null</span>;\n        size = <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Add element at top\n     *\n     * <span class=\"hljs-doctag\">@param</span> x to be added\n     * <span class=\"hljs-doctag\">@return</span> &lt;tt&gt;true&lt;/tt&gt; if add successfully\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> {\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">newNode</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(x);\n        newNode.next = head;\n        head = newNode;\n        size++;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Pop element at top of stack\n     *\n     * <span class=\"hljs-doctag\">@return</span> element at top of stack\n     * <span class=\"hljs-doctag\">@throws</span> NoSuchElementException if stack is empty\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">if</span> (size == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NoSuchElementException</span>(<span class=\"hljs-string\">&quot;Empty stack. Nothing to pop&quot;</span>);\n        }\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">destroy</span> <span class=\"hljs-operator\">=</span> head;\n        head = head.next;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">retValue</span> <span class=\"hljs-operator\">=</span> destroy.data;\n        destroy = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// clear to let GC do it&#x27;s work</span>\n        size--;\n        <span class=\"hljs-keyword\">return</span> retValue;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Peek element at top of stack\n     *\n     * <span class=\"hljs-doctag\">@return</span> element at top of stack\n     * <span class=\"hljs-doctag\">@throws</span> NoSuchElementException if stack is empty\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">peek</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">if</span> (size == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NoSuchElementException</span>(<span class=\"hljs-string\">&quot;Empty stack. Nothing to pop&quot;</span>);\n        }\n        <span class=\"hljs-keyword\">return</span> head.data;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">cur</span> <span class=\"hljs-operator\">=</span> head;\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\n        <span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">null</span>) {\n            builder.append(cur.data).append(<span class=\"hljs-string\">&quot;-&gt;&quot;</span>);\n            cur = cur.next;\n        }\n        <span class=\"hljs-keyword\">return</span> builder.replace(builder.length() - <span class=\"hljs-number\">2</span>, builder.length(), <span class=\"hljs-string\">&quot;&quot;</span>).toString();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Check if stack is empty\n     *\n     * <span class=\"hljs-doctag\">@return</span> &lt;tt&gt;true&lt;/tt&gt; if stack is empty, otherwise &lt;tt&gt;false&lt;/tt&gt;\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Return size of stack\n     *\n     * <span class=\"hljs-doctag\">@return</span> size of stack\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getSize</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> size;\n    }\n}\n"
    },
    "c": {
      "dir": "data_structures/linked_list/stack_using_linked_lists.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/linked_list/stack_using_linked_lists.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>\n{</span>\n    <span class=\"hljs-type\">int</span> info;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">link</span>;</span>\n};\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">top</span> =</span> <span class=\"hljs-literal\">NULL</span>, *temp;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> node *)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> node *)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> node *)</span>;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> x = <span class=\"hljs-number\">0</span>, item;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t****stack using linked list****\\n&quot;</span>);\n    <span class=\"hljs-keyword\">while</span> (x != <span class=\"hljs-number\">4</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter your choice: &quot;</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;x);\n        <span class=\"hljs-keyword\">switch</span> (x)\n        {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n            push(top);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n            pop(top);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n            display(top);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        }\n    }\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> node *p)</span>\n{\n    <span class=\"hljs-type\">int</span> item;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">temp</span>;</span>\n    temp = (<span class=\"hljs-keyword\">struct</span> node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nEnter element to be inserted: &quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;item);\n    temp-&gt;info = item;\n\n    temp-&gt;link = top;\n    top = temp;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Inserted succesfully.\\n&quot;</span>);\n}\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> node *p)</span>\n{\n    <span class=\"hljs-type\">int</span> item;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">temp</span>;</span>\n\n    <span class=\"hljs-keyword\">if</span> (top == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nStack is empty.\\n&quot;</span>);\n    <span class=\"hljs-keyword\">else</span>\n    {\n        item = top-&gt;info;\n        temp = top;\n        top = top-&gt;link;\n        <span class=\"hljs-built_in\">free</span>(temp);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nElement popped is %d.\\n&quot;</span>, item);\n    }\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> node *p)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (top == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nStack is empty.\\n&quot;</span>);\n    <span class=\"hljs-keyword\">else</span>\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nElements in the stack are:\\n&quot;</span>);\n        <span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-literal\">NULL</span>)\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t%d\\n&quot;</span>, p-&gt;info);\n            p = p-&gt;link;\n        }\n        <span class=\"hljs-comment\">// printf(&quot;%d\\n&quot;,p-&gt;info);</span>\n    }\n}\n"
    },
    "go": {
      "dir": "structure/stack/stacklinkedlist.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/structure/stack/stacklinkedlist.go",
      "code": "<span class=\"hljs-comment\">// Stack Linked-List</span>\n<span class=\"hljs-comment\">// description: based on `geeksforgeeks` description Stack is a linear data structure which follows a particular order in which the operations are performed.</span>\n<span class=\"hljs-comment\">//\tThe order may be LIFO(Last In First Out) or FILO(First In Last Out).</span>\n<span class=\"hljs-comment\">// details:</span>\n<span class=\"hljs-comment\">// \tStack Data Structure : https://www.geeksforgeeks.org/stack-data-structure-introduction-program/</span>\n<span class=\"hljs-comment\">// \tStack (abstract data type) : https://en.wikipedia.org/wiki/Stack_(abstract_data_type)</span>\n<span class=\"hljs-comment\">// author [Milad](https://github.com/miraddo)</span>\n<span class=\"hljs-comment\">// see stacklinkedlistwithlist.go, stackarray.go, stack_test.go</span>\n\n<span class=\"hljs-keyword\">package</span> stack\n\n<span class=\"hljs-comment\">// Node structure</span>\n<span class=\"hljs-keyword\">type</span> Node <span class=\"hljs-keyword\">struct</span> {\n\tVal  any\n\tNext *Node\n}\n\n<span class=\"hljs-comment\">// Stack has jost top of node and with length</span>\n<span class=\"hljs-keyword\">type</span> Stack <span class=\"hljs-keyword\">struct</span> {\n\ttop    *Node\n\tlength <span class=\"hljs-type\">int</span>\n}\n\n<span class=\"hljs-comment\">// push add value to last index</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *Stack)</span></span> push(n any) {\n\tnewStack := &amp;Node{} <span class=\"hljs-comment\">// new node</span>\n\n\tnewStack.Val = n\n\tnewStack.Next = ll.top\n\n\tll.top = newStack\n\tll.length++\n}\n\n<span class=\"hljs-comment\">// pop remove last item as first output</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *Stack)</span></span> pop() any {\n\tresult := ll.top.Val\n\t<span class=\"hljs-keyword\">if</span> ll.top.Next == <span class=\"hljs-literal\">nil</span> {\n\t\tll.top = <span class=\"hljs-literal\">nil</span>\n\t} <span class=\"hljs-keyword\">else</span> {\n\t\tll.top.Val, ll.top.Next = ll.top.Next.Val, ll.top.Next.Next\n\t}\n\n\tll.length--\n\t<span class=\"hljs-keyword\">return</span> result\n}\n\n<span class=\"hljs-comment\">// isEmpty to check our array is empty or not</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *Stack)</span></span> isEmpty() <span class=\"hljs-type\">bool</span> {\n\t<span class=\"hljs-keyword\">return</span> ll.length == <span class=\"hljs-number\">0</span>\n}\n\n<span class=\"hljs-comment\">// len use to return length of our stack</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *Stack)</span></span> <span class=\"hljs-built_in\">len</span>() <span class=\"hljs-type\">int</span> {\n\t<span class=\"hljs-keyword\">return</span> ll.length\n}\n\n<span class=\"hljs-comment\">// peak return last input value</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *Stack)</span></span> peak() any {\n\t<span class=\"hljs-keyword\">return</span> ll.top.Val\n}\n\n<span class=\"hljs-comment\">// show all value as an interface array</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *Stack)</span></span> show() (in []any) {\n\tcurrent := ll.top\n\n\t<span class=\"hljs-keyword\">for</span> current != <span class=\"hljs-literal\">nil</span> {\n\t\tin = <span class=\"hljs-built_in\">append</span>(in, current.Val)\n\t\tcurrent = current.Next\n\t}\n\t<span class=\"hljs-keyword\">return</span>\n}\n"
    },
    "rust": {
      "dir": "src/data_structures/stack_using_singly_linked_list.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/data_structures/stack_using_singly_linked_list.rs",
      "code": "<span class=\"hljs-comment\">// the public struct can hide the implementation detail</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Stack</span>&lt;T&gt; {\n    head: Link&lt;T&gt;,\n}\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Link</span>&lt;T&gt; = <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;Node&lt;T&gt;&gt;&gt;;\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Node</span>&lt;T&gt; {\n    elem: T,\n    next: Link&lt;T&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Stack&lt;T&gt; {\n    <span class=\"hljs-comment\">// Self is an alias for Stack</span>\n    <span class=\"hljs-comment\">// We implement associated function name new for single-linked-list</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-comment\">// for new function we need to return a new instance</span>\n        <span class=\"hljs-keyword\">Self</span> {\n            <span class=\"hljs-comment\">// we refer to variants of an enum using :: the namespacing operator</span>\n            head: <span class=\"hljs-literal\">None</span>,\n        } <span class=\"hljs-comment\">// we need to return the variant, so there without the ;</span>\n    }\n\n    <span class=\"hljs-comment\">// As we know the primary forms that self can take: self, &amp;mut self and &amp;self, push will change the linked list</span>\n    <span class=\"hljs-comment\">// so we need &amp;mut</span>\n    <span class=\"hljs-comment\">// The push method which the signature&#x27;s first parameter is self</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">push</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, elem: T) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">new_node</span> = Box::<span class=\"hljs-title function_ invoke__\">new</span>(Node {\n            elem,\n            next: <span class=\"hljs-keyword\">self</span>.head.<span class=\"hljs-title function_ invoke__\">take</span>(),\n        });\n        <span class=\"hljs-comment\">// don&#x27;t forget replace the head with new node for stack</span>\n        <span class=\"hljs-keyword\">self</span>.head = <span class=\"hljs-title function_ invoke__\">Some</span>(new_node);\n    }\n    <span class=\"hljs-comment\">///</span>\n    <span class=\"hljs-comment\">/// In pop function, we trying to:</span>\n    <span class=\"hljs-comment\">/// * check if the list is empty, so we use enum Option&lt;T&gt;, it can either be Some(T) or None</span>\n    <span class=\"hljs-comment\">///   * if it&#x27;s empty, return None</span>\n    <span class=\"hljs-comment\">///   * if it&#x27;s not empty</span>\n    <span class=\"hljs-comment\">///     * remove the head of the list</span>\n    <span class=\"hljs-comment\">///     * remove its elem</span>\n    <span class=\"hljs-comment\">///     * replace the list&#x27;s head with its next</span>\n    <span class=\"hljs-comment\">///     * return Some(elem), as the situation if need</span>\n    <span class=\"hljs-comment\">///</span>\n    <span class=\"hljs-comment\">/// so, we need to remove the head, and return the value of the head</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">pop</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Result</span>&lt;T, &amp;<span class=\"hljs-type\">str</span>&gt; {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.head.<span class=\"hljs-title function_ invoke__\">take</span>() {\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-title function_ invoke__\">Err</span>(<span class=\"hljs-string\">&quot;Stack is empty&quot;</span>),\n            <span class=\"hljs-title function_ invoke__\">Some</span>(node) =&gt; {\n                <span class=\"hljs-keyword\">self</span>.head = node.next;\n                <span class=\"hljs-title function_ invoke__\">Ok</span>(node.elem)\n            }\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">is_empty</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-comment\">// Returns true if the option is a [None] value.</span>\n        <span class=\"hljs-keyword\">self</span>.head.<span class=\"hljs-title function_ invoke__\">is_none</span>()\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">peek</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;&amp;T&gt; {\n        <span class=\"hljs-comment\">// Converts from &amp;Option&lt;T&gt; to Option&lt;&amp;T&gt;.</span>\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.head.<span class=\"hljs-title function_ invoke__\">as_ref</span>() {\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\n            <span class=\"hljs-title function_ invoke__\">Some</span>(node) =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;node.elem),\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">peek_mut</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;&amp;<span class=\"hljs-keyword\">mut</span> T&gt; {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.head.<span class=\"hljs-title function_ invoke__\">as_mut</span>() {\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\n            <span class=\"hljs-title function_ invoke__\">Some</span>(node) =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;<span class=\"hljs-keyword\">mut</span> node.elem),\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">into_iter_for_stack</span>(<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> IntoIter&lt;T&gt; {\n        <span class=\"hljs-title function_ invoke__\">IntoIter</span>(<span class=\"hljs-keyword\">self</span>)\n    }\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">iter</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> Iter&lt;<span class=\"hljs-symbol\">&#x27;_</span>, T&gt; {\n        Iter {\n            next: <span class=\"hljs-keyword\">self</span>.head.<span class=\"hljs-title function_ invoke__\">as_deref</span>(),\n        }\n    }\n    <span class=\"hljs-comment\">// &#x27;_ is the &quot;explicitly elided lifetime&quot; syntax of Rust</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">iter_mut</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> IterMut&lt;<span class=\"hljs-symbol\">&#x27;_</span>, T&gt; {\n        IterMut {\n            next: <span class=\"hljs-keyword\">self</span>.head.<span class=\"hljs-title function_ invoke__\">as_deref_mut</span>(),\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Default</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Stack</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">default</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">Self</span>::<span class=\"hljs-title function_ invoke__\">new</span>()\n    }\n}\n\n<span class=\"hljs-comment\">/// The drop method of singly linked list. There&#x27;s a question that do we need to worry about cleaning up our list?</span>\n<span class=\"hljs-comment\">/// As we all know the ownership and borrow mechanism, so we know the type will clean automatically after it goes out the scope,</span>\n<span class=\"hljs-comment\">/// this implement by the Rust compiler automatically did which mean add trait `drop` for the automatically.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// So, the complier will implements Drop for `List-&gt;Link-&gt;Box&lt;Node&gt; -&gt;Node` automatically and tail recursive to clean the elements</span>\n<span class=\"hljs-comment\">/// one by one. And we know the recursive will stop at Box&lt;Node&gt;</span>\n<span class=\"hljs-comment\">/// https://rust-unofficial.github.io/too-many-lists/first-drop.html</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// As we know we can&#x27;t drop the contents of the Box after deallocating, so we need to manually write the iterative drop</span>\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Stack</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">drop</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">cur_link</span> = <span class=\"hljs-keyword\">self</span>.head.<span class=\"hljs-title function_ invoke__\">take</span>();\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(<span class=\"hljs-keyword\">mut</span> boxed_node) = cur_link {\n            cur_link = boxed_node.next.<span class=\"hljs-title function_ invoke__\">take</span>();\n            <span class=\"hljs-comment\">// boxed_node goes out of scope and gets dropped here;</span>\n            <span class=\"hljs-comment\">// but its Node&#x27;s `next` field has been set to None</span>\n            <span class=\"hljs-comment\">// so no unbound recursion occurs.</span>\n        }\n    }\n}\n\n<span class=\"hljs-comment\">/// Rust has nothing like a yield statement, and there&#x27;s actually 3 different kinds of iterator should to implement</span>\n\n<span class=\"hljs-comment\">// Collections are iterated in Rust using the Iterator trait, we define a struct implement Iterator</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">IntoIter</span>&lt;T&gt;(Stack&lt;T&gt;);\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">IntoIter</span>&lt;T&gt; {\n    <span class=\"hljs-comment\">// This is declaring that every implementation of iterator has an associated type called Item</span>\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Item</span> = T;\n    <span class=\"hljs-comment\">// the reason iterator yield Option&lt;self::Item&gt; is because the interface coalesces the `has_next` and `get_next` concepts</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">next</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-keyword\">Self</span>::Item&gt; {\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-title function_ invoke__\">pop</span>().<span class=\"hljs-title function_ invoke__\">ok</span>()\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Iter</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T&gt; {\n    next: <span class=\"hljs-type\">Option</span>&lt;&amp;<span class=\"hljs-symbol\">&#x27;a</span> Node&lt;T&gt;&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Iter</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T&gt; {\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Item</span> = &amp;<span class=\"hljs-symbol\">&#x27;a</span> T;\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">next</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-keyword\">Self</span>::Item&gt; {\n        <span class=\"hljs-keyword\">self</span>.next.<span class=\"hljs-title function_ invoke__\">map</span>(|node| {\n            <span class=\"hljs-comment\">// as_deref: Converts from Option&lt;T&gt; (or &amp;Option&lt;T&gt;) to Option&lt;&amp;T::Target&gt;.</span>\n            <span class=\"hljs-keyword\">self</span>.next = node.next.<span class=\"hljs-title function_ invoke__\">as_deref</span>();\n            &amp;node.elem\n        })\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">IterMut</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T&gt; {\n    next: <span class=\"hljs-type\">Option</span>&lt;&amp;<span class=\"hljs-symbol\">&#x27;a</span> <span class=\"hljs-keyword\">mut</span> Node&lt;T&gt;&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">IterMut</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T&gt; {\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Item</span> = &amp;<span class=\"hljs-symbol\">&#x27;a</span> <span class=\"hljs-keyword\">mut</span> T;\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">next</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-keyword\">Self</span>::Item&gt; {\n        <span class=\"hljs-comment\">// we add take() here due to &amp;mut self isn&#x27;t Copy(&amp; and Option&lt;&amp;&gt; is Copy)</span>\n        <span class=\"hljs-keyword\">self</span>.next.<span class=\"hljs-title function_ invoke__\">take</span>().<span class=\"hljs-title function_ invoke__\">map</span>(|node| {\n            <span class=\"hljs-keyword\">self</span>.next = node.next.<span class=\"hljs-title function_ invoke__\">as_deref_mut</span>();\n            &amp;<span class=\"hljs-keyword\">mut</span> node.elem\n        })\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> test_stack {\n\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">basics</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list</span> = Stack::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(list.<span class=\"hljs-title function_ invoke__\">pop</span>(), <span class=\"hljs-title function_ invoke__\">Err</span>(<span class=\"hljs-string\">&quot;Stack is empty&quot;</span>));\n\n        list.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">1</span>);\n        list.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">2</span>);\n        list.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">3</span>);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(list.<span class=\"hljs-title function_ invoke__\">pop</span>(), <span class=\"hljs-title function_ invoke__\">Ok</span>(<span class=\"hljs-number\">3</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(list.<span class=\"hljs-title function_ invoke__\">pop</span>(), <span class=\"hljs-title function_ invoke__\">Ok</span>(<span class=\"hljs-number\">2</span>));\n\n        list.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">4</span>);\n        list.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">5</span>);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(list.<span class=\"hljs-title function_ invoke__\">is_empty</span>(), <span class=\"hljs-literal\">false</span>);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(list.<span class=\"hljs-title function_ invoke__\">pop</span>(), <span class=\"hljs-title function_ invoke__\">Ok</span>(<span class=\"hljs-number\">5</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(list.<span class=\"hljs-title function_ invoke__\">pop</span>(), <span class=\"hljs-title function_ invoke__\">Ok</span>(<span class=\"hljs-number\">4</span>));\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(list.<span class=\"hljs-title function_ invoke__\">pop</span>(), <span class=\"hljs-title function_ invoke__\">Ok</span>(<span class=\"hljs-number\">1</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(list.<span class=\"hljs-title function_ invoke__\">pop</span>(), <span class=\"hljs-title function_ invoke__\">Err</span>(<span class=\"hljs-string\">&quot;Stack is empty&quot;</span>));\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(list.<span class=\"hljs-title function_ invoke__\">is_empty</span>(), <span class=\"hljs-literal\">true</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">peek</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list</span> = Stack::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(list.<span class=\"hljs-title function_ invoke__\">peek</span>(), <span class=\"hljs-literal\">None</span>);\n        list.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">1</span>);\n        list.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">2</span>);\n        list.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">3</span>);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(list.<span class=\"hljs-title function_ invoke__\">peek</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;<span class=\"hljs-number\">3</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(list.<span class=\"hljs-title function_ invoke__\">peek_mut</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-number\">3</span>));\n\n        <span class=\"hljs-keyword\">match</span> list.<span class=\"hljs-title function_ invoke__\">peek_mut</span>() {\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\n            <span class=\"hljs-title function_ invoke__\">Some</span>(value) =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(*value = <span class=\"hljs-number\">42</span>),\n        };\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(list.<span class=\"hljs-title function_ invoke__\">peek</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;<span class=\"hljs-number\">42</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(list.<span class=\"hljs-title function_ invoke__\">pop</span>(), <span class=\"hljs-title function_ invoke__\">Ok</span>(<span class=\"hljs-number\">42</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">into_iter</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list</span> = Stack::<span class=\"hljs-title function_ invoke__\">new</span>();\n        list.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">1</span>);\n        list.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">2</span>);\n        list.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">3</span>);\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">iter</span> = list.<span class=\"hljs-title function_ invoke__\">into_iter_for_stack</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(iter.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">3</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(iter.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">2</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(iter.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">1</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(iter.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-literal\">None</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">iter</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list</span> = Stack::<span class=\"hljs-title function_ invoke__\">new</span>();\n        list.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">1</span>);\n        list.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">2</span>);\n        list.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">3</span>);\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">iter</span> = list.<span class=\"hljs-title function_ invoke__\">iter</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(iter.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;<span class=\"hljs-number\">3</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(iter.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;<span class=\"hljs-number\">2</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(iter.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;<span class=\"hljs-number\">1</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">iter_mut</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">list</span> = Stack::<span class=\"hljs-title function_ invoke__\">new</span>();\n        list.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">1</span>);\n        list.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">2</span>);\n        list.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">3</span>);\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">iter</span> = list.<span class=\"hljs-title function_ invoke__\">iter_mut</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(iter.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-number\">3</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(iter.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-number\">2</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(iter.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-number\">1</span>));\n    }\n}\n"
    },
    "dart": {
      "dir": "data_structures/Stack/Linked_List_Stack.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/data_structures/Stack/Linked_List_Stack.dart",
      "code": "<span class=\"hljs-comment\">//Author: Shawn</span>\n<span class=\"hljs-comment\">//Email: stepfencurryxiao@gmail.com</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span>&lt;<span class=\"hljs-title\">T</span>&gt; </span>{\n  <span class=\"hljs-comment\">//the data of the Node</span>\n  T data;\n  Node next;\n\n  Node(T data) {\n    <span class=\"hljs-keyword\">this</span>.data = data;\n    <span class=\"hljs-keyword\">this</span>.next = <span class=\"hljs-keyword\">null</span>;\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LinkedListStack</span>&lt;<span class=\"hljs-title\">T</span>&gt; </span>{\n  <span class=\"hljs-comment\">//Top of stack</span>\n  Node&lt;T&gt; head;\n\n  <span class=\"hljs-comment\">//Size of stack</span>\n  <span class=\"hljs-built_in\">int</span> size;\n\n  LinkedListStack() {\n    <span class=\"hljs-keyword\">this</span>.head = <span class=\"hljs-keyword\">null</span>;\n    <span class=\"hljs-keyword\">this</span>.size = <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-comment\">//Add element at top of the stack</span>\n\n  <span class=\"hljs-keyword\">void</span> push(T element) {\n    Node&lt;T&gt; newNode = <span class=\"hljs-keyword\">new</span> Node&lt;T&gt;(element);\n    newNode.next = <span class=\"hljs-keyword\">this</span>.head;\n    <span class=\"hljs-keyword\">this</span>.head = newNode;\n    <span class=\"hljs-keyword\">this</span>.size++;\n  }\n\n  <span class=\"hljs-comment\">//Pop element from top at the stack</span>\n\n  T pop() {\n    T returnData = <span class=\"hljs-keyword\">null</span>;\n    <span class=\"hljs-keyword\">if</span> (size == <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The stack is empty!!!&quot;</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      Node&lt;T&gt; destroy = <span class=\"hljs-keyword\">this</span>.head;\n      <span class=\"hljs-keyword\">this</span>.head = <span class=\"hljs-keyword\">this</span>.head.next;\n      returnData = destroy.data;\n      <span class=\"hljs-keyword\">this</span>.size--;\n    }\n    <span class=\"hljs-keyword\">return</span> returnData;\n  }\n\n  <span class=\"hljs-built_in\">bool</span> isEmpty() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.size == <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-built_in\">int</span> getSize() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.size;\n  }\n}\n\n<span class=\"hljs-built_in\">int</span> main() {\n  LinkedListStack&lt;<span class=\"hljs-built_in\">String</span>&gt; Stack = <span class=\"hljs-keyword\">new</span> LinkedListStack&lt;<span class=\"hljs-built_in\">String</span>&gt;();\n  <span class=\"hljs-keyword\">var</span> returnData;\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Push 2 5 9 7 to the stack\\n&quot;</span>);\n  Stack.push(<span class=\"hljs-string\">&quot;2&quot;</span>);\n  Stack.push(<span class=\"hljs-string\">&quot;5&quot;</span>);\n  Stack.push(<span class=\"hljs-string\">&quot;9&quot;</span>);\n  Stack.push(<span class=\"hljs-string\">&quot;7&quot;</span>);\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Successful push!\\n&quot;</span>);\n  returnData = Stack.pop();\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Pop a data: <span class=\"hljs-subst\">$returnData</span>\\n&quot;</span>);\n  returnData = Stack.pop();\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Pop a data: <span class=\"hljs-subst\">$returnData</span>\\n&quot;</span>);\n  returnData = Stack.pop();\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Pop a data: <span class=\"hljs-subst\">$returnData</span>\\n&quot;</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "lua": {
      "dir": "src/data_structures/linked_stack.lua",
      "url": "https://github.com/TheAlgorithms/lua/tree/master/src/data_structures/linked_stack.lua",
      "code": "<span class=\"hljs-keyword\">local</span> linked_stack = {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">linked_stack.new</span><span class=\"hljs-params\">()</span></span>\n\t<span class=\"hljs-keyword\">return</span> {}\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">linked_stack:empty</span><span class=\"hljs-params\">()</span></span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">self</span>._top\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">linked_stack:push</span><span class=\"hljs-params\">(value)</span></span>\n\t<span class=\"hljs-built_in\">self</span>._top = { value = value, below = <span class=\"hljs-built_in\">self</span>._top }\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">linked_stack:top</span><span class=\"hljs-params\">()</span></span>\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">self</span>:empty() <span class=\"hljs-keyword\">then</span>\n\t\t<span class=\"hljs-keyword\">return</span>\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">self</span>._top.value\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">linked_stack:pop</span><span class=\"hljs-params\">()</span></span>\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">self</span>:empty() <span class=\"hljs-keyword\">then</span>\n\t\t<span class=\"hljs-keyword\">return</span>\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">local</span> top_element = <span class=\"hljs-built_in\">self</span>:top()\n\t<span class=\"hljs-built_in\">self</span>._top = <span class=\"hljs-built_in\">self</span>._top.below\n\t<span class=\"hljs-keyword\">return</span> top_element\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;class&quot;</span>)(linked_stack)\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}