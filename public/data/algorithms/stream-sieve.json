{
  "slug": "stream-sieve",
  "name": "Stream Sieve",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "scala": {
      "dir": "src/main/scala/Mathematics/StreamSieve.scala",
      "url": "https://github.com/TheAlgorithms/scala/tree/master/src/main/scala/Mathematics/StreamSieve.scala",
      "code": "<span class=\"hljs-keyword\">package</span> <span class=\"hljs-type\">Mathematics</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">StreamSieve</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> allPrimes: <span class=\"hljs-type\">LazyList</span>[<span class=\"hljs-type\">Int</span>] = <span class=\"hljs-number\">2</span> #:: <span class=\"hljs-type\">LazyList</span>.from(<span class=\"hljs-number\">3</span>).filter { c =&gt;\n    <span class=\"hljs-keyword\">val</span> primesUpToSqrt = allPrimes.takeWhile(p =&gt; p &lt;= math.sqrt(c.toDouble))\n    !primesUpToSqrt.exists(p =&gt; c % p == <span class=\"hljs-number\">0</span>)\n  }\n\n  <span class=\"hljs-comment\">/** Method to use the allPrimes stream to take the first n prime numbers Using streams is both an easy and\n    * efficient way to generate fibonacci numbers (streams are memoized) Using streams as opposed to the classic\n    * sieve ensures that we stay following functional principles and not change states\n    */</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getPrimeNumbers</span></span>(n: <span class=\"hljs-type\">Int</span>): <span class=\"hljs-type\">Seq</span>[<span class=\"hljs-type\">Int</span>] = allPrimes.take(n)\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Alfredo Torre",
      "email": "alfredotorre@gmail.com",
      "commits": 1
    },
    {
      "name": "khanhhuynguyenvu",
      "email": "khanhhuynguyenvu@gmail.com",
      "commits": 1
    },
    {
      "name": "cutajarj2",
      "email": "james.cutajar@blip.pt",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}