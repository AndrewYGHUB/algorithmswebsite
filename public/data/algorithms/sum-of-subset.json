{
  "slug": "sum-of-subset",
  "name": "Sum of Subset",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "dynamic_programming/sum_of_subset.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/dynamic_programming/sum_of_subset.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isSumSubset</span>(<span class=\"hljs-params\">arr, arrLen, requiredSum</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; isSumSubset([2, 4, 6, 8], 4, 5)\n    False\n    &gt;&gt;&gt; isSumSubset([2, 4, 6, 8], 4, 14)\n    True\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># a subset value says 1 if that subset sum can be formed else 0</span>\n    <span class=\"hljs-comment\"># initially no subsets can be formed hence False/0</span>\n    subset = [[<span class=\"hljs-literal\">False</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(requiredSum + <span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(arrLen + <span class=\"hljs-number\">1</span>)]\n\n    <span class=\"hljs-comment\"># for each arr value, a sum of zero(0) can be formed by not taking any element</span>\n    <span class=\"hljs-comment\"># hence True/1</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(arrLen + <span class=\"hljs-number\">1</span>):\n        subset[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-comment\"># sum is not zero and set is empty then false</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, requiredSum + <span class=\"hljs-number\">1</span>):\n        subset[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, arrLen + <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, requiredSum + <span class=\"hljs-number\">1</span>):\n            <span class=\"hljs-keyword\">if</span> arr[i - <span class=\"hljs-number\">1</span>] &gt; j:\n                subset[i][j] = subset[i - <span class=\"hljs-number\">1</span>][j]\n            <span class=\"hljs-keyword\">if</span> arr[i - <span class=\"hljs-number\">1</span>] &lt;= j:\n                subset[i][j] = subset[i - <span class=\"hljs-number\">1</span>][j] <span class=\"hljs-keyword\">or</span> subset[i - <span class=\"hljs-number\">1</span>][j - arr[i - <span class=\"hljs-number\">1</span>]]\n\n    <span class=\"hljs-comment\"># uncomment to print the subset</span>\n    <span class=\"hljs-comment\"># for i in range(arrLen+1):</span>\n    <span class=\"hljs-comment\">#     print(subset[i])</span>\n    <span class=\"hljs-built_in\">print</span>(subset[arrLen][requiredSum])\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "javascript": {
      "dir": "Backtracking/SumOfSubset.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Backtracking/SumOfSubset.js",
      "code": "<span class=\"hljs-comment\">/*\n *\n *  Sum of Subset problem\n *\n *  Given an ordered set W of non-negative integers and a value K,\n *  determine all possible subsets from the given set W whose sum\n *  of its elements equals to the given value K.\n *\n *  More info: https://www.geeksforgeeks.org/subset-sum-backtracking-4/\n */</span>\n\n<span class=\"hljs-comment\">/*\n * @param {number[]} set Original set of numbers\n * @param {number[]} subset Subset being evaluated\n * @param {number} setIndex Index from set of last element in subset\n * @param {number} Sum of elements from subset\n * @param {targetSum} The target sum on which the subset sum is compared to\n * @returns {number[][]} Subsets whose elements add up to targetSum\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">sumOfSubset</span> = (<span class=\"hljs-params\">set, subset, setindex, sum, targetSum</span>) =&gt; {\n  <span class=\"hljs-comment\">// Base case where the subset sum is equal to target sum</span>\n  <span class=\"hljs-comment\">// Evaluation of following subsets on this path will always add up to</span>\n  <span class=\"hljs-comment\">// greater than targetSum, so no need to continue</span>\n  <span class=\"hljs-keyword\">if</span> (sum === targetSum) <span class=\"hljs-keyword\">return</span> [subset]\n\n  <span class=\"hljs-comment\">// This and following subsets on this path will always add up to</span>\n  <span class=\"hljs-comment\">// greater than targetSum, so no need to continue</span>\n  <span class=\"hljs-keyword\">if</span> (sum &gt; targetSum) <span class=\"hljs-keyword\">return</span> []\n\n  <span class=\"hljs-comment\">// Initialize results array. Will contain only valid subsets</span>\n  <span class=\"hljs-keyword\">let</span> results = []\n\n  <span class=\"hljs-comment\">// Slice gets from the set all the elements at the right of the last element</span>\n  <span class=\"hljs-comment\">// to be evaluated (last element of subset)</span>\n  <span class=\"hljs-comment\">// forEach iterated on the resulting array</span>\n  set.<span class=\"hljs-title function_\">slice</span>(setindex).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">num, index</span>) =&gt;</span> {\n    <span class=\"hljs-comment\">// The next subset to be evaluated, current subset plus next element</span>\n    <span class=\"hljs-keyword\">const</span> nextSubset = [...subset, num]\n\n    <span class=\"hljs-comment\">// Next index from the set. Current set index plus iteration index</span>\n    <span class=\"hljs-comment\">// index starts at 0, so a + 1 is required</span>\n    <span class=\"hljs-keyword\">const</span> nextSetIndex = setindex + index + <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\">// Sum of elements from the next subset to be evaluated</span>\n    <span class=\"hljs-keyword\">const</span> nextSum = sum + num\n\n    <span class=\"hljs-comment\">// Call recursively the sumOfSubset for the nextSubset</span>\n    <span class=\"hljs-keyword\">const</span> subsetResult = <span class=\"hljs-title function_\">sumOfSubset</span>(\n      set,\n      nextSubset,\n      nextSetIndex,\n      nextSum,\n      targetSum\n    )\n\n    <span class=\"hljs-comment\">// Concat the recursive result with current result array</span>\n    results = [...results, ...subsetResult]\n  })\n\n  <span class=\"hljs-comment\">// Return results</span>\n  <span class=\"hljs-keyword\">return</span> results\n}\n\n<span class=\"hljs-keyword\">export</span> { sumOfSubset }\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/dynamicprogramming/Sum_Of_Subset.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/dynamicprogramming/Sum_Of_Subset.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Sum_Of_Subset</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n        <span class=\"hljs-type\">int</span>[] arr = {<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>};\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">Key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">14</span>;\n\n        <span class=\"hljs-keyword\">if</span> (subsetSum(arr, arr.length - <span class=\"hljs-number\">1</span>, Key)) {\n            System.out.print(<span class=\"hljs-string\">&quot;Yes, that sum exists&quot;</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            System.out.print(<span class=\"hljs-string\">&quot;Nope, that number does not exist&quot;</span>);\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">subsetSum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> num, <span class=\"hljs-type\">int</span> Key)</span> {\n        <span class=\"hljs-keyword\">if</span> (Key == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (num &lt; <span class=\"hljs-number\">0</span> || Key &lt; <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">include</span> <span class=\"hljs-operator\">=</span> subsetSum(arr, num - <span class=\"hljs-number\">1</span>, Key - arr[num]);\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">exclude</span> <span class=\"hljs-operator\">=</span> subsetSum(arr, num - <span class=\"hljs-number\">1</span>, Key);\n\n        <span class=\"hljs-keyword\">return</span> include || exclude;\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Keshav Bohra",
      "email": "keshav2016@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Shubham-Singh-Rajput",
      "email": "88304238+shubham-singh-748@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ankur Chattopadhyay",
      "email": "39518771+chttrjeankr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Jigyasa G",
      "email": "jigsgandhi97@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Jigyasa G",
      "email": "33327397+jpg-130@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Suaze9",
      "email": "suazodaniel99@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}