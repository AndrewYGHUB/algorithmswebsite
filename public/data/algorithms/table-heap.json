{
  "slug": "table-heap",
  "name": "Table Heap",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "lua": {
      "dir": "src/data_structures/table_heap.lua",
      "url": "https://github.com/TheAlgorithms/lua/tree/master/src/data_structures/table_heap.lua",
      "code": "<span class=\"hljs-comment\">-- Min heap plus Lua hash table to allow updating the stored values</span>\n<span class=\"hljs-keyword\">local</span> table_heap = {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">table_heap.less_than</span><span class=\"hljs-params\">(a, b)</span></span>\n\t<span class=\"hljs-keyword\">return</span> a &lt; b\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\">--&gt; empty, duplicate-free min heap with priority queue functionality</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">table_heap.new</span><span class=\"hljs-params\">(less_than)</span></span>\n\t<span class=\"hljs-keyword\">return</span> { less_than = less_than, indices = {} }\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(self, child_index, parent_index)</span></span>\n\t<span class=\"hljs-keyword\">local</span> child_value, parent_value = <span class=\"hljs-built_in\">self</span>[child_index], <span class=\"hljs-built_in\">self</span>[parent_index]\n\t<span class=\"hljs-built_in\">self</span>.indices[parent_value], <span class=\"hljs-built_in\">self</span>.indices[child_value] = child_index, parent_index\n\t<span class=\"hljs-built_in\">self</span>[parent_index], <span class=\"hljs-built_in\">self</span>[child_index] = child_value, parent_value\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">heapify_up</span><span class=\"hljs-params\">(self, index)</span></span>\n\t<span class=\"hljs-keyword\">if</span> index == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">then</span>\n\t\t<span class=\"hljs-keyword\">return</span>\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">local</span> parent_index = <span class=\"hljs-built_in\">math</span>.<span class=\"hljs-built_in\">floor</span>(index / <span class=\"hljs-number\">2</span>)\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">self</span>.less_than(<span class=\"hljs-built_in\">self</span>[index], <span class=\"hljs-built_in\">self</span>[parent_index]) <span class=\"hljs-keyword\">then</span>\n\t\tswap(<span class=\"hljs-built_in\">self</span>, index, parent_index)\n\t\theapify_up(<span class=\"hljs-built_in\">self</span>, parent_index)\n\t<span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">heapify_down</span><span class=\"hljs-params\">(self, index)</span></span>\n\t<span class=\"hljs-keyword\">local</span> left_child = index * <span class=\"hljs-number\">2</span>\n\t<span class=\"hljs-keyword\">if</span> left_child &gt; #<span class=\"hljs-built_in\">self</span> <span class=\"hljs-keyword\">then</span>\n\t\t<span class=\"hljs-keyword\">return</span>\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">local</span> smallest_child = left_child + <span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-keyword\">if</span> smallest_child &gt; #<span class=\"hljs-built_in\">self</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">self</span>.less_than(<span class=\"hljs-built_in\">self</span>[left_child], <span class=\"hljs-built_in\">self</span>[smallest_child]) <span class=\"hljs-keyword\">then</span>\n\t\tsmallest_child = left_child\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">self</span>.less_than(<span class=\"hljs-built_in\">self</span>[smallest_child], <span class=\"hljs-built_in\">self</span>[index]) <span class=\"hljs-keyword\">then</span>\n\t\tswap(<span class=\"hljs-built_in\">self</span>, smallest_child, index)\n\t\theapify_down(<span class=\"hljs-built_in\">self</span>, smallest_child)\n\t<span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">table_heap:push</span><span class=\"hljs-params\">(value)</span></span>\n\t<span class=\"hljs-built_in\">table</span>.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-built_in\">self</span>, value)\n\t<span class=\"hljs-keyword\">local</span> last = #<span class=\"hljs-built_in\">self</span>\n\t<span class=\"hljs-built_in\">self</span>.indices[value] = last\n\theapify_up(<span class=\"hljs-built_in\">self</span>, last)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">table_heap:top</span><span class=\"hljs-params\">()</span></span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">self</span>[<span class=\"hljs-number\">1</span>]\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">table_heap:pop</span><span class=\"hljs-params\">()</span></span>\n\t<span class=\"hljs-keyword\">local</span> value = <span class=\"hljs-built_in\">self</span>[<span class=\"hljs-number\">1</span>]\n\t<span class=\"hljs-built_in\">self</span>.indices[value] = <span class=\"hljs-literal\">nil</span>\n\t<span class=\"hljs-keyword\">local</span> last = #<span class=\"hljs-built_in\">self</span>\n\t<span class=\"hljs-keyword\">if</span> last == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">then</span>\n\t\t<span class=\"hljs-built_in\">self</span>[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">nil</span>\n\t\t<span class=\"hljs-keyword\">return</span> value\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-built_in\">self</span>[<span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">self</span>[last] = <span class=\"hljs-built_in\">self</span>[last], <span class=\"hljs-literal\">nil</span>\n\theapify_down(<span class=\"hljs-built_in\">self</span>, <span class=\"hljs-number\">1</span>)\n\t<span class=\"hljs-keyword\">return</span> value\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">table_heap:find_index</span><span class=\"hljs-params\">(element)</span></span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">self</span>.indices[element]\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\">-- Notify heap that the element has been decreased</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">table_heap:decrease</span><span class=\"hljs-params\">(element)</span></span>\n\theapify_up(<span class=\"hljs-built_in\">self</span>, <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">self</span>:find_index(element)))\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\">-- Notify heap that the element has been increased</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">table_heap:increase</span><span class=\"hljs-params\">(element)</span></span>\n\theapify_down(<span class=\"hljs-built_in\">self</span>, <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">self</span>:find_index(element)))\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\">-- Replaces the specified element - by identity - with the new element</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">table_heap:replace</span><span class=\"hljs-params\">(element, new_element)</span></span>\n\t<span class=\"hljs-keyword\">local</span> index = <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">self</span>:find_index(element))\n\t<span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">self</span>:find_index(new_element) == <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-string\">&quot;no duplicates allowed&quot;</span>)\n\t<span class=\"hljs-built_in\">self</span>[index] = new_element\n\t<span class=\"hljs-built_in\">self</span>.indices[element] = <span class=\"hljs-literal\">nil</span>\n\t<span class=\"hljs-built_in\">self</span>.indices[new_element] = index;\n\t(<span class=\"hljs-built_in\">self</span>.less_than(new_element, element) <span class=\"hljs-keyword\">and</span> heapify_up <span class=\"hljs-keyword\">or</span> heapify_down)(<span class=\"hljs-built_in\">self</span>, index)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">table_heap:remove</span><span class=\"hljs-params\">(element)</span></span>\n\t<span class=\"hljs-keyword\">local</span> index = <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">self</span>:find_index(element), <span class=\"hljs-string\">&quot;element not found&quot;</span>)\n\t<span class=\"hljs-built_in\">self</span>.indices[element] = <span class=\"hljs-literal\">nil</span>\n\t<span class=\"hljs-keyword\">if</span> index == #<span class=\"hljs-built_in\">self</span> <span class=\"hljs-keyword\">then</span>\n\t\t<span class=\"hljs-built_in\">self</span>[index] = <span class=\"hljs-literal\">nil</span>\n\t<span class=\"hljs-keyword\">else</span>\n\t\t<span class=\"hljs-keyword\">local</span> last_index = #<span class=\"hljs-built_in\">self</span>\n\t\t<span class=\"hljs-keyword\">local</span> last_element = <span class=\"hljs-built_in\">self</span>[last_index]\n\t\t<span class=\"hljs-built_in\">self</span>[last_index] = <span class=\"hljs-literal\">nil</span>\n\t\t<span class=\"hljs-built_in\">self</span>[index] = last_element\n\t\t<span class=\"hljs-built_in\">self</span>.indices[last_element] = index;\n\t\t(<span class=\"hljs-built_in\">self</span>.less_than(last_element, element) <span class=\"hljs-keyword\">and</span> heapify_up <span class=\"hljs-keyword\">or</span> heapify_down)(<span class=\"hljs-built_in\">self</span>, index)\n\t<span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;class&quot;</span>)(table_heap)\n"
    }
  },
  "contributors": [
    {
      "name": "Lars Mueller",
      "email": "appgurulars@gmx.de",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}