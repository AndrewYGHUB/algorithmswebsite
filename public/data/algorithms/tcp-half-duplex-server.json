{
  "slug": "tcp-half-duplex-server",
  "name": "Tcp Half Duplex Server",
  "categories": [
    "clientserver"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "client_server/tcp_half_duplex_server.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/client_server/tcp_half_duplex_server.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @author [NVombat](https://github.com/NVombat)\n * @brief Server-side implementation of [TCP Half Duplex\n * Communication](http://www.tcpipguide.com/free/t_SimplexFullDuplexandHalfDuplexOperation.htm)\n * @see tcp_half_duplex_server.c\n *\n * @details\n * The algorithm is based on the simple TCP client and server model. However,\n * instead of the server only sending and the client only receiving data,\n * The server and client can both send data but only one at a time. This is\n * implemented by using a particular ordering of the `send()` and `recv()`\n * functions. When one of the clients or servers is sending, the other can only\n * receive and vice-versa. In this way, the Half Duplex Form of communication\n * can be represented using the TCP server-client model &amp; socket programming\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;netdb.h&gt;</span>  <span class=\"hljs-comment\">/// For structures returned by the network database library - formatted internet addresses and port numbers</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;netinet/in.h&gt;</span>  <span class=\"hljs-comment\">/// For in_addr and sockaddr_in structures</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdint.h&gt;</span>      <span class=\"hljs-comment\">/// For specific bit size values of variables</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span>  <span class=\"hljs-comment\">/// Variable types, several macros, and various functions for performing input and output</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span>  <span class=\"hljs-comment\">/// Variable types, several macros, and various functions for performing general functions</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span>  <span class=\"hljs-comment\">/// Various functions for manipulating arrays of characters</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/socket.h&gt;</span>  <span class=\"hljs-comment\">/// For macro definitions related to the creation of sockets</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/types.h&gt;</span>  <span class=\"hljs-comment\">/// For definitions to allow for the porting of BSD programs</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unistd.h&gt;</span>  <span class=\"hljs-comment\">/// For miscellaneous symbolic constants and types, and miscellaneous functions</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> PORT 8100  <span class=\"hljs-comment\">/// Define port over which communication will take place</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief Utility function used to print an error message to `stderr`.\n * It prints `str` and an implementation-defined error\n * message corresponding to the global variable `errno`.\n * @returns void\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">error</span><span class=\"hljs-params\">()</span>\n{\n    perror(<span class=\"hljs-string\">&quot;Socket Creation Failed&quot;</span>);\n    <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-comment\">/** Variable Declarations */</span>\n    <span class=\"hljs-type\">uint32_t</span> sockfd,\n        conn;  <span class=\"hljs-comment\">///&lt; socket descriptors - Like file handles but for sockets</span>\n    <span class=\"hljs-type\">char</span> server_msg[<span class=\"hljs-number\">10000</span>],\n        client_msg[<span class=\"hljs-number\">10000</span>];  <span class=\"hljs-comment\">///&lt; character arrays to read and store string data</span>\n                            <span class=\"hljs-comment\">/// for communication</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">sockaddr_in</span> <span class=\"hljs-title\">server_addr</span>,\n        <span class=\"hljs-title\">client_addr</span>;</span>  <span class=\"hljs-comment\">///&lt; asic structures for all syscalls and functions that</span>\n                      <span class=\"hljs-comment\">/// deal with internet addresses. Structures for handling</span>\n                      <span class=\"hljs-comment\">/// internet addresses</span>\n\n    <span class=\"hljs-comment\">/**\n     * The TCP socket is created using the socket function\n     *\n     * AF_INET (Family) - it is an address family that is used to designate the\n     * type of addresses that your socket can communicate with\n     *\n     * SOCK_STREAM (Type) - Indicates TCP Connection - A stream socket provides\n     * for the bidirectional, reliable, sequenced, and unduplicated flow of data\n     * without record boundaries. Aside from the bidirectionality of data flow,\n     * a pair of connected stream sockets provides an interface nearly identical\n     * to pipes\n     *\n     * 0 (Protocol) - Specifies a particular protocol to be used with the\n     * socket. Specifying a protocol of 0 causes socket() to use an unspecified\n     * default protocol appropriate for the requested socket type\n     */</span>\n    <span class=\"hljs-keyword\">if</span> ((sockfd = socket(AF_INET, SOCK_STREAM, <span class=\"hljs-number\">0</span>)) &lt; <span class=\"hljs-number\">0</span>)\n    {\n        error();  <span class=\"hljs-comment\">///&lt; Error if the socket descriptor has a value lower than 0 -</span>\n                  <span class=\"hljs-comment\">/// socket wasnt created</span>\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Server Address Information\n     *\n     * The bzero() function erases the data in the n bytes of the memory\n     * starting at the location pointed to, by writing zeros (bytes\n     * containing &#x27;\\0&#x27;) to that area\n     *\n     * We bind the server_addr to the internet address and port number thus\n     * giving our socket an identity with an address and port where it can\n     * listen for connections\n     *\n     * htons - The htons() function translates a short integer from host byte\n     * order to network byte order\n     *\n     * htonl - The htonl() function translates a long integer from host byte\n     * order to network byte order\n     *\n     * These functions are necessary so that the binding of address and port\n     * takes place with data in the correct format\n     */</span>\n    bzero(&amp;server_addr, <span class=\"hljs-keyword\">sizeof</span>(server_addr));\n    server_addr.sin_family = AF_INET;    <span class=\"hljs-comment\">/// Domain/Family to be used</span>\n    server_addr.sin_port = htons(PORT);  <span class=\"hljs-comment\">/// Port to be used</span>\n    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Server is running...\\n&quot;</span>);\n\n    <span class=\"hljs-comment\">/**\n     * This binds the socket descriptor to the server thus enabling the server\n     * to listen for connections and communicate with other clients\n     */</span>\n    <span class=\"hljs-keyword\">if</span> (bind(sockfd, (<span class=\"hljs-keyword\">struct</span> sockaddr *)&amp;server_addr, <span class=\"hljs-keyword\">sizeof</span>(server_addr)) &lt; <span class=\"hljs-number\">0</span>)\n    {\n        error();  <span class=\"hljs-comment\">/// If binding is unsuccessful</span>\n    }\n\n    <span class=\"hljs-comment\">/**\n     * This is to listen for clients or connections made to the server\n     *\n     * The limit is currently at 5 but can be increased to listen for\n     * more connections\n     *\n     * It listens to connections through the socket descriptor\n     */</span>\n    listen(sockfd, <span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Server is listening...\\n&quot;</span>);\n\n    <span class=\"hljs-comment\">/**\n     * When a connection is found, a socket is created and connection is\n     * accepted and established through the socket descriptor\n     */</span>\n    conn = accept(sockfd, (<span class=\"hljs-keyword\">struct</span> sockaddr *)<span class=\"hljs-literal\">NULL</span>, <span class=\"hljs-literal\">NULL</span>);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Server is connected...\\n&quot;</span>);\n\n    <span class=\"hljs-comment\">/**\n     * Communication between client and server\n     *\n     * The bzero() function erases the data in the n bytes of the memory\n     * starting at the location pointed to, by writing zeros (bytes\n     * containing &#x27;\\0&#x27;) to that area. The variables are emptied and then\n     * ready for use\n     *\n     * First the SERVER is prompted to type a message which is read from\n     * stdin and then sent over the connection that was established - the socket\n     * - to be received by the client (send())\n     *\n     * The SERVER then waits for the client to reply. It then receives the reply\n     * in the string variable and displays it (recv())\n     *\n     * The server and client can communicate till one of them exits the\n     * connection\n     *\n     * Since the exchange of information between the server and client take\n     * place one at a time this represents HALF DUPLEX COMMUNICATION\n     */</span>\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)\n    {\n        bzero(&amp;server_msg, <span class=\"hljs-keyword\">sizeof</span>(server_msg));\n        bzero(&amp;client_msg, <span class=\"hljs-keyword\">sizeof</span>(client_msg));\n\n        <span class=\"hljs-comment\">/// Send message</span>\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nEnter message here: &quot;</span>);\n        fgets(server_msg, <span class=\"hljs-number\">10000</span>, <span class=\"hljs-built_in\">stdin</span>);\n        send(conn, server_msg, <span class=\"hljs-built_in\">strlen</span>(server_msg) + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\n\n        <span class=\"hljs-comment\">/// Receive Message</span>\n        recv(conn, client_msg, <span class=\"hljs-keyword\">sizeof</span>(client_msg), <span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nClient Message: %s\\n&quot;</span>, client_msg);\n    }\n\n    <span class=\"hljs-comment\">/// Close socket</span>\n    close(sockfd);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Server is offline...\\n&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Nikhill Vombatkere",
      "email": "63743496+NVombat@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}