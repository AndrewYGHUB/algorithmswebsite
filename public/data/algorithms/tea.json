{
  "slug": "tea",
  "name": "Tea",
  "categories": [
    "ciphers"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/ciphers/tea.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/ciphers/tea.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::num::Wrapping <span class=\"hljs-keyword\">as</span> W;\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">TeaContext</span> {\n    key0: <span class=\"hljs-type\">u64</span>,\n    key1: <span class=\"hljs-type\">u64</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">TeaContext</span> {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>(key: &amp;[<span class=\"hljs-type\">u64</span>; <span class=\"hljs-number\">2</span>]) <span class=\"hljs-punctuation\">-&gt;</span> TeaContext {\n        TeaContext {\n            key0: key[<span class=\"hljs-number\">0</span>],\n            key1: key[<span class=\"hljs-number\">1</span>],\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">encrypt_block</span>(&amp;<span class=\"hljs-keyword\">self</span>, block: <span class=\"hljs-type\">u64</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u64</span> {\n        <span class=\"hljs-keyword\">let</span> (<span class=\"hljs-keyword\">mut</span> b0, <span class=\"hljs-keyword\">mut</span> b1) = <span class=\"hljs-title function_ invoke__\">divide_u64</span>(block);\n        <span class=\"hljs-keyword\">let</span> (k0, k1) = <span class=\"hljs-title function_ invoke__\">divide_u64</span>(<span class=\"hljs-keyword\">self</span>.key0);\n        <span class=\"hljs-keyword\">let</span> (k2, k3) = <span class=\"hljs-title function_ invoke__\">divide_u64</span>(<span class=\"hljs-keyword\">self</span>.key1);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">sum</span> = <span class=\"hljs-title function_ invoke__\">W</span>(<span class=\"hljs-number\">0u32</span>);\n\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">_</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">32</span> {\n            sum += <span class=\"hljs-title function_ invoke__\">W</span>(<span class=\"hljs-number\">0x9E3779B9</span>);\n            b0 += ((b1 &lt;&lt; <span class=\"hljs-number\">4</span>) + k0) ^ (b1 + sum) ^ ((b1 &gt;&gt; <span class=\"hljs-number\">5</span>) + k1);\n            b1 += ((b0 &lt;&lt; <span class=\"hljs-number\">4</span>) + k2) ^ (b0 + sum) ^ ((b0 &gt;&gt; <span class=\"hljs-number\">5</span>) + k3);\n        }\n\n        ((b1.<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span>) &lt;&lt; <span class=\"hljs-number\">32</span>) | b0.<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span>\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">decrypt_block</span>(&amp;<span class=\"hljs-keyword\">self</span>, block: <span class=\"hljs-type\">u64</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u64</span> {\n        <span class=\"hljs-keyword\">let</span> (<span class=\"hljs-keyword\">mut</span> b0, <span class=\"hljs-keyword\">mut</span> b1) = <span class=\"hljs-title function_ invoke__\">divide_u64</span>(block);\n        <span class=\"hljs-keyword\">let</span> (k0, k1) = <span class=\"hljs-title function_ invoke__\">divide_u64</span>(<span class=\"hljs-keyword\">self</span>.key0);\n        <span class=\"hljs-keyword\">let</span> (k2, k3) = <span class=\"hljs-title function_ invoke__\">divide_u64</span>(<span class=\"hljs-keyword\">self</span>.key1);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">sum</span> = <span class=\"hljs-title function_ invoke__\">W</span>(<span class=\"hljs-number\">0xC6EF3720u32</span>);\n\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">_</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">32</span> {\n            b1 -= ((b0 &lt;&lt; <span class=\"hljs-number\">4</span>) + k2) ^ (b0 + sum) ^ ((b0 &gt;&gt; <span class=\"hljs-number\">5</span>) + k3);\n            b0 -= ((b1 &lt;&lt; <span class=\"hljs-number\">4</span>) + k0) ^ (b1 + sum) ^ ((b1 &gt;&gt; <span class=\"hljs-number\">5</span>) + k1);\n            sum -= <span class=\"hljs-title function_ invoke__\">W</span>(<span class=\"hljs-number\">0x9E3779B9</span>);\n        }\n\n        ((b1.<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span>) &lt;&lt; <span class=\"hljs-number\">32</span>) | b0.<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span>\n    }\n}\n\n<span class=\"hljs-meta\">#[inline]</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">divide_u64</span>(n: <span class=\"hljs-type\">u64</span>) <span class=\"hljs-punctuation\">-&gt;</span> (W&lt;<span class=\"hljs-type\">u32</span>&gt;, W&lt;<span class=\"hljs-type\">u32</span>&gt;) {\n    (<span class=\"hljs-title function_ invoke__\">W</span>(n <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>), <span class=\"hljs-title function_ invoke__\">W</span>((n &gt;&gt; <span class=\"hljs-number\">32</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>))\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">tea_encrypt</span>(plain: &amp;[<span class=\"hljs-type\">u8</span>], key: &amp;[<span class=\"hljs-type\">u8</span>]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u8</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">tea</span> = TeaContext::<span class=\"hljs-title function_ invoke__\">new</span>(&amp;[<span class=\"hljs-title function_ invoke__\">to_block</span>(&amp;key[..<span class=\"hljs-number\">8</span>]), <span class=\"hljs-title function_ invoke__\">to_block</span>(&amp;key[<span class=\"hljs-number\">8</span>..<span class=\"hljs-number\">16</span>])]);\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u8</span>&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">0</span>..plain.<span class=\"hljs-title function_ invoke__\">len</span>()).<span class=\"hljs-title function_ invoke__\">step_by</span>(<span class=\"hljs-number\">8</span>) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">block</span> = <span class=\"hljs-title function_ invoke__\">to_block</span>(&amp;plain[i..i + <span class=\"hljs-number\">8</span>]);\n        result.<span class=\"hljs-title function_ invoke__\">extend</span>(<span class=\"hljs-title function_ invoke__\">from_block</span>(tea.<span class=\"hljs-title function_ invoke__\">encrypt_block</span>(block)).<span class=\"hljs-title function_ invoke__\">iter</span>());\n    }\n\n    result\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">tea_decrypt</span>(cipher: &amp;[<span class=\"hljs-type\">u8</span>], key: &amp;[<span class=\"hljs-type\">u8</span>]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u8</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">tea</span> = TeaContext::<span class=\"hljs-title function_ invoke__\">new</span>(&amp;[<span class=\"hljs-title function_ invoke__\">to_block</span>(&amp;key[..<span class=\"hljs-number\">8</span>]), <span class=\"hljs-title function_ invoke__\">to_block</span>(&amp;key[<span class=\"hljs-number\">8</span>..<span class=\"hljs-number\">16</span>])]);\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u8</span>&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">0</span>..cipher.<span class=\"hljs-title function_ invoke__\">len</span>()).<span class=\"hljs-title function_ invoke__\">step_by</span>(<span class=\"hljs-number\">8</span>) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">block</span> = <span class=\"hljs-title function_ invoke__\">to_block</span>(&amp;cipher[i..i + <span class=\"hljs-number\">8</span>]);\n        result.<span class=\"hljs-title function_ invoke__\">extend</span>(<span class=\"hljs-title function_ invoke__\">from_block</span>(tea.<span class=\"hljs-title function_ invoke__\">decrypt_block</span>(block)).<span class=\"hljs-title function_ invoke__\">iter</span>());\n    }\n\n    result\n}\n\n<span class=\"hljs-meta\">#[inline]</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">to_block</span>(data: &amp;[<span class=\"hljs-type\">u8</span>]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u64</span> {\n    data[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span>\n        | (data[<span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span>) &lt;&lt; <span class=\"hljs-number\">8</span>\n        | (data[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span>) &lt;&lt; <span class=\"hljs-number\">16</span>\n        | (data[<span class=\"hljs-number\">3</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span>) &lt;&lt; <span class=\"hljs-number\">24</span>\n        | (data[<span class=\"hljs-number\">4</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span>) &lt;&lt; <span class=\"hljs-number\">32</span>\n        | (data[<span class=\"hljs-number\">5</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span>) &lt;&lt; <span class=\"hljs-number\">40</span>\n        | (data[<span class=\"hljs-number\">6</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span>) &lt;&lt; <span class=\"hljs-number\">48</span>\n        | (data[<span class=\"hljs-number\">7</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u64</span>) &lt;&lt; <span class=\"hljs-number\">56</span>\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">from_block</span>(block: <span class=\"hljs-type\">u64</span>) <span class=\"hljs-punctuation\">-&gt;</span> [<span class=\"hljs-type\">u8</span>; <span class=\"hljs-number\">8</span>] {\n    [\n        block <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>,\n        (block &gt;&gt; <span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>,\n        (block &gt;&gt; <span class=\"hljs-number\">16</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>,\n        (block &gt;&gt; <span class=\"hljs-number\">24</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>,\n        (block &gt;&gt; <span class=\"hljs-number\">32</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>,\n        (block &gt;&gt; <span class=\"hljs-number\">40</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>,\n        (block &gt;&gt; <span class=\"hljs-number\">48</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>,\n        (block &gt;&gt; <span class=\"hljs-number\">56</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>,\n    ]\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> test {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_block_convert</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">to_block</span>(&amp;[<span class=\"hljs-number\">0x01</span>, <span class=\"hljs-number\">0x23</span>, <span class=\"hljs-number\">0x45</span>, <span class=\"hljs-number\">0x67</span>, <span class=\"hljs-number\">0x89</span>, <span class=\"hljs-number\">0xab</span>, <span class=\"hljs-number\">0xcd</span>, <span class=\"hljs-number\">0xef</span>]),\n            <span class=\"hljs-number\">0xefcdab8967452301</span>\n        );\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">from_block</span>(<span class=\"hljs-number\">0xefcdab8967452301</span>),\n            [<span class=\"hljs-number\">0x01</span>, <span class=\"hljs-number\">0x23</span>, <span class=\"hljs-number\">0x45</span>, <span class=\"hljs-number\">0x67</span>, <span class=\"hljs-number\">0x89</span>, <span class=\"hljs-number\">0xab</span>, <span class=\"hljs-number\">0xcd</span>, <span class=\"hljs-number\">0xef</span>]\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_tea_encrypt</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">tea_encrypt</span>(\n                &amp;[<span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>],\n                &amp;[\n                    <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>,\n                    <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x00</span>\n                ]\n            ),\n            [<span class=\"hljs-number\">0x0A</span>, <span class=\"hljs-number\">0x3A</span>, <span class=\"hljs-number\">0xEA</span>, <span class=\"hljs-number\">0x41</span>, <span class=\"hljs-number\">0x40</span>, <span class=\"hljs-number\">0xA9</span>, <span class=\"hljs-number\">0xBA</span>, <span class=\"hljs-number\">0x94</span>]\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_tea_encdec</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">plain</span> = &amp;[<span class=\"hljs-number\">0x1b</span>, <span class=\"hljs-number\">0xcc</span>, <span class=\"hljs-number\">0xd4</span>, <span class=\"hljs-number\">0x31</span>, <span class=\"hljs-number\">0xa0</span>, <span class=\"hljs-number\">0xf6</span>, <span class=\"hljs-number\">0x8a</span>, <span class=\"hljs-number\">0x55</span>];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">key</span> = &amp;[\n            <span class=\"hljs-number\">0x20</span>, <span class=\"hljs-number\">0x45</span>, <span class=\"hljs-number\">0x08</span>, <span class=\"hljs-number\">0x10</span>, <span class=\"hljs-number\">0xb0</span>, <span class=\"hljs-number\">0x23</span>, <span class=\"hljs-number\">0xe2</span>, <span class=\"hljs-number\">0x17</span>, <span class=\"hljs-number\">0xc3</span>, <span class=\"hljs-number\">0x81</span>, <span class=\"hljs-number\">0xd6</span>, <span class=\"hljs-number\">0xf2</span>, <span class=\"hljs-number\">0xee</span>, <span class=\"hljs-number\">0x00</span>,\n            <span class=\"hljs-number\">0xa4</span>, <span class=\"hljs-number\">0x8a</span>,\n        ];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">cipher</span> = <span class=\"hljs-title function_ invoke__\">tea_encrypt</span>(plain, key);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">tea_decrypt</span>(&amp;cipher[..], key), plain);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "skdltmxn",
      "email": "supershop@naver.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}