{
  "slug": "ternary-search-min-max",
  "name": "Ternary Search Min Max",
  "categories": [
    "searches"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/searching/ternary_search_min_max.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/searching/ternary_search_min_max.rs",
      "code": "<span class=\"hljs-comment\">/// Ternary search algorithm for finding maximum of unimodal function</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">ternary_search_max</span>(\n    f: <span class=\"hljs-title function_ invoke__\">fn</span>(<span class=\"hljs-type\">f32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f32</span>,\n    <span class=\"hljs-keyword\">mut</span> start: <span class=\"hljs-type\">f32</span>,\n    <span class=\"hljs-keyword\">mut</span> end: <span class=\"hljs-type\">f32</span>,\n    absolute_precision: <span class=\"hljs-type\">f32</span>,\n) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f32</span> {\n    <span class=\"hljs-title function_ invoke__\">while</span> (start - end).<span class=\"hljs-title function_ invoke__\">abs</span>() &gt;= absolute_precision {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">mid1</span> = start + (end - start) / <span class=\"hljs-number\">3.0</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">mid2</span> = end - (end - start) / <span class=\"hljs-number\">3.0</span>;\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">r1</span> = <span class=\"hljs-title function_ invoke__\">f</span>(mid1);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">r2</span> = <span class=\"hljs-title function_ invoke__\">f</span>(mid2);\n\n        <span class=\"hljs-keyword\">if</span> r1 &lt; r2 {\n            start = mid1;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> r1 &gt; r2 {\n            end = mid2;\n        } <span class=\"hljs-keyword\">else</span> {\n            start = mid1;\n            end = mid2;\n        }\n    }\n    <span class=\"hljs-title function_ invoke__\">f</span>(start)\n}\n\n<span class=\"hljs-comment\">/// Ternary search algorithm for finding minimum of unimodal function</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">ternary_search_min</span>(\n    f: <span class=\"hljs-title function_ invoke__\">fn</span>(<span class=\"hljs-type\">f32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f32</span>,\n    <span class=\"hljs-keyword\">mut</span> start: <span class=\"hljs-type\">f32</span>,\n    <span class=\"hljs-keyword\">mut</span> end: <span class=\"hljs-type\">f32</span>,\n    absolute_precision: <span class=\"hljs-type\">f32</span>,\n) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f32</span> {\n    <span class=\"hljs-title function_ invoke__\">while</span> (start - end).<span class=\"hljs-title function_ invoke__\">abs</span>() &gt;= absolute_precision {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">mid1</span> = start + (end - start) / <span class=\"hljs-number\">3.0</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">mid2</span> = end - (end - start) / <span class=\"hljs-number\">3.0</span>;\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">r1</span> = <span class=\"hljs-title function_ invoke__\">f</span>(mid1);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">r2</span> = <span class=\"hljs-title function_ invoke__\">f</span>(mid2);\n\n        <span class=\"hljs-keyword\">if</span> r1 &lt; r2 {\n            end = mid2;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> r1 &gt; r2 {\n            start = mid1;\n        } <span class=\"hljs-keyword\">else</span> {\n            start = mid1;\n            end = mid2;\n        }\n    }\n    <span class=\"hljs-title function_ invoke__\">f</span>(start)\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">finds_max_value</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">expected</span> = <span class=\"hljs-number\">4.0</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">f</span> = |x: <span class=\"hljs-type\">f32</span>| -x * x - <span class=\"hljs-number\">2.0</span> * x + <span class=\"hljs-number\">3.0</span>;\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">start</span>: <span class=\"hljs-type\">f32</span> = -<span class=\"hljs-number\">10000000000.0</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">end</span>: <span class=\"hljs-type\">f32</span> = <span class=\"hljs-number\">10000000000.0</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">absolute_precision</span> = <span class=\"hljs-number\">0.0000001</span>;\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">result</span> = <span class=\"hljs-title function_ invoke__\">ternary_search_max</span>(f, start, end, absolute_precision);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(result, expected);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">finds_min_value</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">expected</span> = <span class=\"hljs-number\">2.0</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">f</span> = |x: <span class=\"hljs-type\">f32</span>| x * x - <span class=\"hljs-number\">2.0</span> * x + <span class=\"hljs-number\">3.0</span>;\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">start</span>: <span class=\"hljs-type\">f32</span> = -<span class=\"hljs-number\">10000000000.0</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">end</span>: <span class=\"hljs-type\">f32</span> = <span class=\"hljs-number\">10000000000.0</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">absolute_precision</span> = <span class=\"hljs-number\">0.0000001</span>;\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">result</span> = <span class=\"hljs-title function_ invoke__\">ternary_search_min</span>(f, start, end, absolute_precision);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(result, expected);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">finds_max_value_2</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">expected</span> = <span class=\"hljs-number\">7.25</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">f</span> = |x: <span class=\"hljs-type\">f32</span>| -x.<span class=\"hljs-title function_ invoke__\">powi</span>(<span class=\"hljs-number\">2</span>) + <span class=\"hljs-number\">3.0</span> * x + <span class=\"hljs-number\">5.0</span>;\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">start</span>: <span class=\"hljs-type\">f32</span> = -<span class=\"hljs-number\">10000000000.0</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">end</span>: <span class=\"hljs-type\">f32</span> = <span class=\"hljs-number\">10000000000.0</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">absolute_precision</span> = <span class=\"hljs-number\">0.000001</span>;\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">result</span> = <span class=\"hljs-title function_ invoke__\">ternary_search_max</span>(f, start, end, absolute_precision);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(result, expected);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">finds_min_value_2</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">expected</span> = <span class=\"hljs-number\">2.75</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">f</span> = |x: <span class=\"hljs-type\">f32</span>| x.<span class=\"hljs-title function_ invoke__\">powi</span>(<span class=\"hljs-number\">2</span>) + <span class=\"hljs-number\">3.0</span> * x + <span class=\"hljs-number\">5.0</span>;\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">start</span>: <span class=\"hljs-type\">f32</span> = -<span class=\"hljs-number\">10000000000.0</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">end</span>: <span class=\"hljs-type\">f32</span> = <span class=\"hljs-number\">10000000000.0</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">absolute_precision</span> = <span class=\"hljs-number\">0.000001</span>;\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">result</span> = <span class=\"hljs-title function_ invoke__\">ternary_search_min</span>(f, start, end, absolute_precision);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(result, expected);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Nicholas",
      "email": "88036449+mime8@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}