{
  "slug": "ternary-search-recursive",
  "name": "Ternary Search Recursive",
  "categories": [
    "searches"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/searching/ternary_search_recursive.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/searching/ternary_search_recursive.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">ternary_search_rec</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(\n    target: &amp;T,\n    list: &amp;[T],\n    start: <span class=\"hljs-type\">usize</span>,\n    end: <span class=\"hljs-type\">usize</span>,\n) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">usize</span>&gt; {\n    <span class=\"hljs-keyword\">if</span> list.<span class=\"hljs-title function_ invoke__\">is_empty</span>() {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>;\n    }\n\n    <span class=\"hljs-keyword\">if</span> end &gt;= start {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">mid1</span>: <span class=\"hljs-type\">usize</span> = start + (end - start) / <span class=\"hljs-number\">3</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">mid2</span>: <span class=\"hljs-type\">usize</span> = end - (end - start) / <span class=\"hljs-number\">3</span>;\n\n        <span class=\"hljs-keyword\">match</span> target.<span class=\"hljs-title function_ invoke__\">cmp</span>(&amp;list[mid1]) {\n            Ordering::Less =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">ternary_search_rec</span>(target, list, start, mid1 - <span class=\"hljs-number\">1</span>),\n            Ordering::Equal =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Some</span>(mid1),\n            Ordering::Greater =&gt; <span class=\"hljs-keyword\">match</span> target.<span class=\"hljs-title function_ invoke__\">cmp</span>(&amp;list[mid2]) {\n                Ordering::Greater =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">ternary_search_rec</span>(target, list, mid2 + <span class=\"hljs-number\">1</span>, end),\n                Ordering::Equal =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Some</span>(mid2),\n                Ordering::Less =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">ternary_search_rec</span>(target, list, mid1 + <span class=\"hljs-number\">1</span>, mid2 - <span class=\"hljs-number\">1</span>),\n            },\n        }\n    }\n\n    <span class=\"hljs-literal\">None</span>\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">returns_none_if_empty_list</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">ternary_search_rec</span>(&amp;<span class=\"hljs-string\">&quot;a&quot;</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[], <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-literal\">None</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">returns_none_if_range_is_invalid</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">ternary_search_rec</span>(&amp;<span class=\"hljs-number\">1</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-literal\">None</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">returns_index_if_list_has_one_item</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">ternary_search_rec</span>(&amp;<span class=\"hljs-number\">1</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>], <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">0</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">returns_first_index</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">ternary_search_rec</span>(&amp;<span class=\"hljs-number\">1</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">0</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">returns_first_index_if_end_out_of_bounds</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">ternary_search_rec</span>(&amp;<span class=\"hljs-number\">1</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">0</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">returns_last_index</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">ternary_search_rec</span>(&amp;<span class=\"hljs-number\">3</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">2</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">returns_last_index_if_end_out_of_bounds</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">ternary_search_rec</span>(&amp;<span class=\"hljs-number\">3</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">2</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">returns_middle_index</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">ternary_search_rec</span>(&amp;<span class=\"hljs-number\">2</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">1</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">returns_middle_index_if_end_out_of_bounds</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">ternary_search_rec</span>(&amp;<span class=\"hljs-number\">2</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">1</span>));\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Nicholas",
      "email": "88036449+mime8@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}