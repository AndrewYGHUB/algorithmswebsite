{
  "slug": "tim-sort",
  "name": "Tim Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts/tim_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/tim_sort.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">binary_search</span>(<span class=\"hljs-params\">lst, item, start, end</span>):\n    <span class=\"hljs-keyword\">if</span> start == end:\n        <span class=\"hljs-keyword\">return</span> start <span class=\"hljs-keyword\">if</span> lst[start] &gt; item <span class=\"hljs-keyword\">else</span> start + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> start &gt; end:\n        <span class=\"hljs-keyword\">return</span> start\n\n    mid = (start + end) // <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">if</span> lst[mid] &lt; item:\n        <span class=\"hljs-keyword\">return</span> binary_search(lst, item, mid + <span class=\"hljs-number\">1</span>, end)\n    <span class=\"hljs-keyword\">elif</span> lst[mid] &gt; item:\n        <span class=\"hljs-keyword\">return</span> binary_search(lst, item, start, mid - <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> mid\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insertion_sort</span>(<span class=\"hljs-params\">lst</span>):\n    length = <span class=\"hljs-built_in\">len</span>(lst)\n\n    <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, length):\n        value = lst[index]\n        pos = binary_search(lst, value, <span class=\"hljs-number\">0</span>, index - <span class=\"hljs-number\">1</span>)\n        lst = lst[:pos] + [value] + lst[pos:index] + lst[index + <span class=\"hljs-number\">1</span> :]\n\n    <span class=\"hljs-keyword\">return</span> lst\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">merge</span>(<span class=\"hljs-params\">left, right</span>):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> left:\n        <span class=\"hljs-keyword\">return</span> right\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> right:\n        <span class=\"hljs-keyword\">return</span> left\n\n    <span class=\"hljs-keyword\">if</span> left[<span class=\"hljs-number\">0</span>] &lt; right[<span class=\"hljs-number\">0</span>]:\n        <span class=\"hljs-keyword\">return</span> [left[<span class=\"hljs-number\">0</span>]] + merge(left[<span class=\"hljs-number\">1</span>:], right)\n\n    <span class=\"hljs-keyword\">return</span> [right[<span class=\"hljs-number\">0</span>]] + merge(left, right[<span class=\"hljs-number\">1</span>:])\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tim_sort</span>(<span class=\"hljs-params\">lst</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; tim_sort(&quot;Python&quot;)\n    [&#x27;P&#x27;, &#x27;h&#x27;, &#x27;n&#x27;, &#x27;o&#x27;, &#x27;t&#x27;, &#x27;y&#x27;]\n    &gt;&gt;&gt; tim_sort((1.1, 1, 0, -1, -1.1))\n    [-1.1, -1, 0, 1, 1.1]\n    &gt;&gt;&gt; tim_sort(list(reversed(list(range(7)))))\n    [0, 1, 2, 3, 4, 5, 6]\n    &gt;&gt;&gt; tim_sort([3, 2, 1]) == insertion_sort([3, 2, 1])\n    True\n    &gt;&gt;&gt; tim_sort([3, 2, 1]) == sorted([3, 2, 1])\n    True\n    &quot;&quot;&quot;</span>\n    length = <span class=\"hljs-built_in\">len</span>(lst)\n    runs, sorted_runs = [], []\n    new_run = [lst[<span class=\"hljs-number\">0</span>]]\n    sorted_array = []\n    i = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> i &lt; length:\n        <span class=\"hljs-keyword\">if</span> lst[i] &lt; lst[i - <span class=\"hljs-number\">1</span>]:\n            runs.append(new_run)\n            new_run = [lst[i]]\n        <span class=\"hljs-keyword\">else</span>:\n            new_run.append(lst[i])\n        i += <span class=\"hljs-number\">1</span>\n    runs.append(new_run)\n\n    <span class=\"hljs-keyword\">for</span> run <span class=\"hljs-keyword\">in</span> runs:\n        sorted_runs.append(insertion_sort(run))\n    <span class=\"hljs-keyword\">for</span> run <span class=\"hljs-keyword\">in</span> sorted_runs:\n        sorted_array = merge(sorted_array, run)\n\n    <span class=\"hljs-keyword\">return</span> sorted_array\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n\n    lst = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">178</span>, <span class=\"hljs-number\">92</span>, <span class=\"hljs-number\">46</span>, -<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>]\n    sorted_lst = tim_sort(lst)\n    <span class=\"hljs-built_in\">print</span>(sorted_lst)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    },
    "javascript": {
      "dir": "Sorts/TimSort.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts/TimSort.js",
      "code": "<span class=\"hljs-comment\">/**\n  *  <span class=\"hljs-doctag\">@function</span> Timsort is a hybrid stable sorting algorithm, derived from merge sort and insertion sort,\n  *  designed to perform well on many kinds of real-world data.\n  *  It was implemented by Tim Peters in 2002 for use in the Python programming language.\n  *  It is also used to sort arrays of non-primitive type in Java SE 7,\n  *  on the Android platform, in GNU Octave, on V8, Swift and Rust.\n  *  1) It sorts small partitions using Insertion Sort.\n  *  2) Merges the partition using Merge Sort.\n  *  <span class=\"hljs-doctag\">@see</span> [Timsort](https://en.wikipedia.org/wiki/Timsort)\n  *  <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Array</span>} <span class=\"hljs-variable\">array</span>\n  */</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Timsort</span> = (<span class=\"hljs-params\">array</span>) =&gt; {\n  <span class=\"hljs-comment\">// Default size of a partition</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">RUN</span> = <span class=\"hljs-number\">32</span>\n  <span class=\"hljs-keyword\">const</span> n = array.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-comment\">// Sorting the partitions using Insertion Sort</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i += <span class=\"hljs-variable constant_\">RUN</span>) {\n    <span class=\"hljs-title class_\">InsertionSort</span>(array, i, <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(i + <span class=\"hljs-variable constant_\">RUN</span> - <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>))\n  }\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> size = <span class=\"hljs-variable constant_\">RUN</span>; size &lt; n; size *= <span class=\"hljs-number\">2</span>) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> left = <span class=\"hljs-number\">0</span>; left &lt; n; left += <span class=\"hljs-number\">2</span> * size) {\n      <span class=\"hljs-keyword\">const</span> mid = left + size - <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">const</span> right = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(left + <span class=\"hljs-number\">2</span> * size - <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-title class_\">Merge</span>(array, left, mid, right)\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> array\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> performs insertion sort on the partition\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Array</span>} array array to be sorted\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} left left index of partition\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} right right index of partition\n */</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">InsertionSort</span> = (<span class=\"hljs-params\">array, left, right</span>) =&gt; {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = left + <span class=\"hljs-number\">1</span>; i &lt;= right; i++) {\n    <span class=\"hljs-keyword\">const</span> key = array[i]\n    <span class=\"hljs-keyword\">let</span> j = i - <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> (j &gt;= left &amp;&amp; array[j] &gt; key) {\n      array[j + <span class=\"hljs-number\">1</span>] = array[j]\n      j--\n    }\n    array[j + <span class=\"hljs-number\">1</span>] = key\n  }\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> merges two sorted partitions\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Array</span>} array array to be sorted\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} left left index of partition\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} mid mid index of partition\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} right right index of partition\n */</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Merge</span> = (<span class=\"hljs-params\">array, left, mid, right</span>) =&gt; {\n  <span class=\"hljs-keyword\">if</span> (mid &gt;= right) <span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-keyword\">const</span> len1 = mid - left + <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">const</span> len2 = right - mid\n  <span class=\"hljs-keyword\">const</span> larr = <span class=\"hljs-title class_\">Array</span>(len1)\n  <span class=\"hljs-keyword\">const</span> rarr = <span class=\"hljs-title class_\">Array</span>(len2)\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; len1; i++) {\n    larr[i] = array[left + i]\n  }\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; len2; i++) {\n    rarr[i] = array[mid + <span class=\"hljs-number\">1</span> + i]\n  }\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; <span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; <span class=\"hljs-keyword\">let</span> k = left\n  <span class=\"hljs-keyword\">while</span> (i &lt; larr.<span class=\"hljs-property\">length</span> &amp;&amp; j &lt; rarr.<span class=\"hljs-property\">length</span>) {\n    <span class=\"hljs-keyword\">if</span> (larr[i] &lt; rarr[j]) {\n      array[k++] = larr[i++]\n    } <span class=\"hljs-keyword\">else</span> {\n      array[k++] = rarr[j++]\n    }\n  }\n  <span class=\"hljs-keyword\">while</span> (i &lt; larr.<span class=\"hljs-property\">length</span>) {\n    array[k++] = larr[i++]\n  }\n  <span class=\"hljs-keyword\">while</span> (j &lt; rarr.<span class=\"hljs-property\">length</span>) {\n    array[k++] = rarr[j++]\n  }\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@example</span> Test of Timsort functions.\n * Data is randomly generated.\n * Return &quot;RIGHT&quot; if it works as expected,\n * otherwise &quot;FAULTY&quot;\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">demo</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> size = <span class=\"hljs-number\">1000000</span>\n  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-title class_\">Array</span>(size)\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\n    data[i] = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * <span class=\"hljs-title class_\">Number</span>.<span class=\"hljs-property\">MAX_SAFE_INTEGER</span>\n  }\n  <span class=\"hljs-keyword\">const</span> isSorted = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">array</span>) {\n    <span class=\"hljs-keyword\">const</span> n = array.<span class=\"hljs-property\">length</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n - <span class=\"hljs-number\">1</span>; i++) {\n      <span class=\"hljs-keyword\">if</span> (array[i] &gt; array[i + <span class=\"hljs-number\">1</span>]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n  <span class=\"hljs-title class_\">Timsort</span>(data)\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isSorted</span>(data)) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;RIGHT&#x27;</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;FAULTY&#x27;</span>\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">Timsort</span>, demo }\n"
    },
    "c-plus-plus": {
      "dir": "sorting/tim_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/tim_sort.cpp",
      "code": "<span class=\"hljs-comment\">// C++ program to perform TimSort.</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> RUN = <span class=\"hljs-number\">32</span>;\n\n<span class=\"hljs-comment\">// this function sorts array from left index to to right index which is of size</span>\n<span class=\"hljs-comment\">// atmost RUN</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insertionSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = left + <span class=\"hljs-number\">1</span>; i &lt;= right; i++) {\n        <span class=\"hljs-type\">int</span> temp = arr[i];\n        <span class=\"hljs-type\">int</span> j = i - <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">while</span> (arr[j] &gt; temp &amp;&amp; j &gt;= left) {\n            arr[j + <span class=\"hljs-number\">1</span>] = arr[j];\n            j--;\n        }\n        arr[j + <span class=\"hljs-number\">1</span>] = temp;\n    }\n}\n\n<span class=\"hljs-comment\">// merge function merges the sorted runs</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> r)</span> </span>{\n    <span class=\"hljs-comment\">// original array is broken in two parts, left and right array</span>\n    <span class=\"hljs-type\">int</span> len1 = m - l + <span class=\"hljs-number\">1</span>, len2 = r - m;\n    <span class=\"hljs-type\">int</span> *left = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[len1], *right = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[len2];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; len1; i++) left[i] = arr[l + i];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; len2; i++) right[i] = arr[m + <span class=\"hljs-number\">1</span> + i];\n\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> k = l;\n\n    <span class=\"hljs-comment\">// after comparing, we merge those two array in larger sub array</span>\n    <span class=\"hljs-keyword\">while</span> (i &lt; len1 &amp;&amp; j &lt; len2) {\n        <span class=\"hljs-keyword\">if</span> (left[i] &lt;= right[j]) {\n            arr[k] = left[i];\n            i++;\n        } <span class=\"hljs-keyword\">else</span> {\n            arr[k] = right[j];\n            j++;\n        }\n        k++;\n    }\n\n    <span class=\"hljs-comment\">// copy remaining elements of left, if any</span>\n    <span class=\"hljs-keyword\">while</span> (i &lt; len1) {\n        arr[k] = left[i];\n        k++;\n        i++;\n    }\n\n    <span class=\"hljs-comment\">// copy remaining element of right, if any</span>\n    <span class=\"hljs-keyword\">while</span> (j &lt; len2) {\n        arr[k] = right[j];\n        k++;\n        j++;\n    }\n    <span class=\"hljs-keyword\">delete</span>[] left;\n    <span class=\"hljs-keyword\">delete</span>[] right;\n}\n\n<span class=\"hljs-comment\">// iterative Timsort function to sort the array[0...n-1] (similar to merge sort)</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">timSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> n)</span> </span>{\n    <span class=\"hljs-comment\">// Sort individual subarrays of size RUN</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i += RUN)\n        <span class=\"hljs-built_in\">insertionSort</span>(arr, i, std::<span class=\"hljs-built_in\">min</span>((i + <span class=\"hljs-number\">31</span>), (n - <span class=\"hljs-number\">1</span>)));\n\n    <span class=\"hljs-comment\">// start merging from size RUN (or 32). It will merge to form size 64, then</span>\n    <span class=\"hljs-comment\">// 128, 256 and so on ....</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> size = RUN; size &lt; n; size = <span class=\"hljs-number\">2</span> * size) {\n        <span class=\"hljs-comment\">// pick starting point of left sub array. We are going to merge</span>\n        <span class=\"hljs-comment\">// arr[left..left+size-1] and arr[left+size, left+2*size-1] After every</span>\n        <span class=\"hljs-comment\">// merge, we increase left by 2*size</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> left = <span class=\"hljs-number\">0</span>; left &lt; n; left += <span class=\"hljs-number\">2</span> * size) {\n            <span class=\"hljs-comment\">// find ending point of left sub array</span>\n            <span class=\"hljs-comment\">// mid+1 is starting point of right sub array</span>\n            <span class=\"hljs-type\">int</span> mid = left + size - <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-type\">int</span> right = std::<span class=\"hljs-built_in\">min</span>((left + <span class=\"hljs-number\">2</span> * size - <span class=\"hljs-number\">1</span>), (n - <span class=\"hljs-number\">1</span>));\n\n            <span class=\"hljs-comment\">// merge sub array arr[left.....mid] &amp; arr[mid+1....right]</span>\n            <span class=\"hljs-built_in\">merge</span>(arr, left, mid, right);\n        }\n    }\n}\n\n<span class=\"hljs-comment\">// utility function to print the Array</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> n)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d  &quot;</span>, arr[i]);\n    std::cout &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">// Driver program to test above function</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> arr[] = {<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">19</span>};\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-built_in\">sizeof</span>(arr) / <span class=\"hljs-built_in\">sizeof</span>(arr[<span class=\"hljs-number\">0</span>]);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Given Array is\\n&quot;</span>);\n    <span class=\"hljs-built_in\">printArray</span>(arr, n);\n\n    <span class=\"hljs-built_in\">timSort</span>(arr, n);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;After Sorting Array is\\n&quot;</span>);\n    <span class=\"hljs-built_in\">printArray</span>(arr, n);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/sorts/TimSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/sorts/TimSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\n\n<span class=\"hljs-keyword\">import</span> java.util.Random;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> [Hemanth Kotagiri](https://github.com/hemanth-kotagiri)\n * <span class=\"hljs-doctag\">@see</span> [Tim Sort](https://en.wikipedia.org/wiki/Tim_sort)\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TimSort</span> {\n\n    <span class=\"hljs-type\">int</span> array[];\n    <span class=\"hljs-type\">int</span> array_length;\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">RUN</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">32</span>;\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@brief</span> A constructor which takes in the array specified by the user.\n     * <span class=\"hljs-doctag\">@param</span> array : Array given by the user.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">TimSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] array)</span> {\n        <span class=\"hljs-built_in\">this</span>.array = array;\n        <span class=\"hljs-built_in\">this</span>.array_length = array.length;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@brief</span> A constructor which takes in an array length and randomly\n     * initializes an array.\n     * <span class=\"hljs-doctag\">@param</span> array_length length given by the user.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">TimSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> array_length)</span> {\n        <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">rand</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\n\n        <span class=\"hljs-built_in\">this</span>.array_length = array_length;\n        <span class=\"hljs-built_in\">this</span>.array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-built_in\">this</span>.array_length];\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.array_length; i++) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">random_number</span> <span class=\"hljs-operator\">=</span> rand.nextInt(<span class=\"hljs-number\">1000</span>);\n            <span class=\"hljs-built_in\">this</span>.array[i] = random_number;\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@brief</span> A method to change the size of the run.\n     * <span class=\"hljs-doctag\">@param</span> run : Value specified by the user to change the run.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">change_run</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> run)</span> {\n        <span class=\"hljs-built_in\">this</span>.RUN = run;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@brief</span> A default constructor when no parameters are given. Initializes\n     * the array length to be 100. Generates a random number array of size 100.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">TimSort</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-built_in\">this</span>.array_length = <span class=\"hljs-number\">100</span>;\n        <span class=\"hljs-built_in\">this</span>.array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-built_in\">this</span>.array_length];\n\n        <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">rand</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.array_length; i++) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">random_number</span> <span class=\"hljs-operator\">=</span> rand.nextInt(<span class=\"hljs-number\">1000</span>);\n            <span class=\"hljs-built_in\">this</span>.array[i] = random_number;\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@brief</span> Performs Insertion Sort Algorithm on given array with bounded\n     * indices.\n     * <span class=\"hljs-doctag\">@param</span> array: The array on which the algorithm is to be performed.\n     * <span class=\"hljs-doctag\">@param</span> start_idx: The starting index from which the algorithm is to be\n     * performed.\n     * <span class=\"hljs-doctag\">@param</span> end_idx: The ending index at which the algorithm needs to stop\n     * sorting.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertion_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] array, <span class=\"hljs-type\">int</span> start_idx, <span class=\"hljs-type\">int</span> end_idx)</span> {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> start_idx; i &lt;= end_idx; i++) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">current_element</span> <span class=\"hljs-operator\">=</span> array[i];\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> i - <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">while</span> (j &gt;= start_idx &amp;&amp; array[j] &gt; current_element) {\n                array[j + <span class=\"hljs-number\">1</span>] = array[j];\n                j--;\n            }\n            array[j + <span class=\"hljs-number\">1</span>] = current_element;\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@brief</span> A method to merge two runs(chunks of array).\n     * <span class=\"hljs-doctag\">@param</span> array: The origin array which is to be sorted.\n     * <span class=\"hljs-doctag\">@param</span> start: Starting index of the first run(chunk).\n     * <span class=\"hljs-doctag\">@param</span> mid: The ending index of the first run(chunk).\n     * <span class=\"hljs-doctag\">@param</span> end: Ending index of the second run(chunk).\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">merge_runs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> array[], <span class=\"hljs-type\">int</span> start, <span class=\"hljs-type\">int</span> mid, <span class=\"hljs-type\">int</span> end)</span> {\n\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">first_array_size</span> <span class=\"hljs-operator\">=</span> mid - start + <span class=\"hljs-number\">1</span>, second_array_size = end - mid;\n        <span class=\"hljs-type\">int</span> array1[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[first_array_size], array2[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[second_array_size];\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>, k = <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">// Building the two sub arrays from the array to merge later</span>\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; first_array_size; i++) {\n            array1[i] = array[start + i];\n        }\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; second_array_size; i++) {\n            array2[i] = array[mid + <span class=\"hljs-number\">1</span> + i];\n        }\n\n        i = <span class=\"hljs-number\">0</span>;\n        j = <span class=\"hljs-number\">0</span>;\n        k = start;\n\n        <span class=\"hljs-keyword\">while</span> (i &lt; first_array_size &amp;&amp; j &lt; second_array_size) {\n            <span class=\"hljs-keyword\">if</span> (array1[i] &lt;= array2[j]) {\n                array[k] = array1[i];\n                i++;\n            } <span class=\"hljs-keyword\">else</span> {\n                array[k] = array2[j];\n                j++;\n            }\n            k++;\n        }\n\n        <span class=\"hljs-keyword\">while</span> (i &lt; first_array_size) {\n            array[k] = array1[i];\n            k++;\n            i++;\n        }\n\n        <span class=\"hljs-keyword\">while</span> (j &lt; second_array_size) {\n            array[k] = array2[j];\n            k++;\n            j++;\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@brief</span> Tim Sort Algorithm method.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">algorithm</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-comment\">// Before Sorting</span>\n        System.out.println(<span class=\"hljs-string\">&quot;Before sorting the array: &quot;</span>);\n        <span class=\"hljs-built_in\">this</span>.showArrayElements();\n        System.out.println();\n\n        <span class=\"hljs-comment\">// Applying insertion sort on RUNS.</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.array_length; i += <span class=\"hljs-built_in\">this</span>.RUN) {\n            <span class=\"hljs-built_in\">this</span>.insertion_sort(<span class=\"hljs-built_in\">this</span>.array, i, Math.min(i + <span class=\"hljs-built_in\">this</span>.RUN, (<span class=\"hljs-built_in\">this</span>.array_length - <span class=\"hljs-number\">1</span>)));\n        }\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">split</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.RUN; split &lt; <span class=\"hljs-built_in\">this</span>.array_length; split = <span class=\"hljs-number\">2</span> * split) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">start_idx</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; start_idx &lt; <span class=\"hljs-built_in\">this</span>.array_length; start_idx += <span class=\"hljs-number\">2</span> * split) {\n                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mid</span> <span class=\"hljs-operator\">=</span> start_idx + split - <span class=\"hljs-number\">1</span>;\n                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">end_idx</span> <span class=\"hljs-operator\">=</span> Math.min((start_idx + <span class=\"hljs-number\">2</span> * split - <span class=\"hljs-number\">1</span>), (<span class=\"hljs-built_in\">this</span>.array_length - <span class=\"hljs-number\">1</span>));\n\n                <span class=\"hljs-built_in\">this</span>.merge_runs(<span class=\"hljs-built_in\">this</span>.array, start_idx, mid, end_idx);\n            }\n        }\n        <span class=\"hljs-comment\">// After sorting</span>\n        System.out.println(<span class=\"hljs-string\">&quot;After sorting the array: &quot;</span>);\n        <span class=\"hljs-built_in\">this</span>.showArrayElements();\n        System.out.println();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@brief</span> A method to show the elements inside the array.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">showArrayElements</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.array.length; i++) {\n            System.out.print(<span class=\"hljs-built_in\">this</span>.array[i] + <span class=\"hljs-string\">&quot; &quot;</span>);\n        }\n        System.out.println();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@brief</span> A method to test the sorting algorithm\n     */</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">int</span>[] array = {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">8</span>};\n        <span class=\"hljs-type\">TimSort</span> <span class=\"hljs-variable\">sorterObj1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TimSort</span>();\n        <span class=\"hljs-type\">TimSort</span> <span class=\"hljs-variable\">sorterObj2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TimSort</span>(<span class=\"hljs-number\">50</span>);\n        <span class=\"hljs-type\">TimSort</span> <span class=\"hljs-variable\">sorterObj3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TimSort</span>(array);\n\n        sorterObj1.algorithm();\n        sorterObj2.algorithm();\n        sorterObj3.algorithm();\n\n        <span class=\"hljs-comment\">// Testing the first array</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; sorterObj1.array_length - <span class=\"hljs-number\">1</span>; i++) {\n            <span class=\"hljs-keyword\">assert</span> ((sorterObj1.array[i] &lt;= sorterObj1.array[i + <span class=\"hljs-number\">1</span>])) : <span class=\"hljs-string\">&quot;Array is not sorted&quot;</span>;\n        }\n\n        <span class=\"hljs-comment\">// Testing the second array.</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; sorterObj2.array_length - <span class=\"hljs-number\">1</span>; i++) {\n            <span class=\"hljs-keyword\">assert</span> ((sorterObj2.array[i] &lt;= sorterObj2.array[i + <span class=\"hljs-number\">1</span>])) : <span class=\"hljs-string\">&quot;Array is not sorted&quot;</span>;\n        }\n\n        <span class=\"hljs-comment\">// Testing the third array.</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; sorterObj3.array_length - <span class=\"hljs-number\">1</span>; i++) {\n            <span class=\"hljs-keyword\">assert</span> ((sorterObj3.array[i] &lt;= sorterObj3.array[i + <span class=\"hljs-number\">1</span>])) : <span class=\"hljs-string\">&quot;Array is not sorted&quot;</span>;\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        test();\n    }\n}\n"
    },
    "rust": {
      "dir": "src/sorting/tim_sort.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/sorting/tim_sort.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::cmp;\n\n<span class=\"hljs-keyword\">static</span> MIN_MERGE: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-number\">32</span>;\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">min_run_length</span>(<span class=\"hljs-keyword\">mut</span> n: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">r</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> n &gt;= MIN_MERGE {\n        r |= n &amp; <span class=\"hljs-number\">1</span>;\n        n &gt;&gt;= <span class=\"hljs-number\">1</span>;\n    }\n    n + r\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insertion_sort</span>(arr: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;, left: <span class=\"hljs-type\">usize</span>, right: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> &amp;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt; {\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> (left + <span class=\"hljs-number\">1</span>)..(right + <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">temp</span> = arr[i];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">j</span> = (i - <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i32</span>;\n\n        <span class=\"hljs-keyword\">while</span> j &gt;= (left <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i32</span>) &amp;&amp; arr[j <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>] &gt; temp {\n            arr[(j + <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>] = arr[j <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>];\n            j -= <span class=\"hljs-number\">1</span>;\n        }\n        arr[(j + <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>] = temp;\n    }\n    arr\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">merge</span>(arr: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;, l: <span class=\"hljs-type\">usize</span>, m: <span class=\"hljs-type\">usize</span>, r: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> &amp;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">len1</span> = m - l + <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">len2</span> = r - m;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">left</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; len1 <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>];\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">right</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; len2 <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>];\n\n    left[..len1].<span class=\"hljs-title function_ invoke__\">clone_from_slice</span>(&amp;arr[l..(len1 + l)]);\n\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..len2 {\n        right[x] = arr[m + <span class=\"hljs-number\">1</span> + x];\n    }\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">i</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">j</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">k</span> = l;\n\n    <span class=\"hljs-keyword\">while</span> i &lt; len1 &amp;&amp; j &lt; len2 {\n        <span class=\"hljs-keyword\">if</span> left[i] &lt;= right[j] {\n            arr[k] = left[i];\n            i += <span class=\"hljs-number\">1</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            arr[k] = right[j];\n            j += <span class=\"hljs-number\">1</span>;\n        }\n        k += <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-keyword\">while</span> i &lt; len1 {\n        arr[k] = left[i];\n        k += <span class=\"hljs-number\">1</span>;\n        i += <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-keyword\">while</span> j &lt; len2 {\n        arr[k] = right[j];\n        k += <span class=\"hljs-number\">1</span>;\n        j += <span class=\"hljs-number\">1</span>;\n    }\n    arr\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">tim_sort</span>(arr: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;, n: <span class=\"hljs-type\">usize</span>) {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">min_run</span> = <span class=\"hljs-title function_ invoke__\">min_run_length</span>(MIN_MERGE) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>;\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">i</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> i &lt; n {\n        <span class=\"hljs-title function_ invoke__\">insertion_sort</span>(arr, i, cmp::<span class=\"hljs-title function_ invoke__\">min</span>(i + MIN_MERGE - <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>));\n        i += min_run;\n    }\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">size</span> = min_run;\n    <span class=\"hljs-keyword\">while</span> size &lt; n {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">left</span> = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">while</span> left &lt; n {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">mid</span> = left + size - <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">right</span> = cmp::<span class=\"hljs-title function_ invoke__\">min</span>(left + <span class=\"hljs-number\">2</span> * size - <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>);\n            <span class=\"hljs-keyword\">if</span> mid &lt; right {\n                <span class=\"hljs-title function_ invoke__\">merge</span>(arr, left, mid, right);\n            }\n\n            left += <span class=\"hljs-number\">2</span> * size;\n        }\n        size *= <span class=\"hljs-number\">2</span>;\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">basic</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">array</span> = <span class=\"hljs-built_in\">vec!</span>[-<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">15</span>, -<span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>, -<span class=\"hljs-number\">7</span>, -<span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, -<span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">12</span>];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">arr_len</span> = array.<span class=\"hljs-title function_ invoke__\">len</span>();\n        <span class=\"hljs-title function_ invoke__\">tim_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> array, arr_len);\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..array.<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">1</span> {\n            <span class=\"hljs-built_in\">assert!</span>(array[i] &lt;= array[i + <span class=\"hljs-number\">1</span>]);\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">array</span> = Vec::&lt;<span class=\"hljs-type\">i32</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">arr_len</span> = array.<span class=\"hljs-title function_ invoke__\">len</span>();\n        <span class=\"hljs-title function_ invoke__\">tim_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> array, arr_len);\n        <span class=\"hljs-built_in\">assert_eq!</span>(array, <span class=\"hljs-built_in\">vec!</span>[]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">one_element</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">array</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">arr_len</span> = array.<span class=\"hljs-title function_ invoke__\">len</span>();\n        <span class=\"hljs-title function_ invoke__\">tim_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> array, arr_len);\n        <span class=\"hljs-built_in\">assert_eq!</span>(array, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">pre_sorted</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">array</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">arr_len</span> = array.<span class=\"hljs-title function_ invoke__\">len</span>();\n        <span class=\"hljs-title function_ invoke__\">tim_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> array, arr_len);\n        <span class=\"hljs-built_in\">assert_eq!</span>(array, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>]);\n    }\n}\n"
    },
    "dart": {
      "dir": "sort/tim_Sort.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/sort/tim_Sort.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;dart:math&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">int</span> RUN = <span class=\"hljs-number\">32</span>;\n<span class=\"hljs-keyword\">void</span> insertionSort(<span class=\"hljs-built_in\">List</span> list, <span class=\"hljs-built_in\">int</span> left, <span class=\"hljs-built_in\">int</span> right) {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = left + <span class=\"hljs-number\">1</span>; i &lt;= right; i++) {\n    <span class=\"hljs-built_in\">int</span> temp = list[i];\n    <span class=\"hljs-built_in\">int</span> j = i - <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">while</span> (j &gt;= left &amp;&amp; list[j] &gt; temp) {\n      list[j + <span class=\"hljs-number\">1</span>] = list[j];\n      j--;\n    }\n    list[j + <span class=\"hljs-number\">1</span>] = temp;\n  }\n}\n\n<span class=\"hljs-keyword\">void</span> merge(<span class=\"hljs-built_in\">List</span> list, <span class=\"hljs-built_in\">int</span> left, <span class=\"hljs-built_in\">int</span> middle, <span class=\"hljs-built_in\">int</span> right) {\n  <span class=\"hljs-built_in\">int</span> length1 = middle - left + <span class=\"hljs-number\">1</span>, length2 = right - middle;\n  <span class=\"hljs-built_in\">List</span> leftList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">List</span>(length1), rightList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">List</span>(length2);\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; length1; i++) {\n    leftList[i] = list[left + i];\n  }\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; length2; i++) {\n    rightList[i] = list[middle + <span class=\"hljs-number\">1</span> + i];\n  }\n\n  <span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>, k = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">while</span> (i &lt; length1 &amp;&amp; j &lt; length2) {\n    <span class=\"hljs-keyword\">if</span> (leftList[i] &lt;= rightList[j]) {\n      list[k] = leftList[i];\n      i++;\n    } <span class=\"hljs-keyword\">else</span> {\n      list[k] = rightList[j];\n      j++;\n    }\n    k++;\n  }\n\n  <span class=\"hljs-keyword\">while</span> (i &lt; length1) {\n    list[k] = leftList[i];\n    i++;\n    k++;\n  }\n\n  <span class=\"hljs-keyword\">while</span> (j &lt; length2) {\n    list[k] = rightList[j];\n    k++;\n    j++;\n  }\n}\n\n<span class=\"hljs-keyword\">void</span> timSort(<span class=\"hljs-built_in\">List</span> list, <span class=\"hljs-built_in\">int</span> n) {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i += RUN) {\n    insertionSort(list, i, min((i + <span class=\"hljs-number\">31</span>), n - <span class=\"hljs-number\">1</span>));\n  }\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> size = RUN; size &lt; n; size = <span class=\"hljs-number\">2</span> * size) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> left = <span class=\"hljs-number\">0</span>; left &lt; n; left += <span class=\"hljs-number\">2</span> * size) {\n      <span class=\"hljs-built_in\">int</span> middle = left + size - <span class=\"hljs-number\">1</span>;\n      <span class=\"hljs-built_in\">int</span> right = min((left + <span class=\"hljs-number\">2</span> * size - <span class=\"hljs-number\">1</span>), (n - <span class=\"hljs-number\">1</span>));\n      merge(list, left, middle, right);\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  <span class=\"hljs-comment\">//Get the array</span>\n  <span class=\"hljs-built_in\">List</span> arr = [<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">213</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">107</span>];\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Before sorting: <span class=\"hljs-subst\">$arr</span>\\n&quot;</span>);\n  timSort(arr, arr.length);\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;After sorting: <span class=\"hljs-subst\">$arr</span>&quot;</span>);\n}\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Sorters/Comparison/TimSorter.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/Algorithms/Sorters/Comparison/TimSorter.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.Comparison</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Timsort is a hybrid stable sorting algorithm, derived from merge sort and insertion sort, designed to perform well on many kinds of real-world data.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     It was originally implemented by Tim Peters in 2002 for use in the Python programming language.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     This class is based on a Java interpretation of Tim Peter&#x27;s original work.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Java class is viewable here:</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     http://cr.openjdk.java.net/~martin/webrevs/openjdk7/timsort/raw_files/new/src/share/classes/java/util/TimSort.java</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Tim Peters&#x27;s list sort for Python, is described in detail here:</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     http://svn.python.org/projects/python/trunk/Objects/listsort.txt</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Tim&#x27;s C code may be found here: http://svn.python.org/projects/python/trunk/Objects/listobject.c</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The underlying techniques are described in this paper (and may have even earlier origins):</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     &quot;Optimistic Sorting and Information Theoretic Complexity&quot;</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Peter McIlroy</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     SODA (Fourth Annual ACM-SIAM Symposium on Discrete Algorithms),</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     pp 467-474, Austin, Texas, 25-27 January 1993.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Type of array element.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TimSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt; : <span class=\"hljs-title\">IComparisonSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt;\n    {\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-built_in\">int</span> minMerge;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-built_in\">int</span> initMinGallop;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-built_in\">int</span>[] runBase;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-built_in\">int</span>[] runLengths;\n\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> minGallop;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> stackSize;\n\n        <span class=\"hljs-keyword\">private</span> IComparer&lt;T&gt; comparer = <span class=\"hljs-literal\">default</span>!;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Private class for handling gallop merges, allows for tracking array indexes and wins.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;Tc&quot;&gt;</span>Type of array element.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TimChunk</span>&lt;<span class=\"hljs-title\">Tc</span>&gt;\r\n        {\r\n            <span class=\"hljs-keyword\">public</span> Tc[] Array { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; } = <span class=\"hljs-literal\">default</span>!;\r\n\r\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> Index { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\r\n\r\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> Remaining { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\r\n\r\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> Wins { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\r\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">TimSorter</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> minMerge = <span class=\"hljs-number\">32</span>, <span class=\"hljs-built_in\">int</span> minGallop = <span class=\"hljs-number\">7</span></span>)</span>\n        {\n            initMinGallop = minGallop;\n            <span class=\"hljs-keyword\">this</span>.minMerge = minMerge;\n            runBase = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[<span class=\"hljs-number\">85</span>];\r\n            runLengths = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[<span class=\"hljs-number\">85</span>];\n\n            stackSize = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">this</span>.minGallop = minGallop;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sorts array using specified comparer</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     worst case performance: O(n log(n)),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     best case performance:  O(n),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     See <span class=\"hljs-doctag\">&lt;a href=&quot;https://en.wikipedia.org/wiki/Timsort&quot;&gt;</span>here<span class=\"hljs-doctag\">&lt;/a&gt;</span> for more info.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Array to sort.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;comparer&quot;&gt;</span>Compares elements.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\">T[] array, IComparer&lt;T&gt; comparer</span>)</span>\n        {\n            <span class=\"hljs-keyword\">this</span>.comparer = comparer;\n            <span class=\"hljs-keyword\">var</span> start = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">var</span> remaining = array.Length;\n\n            <span class=\"hljs-keyword\">if</span> (remaining &lt; minMerge)\n            {\n                <span class=\"hljs-keyword\">if</span> (remaining &lt; <span class=\"hljs-number\">2</span>)\n                {\n                    <span class=\"hljs-comment\">// Arrays of size 0 or 1 are always sorted.</span>\n                    <span class=\"hljs-keyword\">return</span>;\n                }\n\n                <span class=\"hljs-comment\">// Don&#x27;t need to merge, just binary sort</span>\n                BinarySort(array, start, remaining, start);\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\n            <span class=\"hljs-keyword\">var</span> minRun = MinRunLength(remaining, minMerge);\n\n            <span class=\"hljs-keyword\">do</span>\n            {\n                <span class=\"hljs-comment\">// Identify next run</span>\n                <span class=\"hljs-keyword\">var</span> runLen = CountRunAndMakeAscending(array, start);\n\n                <span class=\"hljs-comment\">// If the run is too short extend to Min(MIN_RUN, remaining)</span>\n                <span class=\"hljs-keyword\">if</span> (runLen &lt; minRun)\n                {\n                    <span class=\"hljs-keyword\">var</span> force = Math.Min(minRun, remaining);\n                    BinarySort(array, start, start + force, start + runLen);\n                    runLen = force;\n                }\n\n                runBase[stackSize] = start;\n                runLengths[stackSize] = runLen;\n                stackSize++;\n\n                MergeCollapse(array);\n\n                start += runLen;\n                remaining -= runLen;\n            }\n            <span class=\"hljs-keyword\">while</span> (remaining != <span class=\"hljs-number\">0</span>);\n\n            MergeForceCollapse(array);\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Returns the minimum acceptable run length for an array of the specified</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> length.Natural runs shorter than this will be extended.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Computation is:</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>   If total less than minRun, return n (it&#x27;s too small to bother with fancy stuff).</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>   Else if total is an exact power of 2, return minRun/2.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>   Else return an int k, where <span class=\"hljs-doctag\">&lt;![CDATA[minRun/2 &lt;= k &lt;= minRun]]&gt;</span>, such that total/k</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     is close to, but strictly less than, an exact power of 2.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;total&quot;&gt;</span>Total length remaining to sort.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Minimum run length to be merged.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">MinRunLength</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> total, <span class=\"hljs-built_in\">int</span> minRun</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">while</span> (total &gt;= minRun)\n            {\n                r |= total &amp; <span class=\"hljs-number\">1</span>;\n                total &gt;&gt;= <span class=\"hljs-number\">1</span>;\n            }\n\n            <span class=\"hljs-keyword\">return</span> total + r;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Reverse the specified range of the specified array.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>the array in which a range is to be reversed.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;start&quot;&gt;</span>the index of the first element in the range to be reversed.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;end&quot;&gt;</span>the index after the last element in the range to be reversed.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ReverseRange</span>(<span class=\"hljs-params\">T[] array, <span class=\"hljs-built_in\">int</span> start, <span class=\"hljs-built_in\">int</span> end</span>)</span>\r\n        {\r\n            end--;\r\n            <span class=\"hljs-keyword\">while</span> (start &lt; end)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> t = array[start];\r\n                array[start++] = array[end];\r\n                array[end--] = t;\r\n            }\r\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Left shift a value, preventing a roll over to negative numbers.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;shiftable&quot;&gt;</span>int value to left shift.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Left shifted value, bound to 2,147,483,647.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">BoundLeftShift</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> shiftable</span>)</span> =&gt; (shiftable &lt;&lt; <span class=\"hljs-number\">1</span>) &lt; <span class=\"hljs-number\">0</span>\n                ? (shiftable &lt;&lt; <span class=\"hljs-number\">1</span>) + <span class=\"hljs-number\">1</span>\n                : <span class=\"hljs-built_in\">int</span>.MaxValue;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Check the chunks before getting in to a merge to make sure there&#x27;s something to actually do.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;left&quot;&gt;</span>TimChunk of the left hand side.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;right&quot;&gt;</span>TimChunk of the right hand side.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;dest&quot;&gt;</span>The current target point for the remaining values.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>If a merge is required.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">NeedsMerge</span>(<span class=\"hljs-params\">TimChunk&lt;T&gt; left, TimChunk&lt;T&gt; right, <span class=\"hljs-keyword\">ref</span> <span class=\"hljs-built_in\">int</span> dest</span>)</span>\n        {\n            right.Array[dest++] = right.Array[right.Index++];\r\n            <span class=\"hljs-keyword\">if</span> (--right.Remaining == <span class=\"hljs-number\">0</span>)\n            {\r\n                Array.Copy(left.Array, left.Index, right.Array, dest, left.Remaining);\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\n\r\n            <span class=\"hljs-keyword\">if</span> (left.Remaining == <span class=\"hljs-number\">1</span>)\n            {\r\n                Array.Copy(right.Array, right.Index, right.Array, dest, right.Remaining);\r\n                right.Array[dest + right.Remaining] = left.Array[left.Index];\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\n\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Moves over the last parts of the chunks.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;left&quot;&gt;</span>TimChunk of the left hand side.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;right&quot;&gt;</span>TimChunk of the right hand side.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;dest&quot;&gt;</span>The current target point for the remaining values.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">FinalizeMerge</span>(<span class=\"hljs-params\">TimChunk&lt;T&gt; left, TimChunk&lt;T&gt; right, <span class=\"hljs-built_in\">int</span> dest</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (left.Remaining == <span class=\"hljs-number\">1</span>)\n            {\r\n                Array.Copy(right.Array, right.Index, right.Array, dest, right.Remaining);\r\n                right.Array[dest + right.Remaining] = left.Array[left.Index];\r\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (left.Remaining == <span class=\"hljs-number\">0</span>)\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">&quot;Comparison method violates its general contract!&quot;</span>);\r\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\r\n                Array.Copy(left.Array, left.Index, right.Array, dest, left.Remaining);\r\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Returns the length of the run beginning at the specified position in</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> the specified array and reverses the run if it is descending (ensuring</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> that the run will always be ascending when the method returns).</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> A run is the longest ascending sequence with:</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>    <span class=\"hljs-doctag\">&lt;![CDATA[a[lo] &lt;= a[lo + 1] &lt;= a[lo + 2] &lt;= ...]]&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> or the longest descending sequence with:</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>    <span class=\"hljs-doctag\">&lt;![CDATA[a[lo] &gt;</span>  a[lo + 1] &gt;  a[lo + 2] &gt;  ...]]&gt;</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> For its intended use in a stable mergesort, the strictness of the</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> definition of &quot;descending&quot; is needed so that the call can safely</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> reverse a descending sequence without violating stability.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>the array in which a run is to be counted and possibly reversed.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;start&quot;&gt;</span>index of the first element in the run.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>the length of the run beginning at the specified position in the specified array.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">CountRunAndMakeAscending</span>(<span class=\"hljs-params\">T[] array, <span class=\"hljs-built_in\">int</span> start</span>)</span>\n        {\r\n            <span class=\"hljs-keyword\">var</span> runHi = start + <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-keyword\">if</span> (runHi == array.Length)\n            {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n            }\r\n\r\n            <span class=\"hljs-comment\">// Find end of run, and reverse range if descending</span>\r\n            <span class=\"hljs-keyword\">if</span> (comparer.Compare(array[runHi++], array[start]) &lt; <span class=\"hljs-number\">0</span>)\n            { <span class=\"hljs-comment\">// Descending</span>\r\n                <span class=\"hljs-keyword\">while</span> (runHi &lt; array.Length &amp;&amp; comparer.Compare(array[runHi], array[runHi - <span class=\"hljs-number\">1</span>]) &lt; <span class=\"hljs-number\">0</span>)\n                {\r\n                    runHi++;\n                }\n\r\n                ReverseRange(array, start, runHi);\n            }\n            <span class=\"hljs-keyword\">else</span>\n            { <span class=\"hljs-comment\">// Ascending</span>\r\n                <span class=\"hljs-keyword\">while</span> (runHi &lt; array.Length &amp;&amp; comparer.Compare(array[runHi], array[runHi - <span class=\"hljs-number\">1</span>]) &gt;= <span class=\"hljs-number\">0</span>)\n                {\r\n                    runHi++;\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> runHi - start;\r\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Find the position in the array that a key should fit to the left of where it currently sits.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Array to search.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;key&quot;&gt;</span>Key to place in the array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;i&quot;&gt;</span>Base index for the key.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;len&quot;&gt;</span>Length of the chunk to run through.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;hint&quot;&gt;</span>Initial starting position to start from.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Offset for the key&#x27;s location.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">GallopLeft</span>(<span class=\"hljs-params\">T[] array, T key, <span class=\"hljs-built_in\">int</span> i, <span class=\"hljs-built_in\">int</span> len, <span class=\"hljs-built_in\">int</span> hint</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> (offset, lastOfs) = comparer.Compare(key, array[i + hint]) &gt; <span class=\"hljs-number\">0</span>\n                ? RightRun(array, key, i, len, hint, <span class=\"hljs-number\">0</span>)\n                : LeftRun(array, key, i, hint, <span class=\"hljs-number\">1</span>);\n\n            <span class=\"hljs-keyword\">return</span> FinalOffset(array, key, i, offset, lastOfs, <span class=\"hljs-number\">1</span>);\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Find the position in the array that a key should fit to the right of where it currently sits.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Array to search.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;key&quot;&gt;</span>Key to place in the array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;i&quot;&gt;</span>Base index for the key.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;len&quot;&gt;</span>Length of the chunk to run through.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;hint&quot;&gt;</span>Initial starting position to start from.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Offset for the key&#x27;s location.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">GallopRight</span>(<span class=\"hljs-params\">T[] array, T key, <span class=\"hljs-built_in\">int</span> i, <span class=\"hljs-built_in\">int</span> len, <span class=\"hljs-built_in\">int</span> hint</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> (offset, lastOfs) = comparer.Compare(key, array[i + hint]) &lt; <span class=\"hljs-number\">0</span>\n                ? LeftRun(array, key, i, hint, <span class=\"hljs-number\">0</span>)\n                : RightRun(array, key, i, len, hint, <span class=\"hljs-number\">-1</span>);\n\n            <span class=\"hljs-keyword\">return</span> FinalOffset(array, key, i, offset, lastOfs, <span class=\"hljs-number\">0</span>);\n        }\n\n        <span class=\"hljs-keyword\">private</span> (<span class=\"hljs-built_in\">int</span> offset, <span class=\"hljs-built_in\">int</span> lastOfs) LeftRun(T[] array, T key, <span class=\"hljs-built_in\">int</span> i, <span class=\"hljs-built_in\">int</span> hint, <span class=\"hljs-built_in\">int</span> lt)\n        {\n            <span class=\"hljs-keyword\">var</span> maxOfs = hint + <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">var</span> (offset, tmp) = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\n\n            <span class=\"hljs-keyword\">while</span> (offset &lt; maxOfs &amp;&amp; comparer.Compare(key, array[i + hint - offset]) &lt; lt)\n            {\n                tmp = offset;\n                offset = BoundLeftShift(offset);\n            }\n\n            <span class=\"hljs-keyword\">if</span> (offset &gt; maxOfs)\n            {\n                offset = maxOfs;\n            }\n\n            <span class=\"hljs-keyword\">var</span> lastOfs = hint - offset;\n            offset = hint - tmp;\n\n            <span class=\"hljs-keyword\">return</span> (offset, lastOfs);\n        }\n\n        <span class=\"hljs-keyword\">private</span> (<span class=\"hljs-built_in\">int</span> offset, <span class=\"hljs-built_in\">int</span> lastOfs) RightRun(T[] array, T key, <span class=\"hljs-built_in\">int</span> i, <span class=\"hljs-built_in\">int</span> len, <span class=\"hljs-built_in\">int</span> hint, <span class=\"hljs-built_in\">int</span> gt)\n        {\n            <span class=\"hljs-keyword\">var</span> (offset, lastOfs) = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\n            <span class=\"hljs-keyword\">var</span> maxOfs = len - hint;\n            <span class=\"hljs-keyword\">while</span> (offset &lt; maxOfs &amp;&amp; comparer.Compare(key, array[i + hint + offset]) &gt; gt)\n            {\n                lastOfs = offset;\n                offset = BoundLeftShift(offset);\n            }\n\n            <span class=\"hljs-keyword\">if</span> (offset &gt; maxOfs)\n            {\n                offset = maxOfs;\n            }\n\n            offset += hint;\n            lastOfs += hint;\n\n            <span class=\"hljs-keyword\">return</span> (offset, lastOfs);\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">FinalOffset</span>(<span class=\"hljs-params\">T[] array, T key, <span class=\"hljs-built_in\">int</span> i, <span class=\"hljs-built_in\">int</span> offset, <span class=\"hljs-built_in\">int</span> lastOfs, <span class=\"hljs-built_in\">int</span> lt</span>)</span>\n        {\n            lastOfs++;\n            <span class=\"hljs-keyword\">while</span> (lastOfs &lt; offset)\n            {\n                <span class=\"hljs-keyword\">var</span> m = lastOfs + (<span class=\"hljs-built_in\">int</span>)((<span class=\"hljs-built_in\">uint</span>)(offset - lastOfs) &gt;&gt; <span class=\"hljs-number\">1</span>);\n\n                <span class=\"hljs-keyword\">if</span> (comparer.Compare(key, array[i + m]) &lt; lt)\n                {\n                    offset = m;\n                }\n                <span class=\"hljs-keyword\">else</span>\n                {\n                    lastOfs = m + <span class=\"hljs-number\">1</span>;\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> offset;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Sorts the specified portion of the specified array using a binary</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> insertion sort. It requires O(n log n) compares, but O(n^2) data movement.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Array to sort.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;start&quot;&gt;</span>The index of the first element in the range to be sorted.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;end&quot;&gt;</span>The index after the last element in the range to be sorted.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;first&quot;&gt;</span>The index of the first element in the range that is not already known to be sorted, must be between start and end.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BinarySort</span>(<span class=\"hljs-params\">T[] array, <span class=\"hljs-built_in\">int</span> start, <span class=\"hljs-built_in\">int</span> end, <span class=\"hljs-built_in\">int</span> first</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (first &gt;= end || first &lt;= start)\n            {\n                first = start + <span class=\"hljs-number\">1</span>;\n            }\n\n            <span class=\"hljs-keyword\">for</span> (; first &lt; end; first++)\n            {\n                <span class=\"hljs-keyword\">var</span> target = array[first];\n                <span class=\"hljs-keyword\">var</span> targetInsertLocation = BinarySearch(array, start, first - <span class=\"hljs-number\">1</span>, target);\n                Array.Copy(array, targetInsertLocation, array, targetInsertLocation + <span class=\"hljs-number\">1</span>, first - targetInsertLocation);\n\n                array[targetInsertLocation] = target;\n            }\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">BinarySearch</span>(<span class=\"hljs-params\">T[] array, <span class=\"hljs-built_in\">int</span> left, <span class=\"hljs-built_in\">int</span> right, T target</span>)</span>\n        {\n            <span class=\"hljs-keyword\">while</span> (left &lt; right)\n            {\n                <span class=\"hljs-keyword\">var</span> mid = (left + right) &gt;&gt; <span class=\"hljs-number\">1</span>;\n                <span class=\"hljs-keyword\">if</span> (comparer.Compare(target, array[mid]) &lt; <span class=\"hljs-number\">0</span>)\n                {\n                    right = mid;\n                }\n                <span class=\"hljs-keyword\">else</span>\n                {\n                    left = mid + <span class=\"hljs-number\">1</span>;\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> comparer.Compare(target, array[left]) &lt; <span class=\"hljs-number\">0</span>\n                ? left\n                : left + <span class=\"hljs-number\">1</span>;\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MergeCollapse</span>(<span class=\"hljs-params\">T[] array</span>)</span>\n        {\n            <span class=\"hljs-keyword\">while</span> (stackSize &gt; <span class=\"hljs-number\">1</span>)\n            {\n                <span class=\"hljs-keyword\">var</span> n = stackSize - <span class=\"hljs-number\">2</span>;\n                <span class=\"hljs-keyword\">if</span> (n &gt; <span class=\"hljs-number\">0</span> &amp;&amp; runLengths[n - <span class=\"hljs-number\">1</span>] &lt;= runLengths[n] + runLengths[n + <span class=\"hljs-number\">1</span>])\n                {\n                    <span class=\"hljs-keyword\">if</span> (runLengths[n - <span class=\"hljs-number\">1</span>] &lt; runLengths[n + <span class=\"hljs-number\">1</span>])\n                    {\n                        n--;\n                    }\n\n                    MergeAt(array, n);\n                }\n                <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (runLengths[n] &lt;= runLengths[n + <span class=\"hljs-number\">1</span>])\n                {\n                    MergeAt(array, n);\n                }\n                <span class=\"hljs-keyword\">else</span>\n                {\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n            }\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MergeForceCollapse</span>(<span class=\"hljs-params\">T[] array</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">while</span> (stackSize &gt; <span class=\"hljs-number\">1</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> n = stackSize - <span class=\"hljs-number\">2</span>;\r\n                <span class=\"hljs-keyword\">if</span> (n &gt; <span class=\"hljs-number\">0</span> &amp;&amp; runLengths[n - <span class=\"hljs-number\">1</span>] &lt; runLengths[n + <span class=\"hljs-number\">1</span>])\n                {\n                    n--;\n                }\n\r\n                MergeAt(array, n);\r\n            }\r\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MergeAt</span>(<span class=\"hljs-params\">T[] array, <span class=\"hljs-built_in\">int</span> index</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> baseA = runBase[index];\r\n            <span class=\"hljs-keyword\">var</span> lenA = runLengths[index];\r\n            <span class=\"hljs-keyword\">var</span> baseB = runBase[index + <span class=\"hljs-number\">1</span>];\r\n            <span class=\"hljs-keyword\">var</span> lenB = runLengths[index + <span class=\"hljs-number\">1</span>];\n\n            runLengths[index] = lenA + lenB;\n\n            <span class=\"hljs-keyword\">if</span> (index == stackSize - <span class=\"hljs-number\">3</span>)\n            {\n                runBase[index + <span class=\"hljs-number\">1</span>] = runBase[index + <span class=\"hljs-number\">2</span>];\n                runLengths[index + <span class=\"hljs-number\">1</span>] = runLengths[index + <span class=\"hljs-number\">2</span>];\n            }\n\n            stackSize--;\n\n            <span class=\"hljs-keyword\">var</span> k = GallopRight(array, array[baseB], baseA, lenA, <span class=\"hljs-number\">0</span>);\n\n            baseA += k;\n            lenA -= k;\n\n            <span class=\"hljs-keyword\">if</span> (lenA &lt;= <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\n            lenB = GallopLeft(array, array[baseA + lenA - <span class=\"hljs-number\">1</span>], baseB, lenB, lenB - <span class=\"hljs-number\">1</span>);\n\n            <span class=\"hljs-keyword\">if</span> (lenB &lt;= <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\n            Merge(array, baseA, lenA, baseB, lenB);\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Merge</span>(<span class=\"hljs-params\">T[] array, <span class=\"hljs-built_in\">int</span> baseA, <span class=\"hljs-built_in\">int</span> lenA, <span class=\"hljs-built_in\">int</span> baseB, <span class=\"hljs-built_in\">int</span> lenB</span>)</span>\n        {\r\n            <span class=\"hljs-keyword\">var</span> endA = baseA + lenA;\r\n            <span class=\"hljs-keyword\">var</span> dest = baseA;\n\n            TimChunk&lt;T&gt; left = <span class=\"hljs-keyword\">new</span>()\r\n            {\r\n                Array = array[baseA..endA],\r\n                Remaining = lenA,\r\n            };\r\n\r\n            TimChunk&lt;T&gt; right = <span class=\"hljs-keyword\">new</span>()\r\n            {\r\n                Array = array,\r\n                Index = baseB,\r\n                Remaining = lenB,\r\n            };\r\n\r\n            <span class=\"hljs-comment\">// Move first element of the right chunk and deal with degenerate cases.</span>\r\n            <span class=\"hljs-keyword\">if</span> (!TimSorter&lt;T&gt;.NeedsMerge(left, right, <span class=\"hljs-keyword\">ref</span> dest))\n            {\n                <span class=\"hljs-comment\">// One of the chunks had 0-1 items in it, so no need to merge anything.</span>\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\r\n            <span class=\"hljs-keyword\">var</span> gallop = minGallop;\n\r\n            <span class=\"hljs-keyword\">while</span> (RunMerge(left, right, <span class=\"hljs-keyword\">ref</span> dest, <span class=\"hljs-keyword\">ref</span> gallop))\n            {\n                <span class=\"hljs-comment\">// Penalize for leaving gallop mode</span>\n                gallop = gallop &gt; <span class=\"hljs-number\">0</span>\n                    ? gallop + <span class=\"hljs-number\">2</span>\n                    : <span class=\"hljs-number\">2</span>;\r\n            }\n\n            minGallop = gallop &gt;= <span class=\"hljs-number\">1</span>\n                ? gallop\n                : <span class=\"hljs-number\">1</span>;\r\n\r\n            FinalizeMerge(left, right, dest);\r\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">RunMerge</span>(<span class=\"hljs-params\">TimChunk&lt;T&gt; left, TimChunk&lt;T&gt; right, <span class=\"hljs-keyword\">ref</span> <span class=\"hljs-built_in\">int</span> dest, <span class=\"hljs-keyword\">ref</span> <span class=\"hljs-built_in\">int</span> gallop</span>)</span>\n        {\n            <span class=\"hljs-comment\">// Reset the number of times in row a run wins.</span>\n            left.Wins = <span class=\"hljs-number\">0</span>;\n            right.Wins = <span class=\"hljs-number\">0</span>;\n\n            <span class=\"hljs-comment\">// Run a stable merge sort until (if ever) one run starts winning consistently.</span>\n            <span class=\"hljs-keyword\">if</span> (StableMerge(left, right, <span class=\"hljs-keyword\">ref</span> dest, gallop))\n            {\n                <span class=\"hljs-comment\">// Stable merge sort completed with no viable gallops, time to exit.</span>\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n\n            <span class=\"hljs-comment\">// One run is winning so consistently that galloping may be a huge win.</span>\n            <span class=\"hljs-comment\">// So try that, and continue galloping until (if ever) neither run appears to be winning consistently anymore.</span>\n            <span class=\"hljs-keyword\">do</span>\n            {\n                <span class=\"hljs-keyword\">if</span> (GallopMerge(left, right, <span class=\"hljs-keyword\">ref</span> dest))\n                {\n                    <span class=\"hljs-comment\">// Galloped all the way to the end, merge is complete.</span>\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n\n                <span class=\"hljs-comment\">// We had a bit of a run, so make it easier to get started again.</span>\n                gallop--;\n            }\n            <span class=\"hljs-keyword\">while</span> (left.Wins &gt;= initMinGallop || right.Wins &gt;= initMinGallop);\n\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">StableMerge</span>(<span class=\"hljs-params\">TimChunk&lt;T&gt; left, TimChunk&lt;T&gt; right, <span class=\"hljs-keyword\">ref</span> <span class=\"hljs-built_in\">int</span> dest, <span class=\"hljs-built_in\">int</span> gallop</span>)</span>\n        {\n            <span class=\"hljs-keyword\">do</span>\n            {\n                <span class=\"hljs-keyword\">if</span> (comparer.Compare(right.Array[right.Index], left.Array[left.Index]) &lt; <span class=\"hljs-number\">0</span>)\n                {\n                    right.Array[dest++] = right.Array[right.Index++];\n                    right.Wins++;\n                    left.Wins = <span class=\"hljs-number\">0</span>;\n                    <span class=\"hljs-keyword\">if</span> (--right.Remaining == <span class=\"hljs-number\">0</span>)\n                    {\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n                    }\n                }\n                <span class=\"hljs-keyword\">else</span>\n                {\n                    right.Array[dest++] = left.Array[left.Index++];\n                    left.Wins++;\n                    right.Wins = <span class=\"hljs-number\">0</span>;\n                    <span class=\"hljs-keyword\">if</span> (--left.Remaining == <span class=\"hljs-number\">1</span>)\n                    {\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n                    }\n                }\n            }\n            <span class=\"hljs-keyword\">while</span> ((left.Wins | right.Wins) &lt; gallop);\n\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">GallopMerge</span>(<span class=\"hljs-params\">TimChunk&lt;T&gt; left, TimChunk&lt;T&gt; right, <span class=\"hljs-keyword\">ref</span> <span class=\"hljs-built_in\">int</span> dest</span>)</span>\n        {\n            left.Wins = GallopRight(left.Array, right.Array[right.Index], left.Index, left.Remaining, <span class=\"hljs-number\">0</span>);\n            <span class=\"hljs-keyword\">if</span> (left.Wins != <span class=\"hljs-number\">0</span>)\n            {\n                Array.Copy(left.Array, left.Index, right.Array, dest, left.Wins);\n                dest += left.Wins;\n                left.Index += left.Wins;\n                left.Remaining -= left.Wins;\n                <span class=\"hljs-keyword\">if</span> (left.Remaining &lt;= <span class=\"hljs-number\">1</span>)\n                {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n                }\n            }\n\n            right.Array[dest++] = right.Array[right.Index++];\n            <span class=\"hljs-keyword\">if</span> (--right.Remaining == <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n\n            right.Wins = GallopLeft(right.Array, left.Array[left.Index], right.Index, right.Remaining, <span class=\"hljs-number\">0</span>);\n            <span class=\"hljs-keyword\">if</span> (right.Wins != <span class=\"hljs-number\">0</span>)\n            {\n                Array.Copy(right.Array, right.Index, right.Array, dest, right.Wins);\n                dest += right.Wins;\n                right.Index += right.Wins;\n                right.Remaining -= right.Wins;\n                <span class=\"hljs-keyword\">if</span> (right.Remaining == <span class=\"hljs-number\">0</span>)\n                {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n                }\n            }\n\n            right.Array[dest++] = left.Array[left.Index++];\n            <span class=\"hljs-keyword\">if</span> (--left.Remaining == <span class=\"hljs-number\">1</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Hemanth",
      "email": "hemanth.kotagiri43@gmail.com",
      "commits": 1
    },
    {
      "name": "Hossein Dindar",
      "email": "72156162+hosseind88@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Keshav Bohra",
      "email": "keshav2016@gmail.com",
      "commits": 1
    },
    {
      "name": "DarkWarrior703",
      "email": "56077342+DarkWarrior703@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "sandeeproy99",
      "email": "33170898+sandeeproy99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sahil Parekh",
      "email": "35810976+Sahil3198@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "FrogBattle",
      "email": "44649323+FrogBattle@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "James Mc Dermott",
      "email": "james.mcdermott89@gmail.com",
      "commits": 2
    },
    {
      "name": "Ankush263",
      "email": "86042508+Ankush263@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}