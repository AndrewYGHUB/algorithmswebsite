{
  "slug": "transposition",
  "name": "Transposition",
  "categories": [
    "ciphers"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "cipher/transposition/transposition.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/cipher/transposition/transposition.go",
      "code": "<span class=\"hljs-comment\">// transposition.go</span>\n<span class=\"hljs-comment\">// description: Transposition cipher</span>\n<span class=\"hljs-comment\">// details:</span>\n<span class=\"hljs-comment\">// Implementation &quot;Transposition cipher&quot; is a method of encryption by which the positions held by units of plaintext (which are commonly characters or groups of characters) are shifted according to a regular system, so that the ciphertext constitutes a permutation of the plaintext [Transposition cipher](https://en.wikipedia.org/wiki/Transposition_cipher)</span>\n<span class=\"hljs-comment\">// author(s) [red_byte](https://github.com/i-redbyte)</span>\n<span class=\"hljs-comment\">// see transposition_test.go</span>\n\n<span class=\"hljs-keyword\">package</span> transposition\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;sort&quot;</span>\n\t<span class=\"hljs-string\">&quot;strings&quot;</span>\n)\n\n<span class=\"hljs-keyword\">type</span> NoTextToEncryptError <span class=\"hljs-keyword\">struct</span>{}\n<span class=\"hljs-keyword\">type</span> KeyMissingError <span class=\"hljs-keyword\">struct</span>{}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(n *NoTextToEncryptError)</span></span> Error() <span class=\"hljs-type\">string</span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;No text to encrypt&quot;</span>\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(n *KeyMissingError)</span></span> Error() <span class=\"hljs-type\">string</span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Missing Key&quot;</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getKey</span><span class=\"hljs-params\">(keyWord <span class=\"hljs-type\">string</span>)</span></span> []<span class=\"hljs-type\">int</span> {\n\tkeyWord = strings.ToLower(keyWord)\n\tword := []<span class=\"hljs-type\">rune</span>(keyWord)\n\t<span class=\"hljs-keyword\">var</span> sortedWord = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">rune</span>, <span class=\"hljs-built_in\">len</span>(word))\n\t<span class=\"hljs-built_in\">copy</span>(sortedWord, word)\n\tsort.Slice(sortedWord, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i, j <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> { <span class=\"hljs-keyword\">return</span> sortedWord[i] &lt; sortedWord[j] })\n\tusedLettersMap := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">rune</span>]<span class=\"hljs-type\">int</span>)\n\twordLength := <span class=\"hljs-built_in\">len</span>(word)\n\tresultKey := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, wordLength)\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; wordLength; i++ {\n\t\tchar := word[i]\n\t\tnumberOfUsage := usedLettersMap[char]\n\t\tresultKey[i] = getIndex(sortedWord, char) + numberOfUsage + <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">//+1 -so that indexing does not start at 0</span>\n\t\tnumberOfUsage++\n\t\tusedLettersMap[char] = numberOfUsage\n\t}\n\t<span class=\"hljs-keyword\">return</span> resultKey\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getIndex</span><span class=\"hljs-params\">(wordSet []<span class=\"hljs-type\">rune</span>, subString <span class=\"hljs-type\">rune</span>)</span></span> <span class=\"hljs-type\">int</span> {\n\tn := <span class=\"hljs-built_in\">len</span>(wordSet)\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ {\n\t\t<span class=\"hljs-keyword\">if</span> wordSet[i] == subString {\n\t\t\t<span class=\"hljs-keyword\">return</span> i\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Encrypt</span><span class=\"hljs-params\">(text []<span class=\"hljs-type\">rune</span>, keyWord <span class=\"hljs-type\">string</span>)</span></span> (<span class=\"hljs-type\">string</span>, <span class=\"hljs-type\">error</span>) {\n\tkey := getKey(keyWord)\n\tspace := <span class=\"hljs-string\">&#x27; &#x27;</span>\n\tkeyLength := <span class=\"hljs-built_in\">len</span>(key)\n\ttextLength := <span class=\"hljs-built_in\">len</span>(text)\n\t<span class=\"hljs-keyword\">if</span> keyLength &lt;= <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, &amp;KeyMissingError{}\n\t}\n\t<span class=\"hljs-keyword\">if</span> textLength &lt;= <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, &amp;NoTextToEncryptError{}\n\t}\n\tn := textLength % keyLength\n\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; keyLength-n; i++ {\n\t\ttext = <span class=\"hljs-built_in\">append</span>(text, space)\n\t}\n\ttextLength = <span class=\"hljs-built_in\">len</span>(text)\n\tresult := <span class=\"hljs-string\">&quot;&quot;</span>\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; textLength; i += keyLength {\n\t\ttransposition := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">rune</span>, keyLength)\n\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; keyLength; j++ {\n\t\t\ttransposition[key[j]<span class=\"hljs-number\">-1</span>] = text[i+j]\n\t\t}\n\t\tresult += <span class=\"hljs-type\">string</span>(transposition)\n\t}\n\t<span class=\"hljs-keyword\">return</span> result, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Decrypt</span><span class=\"hljs-params\">(text []<span class=\"hljs-type\">rune</span>, keyWord <span class=\"hljs-type\">string</span>)</span></span> (<span class=\"hljs-type\">string</span>, <span class=\"hljs-type\">error</span>) {\n\tkey := getKey(keyWord)\n\ttextLength := <span class=\"hljs-built_in\">len</span>(text)\n\t<span class=\"hljs-keyword\">if</span> textLength &lt;= <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, &amp;NoTextToEncryptError{}\n\t}\n\tkeyLength := <span class=\"hljs-built_in\">len</span>(key)\n\t<span class=\"hljs-keyword\">if</span> keyLength &lt;= <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, &amp;KeyMissingError{}\n\t}\n\tspace := <span class=\"hljs-string\">&#x27; &#x27;</span>\n\tn := textLength % keyLength\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; keyLength-n; i++ {\n\t\ttext = <span class=\"hljs-built_in\">append</span>(text, space)\n\t}\n\tresult := <span class=\"hljs-string\">&quot;&quot;</span>\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; textLength; i += keyLength {\n\t\ttransposition := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">rune</span>, keyLength)\n\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; keyLength; j++ {\n\t\t\ttransposition[j] = text[i+key[j]<span class=\"hljs-number\">-1</span>]\n\t\t}\n\t\tresult += <span class=\"hljs-type\">string</span>(transposition)\n\t}\n\t<span class=\"hljs-keyword\">return</span> result, <span class=\"hljs-literal\">nil</span>\n}\n"
    },
    "rust": {
      "dir": "src/ciphers/transposition.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/ciphers/transposition.rs",
      "code": "<span class=\"hljs-comment\">//! Transposition Cipher</span>\n<span class=\"hljs-comment\">//!</span>\n<span class=\"hljs-comment\">//! The Transposition Cipher is a method of encryption by which a message is shifted</span>\n<span class=\"hljs-comment\">//! according to a regular system, so that the ciphertext is a rearrangement of the</span>\n<span class=\"hljs-comment\">//! original message. The most commonly referred to Transposition Cipher is the</span>\n<span class=\"hljs-comment\">//! COLUMNAR TRANSPOSITION cipher, which is demonstrated below.</span>\n\n<span class=\"hljs-keyword\">use</span> std::ops::Range;\n\n<span class=\"hljs-comment\">/// Encrypts or decrypts a message, using multiple keys. The</span>\n<span class=\"hljs-comment\">/// encryption is based on the columnar transposition method.</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">transposition</span>(decrypt_mode: <span class=\"hljs-type\">bool</span>, msg: &amp;<span class=\"hljs-type\">str</span>, key: &amp;<span class=\"hljs-type\">str</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">String</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">key_uppercase</span>: <span class=\"hljs-type\">String</span> = key.<span class=\"hljs-title function_ invoke__\">to_uppercase</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">cipher_msg</span>: <span class=\"hljs-type\">String</span> = msg.<span class=\"hljs-title function_ invoke__\">to_string</span>();\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">keys</span>: <span class=\"hljs-type\">Vec</span>&lt;&amp;<span class=\"hljs-type\">str</span>&gt; = <span class=\"hljs-keyword\">match</span> decrypt_mode {\n        <span class=\"hljs-literal\">false</span> =&gt; key_uppercase.<span class=\"hljs-title function_ invoke__\">split_whitespace</span>().<span class=\"hljs-title function_ invoke__\">collect</span>(),\n        <span class=\"hljs-literal\">true</span> =&gt; key_uppercase.<span class=\"hljs-title function_ invoke__\">split_whitespace</span>().<span class=\"hljs-title function_ invoke__\">rev</span>().<span class=\"hljs-title function_ invoke__\">collect</span>(),\n    };\n\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">cipher_key</span> <span class=\"hljs-keyword\">in</span> keys.<span class=\"hljs-title function_ invoke__\">iter</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">key_order</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">counter</span>: <span class=\"hljs-type\">u8</span> = <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">// Removes any non-alphabet characters from &#x27;msg&#x27;</span>\n        cipher_msg = cipher_msg\n            .<span class=\"hljs-title function_ invoke__\">to_uppercase</span>()\n            .<span class=\"hljs-title function_ invoke__\">chars</span>()\n            .<span class=\"hljs-title function_ invoke__\">filter</span>(|&amp;c| c.<span class=\"hljs-title function_ invoke__\">is_ascii_alphabetic</span>())\n            .<span class=\"hljs-title function_ invoke__\">collect</span>();\n\n        <span class=\"hljs-comment\">// Determines the sequence of the columns, as dictated by the</span>\n        <span class=\"hljs-comment\">// alphabetical order of the keyword&#x27;s letters</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">key_ascii</span>: <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">usize</span>, <span class=\"hljs-type\">u8</span>)&gt; =\n            cipher_key.<span class=\"hljs-title function_ invoke__\">bytes</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>().collect::&lt;<span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">usize</span>, <span class=\"hljs-type\">u8</span>)&gt;&gt;();\n\n        key_ascii.<span class=\"hljs-title function_ invoke__\">sort_by_key</span>(|&amp;(_, key)| key);\n\n        key_ascii.<span class=\"hljs-title function_ invoke__\">iter_mut</span>().<span class=\"hljs-title function_ invoke__\">for_each</span>(|(_, key)| {\n            *key = counter;\n            counter += <span class=\"hljs-number\">1</span>;\n        });\n\n        key_ascii.<span class=\"hljs-title function_ invoke__\">sort_by_key</span>(|&amp;(index, _)| index);\n\n        key_ascii\n            .<span class=\"hljs-title function_ invoke__\">into_iter</span>()\n            .<span class=\"hljs-title function_ invoke__\">for_each</span>(|(_, key)| key_order.<span class=\"hljs-title function_ invoke__\">push</span>(key.<span class=\"hljs-title function_ invoke__\">into</span>()));\n\n        <span class=\"hljs-comment\">// Determines whether to encrypt or decrypt the message,</span>\n        <span class=\"hljs-comment\">// and returns the result</span>\n        cipher_msg = <span class=\"hljs-keyword\">match</span> decrypt_mode {\n            <span class=\"hljs-literal\">false</span> =&gt; <span class=\"hljs-title function_ invoke__\">encrypt</span>(cipher_msg, key_order),\n            <span class=\"hljs-literal\">true</span> =&gt; <span class=\"hljs-title function_ invoke__\">decrypt</span>(cipher_msg, key_order),\n        };\n    }\n\n    cipher_msg\n}\n\n<span class=\"hljs-comment\">/// Performs the columnar transposition encryption</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">encrypt</span>(<span class=\"hljs-keyword\">mut</span> msg: <span class=\"hljs-type\">String</span>, key_order: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">String</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">encrypted_msg</span>: <span class=\"hljs-type\">String</span> = String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;&quot;</span>);\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">encrypted_vec</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">String</span>&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">msg_len</span>: <span class=\"hljs-type\">usize</span> = msg.<span class=\"hljs-title function_ invoke__\">len</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">key_len</span>: <span class=\"hljs-type\">usize</span> = key_order.<span class=\"hljs-title function_ invoke__\">len</span>();\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">msg_index</span>: <span class=\"hljs-type\">usize</span> = msg_len;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">key_index</span>: <span class=\"hljs-type\">usize</span> = key_len;\n\n    <span class=\"hljs-comment\">// Loop each column, pushing it to a Vec&lt;T&gt;</span>\n    <span class=\"hljs-keyword\">while</span> !msg.<span class=\"hljs-title function_ invoke__\">is_empty</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">chars</span>: <span class=\"hljs-type\">String</span> = String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;&quot;</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">index</span>: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-number\">0</span>;\n        key_index -= <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-comment\">// Loop every nth character, determined by key length, to create a column</span>\n        <span class=\"hljs-keyword\">while</span> index &lt; msg_index {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">ch</span>: <span class=\"hljs-type\">char</span> = msg.<span class=\"hljs-title function_ invoke__\">remove</span>(index);\n            chars.<span class=\"hljs-title function_ invoke__\">push</span>(ch);\n\n            index += key_index;\n            msg_index -= <span class=\"hljs-number\">1</span>;\n        }\n\n        encrypted_vec.<span class=\"hljs-title function_ invoke__\">push</span>(chars);\n    }\n\n    <span class=\"hljs-comment\">// Concatenate the columns into a string, determined by the</span>\n    <span class=\"hljs-comment\">// alphabetical order of the keyword&#x27;s characters</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">indexed_vec</span>: <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">usize</span>, &amp;<span class=\"hljs-type\">String</span>)&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">indexed_msg</span>: <span class=\"hljs-type\">String</span> = String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;&quot;</span>);\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">counter</span>: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-number\">0</span>;\n\n    key_order.<span class=\"hljs-title function_ invoke__\">into_iter</span>().<span class=\"hljs-title function_ invoke__\">for_each</span>(|key_index| {\n        indexed_vec.<span class=\"hljs-title function_ invoke__\">push</span>((key_index, &amp;encrypted_vec[counter]));\n        counter += <span class=\"hljs-number\">1</span>;\n    });\n\n    indexed_vec.<span class=\"hljs-title function_ invoke__\">sort</span>();\n\n    indexed_vec.<span class=\"hljs-title function_ invoke__\">into_iter</span>().<span class=\"hljs-title function_ invoke__\">for_each</span>(|(_, column)| {\n        indexed_msg.<span class=\"hljs-title function_ invoke__\">push_str</span>(column);\n    });\n\n    <span class=\"hljs-comment\">// Split the message by a space every nth character, determined by</span>\n    <span class=\"hljs-comment\">// &#x27;message length divided by keyword length&#x27; to the next highest integer.</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">msg_div</span>: <span class=\"hljs-type\">usize</span> = (msg_len <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f32</span> / key_len <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f32</span>).<span class=\"hljs-title function_ invoke__\">ceil</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">counter</span>: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-number\">0</span>;\n\n    indexed_msg.<span class=\"hljs-title function_ invoke__\">chars</span>().<span class=\"hljs-title function_ invoke__\">for_each</span>(|c| {\n        encrypted_msg.<span class=\"hljs-title function_ invoke__\">push</span>(c);\n        counter += <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">if</span> counter == msg_div {\n            encrypted_msg.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-string\">&#x27; &#x27;</span>);\n            counter = <span class=\"hljs-number\">0</span>;\n        }\n    });\n\n    encrypted_msg.<span class=\"hljs-title function_ invoke__\">trim_end</span>().<span class=\"hljs-title function_ invoke__\">to_string</span>()\n}\n\n<span class=\"hljs-comment\">/// Performs the columnar transposition decryption</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">decrypt</span>(<span class=\"hljs-keyword\">mut</span> msg: <span class=\"hljs-type\">String</span>, key_order: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">String</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">decrypted_msg</span>: <span class=\"hljs-type\">String</span> = String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;&quot;</span>);\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">decrypted_vec</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">String</span>&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">indexed_vec</span>: <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">usize</span>, <span class=\"hljs-type\">String</span>)&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">msg_len</span>: <span class=\"hljs-type\">usize</span> = msg.<span class=\"hljs-title function_ invoke__\">len</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">key_len</span>: <span class=\"hljs-type\">usize</span> = key_order.<span class=\"hljs-title function_ invoke__\">len</span>();\n\n    <span class=\"hljs-comment\">// Split the message into columns, determined by &#x27;message length divided by keyword length&#x27;.</span>\n    <span class=\"hljs-comment\">// Some columns are larger by &#x27;+1&#x27;, where the prior calculation leaves a remainder.</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">split_size</span>: <span class=\"hljs-type\">usize</span> = (msg_len <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f64</span> / key_len <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f64</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">msg_mod</span>: <span class=\"hljs-type\">usize</span> = msg_len % key_len;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">counter</span>: <span class=\"hljs-type\">usize</span> = msg_mod;\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">key_split</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; = key_order.<span class=\"hljs-title function_ invoke__\">clone</span>();\n    <span class=\"hljs-keyword\">let</span> (split_large, split_small) = key_split.<span class=\"hljs-title function_ invoke__\">split_at_mut</span>(msg_mod);\n\n    split_large.<span class=\"hljs-title function_ invoke__\">sort_unstable</span>();\n    split_small.<span class=\"hljs-title function_ invoke__\">sort_unstable</span>();\n\n    split_large.<span class=\"hljs-title function_ invoke__\">iter_mut</span>().<span class=\"hljs-title function_ invoke__\">rev</span>().<span class=\"hljs-title function_ invoke__\">for_each</span>(|key_index| {\n        counter -= <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">range</span>: Range&lt;<span class=\"hljs-type\">usize</span>&gt; =\n            ((*key_index * split_size) + counter)..(((*key_index + <span class=\"hljs-number\">1</span>) * split_size) + counter + <span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">slice</span>: <span class=\"hljs-type\">String</span> = msg[range.<span class=\"hljs-title function_ invoke__\">clone</span>()].<span class=\"hljs-title function_ invoke__\">to_string</span>();\n        indexed_vec.<span class=\"hljs-title function_ invoke__\">push</span>((*key_index, slice));\n\n        msg.<span class=\"hljs-title function_ invoke__\">replace_range</span>(range, <span class=\"hljs-string\">&quot;&quot;</span>);\n    });\n\n    split_small.<span class=\"hljs-title function_ invoke__\">iter_mut</span>().<span class=\"hljs-title function_ invoke__\">for_each</span>(|key_index| {\n        <span class=\"hljs-keyword\">let</span> (slice, rest_of_msg) = msg.<span class=\"hljs-title function_ invoke__\">split_at</span>(split_size);\n        indexed_vec.<span class=\"hljs-title function_ invoke__\">push</span>((*key_index, (slice.<span class=\"hljs-title function_ invoke__\">to_string</span>())));\n        msg = rest_of_msg.<span class=\"hljs-title function_ invoke__\">to_string</span>();\n    });\n\n    indexed_vec.<span class=\"hljs-title function_ invoke__\">sort</span>();\n\n    key_order.<span class=\"hljs-title function_ invoke__\">into_iter</span>().<span class=\"hljs-title function_ invoke__\">for_each</span>(|key| {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>((_, column)) = indexed_vec.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">find</span>(|(key_index, _)| key_index == &amp;key) {\n            decrypted_vec.<span class=\"hljs-title function_ invoke__\">push</span>(column.<span class=\"hljs-title function_ invoke__\">to_string</span>());\n        }\n    });\n\n    <span class=\"hljs-comment\">// Concatenate the columns into a string, determined by the</span>\n    <span class=\"hljs-comment\">// alphabetical order of the keyword&#x27;s characters</span>\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">_</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..split_size {\n        decrypted_vec.<span class=\"hljs-title function_ invoke__\">iter_mut</span>().<span class=\"hljs-title function_ invoke__\">for_each</span>(|column| {\n            decrypted_msg.<span class=\"hljs-title function_ invoke__\">push</span>(column.<span class=\"hljs-title function_ invoke__\">remove</span>(<span class=\"hljs-number\">0</span>));\n        })\n    }\n\n    <span class=\"hljs-keyword\">if</span> !decrypted_vec.<span class=\"hljs-title function_ invoke__\">is_empty</span>() {\n        decrypted_vec.<span class=\"hljs-title function_ invoke__\">into_iter</span>().<span class=\"hljs-title function_ invoke__\">for_each</span>(|chars| {\n            decrypted_msg.<span class=\"hljs-title function_ invoke__\">push_str</span>(&amp;chars);\n        })\n    }\n\n    decrypted_msg\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">encryption</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">transposition</span>(\n                <span class=\"hljs-literal\">false</span>,\n                <span class=\"hljs-string\">&quot;The quick brown fox jumps over the lazy dog&quot;</span>,\n                <span class=\"hljs-string\">&quot;Archive&quot;</span>,\n            ),\n            <span class=\"hljs-string\">&quot;TKOOL ERJEZ CFSEG QOURY UWMTD HBXVA INPHO&quot;</span>\n        );\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">transposition</span>(\n                <span class=\"hljs-literal\">false</span>,\n                <span class=\"hljs-string\">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.,/;&#x27;[]{}:|_+=-`~() &quot;</span>,\n                <span class=\"hljs-string\">&quot;Tenacious&quot;</span>\n            ),\n            <span class=\"hljs-string\">&quot;DMVENW ENWFOX BKTCLU FOXGPY CLUDMV GPYHQZ IRAJSA JSBKTH QZIR&quot;</span>\n        );\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">transposition</span>(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">&quot;WE ARE DISCOVERED. FLEE AT ONCE.&quot;</span>, <span class=\"hljs-string\">&quot;ZEBRAS&quot;</span>),\n            <span class=\"hljs-string\">&quot;EVLNA CDTES EAROF ODEEC WIREE&quot;</span>\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">decryption</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">transposition</span>(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;TKOOL ERJEZ CFSEG QOURY UWMTD HBXVA INPHO&quot;</span>, <span class=\"hljs-string\">&quot;Archive&quot;</span>),\n            <span class=\"hljs-string\">&quot;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&quot;</span>\n        );\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">transposition</span>(\n                <span class=\"hljs-literal\">true</span>,\n                <span class=\"hljs-string\">&quot;DMVENW ENWFOX BKTCLU FOXGPY CLUDMV GPYHQZ IRAJSA JSBKTH QZIR&quot;</span>,\n                <span class=\"hljs-string\">&quot;Tenacious&quot;</span>\n            ),\n            <span class=\"hljs-string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>\n        );\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">transposition</span>(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;EVLNA CDTES EAROF ODEEC WIREE&quot;</span>, <span class=\"hljs-string\">&quot;ZEBRAS&quot;</span>),\n            <span class=\"hljs-string\">&quot;WEAREDISCOVEREDFLEEATONCE&quot;</span>\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">double_encryption</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">transposition</span>(\n                <span class=\"hljs-literal\">false</span>,\n                <span class=\"hljs-string\">&quot;The quick brown fox jumps over the lazy dog&quot;</span>,\n                <span class=\"hljs-string\">&quot;Archive Snow&quot;</span>\n            ),\n            <span class=\"hljs-string\">&quot;KEZEUWHAH ORCGRMBIO TLESOUDVP OJFQYTXN&quot;</span>\n        );\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">transposition</span>(\n                <span class=\"hljs-literal\">false</span>,\n                <span class=\"hljs-string\">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.,/;&#x27;[]{}:|_+=-`~() &quot;</span>,\n                <span class=\"hljs-string\">&quot;Tenacious Drink&quot;</span>\n            ),\n            <span class=\"hljs-string\">&quot;DWOCXLGZSKI VNBUPDYRJHN FTOCVQJBZEW KFYMHASQMEX LGUPIATR&quot;</span>\n        );\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">transposition</span>(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">&quot;WE ARE DISCOVERED. FLEE AT ONCE.&quot;</span>, <span class=\"hljs-string\">&quot;ZEBRAS STRIPE&quot;</span>),\n            <span class=\"hljs-string\">&quot;CAEEN SOIAE DRLEF WEDRE EVTOC&quot;</span>\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">double_decryption</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">transposition</span>(\n                <span class=\"hljs-literal\">true</span>,\n                <span class=\"hljs-string\">&quot;KEZEUWHAH ORCGRMBIO TLESOUDVP OJFQYTXN&quot;</span>,\n                <span class=\"hljs-string\">&quot;Archive Snow&quot;</span>\n            ),\n            <span class=\"hljs-string\">&quot;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&quot;</span>\n        );\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">transposition</span>(\n                <span class=\"hljs-literal\">true</span>,\n                <span class=\"hljs-string\">&quot;DWOCXLGZSKI VNBUPDYRJHN FTOCVQJBZEW KFYMHASQMEX LGUPIATR&quot;</span>,\n                <span class=\"hljs-string\">&quot;Tenacious Drink&quot;</span>,\n            ),\n            <span class=\"hljs-string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>\n        );\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">transposition</span>(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;CAEEN SOIAE DRLEF WEDRE EVTOC&quot;</span>, <span class=\"hljs-string\">&quot;ZEBRAS STRIPE&quot;</span>),\n            <span class=\"hljs-string\">&quot;WEAREDISCOVEREDFLEEATONCE&quot;</span>\n        );\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Bello mahmud",
      "email": "75342173+mahmudsudo@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "James Nash",
      "email": "37304960+NashJames@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ilya Sokolov",
      "email": "developer.sokolov@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}