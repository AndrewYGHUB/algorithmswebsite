{
  "slug": "travelling-salesman-problem",
  "name": "Travelling Salesman Problem",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "graph/travelling_salesman_problem.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/graph/travelling_salesman_problem.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief [Travelling Salesman Problem]\n * (https://en.wikipedia.org/wiki/Travelling_salesman_problem) implementation\n *\n * @author [Mayank Mamgain](http://github.com/Mayank17M)\n *\n * @details\n * Travelling salesman problem asks:\n * Given a list of cities and the distances between each pair of cities, what is\n * the shortest possible route that visits each city exactly once and returns to\n * the origin city?\n * TSP can be modeled as an undirected weighted graph, such that cities are the\n * graph&#x27;s vertices, paths are the graph&#x27;s edges, and a path&#x27;s distance is the\n * edge&#x27;s weight. It is a minimization problem starting and finishing at a\n * specified vertex after having visited each other vertex exactly once.\n * This is the naive implementation of the problem.\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">/// for std::min</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;limits&gt;</span>     <span class=\"hljs-comment\">/// for limits of integral types</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>     <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace graph\n * @brief Graph Algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> graph {\n<span class=\"hljs-comment\">/**\n * @brief Function calculates the minimum path distance that will cover all the\n * cities starting from the source.\n *\n * @param cities matrix representation of cities\n * @param src Point from where salesman is starting\n * @param V number of vertices in the graph\n *\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">TravellingSalesmanProblem</span><span class=\"hljs-params\">(std::vector&lt;std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt;&gt; *cities,\n                              <span class=\"hljs-type\">int32_t</span> src, <span class=\"hljs-type\">uint32_t</span> V)</span> </span>{\n    <span class=\"hljs-comment\">//// vtx stores the vertexs of the graph</span>\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; vtx;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\n        <span class=\"hljs-keyword\">if</span> (i != src) {\n            vtx.<span class=\"hljs-built_in\">push_back</span>(i);\n        }\n    }\n\n    <span class=\"hljs-comment\">//// store minimum weight Hamiltonian Cycle.</span>\n    <span class=\"hljs-type\">int32_t</span> min_path = <span class=\"hljs-number\">2147483647</span>;\n    <span class=\"hljs-keyword\">do</span> {\n        <span class=\"hljs-comment\">//// store current Path weight(cost)</span>\n        <span class=\"hljs-type\">int32_t</span> curr_weight = <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">//// compute current path weight</span>\n        <span class=\"hljs-type\">int</span> k = src;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i : vtx) {\n            curr_weight += (*cities)[k][i];\n            k = i;\n        }\n        curr_weight += (*cities)[k][src];\n\n        <span class=\"hljs-comment\">//// update minimum</span>\n        min_path = std::<span class=\"hljs-built_in\">min</span>(min_path, curr_weight);\n\n    } <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-built_in\">next_permutation</span>(vtx.<span class=\"hljs-built_in\">begin</span>(), vtx.<span class=\"hljs-built_in\">end</span>()));\n\n    <span class=\"hljs-keyword\">return</span> min_path;\n}\n}  <span class=\"hljs-comment\">// namespace graph</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">tests</span><span class=\"hljs-params\">()</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Initiatinig Predefined Tests...&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Initiating Test 1...&quot;</span> &lt;&lt; std::endl;\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt;&gt; cities = {\n        {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">35</span>}, {<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">34</span>}, {<span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">12</span>}, {<span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">0</span>}};\n    <span class=\"hljs-type\">uint32_t</span> V = cities.<span class=\"hljs-built_in\">size</span>();\n    <span class=\"hljs-built_in\">assert</span>(graph::<span class=\"hljs-built_in\">TravellingSalesmanProblem</span>(&amp;cities, <span class=\"hljs-number\">0</span>, V) == <span class=\"hljs-number\">97</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;1st test passed...&quot;</span> &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Initiating Test 2...&quot;</span> &lt;&lt; std::endl;\n    cities = {{<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, {<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>}, {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">35</span>}, {<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">0</span>}};\n    V = cities.<span class=\"hljs-built_in\">size</span>();\n    <span class=\"hljs-built_in\">assert</span>(graph::<span class=\"hljs-built_in\">TravellingSalesmanProblem</span>(&amp;cities, <span class=\"hljs-number\">0</span>, V) == <span class=\"hljs-number\">75</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;2nd test passed...&quot;</span> &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Initiating Test 3...&quot;</span> &lt;&lt; std::endl;\n    cities = {\n        {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">20</span>}, {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">25</span>}, {<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">30</span>}, {<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">0</span>}};\n    V = cities.<span class=\"hljs-built_in\">size</span>();\n    <span class=\"hljs-built_in\">assert</span>(graph::<span class=\"hljs-built_in\">TravellingSalesmanProblem</span>(&amp;cities, <span class=\"hljs-number\">0</span>, V) == <span class=\"hljs-number\">80</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;3rd test passed...&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">tests</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt;&gt; cities = {\n        {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, {<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>}, {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">35</span>}, {<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">0</span>}};\n    <span class=\"hljs-type\">uint32_t</span> V = cities.<span class=\"hljs-built_in\">size</span>();\n    std::cout &lt;&lt; graph::<span class=\"hljs-built_in\">TravellingSalesmanProblem</span>(&amp;cities, <span class=\"hljs-number\">0</span>, V) &lt;&lt; std::endl;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Mayank Mamgain",
      "email": "56592363+Mayank17M@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}