{
  "slug": "tree-random-node",
  "name": "Tree Random Node",
  "categories": [
    "datastructures",
    "tree"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/trees/TreeRandomNode.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/trees/TreeRandomNode.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.trees;\n\n\n<span class=\"hljs-comment\">/* Author : Suraj Kumar\n  Github : https://github.com/skmodi649\n */</span>\n\n<span class=\"hljs-comment\">/* PROBLEM DESCRIPTION :\n  There is a Binary Search Tree given, and we are supposed to find a random node in the given binary tree.\n */</span>\n\n<span class=\"hljs-comment\">/* ALGORITHM :\n  Step 1: START\n  Step 2: First create a binary tree using the steps mentioned in the first approach\n  Step 3: Now use a method inOrder() that takes a node as input parameter to traverse through the\n          binary tree in inorder fashion as also store the values in a ArrayList simultaneously.\n  Step 4: Now define a method getRandom() that takes a node as input parameter, in this first call\n          the inOrder() method to store the values in the arraylist, then find the size of the binary tree and now just generate a random number between 0 to n-1.\n  Step 5: After generating the number display the value of the ArrayList at the generated index\n  Step 6: STOP\n */</span>\n\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n\n<span class=\"hljs-comment\">// Using auxiliary array to find the random node in a given binary tree</span>\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TreeRandomNode</span> {\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n        <span class=\"hljs-type\">int</span> item;\n        Node left, right;\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n            item = key;\n            left = right = <span class=\"hljs-literal\">null</span>;\n        }\n    }\n\n    <span class=\"hljs-comment\">// Using an arraylist to store the inorder traversal of the given binary tree</span>\n    <span class=\"hljs-keyword\">static</span> ArrayList&lt;Integer&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n    <span class=\"hljs-comment\">// root of Tree</span>\n    Node root;\n\n    TreeRandomNode() {\n        root = <span class=\"hljs-literal\">null</span>;\n    }\n\n    <span class=\"hljs-comment\">// Now lets find the inorder traversal of the given binary tree</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">inOrder</span><span class=\"hljs-params\">(Node node)</span> {\n        <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n\n        <span class=\"hljs-comment\">// traverse the left child</span>\n        inOrder(node.left);\n\n        list.add(node.item);\n        <span class=\"hljs-comment\">// traverse the right child</span>\n        inOrder(node.right);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">getRandom</span><span class=\"hljs-params\">(Node val)</span> {\n        inOrder(val);\n        <span class=\"hljs-comment\">// getting the count of node of the binary tree</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> list.size();\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">max</span> <span class=\"hljs-operator\">=</span> n - <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-comment\">//Generate random int value from 0 to n-1</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">int</span>) (Math.random() * (max - min + <span class=\"hljs-number\">1</span>) + min);\n        <span class=\"hljs-comment\">// displaying the value at the generated index</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">random</span> <span class=\"hljs-operator\">=</span> list.get(b);\n        System.out.println(<span class=\"hljs-string\">&quot;Random Node : &quot;</span> + random);\n\n    }\n}\n\n\n<span class=\"hljs-comment\">/* Explanation of the Approach :\n  (a) Form the required binary tree\n  (b) Now use the inOrder() method to get the nodes in inOrder fashion and also store them in the given arraylist &#x27;list&#x27;\n  (c) Using the getRandom() method generate a random number between 0 to n-1, then get the value at the generated random number\n      from the arraylist using get() method and finally display the result.\n */</span>\n\n\n<span class=\"hljs-comment\">/* OUTPUT :\n  First output :\n  Random Node : 15\n  Second output :\n  Random Node : 99\n */</span>\n\n<span class=\"hljs-comment\">/* Time Complexity : O(n)\n  Auxiliary Space Complexity : O(1)\n */</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Ankush263",
      "email": "86042508+Ankush263@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Suraj Kumar",
      "email": "76468931+skmodi649@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}