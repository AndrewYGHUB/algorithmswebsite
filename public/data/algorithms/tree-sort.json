{
  "slug": "tree-sort",
  "name": "Tree Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts/tree_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/tree_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nTree_sort algorithm.\n\nBuild a BST and in order traverse.\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">node</span>:\n    <span class=\"hljs-comment\"># BST data structure</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, val</span>):\n        self.val = val\n        self.left = <span class=\"hljs-literal\">None</span>\n        self.right = <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-params\">self, val</span>):\n        <span class=\"hljs-keyword\">if</span> self.val:\n            <span class=\"hljs-keyword\">if</span> val &lt; self.val:\n                <span class=\"hljs-keyword\">if</span> self.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n                    self.left = node(val)\n                <span class=\"hljs-keyword\">else</span>:\n                    self.left.insert(val)\n            <span class=\"hljs-keyword\">elif</span> val &gt; self.val:\n                <span class=\"hljs-keyword\">if</span> self.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n                    self.right = node(val)\n                <span class=\"hljs-keyword\">else</span>:\n                    self.right.insert(val)\n        <span class=\"hljs-keyword\">else</span>:\n            self.val = val\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">inorder</span>(<span class=\"hljs-params\">root, res</span>):\n    <span class=\"hljs-comment\"># Recursive traversal</span>\n    <span class=\"hljs-keyword\">if</span> root:\n        inorder(root.left, res)\n        res.append(root.val)\n        inorder(root.right, res)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tree_sort</span>(<span class=\"hljs-params\">arr</span>):\n    <span class=\"hljs-comment\"># Build BST</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(arr) == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> arr\n    root = node(arr[<span class=\"hljs-number\">0</span>])\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(arr)):\n        root.insert(arr[i])\n    <span class=\"hljs-comment\"># Traverse BST in order.</span>\n    res = []\n    inorder(root, res)\n    <span class=\"hljs-keyword\">return</span> res\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-built_in\">print</span>(tree_sort([<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">13</span>]))\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/sorts/TreeSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/sorts/TreeSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> com.thealgorithms.sorts.SortUtils.print;\n<span class=\"hljs-keyword\">import</span> com.thealgorithms.datastructures.trees.BSTRecursiveGeneric;\n\n<span class=\"hljs-keyword\">import</span> java.util.List;\n\n<span class=\"hljs-comment\">/**\n * &lt;h1&gt; Implementation of the Tree Sort algorithm&lt;/h1&gt;\n *\n * &lt;p&gt;\n * Tree Sort: A sorting algorithm which constructs a Binary Search Tree using\n * the unsorted data and then outputs the data by inorder traversal of the tree.\n *\n * Reference: https://en.wikipedia.org/wiki/Tree_sort\n * &lt;/p&gt;\n *\n * <span class=\"hljs-doctag\">@author</span> Madhur Panwar (https://github.com/mdrpanwar)\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TreeSort</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SortAlgorithm</span> {\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; T[] sort(T[] unsortedArray) {\n        <span class=\"hljs-keyword\">return</span> doTreeSortArray(unsortedArray);\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; List&lt;T&gt; <span class=\"hljs-title function_\">sort</span><span class=\"hljs-params\">(List&lt;T&gt; unsortedList)</span> {\n        <span class=\"hljs-keyword\">return</span> doTreeSortList(unsortedList);\n    }\n\n    <span class=\"hljs-keyword\">private</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; T[] doTreeSortArray(T[] unsortedArray) {\n        <span class=\"hljs-comment\">// create a generic BST tree</span>\n        BSTRecursiveGeneric&lt;T&gt; tree = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BSTRecursiveGeneric</span>&lt;T&gt;();\n\n        <span class=\"hljs-comment\">// add all elements to the tree</span>\n        <span class=\"hljs-keyword\">for</span> (T element : unsortedArray) {\n            tree.add(element);\n        }\n\n        <span class=\"hljs-comment\">// get the sorted list by inorder traversal of the tree</span>\n        List&lt;T&gt; sortedList = tree.inorderSort();\n\n        <span class=\"hljs-comment\">// add the elements back to the initial array</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (T element : sortedList) {\n            unsortedArray[i++] = element;\n        }\n\n        <span class=\"hljs-comment\">// return the array</span>\n        <span class=\"hljs-keyword\">return</span> unsortedArray;\n    }\n\n    <span class=\"hljs-keyword\">private</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; List&lt;T&gt; <span class=\"hljs-title function_\">doTreeSortList</span><span class=\"hljs-params\">(List&lt;T&gt; unsortedList)</span> {\n        <span class=\"hljs-comment\">// create a generic BST tree</span>\n        BSTRecursiveGeneric&lt;T&gt; tree = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BSTRecursiveGeneric</span>&lt;T&gt;();\n\n        <span class=\"hljs-comment\">// add all elements to the tree</span>\n        <span class=\"hljs-keyword\">for</span> (T element : unsortedList) {\n            tree.add(element);\n        }\n\n        <span class=\"hljs-comment\">// get the sorted list by inorder traversal of the tree and return it</span>\n        <span class=\"hljs-keyword\">return</span> tree.inorderSort();\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">TreeSort</span> <span class=\"hljs-variable\">treeSort</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSort</span>();\n\n        <span class=\"hljs-comment\">// ==== Integer Array =======</span>\n        System.out.println(<span class=\"hljs-string\">&quot;Testing for Integer Array....&quot;</span>);\n        Integer[] a = {<span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">343</span>, -<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">9</span>};\n        System.out.print(String.format(<span class=\"hljs-string\">&quot;%-10s&quot;</span>, <span class=\"hljs-string\">&quot;unsorted: &quot;</span>));\n        print(a);\n        a = treeSort.sort(a);\n        System.out.print(String.format(<span class=\"hljs-string\">&quot;%-10s&quot;</span>, <span class=\"hljs-string\">&quot;sorted: &quot;</span>));\n        print(a);\n        System.out.println();\n\n        <span class=\"hljs-comment\">// ==== Integer List =======</span>\n        System.out.println(<span class=\"hljs-string\">&quot;Testing for Integer List....&quot;</span>);\n        List&lt;Integer&gt; intList = List.of(<span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">343</span>, -<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">9</span>);\n        System.out.print(String.format(<span class=\"hljs-string\">&quot;%-10s&quot;</span>, <span class=\"hljs-string\">&quot;unsorted: &quot;</span>));\n        print(intList);\n        intList = treeSort.sort(intList);\n        System.out.print(String.format(<span class=\"hljs-string\">&quot;%-10s&quot;</span>, <span class=\"hljs-string\">&quot;sorted: &quot;</span>));\n        print(intList);\n        System.out.println();\n\n        <span class=\"hljs-comment\">// ==== String Array =======</span>\n        System.out.println(<span class=\"hljs-string\">&quot;Testing for String Array....&quot;</span>);\n        String[] b = {<span class=\"hljs-string\">&quot;banana&quot;</span>, <span class=\"hljs-string\">&quot;berry&quot;</span>, <span class=\"hljs-string\">&quot;orange&quot;</span>, <span class=\"hljs-string\">&quot;grape&quot;</span>, <span class=\"hljs-string\">&quot;peach&quot;</span>, <span class=\"hljs-string\">&quot;cherry&quot;</span>, <span class=\"hljs-string\">&quot;apple&quot;</span>, <span class=\"hljs-string\">&quot;pineapple&quot;</span>};\n        System.out.print(String.format(<span class=\"hljs-string\">&quot;%-10s&quot;</span>, <span class=\"hljs-string\">&quot;unsorted: &quot;</span>));\n        print(b);\n        b = treeSort.sort(b);\n        System.out.print(String.format(<span class=\"hljs-string\">&quot;%-10s&quot;</span>, <span class=\"hljs-string\">&quot;sorted: &quot;</span>));\n        print(b);\n        System.out.println();\n\n        <span class=\"hljs-comment\">// ==== String List =======</span>\n        System.out.println(<span class=\"hljs-string\">&quot;Testing for String List....&quot;</span>);\n        List&lt;String&gt; stringList = List.of(<span class=\"hljs-string\">&quot;banana&quot;</span>, <span class=\"hljs-string\">&quot;berry&quot;</span>, <span class=\"hljs-string\">&quot;orange&quot;</span>, <span class=\"hljs-string\">&quot;grape&quot;</span>, <span class=\"hljs-string\">&quot;peach&quot;</span>, <span class=\"hljs-string\">&quot;cherry&quot;</span>, <span class=\"hljs-string\">&quot;apple&quot;</span>, <span class=\"hljs-string\">&quot;pineapple&quot;</span>);\n        System.out.print(String.format(<span class=\"hljs-string\">&quot;%-10s&quot;</span>, <span class=\"hljs-string\">&quot;unsorted: &quot;</span>));\n        print(stringList);\n        stringList = treeSort.sort(stringList);\n        System.out.print(String.format(<span class=\"hljs-string\">&quot;%-10s&quot;</span>, <span class=\"hljs-string\">&quot;sorted: &quot;</span>));\n        print(stringList);\n\n    }\n\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Mehdi ALAOUI",
      "email": "alaoui.mehdi.1995@gmail.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Madhur Panwar",
      "email": "39766613+mdrpanwar@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Erwin Lejeune",
      "email": "erwin.lejeune15@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sichen Liu",
      "email": "sl2947@cornell.edu",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}