{
  "slug": "trial-division",
  "name": "Trial Division",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/math/trial_division.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/math/trial_division.rs",
      "code": "<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">floor</span>(value: <span class=\"hljs-type\">f64</span>, scale: <span class=\"hljs-type\">u8</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">multiplier</span> = <span class=\"hljs-number\">10i64</span>.<span class=\"hljs-title function_ invoke__\">pow</span>(scale <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f64</span>;\n    (value * multiplier).<span class=\"hljs-title function_ invoke__\">floor</span>()\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">double_to_int</span>(amount: <span class=\"hljs-type\">f64</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">i128</span> {\n    amount.<span class=\"hljs-title function_ invoke__\">round</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i128</span>\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">trial_division</span>(<span class=\"hljs-keyword\">mut</span> num: <span class=\"hljs-type\">i128</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i128</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i128</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[];\n\n    <span class=\"hljs-keyword\">while</span> num % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> {\n        result.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">2</span>);\n        num /= <span class=\"hljs-number\">2</span>;\n        num = <span class=\"hljs-title function_ invoke__\">double_to_int</span>(<span class=\"hljs-title function_ invoke__\">floor</span>(num <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f64</span>, <span class=\"hljs-number\">0</span>))\n    }\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">f</span>: <span class=\"hljs-type\">i128</span> = <span class=\"hljs-number\">3</span>;\n\n    <span class=\"hljs-keyword\">while</span> f.<span class=\"hljs-title function_ invoke__\">pow</span>(<span class=\"hljs-number\">2</span>) &lt;= num {\n        <span class=\"hljs-keyword\">if</span> num % f == <span class=\"hljs-number\">0</span> {\n            result.<span class=\"hljs-title function_ invoke__\">push</span>(f);\n            num /= f;\n            num = <span class=\"hljs-title function_ invoke__\">double_to_int</span>(<span class=\"hljs-title function_ invoke__\">floor</span>(num <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f64</span>, <span class=\"hljs-number\">0</span>))\n        } <span class=\"hljs-keyword\">else</span> {\n            f += <span class=\"hljs-number\">2</span>\n        }\n    }\n\n    <span class=\"hljs-keyword\">if</span> num != <span class=\"hljs-number\">1</span> {\n        result.<span class=\"hljs-title function_ invoke__\">push</span>(num)\n    }\n    result\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">basic</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">trial_division</span>(<span class=\"hljs-number\">9</span>), <span class=\"hljs-built_in\">vec!</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">trial_division</span>(<span class=\"hljs-number\">10</span>), <span class=\"hljs-built_in\">vec!</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">trial_division</span>(<span class=\"hljs-number\">11</span>), <span class=\"hljs-built_in\">vec!</span>(<span class=\"hljs-number\">11</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">trial_division</span>(<span class=\"hljs-number\">33</span>), <span class=\"hljs-built_in\">vec!</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">trial_division</span>(<span class=\"hljs-number\">2003</span>), <span class=\"hljs-built_in\">vec!</span>(<span class=\"hljs-number\">2003</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">trial_division</span>(<span class=\"hljs-number\">100001</span>), <span class=\"hljs-built_in\">vec!</span>(<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">9091</span>));\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "DONSIMON92",
      "email": "47272787+DONSIMON92@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}