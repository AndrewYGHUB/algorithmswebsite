{
  "slug": "trie",
  "name": "Trie",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/trie/trie.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/trie/trie.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nA Trie/Prefix Tree is a kind of search tree used to provide quick lookup\nof words/patterns in a set of words. A basic Trie however has O(n^2) space complexity\nmaking it impractical in practice. It however provides O(max(search_string, length of\nlongest word)) lookup time making it an optimal approach when space is not an issue.\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TrieNode</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.nodes: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, TrieNode] = <span class=\"hljs-built_in\">dict</span>()  <span class=\"hljs-comment\"># Mapping from char to TrieNode</span>\n        self.is_leaf = <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_many</span>(<span class=\"hljs-params\">self, words: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Inserts a list of words into the Trie\n        :param words: list of string words\n        :return: None\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">for</span> word <span class=\"hljs-keyword\">in</span> words:\n            self.insert(word)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-params\">self, word: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Inserts a word into the Trie\n        :param word: word to be inserted\n        :return: None\n        &quot;&quot;&quot;</span>\n        curr = self\n        <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> word:\n            <span class=\"hljs-keyword\">if</span> char <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> curr.nodes:\n                curr.nodes[char] = TrieNode()\n            curr = curr.nodes[char]\n        curr.is_leaf = <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find</span>(<span class=\"hljs-params\">self, word: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Tries to find word in a Trie\n        :param word: word to look for\n        :return: Returns True if word is found, False otherwise\n        &quot;&quot;&quot;</span>\n        curr = self\n        <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> word:\n            <span class=\"hljs-keyword\">if</span> char <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> curr.nodes:\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n            curr = curr.nodes[char]\n        <span class=\"hljs-keyword\">return</span> curr.is_leaf\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-params\">self, word: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Deletes a word in a Trie\n        :param word: word to delete\n        :return: None\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_delete</span>(<span class=\"hljs-params\">curr: TrieNode, word: <span class=\"hljs-built_in\">str</span>, index: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n            <span class=\"hljs-keyword\">if</span> index == <span class=\"hljs-built_in\">len</span>(word):\n                <span class=\"hljs-comment\"># If word does not exist</span>\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> curr.is_leaf:\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n                curr.is_leaf = <span class=\"hljs-literal\">False</span>\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(curr.nodes) == <span class=\"hljs-number\">0</span>\n            char = word[index]\n            char_node = curr.nodes.get(char)\n            <span class=\"hljs-comment\"># If char not in current trie node</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> char_node:\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n            <span class=\"hljs-comment\"># Flag to check if node can be deleted</span>\n            delete_curr = _delete(char_node, word, index + <span class=\"hljs-number\">1</span>)\n            <span class=\"hljs-keyword\">if</span> delete_curr:\n                <span class=\"hljs-keyword\">del</span> curr.nodes[char]\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(curr.nodes) == <span class=\"hljs-number\">0</span>\n            <span class=\"hljs-keyword\">return</span> delete_curr\n\n        _delete(self, word, <span class=\"hljs-number\">0</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_words</span>(<span class=\"hljs-params\">node: TrieNode, word: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Prints all the words in a Trie\n    :param node: root node of Trie\n    :param word: Word variable should be empty at start\n    :return: None\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> node.is_leaf:\n        <span class=\"hljs-built_in\">print</span>(word, end=<span class=\"hljs-string\">&quot; &quot;</span>)\n\n    <span class=\"hljs-keyword\">for</span> key, value <span class=\"hljs-keyword\">in</span> node.nodes.items():\n        print_words(value, word + key)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_trie</span>() -&gt; <span class=\"hljs-built_in\">bool</span>:\n    words = <span class=\"hljs-string\">&quot;banana bananas bandana band apple all beast&quot;</span>.split()\n    root = TrieNode()\n    root.insert_many(words)\n    <span class=\"hljs-comment\"># print_words(root, &quot;&quot;)</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">all</span>(root.find(word) <span class=\"hljs-keyword\">for</span> word <span class=\"hljs-keyword\">in</span> words)\n    <span class=\"hljs-keyword\">assert</span> root.find(<span class=\"hljs-string\">&quot;banana&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> root.find(<span class=\"hljs-string\">&quot;bandanas&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> root.find(<span class=\"hljs-string\">&quot;apps&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span> root.find(<span class=\"hljs-string\">&quot;apple&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span> root.find(<span class=\"hljs-string\">&quot;all&quot;</span>)\n    root.delete(<span class=\"hljs-string\">&quot;all&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> root.find(<span class=\"hljs-string\">&quot;all&quot;</span>)\n    root.delete(<span class=\"hljs-string\">&quot;banana&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> root.find(<span class=\"hljs-string\">&quot;banana&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span> root.find(<span class=\"hljs-string\">&quot;bananas&quot;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_results</span>(<span class=\"hljs-params\">msg: <span class=\"hljs-built_in\">str</span>, passes: <span class=\"hljs-built_in\">bool</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">str</span>(msg), <span class=\"hljs-string\">&quot;works!&quot;</span> <span class=\"hljs-keyword\">if</span> passes <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">&quot;doesn&#x27;t work :(&quot;</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pytests</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-keyword\">assert</span> test_trie()\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; pytests()\n    &quot;&quot;&quot;</span>\n    print_results(<span class=\"hljs-string\">&quot;Testing trie functionality&quot;</span>, test_trie())\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    },
    "javascript": {
      "dir": "Data-Structures/Tree/Trie.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures/Tree/Trie.js",
      "code": "<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">TrieNode</span> = <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TrieNode</span> (key, parent) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">key</span> = key\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">count</span> = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">children</span> = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-literal\">null</span>)\n  <span class=\"hljs-keyword\">if</span> (parent === <span class=\"hljs-literal\">undefined</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">parent</span> = <span class=\"hljs-literal\">null</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">parent</span> = parent\n  }\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Trie</span> () {\n  <span class=\"hljs-comment\">// create only root with null key and parent</span>\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TrieNode</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>)\n}\n\n<span class=\"hljs-comment\">// Recursively finds the occurrence of all words in a given node</span>\n<span class=\"hljs-title class_\">Trie</span>.<span class=\"hljs-property\">findAllWords</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">root, word, output</span>) {\n  <span class=\"hljs-keyword\">if</span> (root === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-keyword\">if</span> (root.<span class=\"hljs-property\">count</span> &gt; <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> output === <span class=\"hljs-string\">&#x27;object&#x27;</span>) { output.<span class=\"hljs-title function_\">push</span>({ word, <span class=\"hljs-attr\">count</span>: root.<span class=\"hljs-property\">count</span> }) }\n  }\n  <span class=\"hljs-keyword\">let</span> key\n  <span class=\"hljs-keyword\">for</span> (key <span class=\"hljs-keyword\">in</span> root.<span class=\"hljs-property\">children</span>) {\n    word += key\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">findAllWords</span>(root.<span class=\"hljs-property\">children</span>[key], word, output)\n    word = word.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>)\n  }\n}\n\n<span class=\"hljs-title class_\">Trie</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">insert</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">word</span>) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> word !== <span class=\"hljs-string\">&#x27;string&#x27;</span>) <span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-keyword\">if</span> (word === <span class=\"hljs-string\">&#x27;&#x27;</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>.<span class=\"hljs-property\">count</span> += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span>\n  }\n  <span class=\"hljs-keyword\">let</span> node = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>\n  <span class=\"hljs-keyword\">const</span> len = word.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">let</span> i\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n    <span class=\"hljs-keyword\">if</span> (node.<span class=\"hljs-property\">children</span>[word.<span class=\"hljs-title function_\">charAt</span>(i)] === <span class=\"hljs-literal\">undefined</span>) { node.<span class=\"hljs-property\">children</span>[word.<span class=\"hljs-title function_\">charAt</span>(i)] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TrieNode</span>(word.<span class=\"hljs-title function_\">charAt</span>(i), node) }\n    node = node.<span class=\"hljs-property\">children</span>[word.<span class=\"hljs-title function_\">charAt</span>(i)]\n  }\n  node.<span class=\"hljs-property\">count</span> += <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-title class_\">Trie</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">findPrefix</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">word</span>) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> word !== <span class=\"hljs-string\">&#x27;string&#x27;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-keyword\">let</span> node = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>\n  <span class=\"hljs-keyword\">const</span> len = word.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">let</span> i\n  <span class=\"hljs-comment\">// After end of this loop node will be at desired prefix</span>\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n    <span class=\"hljs-keyword\">if</span> (node.<span class=\"hljs-property\">children</span>[word.<span class=\"hljs-title function_\">charAt</span>(i)] === <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">// No such prefix exists</span>\n    node = node.<span class=\"hljs-property\">children</span>[word.<span class=\"hljs-title function_\">charAt</span>(i)]\n  }\n  <span class=\"hljs-keyword\">return</span> node\n}\n\n<span class=\"hljs-title class_\">Trie</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">remove</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">word, count</span>) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> word !== <span class=\"hljs-string\">&#x27;string&#x27;</span>) <span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> count !== <span class=\"hljs-string\">&#x27;number&#x27;</span>) count = <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (count &lt;= <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span>\n\n  <span class=\"hljs-comment\">// for empty string just delete count of root</span>\n  <span class=\"hljs-keyword\">if</span> (word === <span class=\"hljs-string\">&#x27;&#x27;</span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>.<span class=\"hljs-property\">count</span> &gt;= count) <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>.<span class=\"hljs-property\">count</span> -= count\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>.<span class=\"hljs-property\">count</span> = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">return</span>\n  }\n\n  <span class=\"hljs-keyword\">let</span> child = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>\n  <span class=\"hljs-keyword\">const</span> len = word.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">let</span> i, key\n  <span class=\"hljs-comment\">// child: node which is to be deleted</span>\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n    key = word.<span class=\"hljs-title function_\">charAt</span>(i)\n    <span class=\"hljs-keyword\">if</span> (child.<span class=\"hljs-property\">children</span>[key] === <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-keyword\">return</span>\n    child = child.<span class=\"hljs-property\">children</span>[key]\n  }\n\n  <span class=\"hljs-comment\">// Delete no of occurrences specified</span>\n  <span class=\"hljs-keyword\">if</span> (child.<span class=\"hljs-property\">count</span> &gt;= count) child.<span class=\"hljs-property\">count</span> -= count\n  <span class=\"hljs-keyword\">else</span> child.<span class=\"hljs-property\">count</span> = <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-comment\">// If some occurrences are left we dont delete it or else</span>\n  <span class=\"hljs-comment\">// if the object forms some other objects prefix we dont delete it</span>\n  <span class=\"hljs-comment\">// For checking an empty object</span>\n  <span class=\"hljs-comment\">// https://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object</span>\n  <span class=\"hljs-keyword\">if</span> (child.<span class=\"hljs-property\">count</span> &lt;= <span class=\"hljs-number\">0</span> &amp;&amp; (<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(child.<span class=\"hljs-property\">children</span>).<span class=\"hljs-property\">length</span> &amp;&amp; child.<span class=\"hljs-property\">children</span>.<span class=\"hljs-property\">constructor</span> === <span class=\"hljs-title class_\">Object</span>)) {\n    child.<span class=\"hljs-property\">parent</span>.<span class=\"hljs-property\">children</span>[child.<span class=\"hljs-property\">key</span>] = <span class=\"hljs-literal\">undefined</span>\n  }\n}\n\n<span class=\"hljs-title class_\">Trie</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">findAllWords</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">prefix</span>) {\n  <span class=\"hljs-keyword\">const</span> output = []\n  <span class=\"hljs-comment\">// find the node with provided prefix</span>\n  <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">findPrefix</span>(prefix)\n  <span class=\"hljs-comment\">// No such prefix exists</span>\n  <span class=\"hljs-keyword\">if</span> (node === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> output\n  <span class=\"hljs-title class_\">Trie</span>.<span class=\"hljs-title function_\">findAllWords</span>(node, prefix, output)\n  <span class=\"hljs-keyword\">return</span> output\n}\n\n<span class=\"hljs-title class_\">Trie</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">contains</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">word</span>) {\n  <span class=\"hljs-comment\">// find the node with given prefix</span>\n  <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">findPrefix</span>(word)\n  <span class=\"hljs-comment\">// No such word exists</span>\n  <span class=\"hljs-keyword\">if</span> (node === <span class=\"hljs-literal\">null</span> || node.<span class=\"hljs-property\">count</span> === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n}\n\n<span class=\"hljs-title class_\">Trie</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">findOccurences</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">word</span>) {\n  <span class=\"hljs-comment\">// find the node with given prefix</span>\n  <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">findPrefix</span>(word)\n  <span class=\"hljs-comment\">// No such word exists</span>\n  <span class=\"hljs-keyword\">if</span> (node === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">return</span> node.<span class=\"hljs-property\">count</span>\n}\n\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">Trie</span> }\n"
    },
    "c": {
      "dir": "data_structures/trie/trie.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/trie/trie.c",
      "code": "<span class=\"hljs-comment\">/*------------------Trie Data Structure----------------------------------*/</span>\n<span class=\"hljs-comment\">/*-------------Implimented for search a word in dictionary---------------*/</span>\n\n<span class=\"hljs-comment\">/*-----character - 97 used for get the character from the ASCII value-----*/</span>\n\n<span class=\"hljs-comment\">// needed for strnlen</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> _POSIX_C_SOURCE 200809L</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdbool.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ALPHABET_SIZE 26</span>\n\n<span class=\"hljs-comment\">/*--Node in the Trie--*/</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">trie</span> {</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">trie</span> *<span class=\"hljs-title\">children</span>[<span class=\"hljs-title\">ALPHABET_SIZE</span>];</span>\n    <span class=\"hljs-type\">bool</span> end_of_word;\n};\n\n\n<span class=\"hljs-comment\">/*--Create new trie node--*/</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">trie_new</span> <span class=\"hljs-params\">(\n    <span class=\"hljs-keyword\">struct</span> trie ** trie\n)</span>\n{\n    *trie = <span class=\"hljs-built_in\">calloc</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> trie));\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">NULL</span> == *trie) {\n        <span class=\"hljs-comment\">// memory allocation failed</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n\n<span class=\"hljs-comment\">/*--Insert new word to Trie--*/</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">trie_insert</span> <span class=\"hljs-params\">(\n    <span class=\"hljs-keyword\">struct</span> trie * trie,\n    <span class=\"hljs-type\">char</span> *word,\n    <span class=\"hljs-type\">unsigned</span> word_len\n)</span>\n{\n    <span class=\"hljs-type\">int</span> ret = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">// this is the end of this word; add an end-of-word marker here and we&#x27;re</span>\n    <span class=\"hljs-comment\">// done.</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> == word_len) {\n        trie-&gt;end_of_word = <span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">// if you have some more complex mapping, you could introduce one here. In</span>\n    <span class=\"hljs-comment\">// this easy example, we just subtract &#x27;a&#x27; (97) from it, meaning that &#x27;a&#x27; is 0,</span>\n    <span class=\"hljs-comment\">// &#x27;b&#x27; is 1, and so on.</span>\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> index = word[<span class=\"hljs-number\">0</span>] - <span class=\"hljs-string\">&#x27;a&#x27;</span>;\n\n    <span class=\"hljs-comment\">// this index is outside the alphabet size; indexing this would mean an</span>\n    <span class=\"hljs-comment\">// out-of-bound memory access (bad!). If you introduce a separate map</span>\n    <span class=\"hljs-comment\">// function for indexing, then you could move the out-of-bounds index in</span>\n    <span class=\"hljs-comment\">// there.</span>\n    <span class=\"hljs-keyword\">if</span> (ALPHABET_SIZE &lt;= index) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n    }\n\n    <span class=\"hljs-comment\">// The index does not exist yet, allocate it.</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">NULL</span> == trie-&gt;children[index]) {\n        ret = trie_new(&amp;trie-&gt;children[index]);\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">-1</span> == ret) {\n            <span class=\"hljs-comment\">// creating new trie node failed</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n        }\n    }\n    \n    <span class=\"hljs-comment\">// recurse into the child node</span>\n    <span class=\"hljs-keyword\">return</span> trie_insert(\n        <span class=\"hljs-comment\">/* trie = */</span> trie-&gt;children[index],\n        <span class=\"hljs-comment\">/* word = */</span> word + <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-comment\">/* word_len = */</span> word_len - <span class=\"hljs-number\">1</span>\n    );\n}\n\n\n<span class=\"hljs-comment\">/*--Search a word in the Trie--*/</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">trie_search</span><span class=\"hljs-params\">(\n    <span class=\"hljs-keyword\">struct</span> trie * trie,\n    <span class=\"hljs-type\">char</span> *word,\n    <span class=\"hljs-type\">unsigned</span> word_len,\n    <span class=\"hljs-keyword\">struct</span> trie ** result\n)</span>\n{\n    <span class=\"hljs-comment\">// we found a match</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> == word_len) {\n        *result = trie;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">// same here as in trie_insert, if you have a separate index mapping, add</span>\n    <span class=\"hljs-comment\">// it here. In this example, we just subtract &#x27;a&#x27;.</span>\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> index = word[<span class=\"hljs-number\">0</span>] - <span class=\"hljs-string\">&#x27;a&#x27;</span>;\n\n    <span class=\"hljs-comment\">// This word contains letters outside the alphabet length; it&#x27;s invalid.</span>\n    <span class=\"hljs-comment\">// Remember to do this to prevent buffer overflows.</span>\n    <span class=\"hljs-keyword\">if</span> (ALPHABET_SIZE &lt;= index) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n    }\n\n    <span class=\"hljs-comment\">// No match</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">NULL</span> == trie-&gt;children[index]) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n    }\n\n    <span class=\"hljs-comment\">// traverse the trie</span>\n    <span class=\"hljs-keyword\">return</span> trie_search(\n        <span class=\"hljs-comment\">/* trie = */</span> trie-&gt;children[index],\n        <span class=\"hljs-comment\">/* word = */</span> word + <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-comment\">/* word_len = */</span> word_len - <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-comment\">/* result = */</span> result\n    );\n}\n\n<span class=\"hljs-comment\">/*---Return all the related words------*/</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">trie_print</span> <span class=\"hljs-params\">(\n    <span class=\"hljs-keyword\">struct</span> trie * trie,\n    <span class=\"hljs-type\">char</span> prefix[],\n    <span class=\"hljs-type\">unsigned</span> prefix_len\n)</span>\n{\n\n    <span class=\"hljs-comment\">// An end-of-word marker means that this is a complete word, print it.</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span> == trie-&gt;end_of_word) {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%.*s\\n&quot;</span>, prefix_len, prefix);\n    }\n\n    <span class=\"hljs-comment\">// However, there can be longer words with the same prefix; traverse into</span>\n    <span class=\"hljs-comment\">// those as well.</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; ALPHABET_SIZE; i++) {\n\n        <span class=\"hljs-comment\">// No words on this character</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">NULL</span> == trie-&gt;children[i]) {\n            <span class=\"hljs-keyword\">continue</span>;\n        }\n\n        <span class=\"hljs-comment\">// If you have a separate index mapping, then you&#x27;d need the inverse of</span>\n        <span class=\"hljs-comment\">// the map here. Since we subtracted &#x27;a&#x27; for the index, we can just add</span>\n        <span class=\"hljs-comment\">// &#x27;a&#x27; to get the inverse map function.</span>\n        prefix[prefix_len] = i + <span class=\"hljs-string\">&#x27;a&#x27;</span>;\n\n        <span class=\"hljs-comment\">// traverse the print into the child</span>\n        trie_print(trie-&gt;children[i], prefix, prefix_len + <span class=\"hljs-number\">1</span>);\n    }\n}\n\n\n<span class=\"hljs-comment\">/*------Demonstrate purposes uses text file called dictionary -------*/</span>\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">int</span> ret = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">trie</span> * <span class=\"hljs-title\">root</span> =</span> <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">trie</span> * <span class=\"hljs-title\">trie</span> =</span> <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-type\">char</span> word[<span class=\"hljs-number\">100</span>] = {<span class=\"hljs-number\">0</span>};\n\n    <span class=\"hljs-comment\">// Create a root trie</span>\n    ret = trie_new(&amp;root);\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">-1</span> == ret) {\n        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;Could not create trie\\n&quot;</span>);\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);\n    }\n\n    <span class=\"hljs-comment\">// open the dictionary file</span>\n    FILE *fp = fopen(<span class=\"hljs-string\">&quot;dictionary.txt&quot;</span>, <span class=\"hljs-string\">&quot;r&quot;</span>);\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">NULL</span> == fp) {\n        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;Error while opening dictionary file&quot;</span>);\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);\n    }\n\n    <span class=\"hljs-comment\">// insert all the words from the dictionary</span>\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span> == <span class=\"hljs-built_in\">fscanf</span>(fp, <span class=\"hljs-string\">&quot;%100s\\n&quot;</span>, word)) {\n        ret = trie_insert(root, word, strnlen(word, <span class=\"hljs-number\">100</span>));\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">-1</span> == ret) {\n            <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;Could not insert word into trie\\n&quot;</span>);\n            <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);\n        }\n    }\n\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter keyword: &quot;</span>);\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">1</span> != <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%100s&quot;</span>, word)) {\n            <span class=\"hljs-keyword\">break</span>;\n        }\n\n        <span class=\"hljs-built_in\">printf</span>(\n            <span class=\"hljs-string\">&quot;\\n==========================================================\\n&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n********************* Possible Words ********************\\n&quot;</span>);\n\n        ret = trie_search(root, word, strnlen(word, <span class=\"hljs-number\">100</span>), &amp;trie);\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">-1</span> == ret) {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No results\\n&quot;</span>);\n            <span class=\"hljs-keyword\">continue</span>;\n        }\n\n        trie_print(trie, word, strnlen(word, <span class=\"hljs-number\">100</span>));\n\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n==========================================================\\n&quot;</span>);\n    }\n}\n"
    },
    "go": {
      "dir": "structure/trie/trie.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/structure/trie/trie.go",
      "code": "<span class=\"hljs-comment\">// Package trie provides Trie data structures in golang.</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// Wikipedia: https://en.wikipedia.org/wiki/Trie</span>\n<span class=\"hljs-keyword\">package</span> trie\n\n<span class=\"hljs-comment\">// Node represents each node in Trie.</span>\n<span class=\"hljs-keyword\">type</span> Node <span class=\"hljs-keyword\">struct</span> {\n\tchildren <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">rune</span>]*Node <span class=\"hljs-comment\">// map children nodes</span>\n\tisLeaf   <span class=\"hljs-type\">bool</span>           <span class=\"hljs-comment\">// current node value</span>\n}\n\n<span class=\"hljs-comment\">// NewNode creates a new Trie node with initialized</span>\n<span class=\"hljs-comment\">// children map.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewNode</span><span class=\"hljs-params\">()</span></span> *Node {\n\tn := &amp;Node{}\n\tn.children = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">rune</span>]*Node)\n\tn.isLeaf = <span class=\"hljs-literal\">false</span>\n\t<span class=\"hljs-keyword\">return</span> n\n}\n\n<span class=\"hljs-comment\">// insert a single word at a Trie node.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(n *Node)</span></span> insert(s <span class=\"hljs-type\">string</span>) {\n\tcurr := n\n\t<span class=\"hljs-keyword\">for</span> _, c := <span class=\"hljs-keyword\">range</span> s {\n\t\tnext, ok := curr.children[c]\n\t\t<span class=\"hljs-keyword\">if</span> !ok {\n\t\t\tnext = NewNode()\n\t\t\tcurr.children[c] = next\n\t\t}\n\t\tcurr = next\n\t}\n\tcurr.isLeaf = <span class=\"hljs-literal\">true</span>\n}\n\n<span class=\"hljs-comment\">// Insert zero, one or more words at a Trie node.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(n *Node)</span></span> Insert(s ...<span class=\"hljs-type\">string</span>) {\n\t<span class=\"hljs-keyword\">for</span> _, ss := <span class=\"hljs-keyword\">range</span> s {\n\t\tn.insert(ss)\n\t}\n}\n\n<span class=\"hljs-comment\">// Find  words at a Trie node.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(n *Node)</span></span> Find(s <span class=\"hljs-type\">string</span>) <span class=\"hljs-type\">bool</span> {\n\tnext, ok := n, <span class=\"hljs-literal\">false</span>\n\t<span class=\"hljs-keyword\">for</span> _, c := <span class=\"hljs-keyword\">range</span> s {\n\t\tnext, ok = next.children[c]\n\t\t<span class=\"hljs-keyword\">if</span> !ok {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> next.isLeaf\n}\n\n<span class=\"hljs-comment\">// Capacity returns the number of nodes in the Trie</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(n *Node)</span></span> Capacity() <span class=\"hljs-type\">int</span> {\n\tr := <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">for</span> _, c := <span class=\"hljs-keyword\">range</span> n.children {\n\t\tr += c.Capacity()\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> + r\n}\n\n<span class=\"hljs-comment\">// Size returns the number of words in the Trie</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(n *Node)</span></span> Size() <span class=\"hljs-type\">int</span> {\n\tr := <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">for</span> _, c := <span class=\"hljs-keyword\">range</span> n.children {\n\t\tr += c.Size()\n\t}\n\t<span class=\"hljs-keyword\">if</span> n.isLeaf {\n\t\tr++\n\t}\n\t<span class=\"hljs-keyword\">return</span> r\n}\n\n<span class=\"hljs-comment\">// remove lazily a word from the Trie node, no node is actually removed.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(n *Node)</span></span> remove(s <span class=\"hljs-type\">string</span>) {\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(s) == <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span>\n\t}\n\tnext, ok := n, <span class=\"hljs-literal\">false</span>\n\t<span class=\"hljs-keyword\">for</span> _, c := <span class=\"hljs-keyword\">range</span> s {\n\t\tnext, ok = next.children[c]\n\t\t<span class=\"hljs-keyword\">if</span> !ok {\n\t\t\t<span class=\"hljs-comment\">// word cannot be found - we&#x27;re done !</span>\n\t\t\t<span class=\"hljs-keyword\">return</span>\n\t\t}\n\t}\n\tnext.isLeaf = <span class=\"hljs-literal\">false</span>\n}\n\n<span class=\"hljs-comment\">// Remove zero, one or more words lazily from the Trie, no node is actually removed.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(n *Node)</span></span> Remove(s ...<span class=\"hljs-type\">string</span>) {\n\t<span class=\"hljs-keyword\">for</span> _, ss := <span class=\"hljs-keyword\">range</span> s {\n\t\tn.remove(ss)\n\t}\n}\n\n<span class=\"hljs-comment\">// Compact will remove unecessay nodes, reducing the capacity, returning true if node n itself should be removed.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(n *Node)</span></span> Compact() (remove <span class=\"hljs-type\">bool</span>) {\n\n\t<span class=\"hljs-keyword\">for</span> r, c := <span class=\"hljs-keyword\">range</span> n.children {\n\t\t<span class=\"hljs-keyword\">if</span> c.Compact() {\n\t\t\t<span class=\"hljs-built_in\">delete</span>(n.children, r)\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> !n.isLeaf &amp;&amp; <span class=\"hljs-built_in\">len</span>(n.children) == <span class=\"hljs-number\">0</span>\n}\n"
    },
    "rust": {
      "dir": "src/data_structures/trie.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/data_structures/trie.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n<span class=\"hljs-keyword\">use</span> std::hash::Hash;\n\n<span class=\"hljs-meta\">#[derive(Debug, Default)]</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Node</span>&lt;Key: <span class=\"hljs-built_in\">Default</span>, Type: <span class=\"hljs-built_in\">Default</span>&gt; {\n    children: HashMap&lt;Key, Node&lt;Key, Type&gt;&gt;,\n    value: <span class=\"hljs-type\">Option</span>&lt;Type&gt;,\n}\n\n<span class=\"hljs-meta\">#[derive(Debug, Default)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Trie</span>&lt;Key, Type&gt;\n<span class=\"hljs-keyword\">where</span>\n    Key: <span class=\"hljs-built_in\">Default</span> + <span class=\"hljs-built_in\">Eq</span> + Hash,\n    Type: <span class=\"hljs-built_in\">Default</span>,\n{\n    root: Node&lt;Key, Type&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;Key, Type&gt; Trie&lt;Key, Type&gt;\n<span class=\"hljs-keyword\">where</span>\n    Key: <span class=\"hljs-built_in\">Default</span> + <span class=\"hljs-built_in\">Eq</span> + Hash,\n    Type: <span class=\"hljs-built_in\">Default</span>,\n{\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">Self</span> {\n            root: Node::<span class=\"hljs-title function_ invoke__\">default</span>(),\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, key: <span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">IntoIterator</span>&lt;Item = Key&gt;, value: Type)\n    <span class=\"hljs-keyword\">where</span>\n        Key: <span class=\"hljs-built_in\">Eq</span> + Hash,\n    {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">node</span> = &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.root;\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-keyword\">in</span> key.<span class=\"hljs-title function_ invoke__\">into_iter</span>() {\n            node = node.children.<span class=\"hljs-title function_ invoke__\">entry</span>(c).<span class=\"hljs-title function_ invoke__\">or_insert_with</span>(Node::default);\n        }\n        node.value = <span class=\"hljs-title function_ invoke__\">Some</span>(value);\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get</span>(&amp;<span class=\"hljs-keyword\">self</span>, key: <span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">IntoIterator</span>&lt;Item = Key&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;&amp;Type&gt;\n    <span class=\"hljs-keyword\">where</span>\n        Key: <span class=\"hljs-built_in\">Eq</span> + Hash,\n    {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">node</span> = &amp;<span class=\"hljs-keyword\">self</span>.root;\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-keyword\">in</span> key.<span class=\"hljs-title function_ invoke__\">into_iter</span>() {\n            <span class=\"hljs-keyword\">if</span> node.children.<span class=\"hljs-title function_ invoke__\">contains_key</span>(&amp;c) {\n                node = node.children.<span class=\"hljs-title function_ invoke__\">get</span>(&amp;c).<span class=\"hljs-title function_ invoke__\">unwrap</span>()\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>;\n            }\n        }\n        node.value.<span class=\"hljs-title function_ invoke__\">as_ref</span>()\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_insertion</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">trie</span> = Trie::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(trie.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-string\">&quot;&quot;</span>.<span class=\"hljs-title function_ invoke__\">chars</span>()), <span class=\"hljs-literal\">None</span>);\n\n        trie.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>.<span class=\"hljs-title function_ invoke__\">chars</span>(), <span class=\"hljs-number\">1</span>);\n        trie.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&quot;foobar&quot;</span>.<span class=\"hljs-title function_ invoke__\">chars</span>(), <span class=\"hljs-number\">2</span>);\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">trie</span> = Trie::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-built_in\">assert_eq!</span>(trie.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]), <span class=\"hljs-literal\">None</span>);\n\n        trie.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">1</span>);\n        trie.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>], <span class=\"hljs-number\">2</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_get</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">trie</span> = Trie::<span class=\"hljs-title function_ invoke__\">new</span>();\n        trie.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>.<span class=\"hljs-title function_ invoke__\">chars</span>(), <span class=\"hljs-number\">1</span>);\n        trie.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&quot;foobar&quot;</span>.<span class=\"hljs-title function_ invoke__\">chars</span>(), <span class=\"hljs-number\">2</span>);\n        trie.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&quot;bar&quot;</span>.<span class=\"hljs-title function_ invoke__\">chars</span>(), <span class=\"hljs-number\">3</span>);\n        trie.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&quot;baz&quot;</span>.<span class=\"hljs-title function_ invoke__\">chars</span>(), <span class=\"hljs-number\">4</span>);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(trie.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>.<span class=\"hljs-title function_ invoke__\">chars</span>()), <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;<span class=\"hljs-number\">1</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(trie.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-string\">&quot;food&quot;</span>.<span class=\"hljs-title function_ invoke__\">chars</span>()), <span class=\"hljs-literal\">None</span>);\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">trie</span> = Trie::<span class=\"hljs-title function_ invoke__\">new</span>();\n        trie.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], <span class=\"hljs-number\">1</span>);\n        trie.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">42</span>], <span class=\"hljs-number\">2</span>);\n        trie.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1000</span>], <span class=\"hljs-number\">3</span>);\n        trie.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">32</span>], <span class=\"hljs-number\">4</span>);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(trie.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1000</span>]), <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;<span class=\"hljs-number\">3</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(trie.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">43</span>, <span class=\"hljs-number\">44</span>, <span class=\"hljs-number\">45</span>]), <span class=\"hljs-literal\">None</span>);\n    }\n}\n"
    },
    "ruby": {
      "dir": "data_structures/tries/trie.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/tries/trie.rb",
      "code": "<span class=\"hljs-comment\"># A Trie (prefix tree) is a kind of search tree used to provide quick lookup</span>\n<span class=\"hljs-comment\"># of words/patterns in a set of words. A basic Trie however has O(n^2)</span>\n<span class=\"hljs-comment\"># space complexity making it impractical in practice.</span>\n<span class=\"hljs-comment\"># It however provides O(max(search_string, length of longest word))</span>\n<span class=\"hljs-comment\"># lookup time making it an optimal approach when space is not an issue.</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>\n  <span class=\"hljs-keyword\">attr_reader</span>   <span class=\"hljs-symbol\">:value</span>, <span class=\"hljs-symbol\">:next</span>\n  <span class=\"hljs-keyword\">attr_accessor</span> <span class=\"hljs-symbol\">:word</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">initialize</span>(<span class=\"hljs-params\">value</span>)\n    <span class=\"hljs-variable\">@value</span> = value\n    <span class=\"hljs-variable\">@word</span>  = <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-variable\">@next</span>  = []\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Trie</span>\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">initialize</span>\n    <span class=\"hljs-variable\">@root</span> = <span class=\"hljs-title class_\">Node</span>.new(<span class=\"hljs-string\">&#x27;*&#x27;</span>)\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_many</span>(<span class=\"hljs-params\">word</span>)\n    letters = word.chars\n    base    = <span class=\"hljs-variable\">@root</span>\n\n    letters.each <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">letter</span>|\n      base = insert(letter, base.<span class=\"hljs-keyword\">next</span>)\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">include?</span>(<span class=\"hljs-params\">word</span>)\n    letters = word.chars\n    base    = <span class=\"hljs-variable\">@root</span>\n\n    letters.all? <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">letter</span>|\n      base = find(letter, base.<span class=\"hljs-keyword\">next</span>)\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  private\n\n  <span class=\"hljs-comment\"># check if it already exists</span>\n  <span class=\"hljs-comment\"># if not add character to node</span>\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-params\">character, trie</span>)\n    found = trie.find <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">n</span>|\n      n.value == character\n    <span class=\"hljs-keyword\">end</span>\n\n    add_node(character, trie) <span class=\"hljs-keyword\">unless</span> found\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_node</span>(<span class=\"hljs-params\">character, trie</span>)\n    <span class=\"hljs-title class_\">Node</span>.new(character).tap <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">new_node</span>|\n      trie &lt;&lt; new_node\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find</span>(<span class=\"hljs-params\">character, trie</span>)\n    trie.find <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">n</span>|\n      n.value == character\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\ntrie = Trie.new\ntrie.insert_many(<span class=\"hljs-string\">&#x27;Dogs&#x27;</span>)\ntrie.insert_many(<span class=\"hljs-string\">&#x27;South&#x27;</span>)\ntrie.insert_many(<span class=\"hljs-string\">&#x27;Cape Town&#x27;</span>)\n\nputs trie.<span class=\"hljs-keyword\">include</span>?(<span class=\"hljs-string\">&#x27;Cape Town&#x27;</span>)\n<span class=\"hljs-comment\"># =&gt; true</span>\n\nputs trie.<span class=\"hljs-keyword\">include</span>?(<span class=\"hljs-string\">&#x27;not presented&#x27;</span>)\n<span class=\"hljs-comment\"># =&gt; false</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Dimitri Belopopsky",
      "email": "ShadowMitia@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "lakhan_nad",
      "email": "lakhannad1999@gmail.com",
      "commits": 1
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Ariel Alfonso Triana Pérez",
      "email": "61637781+ArielTriana@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "xavier268",
      "email": "xavier268@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ranadeep Biswas",
      "email": "ranadip.bswas@gmail.com",
      "commits": 1
    },
    {
      "name": "Daniel Beecham",
      "email": "daniel@lunix.se",
      "commits": 1
    },
    {
      "name": "Carlos Rafael",
      "email": "carlosk2gunn@hotmail.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Edward Nuno",
      "email": "GOD11341258@gmail.com",
      "commits": 1
    },
    {
      "name": "Sherman Hui",
      "email": "11592023+shermanhui@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sangeet K",
      "email": "sangeethk.137@gmail.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Javon Davis",
      "email": "JavonDavis@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Keshav Bohra",
      "email": "keshav2016@gmail.com",
      "commits": 2
    },
    {
      "name": "Shashike Dissanayake",
      "email": "shashikedissanayake@gmail.com",
      "commits": 3
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}