{
  "slug": "tries",
  "name": "Tries",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./DataStructures/Tries/Trie.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/DataStructures/Tries/Trie.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">DataStructures.Tries</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> A Trie is a data structure (particular case of m-ary tree) used to efficiently represent strings with common prefixes.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Originally posed by E. Fredkin in 1960.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Fredkin, Edward (Sept. 1960), &quot;Trie Memory&quot;, Communications of the ACM 3 (9): 490-499.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Its name is due to retrieval because its main application is in the field of &quot;Information Retrieval&quot; (information retrieval).</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Trie</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> This character marks the end of a string.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">char</span> Mark = <span class=\"hljs-string\">&#x27;$&#x27;</span>;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> This property represents the root node of the trie.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> TrieNode root;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;Trie&quot;/&gt;</span> class. This instances was created without text strings, generating the root node of the trie, without children.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Trie</span>()</span>\n        {\n            root = <span class=\"hljs-keyword\">new</span> TrieNode(Mark);\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;Trie&quot;/&gt;</span> class. Given a set of text strings, each of those strings inserts them into the trie using the Insert (string) method.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;words&quot;&gt;</span>The array with text strings to insert in the trie.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Trie</span>(<span class=\"hljs-params\">IEnumerable&lt;<span class=\"hljs-built_in\">string</span>&gt; words</span>)\n            : <span class=\"hljs-title\">this</span>()</span>\n        {\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-built_in\">string</span> s <span class=\"hljs-keyword\">in</span> words)\n            {\n                Insert(s);\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Insert a string s to the trie. The $ mark is added to the end of the chain and then it is added, this in order to indicate the end of the chain in the trie.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;s&quot;&gt;</span>The string to insert into the trie.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Insert</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> s</span>)</span>\n        {\n            s += Mark;\n\n            <span class=\"hljs-built_in\">int</span> index = <span class=\"hljs-number\">0</span>;\n            TrieNode match = PrefixQuery(s, <span class=\"hljs-keyword\">ref</span> index);\n\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = index; i &lt; s.Length; i++)\n            {\n                TrieNode t = <span class=\"hljs-keyword\">new</span>(s[i], match);\n                match[s[i]] = t;\n                match = t;\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Remove a text string from the trie.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;s&quot;&gt;</span>The text string to be removed from the trie.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Remove</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> s</span>)</span>\n        {\n            s += Mark;\n            <span class=\"hljs-built_in\">int</span> index = <span class=\"hljs-number\">0</span>;\n            TrieNode match = PrefixQuery(s, <span class=\"hljs-keyword\">ref</span> index);\n            <span class=\"hljs-keyword\">while</span>(match.IsLeaf())\n            {\n                <span class=\"hljs-built_in\">char</span> c = match.Value;\n                <span class=\"hljs-keyword\">if</span>(match.Parent == <span class=\"hljs-literal\">null</span>)\n                {\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n\n                match = match.Parent;\n                match.Children.Remove(c);\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Know if a text string is in the trie.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;s&quot;&gt;</span>The string s that you want to know if it is in the trie.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>If the string is found, it returns true, otherwise false.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">Find</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> s</span>)</span>\n        {\n            <span class=\"hljs-built_in\">int</span> index = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">return</span> PrefixQuery(s + Mark, <span class=\"hljs-keyword\">ref</span> index).IsLeaf();\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> This method analyzes which is the longest common prefix of a string s in the trie. If the string is in the trie then it is equivalent to doing Find (s).</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;s&quot;&gt;</span>The string for which you want to know the longest common prefix.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;index&quot;&gt;</span>The index to which the longest common prefix goes.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Returns the longest common prefix node found in the trie with the string s.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> TrieNode <span class=\"hljs-title\">PrefixQuery</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> s, <span class=\"hljs-keyword\">ref</span> <span class=\"hljs-built_in\">int</span> index</span>)</span>\n        {\n            TrieNode current = root;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; s.Length &amp;&amp; current != <span class=\"hljs-literal\">null</span>; i++)\n            {\n                <span class=\"hljs-keyword\">if</span> (current[s[i]] != <span class=\"hljs-literal\">null</span>)\n                {\n                    current = current[s[i]] ?? <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> NullReferenceException();\n                    index = i + <span class=\"hljs-number\">1</span>;\n                }\n                <span class=\"hljs-keyword\">else</span>\n                {\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> current ?? <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> NullReferenceException();\n        }\n    }\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}