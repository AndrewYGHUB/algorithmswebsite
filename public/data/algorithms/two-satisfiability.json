{
  "slug": "two-satisfiability",
  "name": "Two Satisfiability",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/graph/two_satisfiability.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/graph/two_satisfiability.rs",
      "code": "<span class=\"hljs-keyword\">use</span> super::strongly_connected_components::StronglyConnectedComponents <span class=\"hljs-keyword\">as</span> SCCs;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Condition</span> = (<span class=\"hljs-type\">i64</span>, <span class=\"hljs-type\">i64</span>);\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Graph</span> = <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;&gt;;\n\n<span class=\"hljs-meta\">#[inline]</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">variable</span>(var: <span class=\"hljs-type\">i64</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\n    <span class=\"hljs-keyword\">if</span> var &lt; <span class=\"hljs-number\">0</span> {\n        (((-var) &lt;&lt; <span class=\"hljs-number\">1</span>) + <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>\n    } <span class=\"hljs-keyword\">else</span> {\n        (var &lt;&lt; <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>\n    }\n}\n\n<span class=\"hljs-comment\">/// Returns an assignment that satisfies all the constraints, or a variable</span>\n<span class=\"hljs-comment\">/// that makes such an assignment impossible. Variables should be numbered</span>\n<span class=\"hljs-comment\">/// from 1 to n, and a negative number -m corresponds to the negated variable</span>\n<span class=\"hljs-comment\">/// m. For more information about this problem, please visit:</span>\n<span class=\"hljs-comment\">/// https://en.wikipedia.org/wiki/2-satisfiability</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">solve_two_satisfiability</span>(\n    expression: &amp;[Condition],\n    num_variables: <span class=\"hljs-type\">usize</span>,\n) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Result</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">bool</span>&gt;, <span class=\"hljs-type\">i64</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">num_verts</span> = (num_variables + <span class=\"hljs-number\">1</span>) &lt;&lt; <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span> = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">sccs</span> = SCCs::<span class=\"hljs-title function_ invoke__\">new</span>(num_verts);\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">adj</span> = Graph::<span class=\"hljs-title function_ invoke__\">new</span>();\n    adj.<span class=\"hljs-title function_ invoke__\">resize</span>(num_verts, <span class=\"hljs-built_in\">vec!</span>[]);\n    expression.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">for_each</span>(|cond| {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">v1</span> = <span class=\"hljs-title function_ invoke__\">variable</span>(cond.<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">v2</span> = <span class=\"hljs-title function_ invoke__\">variable</span>(cond.<span class=\"hljs-number\">1</span>);\n        adj[v1 ^ <span class=\"hljs-number\">1</span>].<span class=\"hljs-title function_ invoke__\">push</span>(v2);\n        adj[v2 ^ <span class=\"hljs-number\">1</span>].<span class=\"hljs-title function_ invoke__\">push</span>(v1);\n    });\n    sccs.<span class=\"hljs-title function_ invoke__\">find_components</span>(&amp;adj);\n    result.<span class=\"hljs-title function_ invoke__\">resize</span>(num_variables + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">var</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">2</span>..num_verts).<span class=\"hljs-title function_ invoke__\">step_by</span>(<span class=\"hljs-number\">2</span>) {\n        <span class=\"hljs-keyword\">if</span> sccs.component[var] == sccs.component[var ^ <span class=\"hljs-number\">1</span>] {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Err</span>((var &gt;&gt; <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i64</span>);\n        }\n        <span class=\"hljs-comment\">// if a variable isn&#x27;t</span>\n        <span class=\"hljs-keyword\">if</span> sccs.component[var] &lt; sccs.component[var ^ <span class=\"hljs-number\">1</span>] {\n            result[var &gt;&gt; <span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">true</span>;\n        }\n    }\n    <span class=\"hljs-title function_ invoke__\">Ok</span>(result)\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> std::thread;\n\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">check_answer</span>(expression: &amp;[Condition], answers: &amp;[<span class=\"hljs-type\">bool</span>]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">ok</span> = <span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-keyword\">for</span> &amp;(c1, c2) <span class=\"hljs-keyword\">in</span> expression {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">cv</span> = <span class=\"hljs-literal\">false</span>;\n            <span class=\"hljs-keyword\">if</span> c1 &lt; <span class=\"hljs-number\">0</span> {\n                cv |= !answers[-c1 <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>];\n            } <span class=\"hljs-keyword\">else</span> {\n                cv |= answers[c1 <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>];\n            }\n            <span class=\"hljs-keyword\">if</span> c2 &lt; <span class=\"hljs-number\">0</span> {\n                cv |= !answers[-c2 <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>];\n            } <span class=\"hljs-keyword\">else</span> {\n                cv |= answers[c2 <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>];\n            }\n            ok &amp;= cv;\n        }\n        ok\n    }\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">basic_test</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">conds</span> = <span class=\"hljs-built_in\">vec!</span>[(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>), (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">solve_two_satisfiability</span>(&amp;conds, <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert!</span>(res.<span class=\"hljs-title function_ invoke__\">is_ok</span>());\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">check_answer</span>(&amp;conds, &amp;res.<span class=\"hljs-title function_ invoke__\">unwrap</span>()));\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">conds</span> = <span class=\"hljs-built_in\">vec!</span>[(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>), (-<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">2</span>)];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">solve_two_satisfiability</span>(&amp;conds, <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert!</span>(res.<span class=\"hljs-title function_ invoke__\">is_ok</span>());\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">check_answer</span>(&amp;conds, &amp;res.<span class=\"hljs-title function_ invoke__\">unwrap</span>()));\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">conds</span> = <span class=\"hljs-built_in\">vec!</span>[];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">solve_two_satisfiability</span>(&amp;conds, <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert!</span>(res.<span class=\"hljs-title function_ invoke__\">is_ok</span>());\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">check_answer</span>(&amp;conds, &amp;res.<span class=\"hljs-title function_ invoke__\">unwrap</span>()));\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">conds</span> = <span class=\"hljs-built_in\">vec!</span>[(-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>), (-<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">2</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">solve_two_satisfiability</span>(&amp;conds, <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert!</span>(res.<span class=\"hljs-title function_ invoke__\">is_err</span>());\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-meta\">#[ignore]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">big_test</span>() {\n        <span class=\"hljs-comment\">// We should spawn a new thread and set its stack size to something</span>\n        <span class=\"hljs-comment\">// big (256MB in this case), because doing DFS (for finding SCCs) is</span>\n        <span class=\"hljs-comment\">// a stack-intensive operation. 256MB should be enough for 3e5</span>\n        <span class=\"hljs-comment\">// variables though.</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">builder</span> = thread::Builder::<span class=\"hljs-title function_ invoke__\">new</span>().<span class=\"hljs-title function_ invoke__\">stack_size</span>(<span class=\"hljs-number\">256</span> * <span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">1024</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">handler</span> = builder\n            .<span class=\"hljs-title function_ invoke__\">spawn</span>(|| {\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">num_conds</span> = <span class=\"hljs-number\">3e5</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i64</span>;\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">conds</span> = <span class=\"hljs-built_in\">vec!</span>[];\n                <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..num_conds {\n                    conds.<span class=\"hljs-title function_ invoke__\">push</span>((i, -(i + <span class=\"hljs-number\">1</span>)));\n                }\n                conds.<span class=\"hljs-title function_ invoke__\">push</span>((num_conds, num_conds));\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">solve_two_satisfiability</span>(&amp;conds, num_conds <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>);\n                <span class=\"hljs-built_in\">assert!</span>(res.<span class=\"hljs-title function_ invoke__\">is_ok</span>());\n                <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">check_answer</span>(&amp;conds, &amp;res.<span class=\"hljs-title function_ invoke__\">unwrap</span>()));\n            })\n            .<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n        handler.<span class=\"hljs-title function_ invoke__\">join</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Erfan Khadem",
      "email": "45465346+er888kh@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}