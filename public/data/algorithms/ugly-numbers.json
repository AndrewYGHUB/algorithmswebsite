{
  "slug": "ugly-numbers",
  "name": "Ugly Numbers",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/ugly_numbers.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/ugly_numbers.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nUgly numbers are numbers whose only prime factors are 2, 3 or 5. The sequence\r\n1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, … shows the first 11 ugly numbers. By convention,\r\n1 is included.\r\nGiven an integer n, we have to find the nth ugly number.\r\n\r\nFor more details, refer this article\r\nhttps://www.geeksforgeeks.org/ugly-numbers/\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">ugly_numbers</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Returns the nth ugly number.\r\n    &gt;&gt;&gt; ugly_numbers(100)\r\n    1536\r\n    &gt;&gt;&gt; ugly_numbers(0)\r\n    1\r\n    &gt;&gt;&gt; ugly_numbers(20)\r\n    36\r\n    &gt;&gt;&gt; ugly_numbers(-5)\r\n    1\r\n    &gt;&gt;&gt; ugly_numbers(-5.5)\r\n    Traceback (most recent call last):\r\n        ...\r\n    TypeError: &#x27;float&#x27; object cannot be interpreted as an integer\r\n    &quot;&quot;&quot;</span>\r\n    ugly_nums = [<span class=\"hljs-number\">1</span>]\r\n\r\n    i2, i3, i5 = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>\r\n    next_2 = ugly_nums[i2] * <span class=\"hljs-number\">2</span>\r\n    next_3 = ugly_nums[i3] * <span class=\"hljs-number\">3</span>\r\n    next_5 = ugly_nums[i5] * <span class=\"hljs-number\">5</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n):\r\n        next_num = <span class=\"hljs-built_in\">min</span>(next_2, next_3, next_5)\r\n        ugly_nums.append(next_num)\r\n        <span class=\"hljs-keyword\">if</span> next_num == next_2:\r\n            i2 += <span class=\"hljs-number\">1</span>\r\n            next_2 = ugly_nums[i2] * <span class=\"hljs-number\">2</span>\r\n        <span class=\"hljs-keyword\">if</span> next_num == next_3:\r\n            i3 += <span class=\"hljs-number\">1</span>\r\n            next_3 = ugly_nums[i3] * <span class=\"hljs-number\">3</span>\r\n        <span class=\"hljs-keyword\">if</span> next_num == next_5:\r\n            i5 += <span class=\"hljs-number\">1</span>\r\n            next_5 = ugly_nums[i5] * <span class=\"hljs-number\">5</span>\r\n    <span class=\"hljs-keyword\">return</span> ugly_nums[-<span class=\"hljs-number\">1</span>]\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\r\n\r\n    testmod(verbose=<span class=\"hljs-literal\">True</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{ugly_numbers(<span class=\"hljs-number\">200</span>) = }</span>&quot;</span>)\r\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/maths/NthUglyNumber.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/maths/NthUglyNumber.java",
      "code": "<span class=\"hljs-comment\">// Ugly numbers are numbers whose only prime factors are 2, 3 or 5. The sequence 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, … shows the first 11 ugly numbers.</span>\n<span class=\"hljs-comment\">// By convention, 1 is included.</span>\n<span class=\"hljs-comment\">// A program to find the nth Ugly number</span>\n<span class=\"hljs-comment\">// Algorithm :</span>\n<span class=\"hljs-comment\">// Initialize three-pointers two, three, and five pointing to zero.</span>\n<span class=\"hljs-comment\">// Take 3 variables nm2, nm3, and nm5 to keep track of next multiple of 2,3 and 5.</span>\n<span class=\"hljs-comment\">// Make an array of size n to store the ugly numbers with 1 at 0th index.</span>\n<span class=\"hljs-comment\">// Initialize a variable next which stores the value of the last element in the array.</span>\n<span class=\"hljs-comment\">// Run a loop n-1 times and perform steps 6,7 and 8.</span>\n<span class=\"hljs-comment\">// Update the values of nm2, nm3, nm5 as ugly[two]*2, ugly[three]*3, ugly[5]*5 respectively.</span>\n<span class=\"hljs-comment\">// Select the minimum value from nm2, nm3, and nm5 and increment the pointer related to it.</span>\n<span class=\"hljs-comment\">// Store the minimum value in variable next and array.</span>\n<span class=\"hljs-comment\">// Return next.</span>\n<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\n\n<span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NthUglyNumber</span> {\n\n    <span class=\"hljs-comment\">/* Function to get the nth ugly number*/</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">getNthUglyNo</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> {\n        <span class=\"hljs-type\">long</span>[] ugly = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">long</span>[n];\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">two</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, three = <span class=\"hljs-number\">0</span>, five = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">nm2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>, nm3 = <span class=\"hljs-number\">3</span>, nm5 = <span class=\"hljs-number\">5</span>;\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">next</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n\n        ugly[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; n; i++) {\n            next = Math.min(nm2, Math.min(nm3, nm5));\n\n            ugly[i] = next;\n            <span class=\"hljs-keyword\">if</span> (next == nm2) {\n                two = two + <span class=\"hljs-number\">1</span>;\n                nm2 = ugly[two] * <span class=\"hljs-number\">2</span>;\n            }\n            <span class=\"hljs-keyword\">if</span> (next == nm3) {\n                three = three + <span class=\"hljs-number\">1</span>;\n                nm3 = ugly[three] * <span class=\"hljs-number\">3</span>;\n            }\n            <span class=\"hljs-keyword\">if</span> (next == nm5) {\n                five = five + <span class=\"hljs-number\">1</span>;\n                nm5 = ugly[five] * <span class=\"hljs-number\">5</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> next;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n        System.out.println(<span class=\"hljs-string\">&quot;Enter the value of n : &quot;</span>);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> sc.nextInt();\n        <span class=\"hljs-type\">NthUglyNumber</span> <span class=\"hljs-variable\">ob</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NthUglyNumber</span>();\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">ugly</span> <span class=\"hljs-operator\">=</span> ob.getNthUglyNo(n);\n        System.out.println(<span class=\"hljs-string\">&quot;nth Ugly number is : &quot;</span> + ugly);\n    }\n}\n"
    },
    "dart": {
      "dir": "maths/Ugly_numbers.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths/Ugly_numbers.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\n\n<span class=\"hljs-built_in\">int</span> maxDivide(<span class=\"hljs-built_in\">int</span> a, <span class=\"hljs-built_in\">int</span> b) {\n  <span class=\"hljs-keyword\">var</span> n;\n  <span class=\"hljs-keyword\">while</span> (a % b == <span class=\"hljs-number\">0</span>) {\n    n = a / b;\n    a = n.toInt();\n  }\n  <span class=\"hljs-keyword\">return</span> a;\n}\n\n<span class=\"hljs-comment\">/* Function to check if a number is ugly or not */</span>\n<span class=\"hljs-built_in\">bool</span> isUgly(<span class=\"hljs-built_in\">int</span> no) {\n  no = maxDivide(no, <span class=\"hljs-number\">2</span>);\n  no = maxDivide(no, <span class=\"hljs-number\">3</span>);\n  no = maxDivide(no, <span class=\"hljs-number\">5</span>);\n\n  <span class=\"hljs-keyword\">return</span> no == <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-comment\">/* Function to get the nth ugly number*/</span>\n<span class=\"hljs-built_in\">int</span> getNthUglyNo(<span class=\"hljs-built_in\">int</span> n) {\n  <span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-built_in\">int</span> count = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">/* ugly number count */</span>\n\n<span class=\"hljs-comment\">/*Check for all integers untill ugly count \n\tbecomes n*/</span>\n  <span class=\"hljs-keyword\">while</span> (n &gt; count) {\n    i++;\n    <span class=\"hljs-keyword\">if</span> (isUgly(i)) count++;\n  }\n  <span class=\"hljs-keyword\">return</span> i;\n}\n\n<span class=\"hljs-comment\">/* Driver program to test above functions */</span>\n<span class=\"hljs-keyword\">void</span> main() {\n  test(<span class=\"hljs-string\">&quot;getNthUglyNo(150) returns 5832&quot;</span>, () {\n    expect(getNthUglyNo(<span class=\"hljs-number\">150</span>), equals(<span class=\"hljs-number\">5832</span>));\n  });\n\n  test(<span class=\"hljs-string\">&quot;isUgly returns true for 6&quot;</span>, () {\n    expect(isUgly(<span class=\"hljs-number\">6</span>), isTrue);\n  });\n\n  test(<span class=\"hljs-string\">&quot;isUgly returns true for 5832&quot;</span>, () {\n    expect(isUgly(<span class=\"hljs-number\">5832</span>), isTrue);\n  });\n\n  test(<span class=\"hljs-string\">&quot;isUgly returns false for 5833&quot;</span>, () {\n    expect(isUgly(<span class=\"hljs-number\">5833</span>), isFalse);\n  });\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Parowicz",
      "email": "arturparowicz@gmail.com",
      "commits": 1
    },
    {
      "name": "Kushagra Bansal",
      "email": "kushagrabansalajmer@gmail.com",
      "commits": 1
    },
    {
      "name": "Miracle",
      "email": "73017979+RimjhimGupta@users.noreply.github.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}