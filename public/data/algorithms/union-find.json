{
  "slug": "union-find",
  "name": "Union Find",
  "categories": [
    "searches"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Search/UnionFind.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Search/UnionFind.js",
      "code": "<span class=\"hljs-comment\">/**\n * union find data structure for javascript\n *\n * In computer science, a disjoint-set data structure, also called a union–find data structure or merge–find set,\n * is a data structure that stores a collection of disjoint (non-overlapping) sets. Equivalently, it stores a partition\n * of a set into disjoint subsets. It provides operations for adding new sets, merging sets (replacing them by their union),\n * and finding a representative member of a set.\n * The last operation allows to find out efficiently if any two elements are in the same or different sets.\n *\n * Disjoint-set data structures play a key role in Kruskal&#x27;s algorithm for finding the minimum spanning tree of a graph.\n * The importance of minimum spanning trees means that disjoint-set data structures underlie a wide variety of algorithms.\n * In addition, disjoint-set data structures also have applications to symbolic computation, as well in compilers,\n * especially for register allocation problems.\n *\n * you can learn more on disjoint-set / union–find data structure at https://en.wikipedia.org/wiki/Disjoint-set_data_structure\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">UnionFind</span> (n, key) {\n  <span class=\"hljs-keyword\">if</span> (!(<span class=\"hljs-variable language_\">this</span> <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">UnionFind</span>)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UnionFind</span>(n)\n  <span class=\"hljs-keyword\">if</span> (key &amp;&amp; <span class=\"hljs-keyword\">typeof</span> key !== <span class=\"hljs-string\">&#x27;function&#x27;</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;key has to be a function or else left undefined&#x27;</span>)\n  }\n  <span class=\"hljs-keyword\">let</span> cnt, length\n  <span class=\"hljs-comment\">// init Union Find with number of distinct groups. Each group will be referred to as index of the array of size &#x27;size&#x27; starting at 0.</span>\n  <span class=\"hljs-comment\">// Provide an optional key function that maps these indices. I.e. for the groups starting with 1 provide function(a){return a-1;}. The default value is function(a){return a;}.</span>\n  key = key || <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">a</span>) { <span class=\"hljs-keyword\">return</span> a }\n  cnt = length = n\n  <span class=\"hljs-keyword\">const</span> id = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(n)\n  <span class=\"hljs-keyword\">const</span> sz = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(n)\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n    id[i] = i\n    sz[i] = <span class=\"hljs-number\">1</span>\n  }\n  <span class=\"hljs-comment\">// Returns the number of elements of uf object.</span>\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> length\n  }\n  <span class=\"hljs-comment\">// Returns the number of distinct groups left inside the object.</span>\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">count</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> cnt\n  }\n  <span class=\"hljs-comment\">// Return the root (value) of the group in which p is.</span>\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">find</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) {\n    p = <span class=\"hljs-title function_\">key</span>(p)\n    <span class=\"hljs-keyword\">while</span> (p !== id[p]) {\n      id[p] = id[id[p]]\n      p = id[p]\n    }\n    <span class=\"hljs-keyword\">return</span> p\n  }\n  <span class=\"hljs-comment\">// Returns true if p and p are both in same group, false otherwise.</span>\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connected</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p, q</span>) {\n    p = <span class=\"hljs-title function_\">key</span>(p)\n    q = <span class=\"hljs-title function_\">key</span>(q)\n    <span class=\"hljs-title function_\">ensureIndexWithinBounds</span>(p, q)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">find</span>(p) === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">find</span>(q)\n  }\n  <span class=\"hljs-comment\">// Combine elements in groups p and q into a single group. In other words connect the two groups.</span>\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">union</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p, q</span>) {\n    p = <span class=\"hljs-title function_\">key</span>(p)\n    q = <span class=\"hljs-title function_\">key</span>(q)\n    <span class=\"hljs-title function_\">ensureIndexWithinBounds</span>(p, q)\n    <span class=\"hljs-keyword\">const</span> i = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">find</span>(p)\n    <span class=\"hljs-keyword\">const</span> j = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">find</span>(q)\n    <span class=\"hljs-keyword\">if</span> (i === j) <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">if</span> (sz[i] &lt; sz[j]) {\n      id[i] = j; sz[j] += sz[i]\n    } <span class=\"hljs-keyword\">else</span> {\n      id[j] = i; sz[i] += sz[j]\n    }\n    cnt--\n  }\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ensureIndexWithinBounds</span> (args) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-variable language_\">arguments</span>.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n      <span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-variable language_\">arguments</span>[i]\n      <span class=\"hljs-keyword\">if</span> (p &gt;= length) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Index out of bounds. The maximum index can be length-1&#x27;</span>)\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">UnionFind</span> }\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/searches/UnionFind.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/searches/UnionFind.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.searches;\n\n<span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UnionFind</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span>[] p;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span>[] r;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">UnionFind</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> {\n        p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n];\n        r = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n];\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n            p[i] = i;\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">find</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">parent</span> <span class=\"hljs-operator\">=</span> p[i];\n\n        <span class=\"hljs-keyword\">if</span> (i == parent) {\n            <span class=\"hljs-keyword\">return</span> i;\n        }\n\n        <span class=\"hljs-keyword\">return</span> p[i] = find(parent);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">union</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">r0</span> <span class=\"hljs-operator\">=</span> find(x);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">r1</span> <span class=\"hljs-operator\">=</span> find(y);\n\n        <span class=\"hljs-keyword\">if</span> (r1 == r0) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n\n        <span class=\"hljs-keyword\">if</span> (r[r0] &gt; r[r1]) {\n            p[r1] = r0;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (r[r1] &gt; r[r0]) {\n            p[r0] = r1;\n        } <span class=\"hljs-keyword\">else</span> {\n            p[r1] = r0;\n            r[r0]++;\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">count</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">List</span> <span class=\"hljs-variable\">parents</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; p.length; i++) {\n            <span class=\"hljs-keyword\">if</span> (!parents.contains(find(i))) {\n                parents.add(find(i));\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> parents.size();\n    }\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;p &quot;</span> + Arrays.toString(p) + <span class=\"hljs-string\">&quot; r &quot;</span> + Arrays.toString(r) + <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n    }\n\n    <span class=\"hljs-comment\">// Tests</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">UnionFind</span> <span class=\"hljs-variable\">uf</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UnionFind</span>(<span class=\"hljs-number\">5</span>);\n        System.out.println(<span class=\"hljs-string\">&quot;init /w 5 (should print &#x27;p [0, 1, 2, 3, 4] r [0, 0, 0, 0, 0]&#x27;):&quot;</span>);\n        System.out.println(uf);\n\n        uf.union(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n        System.out.println(<span class=\"hljs-string\">&quot;union 1 2 (should print &#x27;p [0, 1, 1, 3, 4] r [0, 1, 0, 0, 0]&#x27;):&quot;</span>);\n        System.out.println(uf);\n\n        uf.union(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\n        System.out.println(<span class=\"hljs-string\">&quot;union 3 4 (should print &#x27;p [0, 1, 1, 3, 3] r [0, 1, 0, 1, 0]&#x27;):&quot;</span>);\n        System.out.println(uf);\n\n        uf.find(<span class=\"hljs-number\">4</span>);\n        System.out.println(<span class=\"hljs-string\">&quot;find 4 (should print &#x27;p [0, 1, 1, 3, 3] r [0, 1, 0, 1, 0]&#x27;):&quot;</span>);\n        System.out.println(uf);\n\n        System.out.println(<span class=\"hljs-string\">&quot;count (should print &#x27;3&#x27;):&quot;</span>);\n        System.out.println(uf.count());\n    }\n}\n"
    },
    "c": {
      "dir": "misc/union_find.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc/union_find.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file union_find.c\n * @brief [Union\n * find](https://en.wikipedia.org/wiki/Disjoint-set_data_structure) algorithm.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX_SIZE 1000 <span class=\"hljs-comment\">/**&lt; maximum number of elements in the set */</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief Find index of or value in an array\n *\n * @param [in,out] p array to search and update\n * @param x value to search\n * @return value at the index `x`\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">find</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *p, <span class=\"hljs-type\">int</span> x)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (x &gt;= MAX_SIZE)\n    {\n        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;Out-of bounds value\\n&quot;</span>);\n        <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);\n    }\n\n    <span class=\"hljs-keyword\">if</span> (p[x] == x)\n    {\n        <span class=\"hljs-keyword\">return</span> x;\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        p[x] = find(p, p[x]);\n        <span class=\"hljs-keyword\">return</span> p[x];\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Function to join\n * @param [in,out] p array to join in\n * @param x value or index to join to\n * @param y value or index to join from\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">join</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *p, <span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span> { p[find(p, x)] = find(p, y); }\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> union_set[MAX_SIZE];\n\n    <span class=\"hljs-comment\">// Have all array indexes that you need to use reference themselves</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++)\n    {\n        union_set[i] = i;\n    }\n    <span class=\"hljs-comment\">// p = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}</span>\n\n    join(union_set, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;The array is now: &quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, union_set[i]);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n    <span class=\"hljs-comment\">// Now 3 and 5 are groupped together, that is find(3) = find(5)</span>\n    <span class=\"hljs-comment\">// p = {0, 1, 2, 5, 4, 5, 6, 7, 8, 9}</span>\n\n    join(union_set, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;The array is now: &quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, union_set[i]);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n\n    <span class=\"hljs-comment\">// Now 3, 5 and are groupped together, find(3) = find(5) = find(8)</span>\n    <span class=\"hljs-comment\">// p = {0, 1, 2, 5, 4, 8, 6, 7, 8, 9}</span>\n    join(union_set, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-keyword\">if</span> (find(union_set, <span class=\"hljs-number\">0</span>) == find(union_set, <span class=\"hljs-number\">3</span>))\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;0 and 3 are groupped together\\n&quot;</span>);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;The array is now: &quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, union_set[i]);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "rust": {
      "dir": "src/data_structures/union_find.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/data_structures/union_find.rs",
      "code": "<span class=\"hljs-comment\">/// UnionFind data structure</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">UnionFind</span> {\n    id: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;,\n    size: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;,\n    count: <span class=\"hljs-type\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">UnionFind</span> {\n    <span class=\"hljs-comment\">/// Creates a new UnionFind data structure with n elements</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>(n: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">id</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; n];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">size</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; n];\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..n {\n            id[i] = i;\n            size[i] = <span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-keyword\">Self</span> { id, size, count: n }\n    }\n\n    <span class=\"hljs-comment\">/// Returns the parent of the element</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">find</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, x: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">x</span> = x;\n        <span class=\"hljs-keyword\">while</span> x != <span class=\"hljs-keyword\">self</span>.id[x] {\n            x = <span class=\"hljs-keyword\">self</span>.id[x];\n            <span class=\"hljs-comment\">// self.id[x] = self.id[self.id[x]]; // path compression</span>\n        }\n        x\n    }\n\n    <span class=\"hljs-comment\">/// Unions the sets containing x and y</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">union</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, x: <span class=\"hljs-type\">usize</span>, y: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">x</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">find</span>(x);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">y</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">find</span>(y);\n        <span class=\"hljs-keyword\">if</span> x == y {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.size[x] &lt; <span class=\"hljs-keyword\">self</span>.size[y] {\n            <span class=\"hljs-keyword\">self</span>.id[x] = y;\n            <span class=\"hljs-keyword\">self</span>.size[y] += <span class=\"hljs-keyword\">self</span>.size[x];\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">self</span>.id[y] = x;\n            <span class=\"hljs-keyword\">self</span>.size[x] += <span class=\"hljs-keyword\">self</span>.size[y];\n        }\n        <span class=\"hljs-keyword\">self</span>.count -= <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-literal\">true</span>\n    }\n\n    <span class=\"hljs-comment\">/// Checks if x and y are in the same set</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">is_same_set</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, x: <span class=\"hljs-type\">usize</span>, y: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">find</span>(x) == <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">find</span>(y)\n    }\n\n    <span class=\"hljs-comment\">/// Returns the number of disjoint sets</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">count</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\n        <span class=\"hljs-keyword\">self</span>.count\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_union_find</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">uf</span> = UnionFind::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">10</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">find</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">find</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">find</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">find</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">3</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">find</span>(<span class=\"hljs-number\">4</span>), <span class=\"hljs-number\">4</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">find</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">5</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">find</span>(<span class=\"hljs-number\">6</span>), <span class=\"hljs-number\">6</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">find</span>(<span class=\"hljs-number\">7</span>), <span class=\"hljs-number\">7</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">find</span>(<span class=\"hljs-number\">8</span>), <span class=\"hljs-number\">8</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">find</span>(<span class=\"hljs-number\">9</span>), <span class=\"hljs-number\">9</span>);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">union</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-literal\">true</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">union</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>), <span class=\"hljs-literal\">true</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">union</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>), <span class=\"hljs-literal\">true</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">union</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>), <span class=\"hljs-literal\">true</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">union</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>), <span class=\"hljs-literal\">true</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">union</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>), <span class=\"hljs-literal\">true</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">union</span>(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>), <span class=\"hljs-literal\">true</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">union</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>), <span class=\"hljs-literal\">true</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">union</span>(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>), <span class=\"hljs-literal\">true</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(uf.<span class=\"hljs-title function_ invoke__\">union</span>(<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>), <span class=\"hljs-literal\">false</span>);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, uf.<span class=\"hljs-title function_ invoke__\">count</span>());\n    }\n}\n"
    },
    "swift": {
      "dir": "data_structures/union_find/union_find.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/data_structures/union_find/union_find.swift",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UnionFindNode</span> {\n    <span class=\"hljs-keyword\">var</span> rank <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> parent: <span class=\"hljs-type\">UnionFindNode</span>? <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">nil</span>\n\n    <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">findRoot</span>() -&gt; <span class=\"hljs-type\">UnionFindNode</span> {\n        <span class=\"hljs-keyword\">var</span> x <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">self</span>\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> parent <span class=\"hljs-operator\">=</span> x.parent {\n            x.parent <span class=\"hljs-operator\">=</span> parent.parent <span class=\"hljs-operator\">??</span> parent\n            x <span class=\"hljs-operator\">=</span> parent\n        }\n        <span class=\"hljs-keyword\">return</span> x\n    }\n\n    <span class=\"hljs-keyword\">@discardableResult</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">union</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">x</span>: <span class=\"hljs-type\">UnionFindNode</span>, <span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">y</span>: <span class=\"hljs-type\">UnionFindNode</span>) -&gt; <span class=\"hljs-type\">UnionFindNode</span> {\n        <span class=\"hljs-keyword\">var</span> x <span class=\"hljs-operator\">=</span> x.findRoot()\n        <span class=\"hljs-keyword\">var</span> y <span class=\"hljs-operator\">=</span> y.findRoot()\n\n        <span class=\"hljs-keyword\">guard</span> x <span class=\"hljs-operator\">!==</span> y <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-keyword\">return</span> x }\n\n        <span class=\"hljs-keyword\">if</span> x.rank <span class=\"hljs-operator\">&lt;</span> y.rank {\n            <span class=\"hljs-built_in\">swap</span>(<span class=\"hljs-operator\">&amp;</span>x, <span class=\"hljs-operator\">&amp;</span>y)\n        }\n\n        y.parent <span class=\"hljs-operator\">=</span> x\n        <span class=\"hljs-keyword\">if</span> x.rank <span class=\"hljs-operator\">==</span> y.rank {\n            x.rank <span class=\"hljs-operator\">=</span> y.rank <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\n        }\n        \n        <span class=\"hljs-keyword\">return</span> x\n    }\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">inSameSet</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">x</span>: <span class=\"hljs-type\">UnionFindNode</span>, <span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">y</span>: <span class=\"hljs-type\">UnionFindNode</span>) -&gt; <span class=\"hljs-type\">Bool</span> {\n        <span class=\"hljs-keyword\">return</span> x.findRoot() <span class=\"hljs-operator\">===</span> y.findRoot()\n    }\n}\n\n\n<span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">testUnionFind</span>() {\n    <span class=\"hljs-keyword\">let</span> a <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">UnionFindNode</span>()\n    <span class=\"hljs-keyword\">let</span> b <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">UnionFindNode</span>()\n    <span class=\"hljs-keyword\">let</span> c <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">UnionFindNode</span>()\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;a, b&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(a, b))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;b, c&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(b, c))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;a, c&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(a, c))\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Joining a, b&quot;</span>)\n\n    <span class=\"hljs-type\">UnionFindNode</span>.union(a, b)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;a, b&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(a, b))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;b, c&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(b, c))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;a, c&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(a, c))\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Joining b, c&quot;</span>)\n\n    <span class=\"hljs-type\">UnionFindNode</span>.union(b, c)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;a, b&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(a, b))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;b, c&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(b, c))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;a, c&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(a, c))\n\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;New node d&quot;</span>)\n    <span class=\"hljs-keyword\">let</span> d <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">UnionFindNode</span>()\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;a, d&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(a, d))\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Joining d, c&quot;</span>)\n    <span class=\"hljs-type\">UnionFindNode</span>.union(d, c)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;a, d&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(a, d))\n\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Sven Weidauer",
      "email": "sven@5sw.de",
      "commits": 1
    },
    {
      "name": "fffzlfk",
      "email": "44939690+fffzlfk@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Gilberto Alexandre dos Santos",
      "email": "gilberto.alexsantos@gmail.com",
      "commits": 1
    },
    {
      "name": "Philip Schikora",
      "email": "pschikora87@googlemail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}