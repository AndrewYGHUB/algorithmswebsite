{
  "slug": "unique-paths",
  "name": "Unique Paths",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/dynamicprogramming/UniquePaths.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/dynamicprogramming/UniquePaths.java",
      "code": "<span class=\"hljs-comment\">/** Author : Siddhant Swarup Mallick\n * Github : https://github.com/siddhant2002\n */</span>\n\n\n<span class=\"hljs-comment\">/**\n * A robot is located at the top-left corner of a m x n grid (marked &#x27;Start&#x27; in the diagram below).\n * The robot can only move either down or right at any point in time.\n * The robot is trying to reach the bottom-right corner of the grid (marked &#x27;Finish&#x27; in the diagram below).\n * How many possible unique paths are there?\n */</span>\n\n<span class=\"hljs-comment\">/** Program description - To find the number of unique paths possible */</span>\n\n<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\n\n<span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UniquePaths</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">uniquePaths</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> m , <span class=\"hljs-type\">int</span> n , <span class=\"hljs-type\">int</span> ans)</span> {\n        <span class=\"hljs-type\">int</span> []dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n];\n        Arrays.fill(dp,<span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;m; i++)\n        {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;n; j++)\n            {\n                dp[j] += dp[j-<span class=\"hljs-number\">1</span>];\n\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> dp[n-<span class=\"hljs-number\">1</span>]==ans;\n        <span class=\"hljs-comment\">// return true if predicted answer matches with expected answer</span>\n    }\n    <span class=\"hljs-comment\">// The above method runs in O(n) time</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">uniquePaths2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> m , <span class=\"hljs-type\">int</span> n , <span class=\"hljs-type\">int</span> ans)</span> {\n        <span class=\"hljs-type\">int</span> dp[][] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[m][n];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;m; i++)\n        {\n            dp[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>; j&lt;n; j++)\n        {\n            dp[<span class=\"hljs-number\">0</span>][j] = <span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;m; i++)\n        {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;n; j++)\n            {\n                dp[i][j]=dp[i-<span class=\"hljs-number\">1</span>][j]+dp[i][j-<span class=\"hljs-number\">1</span>];\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> dp[m-<span class=\"hljs-number\">1</span>][n-<span class=\"hljs-number\">1</span>]==ans;\n        <span class=\"hljs-comment\">// return true if predicted answer matches with expected answer</span>\n    }\n    <span class=\"hljs-comment\">// The above mthod takes O(m*n) time</span>\n}\n<span class=\"hljs-comment\">/**\n     * OUTPUT :\n     * Input - m = 3, n = 7\n     * Output: it returns either true if expected answer matches with the predicted answer else it returns false\n     * 1st approach Time Complexity : O(n)\n     * Auxiliary Space Complexity : O(n)\n     * Input - m = 3, n = 7\n     * Output: it returns either true if expected answer matches with the predicted answer else it returns false\n     * 2nd approach Time Complexity : O(m*n)\n     * Auxiliary Space Complexity : O(m*n)\n     */</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Siddhant Swarup Mallick",
      "email": "78552027+siddhant2002@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}