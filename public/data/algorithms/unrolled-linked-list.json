{
  "slug": "unrolled-linked-list",
  "name": "Unrolled linked list",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./DataStructures/UnrolledList/UnrolledLinkedList.cs",
      "url": "https:/github.com/TheAlgorithms/C-Sharp/tree/master/DataStructures/UnrolledList/UnrolledLinkedList.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">DataStructures.UnrolledList</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Unrolled linked list is a linked list of small arrays,</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> all of the same size where each is so small that the insertion</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> or deletion is fast and quick, but large enough to fill the cache line.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UnrolledLinkedList</span>\n    {\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-built_in\">int</span> sizeNode;\n\n        <span class=\"hljs-keyword\">private</span> UnrolledLinkedListNode start = <span class=\"hljs-literal\">null</span>!;\n        <span class=\"hljs-keyword\">private</span> UnrolledLinkedListNode end = <span class=\"hljs-literal\">null</span>!;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;UnrolledLinkedList&quot;/&gt;</span> class.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Create a unrolled list with start chunk size.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;chunkSize&quot;&gt;</span>The size of signe chunk.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">UnrolledLinkedList</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> chunkSize</span>)</span>\n        {\n            sizeNode = chunkSize + <span class=\"hljs-number\">1</span>;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Add value to list [O(n)].</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;value&quot;&gt;</span>The entered value.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Insert</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">value</span></span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (start == <span class=\"hljs-literal\">null</span>)\n            {\n                start = <span class=\"hljs-keyword\">new</span> UnrolledLinkedListNode(sizeNode);\n                start.Set(<span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">value</span>);\n\n                end = start;\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\n            <span class=\"hljs-keyword\">if</span> (end.Count + <span class=\"hljs-number\">1</span> &lt; sizeNode)\n            {\n                end.Set(end.Count, <span class=\"hljs-keyword\">value</span>);\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\n                <span class=\"hljs-keyword\">var</span> pointer = <span class=\"hljs-keyword\">new</span> UnrolledLinkedListNode(sizeNode);\n                <span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> pos = end.Count / <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>; pos &lt; end.Count; pos++)\n                {\n                    pointer.Set(j++, end.Get(pos));\n                }\n\n                pointer.Set(j++, <span class=\"hljs-keyword\">value</span>);\n                pointer.Count = j;\n\n                end.Count = end.Count / <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>;\n                end.Next = pointer;\n                end = pointer;\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Help method. Get all list inside to check the state.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Items from all nodes.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> IEnumerable&lt;<span class=\"hljs-built_in\">int</span>&gt; <span class=\"hljs-title\">GetRolledItems</span>()</span>\n        {\n            UnrolledLinkedListNode pointer = start;\n            List&lt;<span class=\"hljs-built_in\">int</span>&gt; result = <span class=\"hljs-keyword\">new</span>();\n\n            <span class=\"hljs-keyword\">while</span> (pointer != <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; pointer.Count; i++)\n                {\n                    result.Add(pointer.Get(i));\n                }\n\n                pointer = pointer.Next;\n            }\n\n            <span class=\"hljs-keyword\">return</span> result;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Sergii Lischuk",
      "email": "evertodante@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}