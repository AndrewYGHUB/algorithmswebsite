{
  "slug": "vector-2",
  "name": "Vector 2",
  "categories": [
    "datastructures",
    "vectors"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Data-Structures/Vectors/Vector2.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures/Vectors/Vector2.js",
      "code": "<span class=\"hljs-comment\">/**\n * In mathematics and physics, a vector is an element of a vector space.\n *\n * The Vector2-class implements 2-dimensional vectors together with various vector-operations.\n * <span class=\"hljs-doctag\">@see</span> https://en.wikipedia.org/wiki/Vector_(mathematics_and_physics).\n */</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Vector2</span> {\n  <span class=\"hljs-title function_\">constructor</span> (x, y) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> = x\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span> = y\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Check for exact vector equality.\n   *\n   * <span class=\"hljs-doctag\">@param</span> vector The vector to compare to.\n   * <span class=\"hljs-doctag\">@returns</span> Whether they are exactly equal or not.\n   */</span>\n  equalsExactly (vector) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> === vector.<span class=\"hljs-property\">x</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span> === vector.<span class=\"hljs-property\">y</span>\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Check for approximate vector equality.\n   *\n   * <span class=\"hljs-doctag\">@param</span> vector The vector to compare to.\n   * <span class=\"hljs-doctag\">@param</span> epsilon The allowed discrepancy for the x-values and the y-values.\n   * <span class=\"hljs-doctag\">@returns</span> Whether they are approximately equal or not.\n   */</span>\n  equalsApproximately (vector, epsilon) {\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">abs</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> - vector.<span class=\"hljs-property\">x</span>) &lt; epsilon &amp;&amp; <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">abs</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span> - vector.<span class=\"hljs-property\">y</span>) &lt; epsilon)\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Vector length.\n   *\n   * <span class=\"hljs-doctag\">@returns</span> The length of the vector.\n   */</span>\n  length () {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">sqrt</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> * <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span> * <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span>)\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Normalization sets the vector to length 1 while maintaining its direction.\n   *\n   * <span class=\"hljs-doctag\">@returns</span> The normalized vector.\n   */</span>\n  normalize () {\n    <span class=\"hljs-keyword\">const</span> length = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">length</span>()\n    <span class=\"hljs-keyword\">if</span> (length === <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Cannot normalize vectors of length 0&#x27;</span>)\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> / length, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span> / length)\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Vector addition\n   *\n   * <span class=\"hljs-doctag\">@param</span> vector The vector to be added.\n   * <span class=\"hljs-doctag\">@returns</span> The sum-vector.\n   */</span>\n  add (vector) {\n    <span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> + vector.<span class=\"hljs-property\">x</span>\n    <span class=\"hljs-keyword\">const</span> y = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span> + vector.<span class=\"hljs-property\">y</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(x, y)\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Vector subtraction\n   *\n   * <span class=\"hljs-doctag\">@param</span> vector The vector to be subtracted.\n   * <span class=\"hljs-doctag\">@returns</span> The difference-vector.\n   */</span>\n  subtract (vector) {\n    <span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> - vector.<span class=\"hljs-property\">x</span>\n    <span class=\"hljs-keyword\">const</span> y = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span> - vector.<span class=\"hljs-property\">y</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(x, y)\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Vector scalar multiplication\n   *\n   * <span class=\"hljs-doctag\">@param</span> scalar The factor by which to multiply the vector.\n   * <span class=\"hljs-doctag\">@returns</span> The scaled vector.\n   */</span>\n  multiply (scalar) {\n    <span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> * scalar\n    <span class=\"hljs-keyword\">const</span> y = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span> * scalar\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(x, y)\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Distance between this vector and another vector.\n   *\n   * <span class=\"hljs-doctag\">@param</span> vector The vector to which to calculate the distance.\n   * <span class=\"hljs-doctag\">@returns</span> The distance.\n   */</span>\n  distance (vector) {\n    <span class=\"hljs-keyword\">const</span> difference = vector.<span class=\"hljs-title function_\">subtract</span>(<span class=\"hljs-variable language_\">this</span>)\n    <span class=\"hljs-keyword\">return</span> difference.<span class=\"hljs-title function_\">length</span>()\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Vector dot product\n   *\n   * <span class=\"hljs-doctag\">@param</span> vector The vector used for the multiplication.\n   * <span class=\"hljs-doctag\">@returns</span> The resulting dot product.\n   */</span>\n  dotProduct (vector) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> * vector.<span class=\"hljs-property\">x</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span> * vector.<span class=\"hljs-property\">y</span>\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Vector rotation (see https://en.wikipedia.org/wiki/Rotation_matrix)\n   *\n   * <span class=\"hljs-doctag\">@param</span> angleInRadians The angle in radians by which to rotate the vector.\n   * <span class=\"hljs-doctag\">@returns</span> The rotated vector.\n   */</span>\n  rotate (angleInRadians) {\n    <span class=\"hljs-keyword\">const</span> ca = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">cos</span>(angleInRadians)\n    <span class=\"hljs-keyword\">const</span> sa = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">sin</span>(angleInRadians)\n    <span class=\"hljs-keyword\">const</span> x = ca * <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> - sa * <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span>\n    <span class=\"hljs-keyword\">const</span> y = sa * <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> + ca * <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(x, y)\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Measure angle between two vectors\n   *\n   * <span class=\"hljs-doctag\">@param</span> vector The 2nd vector for the measurement.\n   * <span class=\"hljs-doctag\">@returns</span> The angle in radians.\n   */</span>\n  angleBetween (vector) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">atan2</span>(vector.<span class=\"hljs-property\">y</span>, vector.<span class=\"hljs-property\">x</span>) - <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">atan2</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span>)\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">Vector2</span> }\n"
    }
  },
  "contributors": [
    {
      "name": "algobytewise",
      "email": "algobytewise@gmail.com",
      "commits": 1
    },
    {
      "name": "Fabian Kielmann",
      "email": "56976420+FabianKielmann@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}