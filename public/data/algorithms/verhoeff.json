{
  "slug": "verhoeff",
  "name": "Verhoeff",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/others/Verhoeff.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/others/Verhoeff.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.others;\n\n<span class=\"hljs-keyword\">import</span> java.util.Objects;\n\n<span class=\"hljs-comment\">/**\n * The Verhoeff algorithm is a checksum formula for error detection developed by\n * the Dutch mathematician Jacobus Verhoeff and was first published in 1969. It\n * was the first decimal check digit algorithm which detects all single-digit\n * errors, and all transposition errors involving two adjacent digits.\n *\n * &lt;p&gt;\n * The strengths of the algorithm are that it detects all transliteration and\n * transposition errors, and additionally most twin, twin jump, jump\n * transposition and phonetic errors. The main weakness of the Verhoeff\n * algorithm is its complexity. The calculations required cannot easily be\n * expressed as a formula. For easy calculation three tables are required:&lt;/p&gt;\n * &lt;ol&gt;\n * &lt;li&gt;multiplication table&lt;/li&gt;\n * &lt;li&gt;inverse table&lt;/li&gt;\n * &lt;li&gt;permutation table&lt;/li&gt;\n * &lt;/ol&gt;\n *\n * <span class=\"hljs-doctag\">@see</span> &lt;a href=&quot;https://en.wikipedia.org/wiki/Verhoeff_algorithm&quot;&gt;Wiki.\n * Verhoeff algorithm&lt;/a&gt;\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Verhoeff</span> {\n\n    <span class=\"hljs-comment\">/**\n     * Table {<span class=\"hljs-doctag\">@code</span> d}. Based on multiplication in the dihedral group D5 and is\n     * simply the Cayley table of the group. Note that this group is not\n     * commutative, that is, for some values of {<span class=\"hljs-doctag\">@code</span> j} and {<span class=\"hljs-doctag\">@code</span> k},\n     * {<span class=\"hljs-doctag\">@code</span> d(j,k) â‰  d(k, j)}.\n     *\n     * <span class=\"hljs-doctag\">@see</span> &lt;a href=&quot;https://en.wikipedia.org/wiki/Dihedral_group&quot;&gt;Wiki.\n     * Dihedral group&lt;/a&gt;\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">byte</span>[][] MULTIPLICATION_TABLE = {\n        {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>},\n        {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">5</span>},\n        {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>},\n        {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>},\n        {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>},\n        {<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>},\n        {<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>},\n        {<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>},\n        {<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>},\n        {<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>}\n    };\n\n    <span class=\"hljs-comment\">/**\n     * The inverse table {<span class=\"hljs-doctag\">@code</span> inv}. Represents the multiplicative inverse of a\n     * digit, that is, the value that satisfies {<span class=\"hljs-doctag\">@code</span> d(j, inv(j)) = 0}.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">byte</span>[] MULTIPLICATIVE_INVERSE = {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>};\n\n    <span class=\"hljs-comment\">/**\n     * The permutation table {<span class=\"hljs-doctag\">@code</span> p}. Applies a permutation to each digit\n     * based on its position in the number. This is actually a single\n     * permutation {<span class=\"hljs-doctag\">@code</span> (1 5 8 9 4 2 7 0)(3 6)} applied iteratively; i.e.\n     * {<span class=\"hljs-doctag\">@code</span> p(i+j,n) = p(i, p(j,n))}.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">byte</span>[][] PERMUTATION_TABLE = {\n        {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>},\n        {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">4</span>},\n        {<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>},\n        {<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>},\n        {<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>},\n        {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>},\n        {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>},\n        {<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>}\n    };\n\n    <span class=\"hljs-comment\">/**\n     * Check input digits by Verhoeff algorithm.\n     *\n     * <span class=\"hljs-doctag\">@param</span> digits input to check\n     * <span class=\"hljs-doctag\">@return</span> true if check was successful, false otherwise\n     * <span class=\"hljs-doctag\">@throws</span> IllegalArgumentException if input parameter contains not only\n     * digits\n     * <span class=\"hljs-doctag\">@throws</span> NullPointerException if input is null\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">verhoeffCheck</span><span class=\"hljs-params\">(String digits)</span> {\n        checkInput(digits);\n        <span class=\"hljs-type\">int</span>[] numbers = toIntArray(digits);\n\n        <span class=\"hljs-comment\">// The Verhoeff algorithm</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">checksum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; numbers.length; i++) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> numbers.length - i - <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> PERMUTATION_TABLE[i % <span class=\"hljs-number\">8</span>][numbers[index]];\n            checksum = MULTIPLICATION_TABLE[checksum][b];\n        }\n\n        <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">checksum</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate check digit for initial digits and add it tho the last\n     * position.\n     *\n     * <span class=\"hljs-doctag\">@param</span> initialDigits initial value\n     * <span class=\"hljs-doctag\">@return</span> digits with the checksum in the last position\n     * <span class=\"hljs-doctag\">@throws</span> IllegalArgumentException if input parameter contains not only\n     * digits\n     * <span class=\"hljs-doctag\">@throws</span> NullPointerException if input is null\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">addVerhoeffChecksum</span><span class=\"hljs-params\">(String initialDigits)</span> {\n        checkInput(initialDigits);\n\n        <span class=\"hljs-comment\">// Add zero to end of input value</span>\n        <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">modifiedDigits</span> <span class=\"hljs-operator\">=</span> initialDigits + <span class=\"hljs-string\">&quot;0&quot;</span>;\n\n        <span class=\"hljs-type\">int</span>[] numbers = toIntArray(modifiedDigits);\n\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">checksum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; numbers.length; i++) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> numbers.length - i - <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> PERMUTATION_TABLE[i % <span class=\"hljs-number\">8</span>][numbers[index]];\n            checksum = MULTIPLICATION_TABLE[checksum][b];\n        }\n        checksum = MULTIPLICATIVE_INVERSE[checksum];\n\n        <span class=\"hljs-keyword\">return</span> initialDigits + checksum;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        System.out.println(<span class=\"hljs-string\">&quot;Verhoeff algorithm usage examples:&quot;</span>);\n        <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">validInput</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;2363&quot;</span>;\n        <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">invalidInput</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;2364&quot;</span>;\n        checkAndPrint(validInput);\n        checkAndPrint(invalidInput);\n\n        System.out.println(<span class=\"hljs-string\">&quot;\\nCheck digit generation example:&quot;</span>);\n        <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">input</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;236&quot;</span>;\n        generateAndPrint(input);\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">checkAndPrint</span><span class=\"hljs-params\">(String input)</span> {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">validationResult</span> <span class=\"hljs-operator\">=</span> Verhoeff.verhoeffCheck(input)\n                ? <span class=\"hljs-string\">&quot;valid&quot;</span>\n                : <span class=\"hljs-string\">&quot;not valid&quot;</span>;\n        System.out.println(<span class=\"hljs-string\">&quot;Input &#x27;&quot;</span> + input + <span class=\"hljs-string\">&quot;&#x27; is &quot;</span> + validationResult);\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">generateAndPrint</span><span class=\"hljs-params\">(String input)</span> {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> addVerhoeffChecksum(input);\n        System.out.println(<span class=\"hljs-string\">&quot;Generate and add checksum to initial value &#x27;&quot;</span> + input + <span class=\"hljs-string\">&quot;&#x27;. Result: &#x27;&quot;</span> + result + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">checkInput</span><span class=\"hljs-params\">(String input)</span> {\n        Objects.requireNonNull(input);\n        <span class=\"hljs-keyword\">if</span> (!input.matches(<span class=\"hljs-string\">&quot;\\\\d+&quot;</span>)) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Input &#x27;&quot;</span> + input + <span class=\"hljs-string\">&quot;&#x27; contains not only digits&quot;</span>);\n        }\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] toIntArray(String string) {\n        <span class=\"hljs-keyword\">return</span> string.chars()\n                .map(i -&gt; Character.digit(i, <span class=\"hljs-number\">10</span>))\n                .toArray();\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Artem Boiarshinov",
      "email": "54187376+Boiarshinov@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}