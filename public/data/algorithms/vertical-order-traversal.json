{
  "slug": "vertical-order-traversal",
  "name": "Vertical Order Traversal",
  "categories": [
    "datastructures",
    "tree"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/datastructures/trees/VerticalOrderTraversal.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/datastructures/trees/VerticalOrderTraversal.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.trees;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.HashMap;\n<span class=\"hljs-keyword\">import</span> java.util.LinkedList;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n<span class=\"hljs-keyword\">import</span> java.util.Queue;\n\n<span class=\"hljs-comment\">/* The following class implements a vertical order traversal\nin a tree from top to bottom and left to right, so for a tree :\n           1\n          / \\\n         2   3\n        / \\   \\\n       4   5   6\n        \\     / \\\n         7   8   10\n          \\\n           9\n the sequence will be :\n 4 2 7 1 5 9 3 8 6 10\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">VerticalOrderTraversal</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">BinaryTree</span> <span class=\"hljs-variable\">tree</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BinaryTree</span>();\n        tree.put(<span class=\"hljs-number\">5</span>);\n        tree.put(<span class=\"hljs-number\">6</span>);\n        tree.put(<span class=\"hljs-number\">3</span>);\n        tree.put(<span class=\"hljs-number\">1</span>);\n        tree.put(<span class=\"hljs-number\">4</span>);\n        BinaryTree.<span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">root</span> <span class=\"hljs-operator\">=</span> tree.getRoot();\n        ArrayList&lt;Integer&gt; ans = verticalTraversal(root);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i : ans) {\n            System.out.print(i + <span class=\"hljs-string\">&quot; &quot;</span>);\n        }\n    }\n\n    <span class=\"hljs-comment\">/*Function that receives a root Node and prints the tree \n\tin Vertical Order.*/</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ArrayList&lt;Integer&gt; <span class=\"hljs-title function_\">verticalTraversal</span><span class=\"hljs-params\">(BinaryTree.Node root)</span> {\n        <span class=\"hljs-comment\">/*Queue to store the Nodes.*/</span>\n        Queue&lt;BinaryTree.Node&gt; queue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;&gt;();\n\n        <span class=\"hljs-comment\">/*Queue to store the index of particular vertical \n\t\t column of a tree , with root at 0, Nodes on left \n\t\t with negative index and Nodes on right with positive\n\t\t index. */</span>\n        Queue&lt;Integer&gt; index = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;&gt;();\n\n        <span class=\"hljs-comment\">/*Map of Integer and ArrayList to store all the \n\t\t elements in a particular index in a single arrayList\n\t\t that will have a key equal to the index itself. */</span>\n        Map&lt;Integer, ArrayList&lt;Integer&gt;&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n\n        <span class=\"hljs-comment\">/* min and max stores leftmost and right most index to\n\t\t later print the tree in vertical fashion.*/</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">max</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, min = <span class=\"hljs-number\">0</span>;\n        queue.offer(root);\n        index.offer(<span class=\"hljs-number\">0</span>);\n\n        <span class=\"hljs-keyword\">while</span> (!queue.isEmpty()) {\n\n            <span class=\"hljs-keyword\">if</span> (queue.peek().left != <span class=\"hljs-literal\">null</span>) {\n                <span class=\"hljs-comment\">/*Adding the left Node if it is not null\n\t\t\t\tand its index by subtracting 1 from it&#x27;s \n\t\t\t\tparent&#x27;s index*/</span>\n                queue.offer(queue.peek().left);\n                index.offer(index.peek() - <span class=\"hljs-number\">1</span>);\n            }\n            <span class=\"hljs-keyword\">if</span> (queue.peek().right != <span class=\"hljs-literal\">null</span>) {\n                <span class=\"hljs-comment\">/*Adding the right Node if it is not null\n\t\t\t\tand its index by adding 1 from it&#x27;s \n\t\t\t\tparent&#x27;s index*/</span>\n                queue.offer(queue.peek().right);\n                index.offer(index.peek() + <span class=\"hljs-number\">1</span>);\n            }\n            <span class=\"hljs-comment\">/*If the map does not contains the index a new\n\t\t\t ArrayList is created with the index as key.*/</span>\n            <span class=\"hljs-keyword\">if</span> (!map.containsKey(index.peek())) {\n                ArrayList&lt;Integer&gt; a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n                map.put(index.peek(), a);\n            }\n            <span class=\"hljs-comment\">/*For a index, corresponding Node data is added\n\t\t\t to the respective ArrayList present at that\n\t\t\t index. */</span>\n            map.get(index.peek()).add(queue.peek().data);\n            max = (<span class=\"hljs-type\">int</span>) Math.max(max, index.peek());\n            min = (<span class=\"hljs-type\">int</span>) Math.min(min, index.peek());\n            <span class=\"hljs-comment\">/*The Node and its index are removed \n\t\t\t from their respective queues.*/</span>\n            index.poll();\n            queue.poll();\n        }\n        <span class=\"hljs-comment\">/*Finally map data is printed here which has keys\n\t\tfrom min to max. Each ArrayList represents a \n\t\tvertical column that is added in ans ArrayList.*/</span>\n        ArrayList&lt;Integer&gt; ans = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> min; i &lt;= max; i++) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; map.get(i).size(); j++) {\n                ans.add(map.get(i).get(j));\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> ans;\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Pramil",
      "email": "75042864+Pramil01@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}