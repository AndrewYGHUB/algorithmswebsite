{
  "slug": "volume",
  "name": "Volume",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/volume.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/volume.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nFind Volumes of Various Shapes.\n\nWikipedia reference: https://en.wikipedia.org/wiki/Volume\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> pi, <span class=\"hljs-built_in\">pow</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vol_cube</span>(<span class=\"hljs-params\">side_length: <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculate the Volume of a Cube.\n\n    &gt;&gt;&gt; vol_cube(1)\n    1.0\n    &gt;&gt;&gt; vol_cube(3)\n    27.0\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">pow</span>(side_length, <span class=\"hljs-number\">3</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vol_spherical_cap</span>(<span class=\"hljs-params\">height: <span class=\"hljs-built_in\">float</span>, radius: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculate the Volume of the spherical cap.\n    :return 1/3 pi * height ^ 2 * (3 * radius - height)\n\n    &gt;&gt;&gt; vol_spherical_cap(1, 2)\n    5.235987755982988\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">3</span> * pi * <span class=\"hljs-built_in\">pow</span>(height, <span class=\"hljs-number\">2</span>) * (<span class=\"hljs-number\">3</span> * radius - height)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vol_spheres_intersect</span>(<span class=\"hljs-params\">\n    radius_1: <span class=\"hljs-built_in\">float</span>, radius_2: <span class=\"hljs-built_in\">float</span>, centers_distance: <span class=\"hljs-built_in\">float</span>\n</span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculate the volume of the intersection of two spheres.\n\n    The intersection is composed by two spherical caps and therefore its volume is the\n    sum of the volumes of the spherical caps. First, it calculates the heights (h1, h2)\n    of the spherical caps, then the two volumes and it returns the sum.\n    The height formulas are\n    h1 = (radius_1 - radius_2 + centers_distance)\n       * (radius_1 + radius_2 - centers_distance)\n       / (2 * centers_distance)\n    h2 = (radius_2 - radius_1 + centers_distance)\n       * (radius_2 + radius_1 - centers_distance)\n       / (2 * centers_distance)\n    if centers_distance is 0 then it returns the volume of the smallers sphere\n    :return vol_spherical_cap(h1, radius_2) + vol_spherical_cap(h2, radius_1)\n\n    &gt;&gt;&gt; vol_spheres_intersect(2, 2, 1)\n    21.205750411731103\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> centers_distance == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> vol_sphere(<span class=\"hljs-built_in\">min</span>(radius_1, radius_2))\n\n    h1 = (\n        (radius_1 - radius_2 + centers_distance)\n        * (radius_1 + radius_2 - centers_distance)\n        / (<span class=\"hljs-number\">2</span> * centers_distance)\n    )\n    h2 = (\n        (radius_2 - radius_1 + centers_distance)\n        * (radius_2 + radius_1 - centers_distance)\n        / (<span class=\"hljs-number\">2</span> * centers_distance)\n    )\n\n    <span class=\"hljs-keyword\">return</span> vol_spherical_cap(h1, radius_2) + vol_spherical_cap(h2, radius_1)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vol_cuboid</span>(<span class=\"hljs-params\">width: <span class=\"hljs-built_in\">float</span>, height: <span class=\"hljs-built_in\">float</span>, length: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculate the Volume of a Cuboid.\n    :return multiple of width, length and height\n\n    &gt;&gt;&gt; vol_cuboid(1, 1, 1)\n    1.0\n    &gt;&gt;&gt; vol_cuboid(1, 2, 3)\n    6.0\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">float</span>(width * height * length)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vol_cone</span>(<span class=\"hljs-params\">area_of_base: <span class=\"hljs-built_in\">float</span>, height: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculate the Volume of a Cone.\n\n    Wikipedia reference: https://en.wikipedia.org/wiki/Cone\n    :return (1/3) * area_of_base * height\n\n    &gt;&gt;&gt; vol_cone(10, 3)\n    10.0\n    &gt;&gt;&gt; vol_cone(1, 1)\n    0.3333333333333333\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> area_of_base * height / <span class=\"hljs-number\">3.0</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vol_right_circ_cone</span>(<span class=\"hljs-params\">radius: <span class=\"hljs-built_in\">float</span>, height: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculate the Volume of a Right Circular Cone.\n\n    Wikipedia reference: https://en.wikipedia.org/wiki/Cone\n    :return (1/3) * pi * radius^2 * height\n\n    &gt;&gt;&gt; vol_right_circ_cone(2, 3)\n    12.566370614359172\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> pi * <span class=\"hljs-built_in\">pow</span>(radius, <span class=\"hljs-number\">2</span>) * height / <span class=\"hljs-number\">3.0</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vol_prism</span>(<span class=\"hljs-params\">area_of_base: <span class=\"hljs-built_in\">float</span>, height: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculate the Volume of a Prism.\n    Wikipedia reference: https://en.wikipedia.org/wiki/Prism_(geometry)\n    :return V = Bh\n\n    &gt;&gt;&gt; vol_prism(10, 2)\n    20.0\n    &gt;&gt;&gt; vol_prism(11, 1)\n    11.0\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">float</span>(area_of_base * height)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vol_pyramid</span>(<span class=\"hljs-params\">area_of_base: <span class=\"hljs-built_in\">float</span>, height: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculate the Volume of a Pyramid.\n    Wikipedia reference: https://en.wikipedia.org/wiki/Pyramid_(geometry)\n    :return  (1/3) * Bh\n\n    &gt;&gt;&gt; vol_pyramid(10, 3)\n    10.0\n    &gt;&gt;&gt; vol_pyramid(1.5, 3)\n    1.5\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> area_of_base * height / <span class=\"hljs-number\">3.0</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vol_sphere</span>(<span class=\"hljs-params\">radius: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculate the Volume of a Sphere.\n    Wikipedia reference: https://en.wikipedia.org/wiki/Sphere\n    :return (4/3) * pi * r^3\n\n    &gt;&gt;&gt; vol_sphere(5)\n    523.5987755982989\n    &gt;&gt;&gt; vol_sphere(1)\n    4.1887902047863905\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span> / <span class=\"hljs-number\">3</span> * pi * <span class=\"hljs-built_in\">pow</span>(radius, <span class=\"hljs-number\">3</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vol_hemisphere</span>(<span class=\"hljs-params\">radius: <span class=\"hljs-built_in\">float</span></span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;Calculate the volume of a hemisphere\n    Wikipedia reference: https://en.wikipedia.org/wiki/Hemisphere\n    Other references: https://www.cuemath.com/geometry/hemisphere\n    :return 2/3 * pi * radius^3\n\n    &gt;&gt;&gt; vol_hemisphere(1)\n    2.0943951023931953\n\n    &gt;&gt;&gt; vol_hemisphere(7)\n    718.3775201208659\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> / <span class=\"hljs-number\">3</span> * pi * <span class=\"hljs-built_in\">pow</span>(radius, <span class=\"hljs-number\">3</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vol_circular_cylinder</span>(<span class=\"hljs-params\">radius: <span class=\"hljs-built_in\">float</span>, height: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;Calculate the Volume of a Circular Cylinder.\n    Wikipedia reference: https://en.wikipedia.org/wiki/Cylinder\n    :return pi * radius^2 * height\n\n    &gt;&gt;&gt; vol_circular_cylinder(1, 1)\n    3.141592653589793\n    &gt;&gt;&gt; vol_circular_cylinder(4, 3)\n    150.79644737231007\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> pi * <span class=\"hljs-built_in\">pow</span>(radius, <span class=\"hljs-number\">2</span>) * height\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vol_conical_frustum</span>(<span class=\"hljs-params\">height: <span class=\"hljs-built_in\">float</span>, radius_1: <span class=\"hljs-built_in\">float</span>, radius_2: <span class=\"hljs-built_in\">float</span></span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;Calculate the Volume of a Conical Frustum.\n    Wikipedia reference: https://en.wikipedia.org/wiki/Frustum\n    :return 1/3 * pi * height * (radius_1^2 + radius_top^2 + radius_1 * radius_2)\n\n    &gt;&gt;&gt; vol_conical_frustum(45, 7, 28)\n    48490.482608158454\n\n    &gt;&gt;&gt; vol_conical_frustum(1, 1, 2)\n    7.330382858376184\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"hljs-number\">1</span>\n        / <span class=\"hljs-number\">3</span>\n        * pi\n        * height\n        * (<span class=\"hljs-built_in\">pow</span>(radius_1, <span class=\"hljs-number\">2</span>) + <span class=\"hljs-built_in\">pow</span>(radius_2, <span class=\"hljs-number\">2</span>) + radius_1 * radius_2)\n    )\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    <span class=\"hljs-string\">&quot;&quot;&quot;Print the Results of Various Volume Calculations.&quot;&quot;&quot;</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Volumes:&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Cube: &quot;</span> + <span class=\"hljs-built_in\">str</span>(vol_cube(<span class=\"hljs-number\">2</span>)))  <span class=\"hljs-comment\"># = 8</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Cuboid: &quot;</span> + <span class=\"hljs-built_in\">str</span>(vol_cuboid(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)))  <span class=\"hljs-comment\"># = 8</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Cone: &quot;</span> + <span class=\"hljs-built_in\">str</span>(vol_cone(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)))  <span class=\"hljs-comment\"># ~= 1.33</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Right Circular Cone: &quot;</span> + <span class=\"hljs-built_in\">str</span>(vol_right_circ_cone(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)))  <span class=\"hljs-comment\"># ~= 8.38</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Prism: &quot;</span> + <span class=\"hljs-built_in\">str</span>(vol_prism(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)))  <span class=\"hljs-comment\"># = 4</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Pyramid: &quot;</span> + <span class=\"hljs-built_in\">str</span>(vol_pyramid(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)))  <span class=\"hljs-comment\"># ~= 1.33</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Sphere: &quot;</span> + <span class=\"hljs-built_in\">str</span>(vol_sphere(<span class=\"hljs-number\">2</span>)))  <span class=\"hljs-comment\"># ~= 33.5</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Hemisphere: &quot;</span> + <span class=\"hljs-built_in\">str</span>(vol_hemisphere(<span class=\"hljs-number\">2</span>)))  <span class=\"hljs-comment\"># ~= 16.75</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Circular Cylinder: &quot;</span> + <span class=\"hljs-built_in\">str</span>(vol_circular_cylinder(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)))  <span class=\"hljs-comment\"># ~= 25.1</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Conical Frustum: &quot;</span> + <span class=\"hljs-built_in\">str</span>(vol_conical_frustum(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>)))  <span class=\"hljs-comment\"># ~= 58.6</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Spherical cap: &quot;</span> + <span class=\"hljs-built_in\">str</span>(vol_spherical_cap(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)))  <span class=\"hljs-comment\"># ~= 5.24</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Spheres intersetion: &quot;</span> + <span class=\"hljs-built_in\">str</span>(vol_spheres_intersect(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>)))  <span class=\"hljs-comment\"># ~= 21.21</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    },
    "javascript": {
      "dir": "Maths/Volume.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/Volume.js",
      "code": "<span class=\"hljs-comment\">/*\nCalculate the volume of the shapes\n\nVolume for Cuboid\nVolume for Cube\nVolume for Cone\nVolume for Pyramid\nVolume for Cylinder\nVolume for Triangular Prism\nVolume for Pentagonal Prism\nVolume for Sphere\nVolume for Hemisphere\n*/</span>\n\n<span class=\"hljs-comment\">/*\n  Calculate the volume for a Cuboid\n  Reference: https://www.cuemath.com/measurement/volume-of-cuboid/\n  return width * length * height\n*/</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">volCuboid</span> = (<span class=\"hljs-params\">width, length, height</span>) =&gt; {\n  <span class=\"hljs-title function_\">isNumber</span>(width, <span class=\"hljs-string\">&#x27;Width&#x27;</span>)\n  <span class=\"hljs-title function_\">isNumber</span>(length, <span class=\"hljs-string\">&#x27;Length&#x27;</span>)\n  <span class=\"hljs-title function_\">isNumber</span>(height, <span class=\"hljs-string\">&#x27;Height&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (width * length * height)\n}\n\n<span class=\"hljs-comment\">/*\n  Calculate the volume for a Cube\n  Reference: https://www.cuemath.com/measurement/volume-of-cube/\n  return length * length * length\n*/</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">volCube</span> = (<span class=\"hljs-params\">length</span>) =&gt; {\n  <span class=\"hljs-title function_\">isNumber</span>(length, <span class=\"hljs-string\">&#x27;Length&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (length ** <span class=\"hljs-number\">3</span>)\n}\n\n<span class=\"hljs-comment\">/*\n  Calculate the volume for a Cone\n  Reference: https://www.cuemath.com/measurement/volume-of-cone/\n  return PI * radius^2 * height/3\n*/</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">volCone</span> = (<span class=\"hljs-params\">radius, height</span>) =&gt; {\n  <span class=\"hljs-title function_\">isNumber</span>(radius, <span class=\"hljs-string\">&#x27;Radius&#x27;</span>)\n  <span class=\"hljs-title function_\">isNumber</span>(height, <span class=\"hljs-string\">&#x27;Height&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * radius ** <span class=\"hljs-number\">2</span> * height / <span class=\"hljs-number\">3.0</span>)\n}\n\n<span class=\"hljs-comment\">/*\n  Calculate the volume for a Pyramid\n  Reference: https://www.cuemath.com/measurement/volume-of-pyramid/\n  return (baseLength * baseWidth * height) / 3\n*/</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">volPyramid</span> = (<span class=\"hljs-params\">baseLength, baseWidth, height</span>) =&gt; {\n  <span class=\"hljs-title function_\">isNumber</span>(baseLength, <span class=\"hljs-string\">&#x27;BaseLength&#x27;</span>)\n  <span class=\"hljs-title function_\">isNumber</span>(baseWidth, <span class=\"hljs-string\">&#x27;BaseWidth&#x27;</span>)\n  <span class=\"hljs-title function_\">isNumber</span>(height, <span class=\"hljs-string\">&#x27;Height&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (baseLength * baseWidth * height) / <span class=\"hljs-number\">3.0</span>\n}\n\n<span class=\"hljs-comment\">/*\n  Calculate the volume for a Cylinder\n  Reference: https://www.cuemath.com/measurement/volume-of-cylinder/\n  return PI * radius^2 * height\n*/</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">volCylinder</span> = (<span class=\"hljs-params\">radius, height</span>) =&gt; {\n  <span class=\"hljs-title function_\">isNumber</span>(radius, <span class=\"hljs-string\">&#x27;Radius&#x27;</span>)\n  <span class=\"hljs-title function_\">isNumber</span>(height, <span class=\"hljs-string\">&#x27;Height&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * radius ** <span class=\"hljs-number\">2</span> * height)\n}\n\n<span class=\"hljs-comment\">/*\n  Calculate the volume for a Triangular Prism\n  Reference: http://lrd.kangan.edu.au/numbers/content/03_volume/04_page.htm\n  return 1 / 2 * baseLengthTriangle * heightTriangle * height\n*/</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">volTriangularPrism</span> = (<span class=\"hljs-params\">baseLengthTriangle, heightTriangle, height</span>) =&gt; {\n  <span class=\"hljs-title function_\">isNumber</span>(baseLengthTriangle, <span class=\"hljs-string\">&#x27;BaseLengthTriangle&#x27;</span>)\n  <span class=\"hljs-title function_\">isNumber</span>(heightTriangle, <span class=\"hljs-string\">&#x27;HeightTriangle&#x27;</span>)\n  <span class=\"hljs-title function_\">isNumber</span>(height, <span class=\"hljs-string\">&#x27;Height&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span> * baseLengthTriangle * heightTriangle * height)\n}\n\n<span class=\"hljs-comment\">/*\n  Calculate the volume for a Pentagonal Prism\n  Reference: https://www.cuemath.com/measurement/volume-of-pentagonal-prism/\n  return 5/2 * pentagonalLength * pentagonalBaseLength * height\n*/</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">volPentagonalPrism</span> = (<span class=\"hljs-params\">pentagonalLength, pentagonalBaseLength, height</span>) =&gt; {\n  <span class=\"hljs-title function_\">isNumber</span>(pentagonalLength, <span class=\"hljs-string\">&#x27;PentagonalLength&#x27;</span>)\n  <span class=\"hljs-title function_\">isNumber</span>(pentagonalBaseLength, <span class=\"hljs-string\">&#x27;PentagonalBaseLength&#x27;</span>)\n  <span class=\"hljs-title function_\">isNumber</span>(height, <span class=\"hljs-string\">&#x27;Height&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">5</span> / <span class=\"hljs-number\">2</span> * pentagonalLength * pentagonalBaseLength * height)\n}\n\n<span class=\"hljs-comment\">/*\n  Calculate the volume for a Sphere\n  Reference: https://www.cuemath.com/measurement/volume-of-sphere/\n  return 4/3 * PI * radius^3\n*/</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">volSphere</span> = (<span class=\"hljs-params\">radius</span>) =&gt; {\n  <span class=\"hljs-title function_\">isNumber</span>(radius, <span class=\"hljs-string\">&#x27;Radius&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">4</span> / <span class=\"hljs-number\">3</span> * <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * radius ** <span class=\"hljs-number\">3</span>)\n}\n\n<span class=\"hljs-comment\">/*\n  Calculate the volume for a Hemisphere\n  Reference: https://www.cuemath.com/measurement/volume-of-hemisphere/\n  return (2 * PI * radius^3)/3\n*/</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">volHemisphere</span> = (<span class=\"hljs-params\">radius</span>) =&gt; {\n  <span class=\"hljs-title function_\">isNumber</span>(radius, <span class=\"hljs-string\">&#x27;Radius&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">2.0</span> * <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * radius ** <span class=\"hljs-number\">3</span>) / <span class=\"hljs-number\">3.0</span>\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">isNumber</span> = (<span class=\"hljs-params\">number, noName = <span class=\"hljs-string\">&#x27;number&#x27;</span></span>) =&gt; {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> number !== <span class=\"hljs-string\">&#x27;number&#x27;</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;The &#x27;</span> + noName + <span class=\"hljs-string\">&#x27; should be Number type&#x27;</span>)\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (number &lt; <span class=\"hljs-number\">0</span> || (!<span class=\"hljs-title class_\">Number</span>.<span class=\"hljs-built_in\">isFinite</span>(number))) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;The &#x27;</span> + noName + <span class=\"hljs-string\">&#x27; only accepts positive values&#x27;</span>)\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> { volCuboid, volCube, volCone, volPyramid, volCylinder, volTriangularPrism, volPentagonalPrism, volSphere, volHemisphere }\n"
    },
    "c-plus-plus": {
      "dir": "math/volume.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/volume.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implmentations for the [volume](https://en.wikipedia.org/wiki/Volume)\n * of various 3D shapes.\n * @details The volume of a 3D shape is the amount of 3D space that the shape\n * takes up. All shapes have a formula to get the volume of any given shape.\n * These implementations support multiple return types.\n *\n * @author [Focusucof](https://github.com/Focusucof)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span>     <span class=\"hljs-comment\">/// for std::pow</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdint&gt;</span>   <span class=\"hljs-comment\">/// for std::uint32_t</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace math\n * @brief Mathematical algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> math {\n<span class=\"hljs-comment\">/**\n * @brief The volume of a [cube](https://en.wikipedia.org/wiki/Cube)\n * @param length The length of the cube\n * @returns The volume of the cube\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">cube_volume</span><span class=\"hljs-params\">(T length)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">pow</span>(length, <span class=\"hljs-number\">3</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief The volume of a\n * [rectangular](https://en.wikipedia.org/wiki/Cuboid) prism\n * @param length The length of the base rectangle\n * @param width The width of the base rectangle\n * @param height The height of the rectangular prism\n * @returns The volume of the rectangular prism\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">rect_prism_volume</span><span class=\"hljs-params\">(T length, T width, T height)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> length * width * height;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief The volume of a [cone](https://en.wikipedia.org/wiki/Cone)\n * @param radius The radius of the base circle\n * @param height The height of the cone\n * @param PI The definition of the constant PI\n * @returns The volume of the cone\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">cone_volume</span><span class=\"hljs-params\">(T radius, T height, <span class=\"hljs-type\">double</span> PI = <span class=\"hljs-number\">3.14</span>)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">pow</span>(radius, <span class=\"hljs-number\">2</span>) * PI * height / <span class=\"hljs-number\">3</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief The volume of a\n * [triangular](https://en.wikipedia.org/wiki/Triangular_prism) prism\n * @param base The length of the base triangle\n * @param height The height of the base triangles\n * @param depth The depth of the triangular prism (the height of the whole\n * prism)\n * @returns The volume of the triangular prism\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">triangle_prism_volume</span><span class=\"hljs-params\">(T base, T height, T depth)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> base * height * depth / <span class=\"hljs-number\">2</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief The volume of a\n * [pyramid](https://en.wikipedia.org/wiki/Pyramid_(geometry))\n * @param length The length of the base shape (or base for triangles)\n * @param width The width of the base shape (or height for triangles)\n * @param height The height of the pyramid\n * @returns The volume of the pyramid\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">pyramid_volume</span><span class=\"hljs-params\">(T length, T width, T height)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> length * width * height / <span class=\"hljs-number\">3</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief The volume of a [sphere](https://en.wikipedia.org/wiki/Sphere)\n * @param radius The radius of the sphere\n * @param PI The definition of the constant PI\n * @returns The volume of the sphere\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">sphere_volume</span><span class=\"hljs-params\">(T radius, <span class=\"hljs-type\">double</span> PI = <span class=\"hljs-number\">3.14</span>)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> PI * std::<span class=\"hljs-built_in\">pow</span>(radius, <span class=\"hljs-number\">3</span>) * <span class=\"hljs-number\">4</span> / <span class=\"hljs-number\">3</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief The volume of a [cylinder](https://en.wikipedia.org/wiki/Cylinder)\n * @param radius The radius of the base circle\n * @param height The height of the cylinder\n * @param PI The definition of the constant PI\n * @returns The volume of the cylinder\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">T <span class=\"hljs-title\">cylinder_volume</span><span class=\"hljs-params\">(T radius, T height, <span class=\"hljs-type\">double</span> PI = <span class=\"hljs-number\">3.14</span>)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> PI * std::<span class=\"hljs-built_in\">pow</span>(radius, <span class=\"hljs-number\">2</span>) * height;\n}\n}  <span class=\"hljs-comment\">// namespace math</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Input variables</span>\n    <span class=\"hljs-type\">uint32_t</span> int_length = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 32 bit integer length input</span>\n    <span class=\"hljs-type\">uint32_t</span> int_width = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// 32 bit integer width input</span>\n    <span class=\"hljs-type\">uint32_t</span> int_base = <span class=\"hljs-number\">0</span>;   <span class=\"hljs-comment\">// 32 bit integer base input</span>\n    <span class=\"hljs-type\">uint32_t</span> int_height = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 32 bit integer height input</span>\n    <span class=\"hljs-type\">uint32_t</span> int_depth = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// 32 bit integer depth input</span>\n\n    <span class=\"hljs-type\">double</span> double_radius = NAN; <span class=\"hljs-comment\">// double radius input</span>\n    <span class=\"hljs-type\">double</span> double_height = NAN; <span class=\"hljs-comment\">// double height input</span>\n\n    <span class=\"hljs-comment\">// Output variables</span>\n    <span class=\"hljs-type\">uint32_t</span> int_expected = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 32 bit integer expected output</span>\n    <span class=\"hljs-type\">uint32_t</span> int_volume = <span class=\"hljs-number\">0</span>;   <span class=\"hljs-comment\">// 32 bit integer output</span>\n\n    <span class=\"hljs-type\">double</span> double_expected = NAN; <span class=\"hljs-comment\">// double expected output</span>\n    <span class=\"hljs-type\">double</span> double_volume = NAN;   <span class=\"hljs-comment\">// double output</span>\n\n    <span class=\"hljs-comment\">// 1st test</span>\n    int_length = <span class=\"hljs-number\">5</span>;\n    int_expected = <span class=\"hljs-number\">125</span>;\n    int_volume = math::<span class=\"hljs-built_in\">cube_volume</span>(int_length);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;VOLUME OF A CUBE&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Length: &quot;</span> &lt;&lt; int_length &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; int_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; int_volume &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(int_volume == int_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 2nd test</span>\n    int_length = <span class=\"hljs-number\">4</span>;\n    int_width = <span class=\"hljs-number\">3</span>;\n    int_height = <span class=\"hljs-number\">5</span>;\n    int_expected = <span class=\"hljs-number\">60</span>;\n    int_volume = math::<span class=\"hljs-built_in\">rect_prism_volume</span>(int_length, int_width, int_height);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;VOLUME OF A RECTANGULAR PRISM&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Length: &quot;</span> &lt;&lt; int_length &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Width: &quot;</span> &lt;&lt; int_width &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Height: &quot;</span> &lt;&lt; int_height &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; int_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; int_volume &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(int_volume == int_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 3rd test</span>\n    double_radius = <span class=\"hljs-number\">5</span>;\n    double_height = <span class=\"hljs-number\">7</span>;\n    double_expected = <span class=\"hljs-number\">183.16666666666666</span>;  <span class=\"hljs-comment\">// truncated to 14 decimal places</span>\n    double_volume = math::<span class=\"hljs-built_in\">cone_volume</span>(double_radius, double_height);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;VOLUME OF A CONE&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Radius: &quot;</span> &lt;&lt; double_radius &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Height: &quot;</span> &lt;&lt; double_height &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; double_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; double_volume &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(double_volume == double_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 4th test</span>\n    int_base = <span class=\"hljs-number\">3</span>;\n    int_height = <span class=\"hljs-number\">4</span>;\n    int_depth = <span class=\"hljs-number\">5</span>;\n    int_expected = <span class=\"hljs-number\">30</span>;\n    int_volume = math::<span class=\"hljs-built_in\">triangle_prism_volume</span>(int_base, int_height, int_depth);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;VOLUME OF A TRIANGULAR PRISM&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Base: &quot;</span> &lt;&lt; int_base &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Height: &quot;</span> &lt;&lt; int_height &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Depth: &quot;</span> &lt;&lt; int_depth &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; int_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; int_volume &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(int_volume == int_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 5th test</span>\n    int_length = <span class=\"hljs-number\">10</span>;\n    int_width = <span class=\"hljs-number\">3</span>;\n    int_height = <span class=\"hljs-number\">5</span>;\n    int_expected = <span class=\"hljs-number\">50</span>;\n    int_volume = math::<span class=\"hljs-built_in\">pyramid_volume</span>(int_length, int_width, int_height);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;VOLUME OF A PYRAMID&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Length: &quot;</span> &lt;&lt; int_length &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Width: &quot;</span> &lt;&lt; int_width &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Height: &quot;</span> &lt;&lt; int_height &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; int_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; int_volume &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(int_volume == int_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 6th test</span>\n    double_radius = <span class=\"hljs-number\">3</span>;\n    double_expected = <span class=\"hljs-number\">113.04</span>;\n    double_volume = math::<span class=\"hljs-built_in\">sphere_volume</span>(double_radius);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;VOLUME OF A SPHERE&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Radius: &quot;</span> &lt;&lt; double_radius &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; double_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; double_volume &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(double_volume == double_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 7th test</span>\n    double_radius = <span class=\"hljs-number\">5</span>;\n    double_height = <span class=\"hljs-number\">2</span>;\n    double_expected = <span class=\"hljs-number\">157</span>;\n    double_volume = math::<span class=\"hljs-built_in\">cylinder_volume</span>(double_radius, double_height);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;VOLUME OF A CYLINDER&quot;</span> &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Radius: &quot;</span> &lt;&lt; double_radius &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Height: &quot;</span> &lt;&lt; double_height &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; double_expected &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; double_volume &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">assert</span>(double_volume == double_expected);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "src/main/java/com/thealgorithms/maths/Volume.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/maths/Volume.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\n\n\n<span class=\"hljs-comment\">/* Find volume of various shapes.*/</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Volume</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n        <span class=\"hljs-comment\">/* test cube */</span>\n        <span class=\"hljs-keyword\">assert</span> Double.compare(volumeCube(<span class=\"hljs-number\">7</span>), <span class=\"hljs-number\">343.0</span>) == <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">/* test cuboid */</span>\n        <span class=\"hljs-keyword\">assert</span> Double.compare(volumeCuboid(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>), <span class=\"hljs-number\">70.0</span>) == <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">/* test sphere */</span>\n        <span class=\"hljs-keyword\">assert</span> Double.compare(volumeSphere(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">523.5987755982989</span>) == <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">/* test cylinder */</span>\n        <span class=\"hljs-keyword\">assert</span> Double.compare(volumeCylinder(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">12.566370614359172</span>) == <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">/* test hemisphere */</span>\n        <span class=\"hljs-keyword\">assert</span> Double.compare(volumeHemisphere(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">261.79938779914943</span>) == <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">/* test cone */</span>\n        <span class=\"hljs-keyword\">assert</span> Double.compare(volumeCone(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>), <span class=\"hljs-number\">916.297857297023</span>) == <span class=\"hljs-number\">0</span>;\n        \n        <span class=\"hljs-comment\">/*test prism*/</span>\n        <span class=\"hljs-keyword\">assert</span> Double.compare(volumePrism(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">20.0</span>) == <span class=\"hljs-number\">0</span>;\n        \n        <span class=\"hljs-comment\">/*test pyramid*/</span>\n        <span class=\"hljs-keyword\">assert</span> Double.compare(volumePyramid(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">10.0</span>) == <span class=\"hljs-number\">0</span>;\n\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate the volume of a cube.\n     *\n     * <span class=\"hljs-doctag\">@param</span> sideLength side length of cube\n     * <span class=\"hljs-doctag\">@return</span> volume of given cube\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">volumeCube</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> sidelength)</span> {\n        <span class=\"hljs-keyword\">return</span> sidelength * sidelength * sidelength;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate the volume of a cuboid.\n     *\n     * <span class=\"hljs-doctag\">@param</span> width of cuboid\n     * <span class=\"hljs-doctag\">@param</span> height of cuboid\n     * <span class=\"hljs-doctag\">@param</span> length of cuboid\n     * <span class=\"hljs-doctag\">@return</span> volume of given cuboid\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">volumeCuboid</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> width, <span class=\"hljs-type\">double</span> height, <span class=\"hljs-type\">double</span> length)</span> {\n        <span class=\"hljs-keyword\">return</span> width * height * length;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate the volume of a sphere.\n     *\n     * <span class=\"hljs-doctag\">@param</span> radius radius of sphere\n     * <span class=\"hljs-doctag\">@return</span> volume of given sphere\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">volumeSphere</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> radius)</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span> / <span class=\"hljs-number\">3</span> * Math.PI * radius * radius * radius;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate volume of a cylinder\n     *\n     * <span class=\"hljs-doctag\">@param</span> radius radius of the floor\n     * <span class=\"hljs-doctag\">@param</span> height height of the cylinder.\n     * <span class=\"hljs-doctag\">@return</span> volume of given cylinder\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">volumeCylinder</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> radius, <span class=\"hljs-type\">double</span> height)</span> {\n        <span class=\"hljs-keyword\">return</span> Math.PI * radius * radius * height;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate the volume of a hemisphere.\n     *\n     * <span class=\"hljs-doctag\">@param</span> radius radius of hemisphere\n     * <span class=\"hljs-doctag\">@return</span> volume of given hemisphere\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">volumeHemisphere</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> radius)</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> / <span class=\"hljs-number\">3</span> * Math.PI * radius * radius * radius;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Calculate the volume of a cone.\n     *\n     * <span class=\"hljs-doctag\">@param</span> radius radius of cone.\n     * <span class=\"hljs-doctag\">@param</span> height of cone.\n     * <span class=\"hljs-doctag\">@return</span> volume of given cone.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">volumeCone</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> radius, <span class=\"hljs-type\">double</span> height)</span> {\n        <span class=\"hljs-keyword\">return</span> Math.PI * radius * radius * height / <span class=\"hljs-number\">3</span>;\n    }\n    \n    <span class=\"hljs-comment\">/**\n     * Calculate the volume of a prism.\n     *\n     * <span class=\"hljs-doctag\">@param</span> area of the base.\n     * <span class=\"hljs-doctag\">@param</span> height of prism.\n     * <span class=\"hljs-doctag\">@return</span> volume of given prism.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">volumePrism</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> basearea, <span class=\"hljs-type\">double</span> height)</span> {\n        <span class=\"hljs-keyword\">return</span> basearea * height;\n    }\n    \n    <span class=\"hljs-comment\">/**\n     * Calculate the volume of a pyramid.\n     *\n     * <span class=\"hljs-doctag\">@param</span> area of the base.\n     * <span class=\"hljs-doctag\">@param</span> height of pyramid.\n     * <span class=\"hljs-doctag\">@return</span> volume of given pyramid.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">volumePyramid</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> basearea, <span class=\"hljs-type\">double</span> height)</span> {\n        <span class=\"hljs-keyword\">return</span> basearea * height / <span class=\"hljs-number\">3</span>;\n    }\n}\n"
    },
    "julia": {
      "dir": "src/math/volume.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/math/volume.jl",
      "code": "<span class=\"hljs-comment\">#Find Volumes of Various Shapes.</span>\n<span class=\"hljs-comment\">#Wikipedia reference: https://en.wikipedia.org/wiki/Volume</span>\n<span class=\"hljs-comment\"># contributed By:- [Qingyu Qu](https://github.com/ErikQQY)</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    vol_cube()\n\nCompute the volume of a cube.\n\n# Examples\n\n```julia-repl\njulia&gt; vol_cube(1)\n1\njulia&gt; vol_cube(3)\n27\njulia&gt; vol_cube(-1)\nDomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> vol_cube(side)\n    <span class=\"hljs-keyword\">if</span> side &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;vol_cube() only works for non negative values.&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> side^<span class=\"hljs-number\">3</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    vol_cuboid(width, height, length)\n\nCompute the volume of a vol_cuboid\n\n# Examples\n\n```julia-repl\njulia&gt; vol_cuboid(1, 1, 1)\n1\njulia&gt; vol_cuboid(1, 2, 3)\n6\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> vol_cuboid(width, height, length)\n    <span class=\"hljs-keyword\">if</span> width &lt; <span class=\"hljs-number\">0</span> || height &lt; <span class=\"hljs-number\">0</span> || length &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;vol_cuboid() only works for non negative values.&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> width * height * length\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    vol_cone(area_of_base, height)\n\nCompute the Volume of a Cone\n\n\n# Examples\n\n```julia-repl\njulia&gt; vol_cone(10, 3)\n10.0\njulia&gt; vol_cone(1, 1)\n0.3333333333333333\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> vol_cone(area_of_base, height)\n    <span class=\"hljs-keyword\">if</span> area_of_base &lt; <span class=\"hljs-number\">0</span> || height &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;vol_cone() only works for non negative values.&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> area_of_base * height / <span class=\"hljs-number\">3.0</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    vol_right_circ_cone(radius, height)\n\nCompute the Volume of a Right Circular Cone.\n\n# Examples\n\n```julia-repl\njulia&gt; vol_right_circ_cone(2, 3)\n12.566370614359172\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> vol_right_circ_cone(radius, height)\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span> || height &lt; <span class=\"hljs-number\">0</span>\n        throw(\n            <span class=\"hljs-built_in\">DomainError</span>(\n                <span class=\"hljs-string\">&quot;vol_right_circ_cone() only works for non negative values.&quot;</span>,\n            ),\n        )\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">π</span> * radius^<span class=\"hljs-number\">2</span> * height / <span class=\"hljs-number\">3.0</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    vol_prism(area_of_base, height)\n\nCompute the Volume of a Prism.\n\n# Examples\n\n```julia-repl\njulia&gt; vol_prism(10, 2)\n20.0\njulia&gt; vol_prism(11, 1)\n11.0\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> vol_prism(area_of_base, height)\n    <span class=\"hljs-keyword\">if</span> area_of_base &lt; <span class=\"hljs-number\">0</span> || height &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;vol_prism() only works for non negative values.&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> area_of_base * height\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    vol_pyramid(area_of_base, height)\n\nCompute the volume of a Pyramid.\n\n# Examples\n\n```julia-repl\njulia&gt; vol_pyramid(10, 3)\n10.0\njulia&gt; vol_pyramid(1.5, 3)\n1.5\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> vol_pyramid(area_of_base, height)\n    <span class=\"hljs-keyword\">if</span> area_of_base &lt; <span class=\"hljs-number\">0</span> || height &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;vol_pyramid() only works for non negative values.&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> area_of_base * height / <span class=\"hljs-number\">3.0</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    vol_sphere(radius)\n\nCompute the volume of a sphere.\n\n# Examples\n\n```julia\nvol_sphere(5)  # returns 523.5987755982989\nvol_sphere(1)  # returns 4.1887902047863905\nvol_sphere(-1) # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> vol_sphere(radius)\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;vol_sphere() only works for non negative values.&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span> / <span class=\"hljs-number\">3</span> * <span class=\"hljs-literal\">pi</span> * (radius)^<span class=\"hljs-number\">3</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    vol_circular_cylinder(area_of_, height)\n\nCompute the Volume of a Circular Cylinder.\n\n# Examples\n\n```julia-repl\njulia&gt; vol_circular_cylinder(1, 1)\n3.141592653589793\njulia&gt; vol_circular_cylinder(4, 3)\n150.79644737231007\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> vol_circular_cylinder(radius, height)\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span> || height &lt; <span class=\"hljs-number\">0</span>\n        throw(\n            <span class=\"hljs-built_in\">DomainError</span>(\n                <span class=\"hljs-string\">&quot;vol_circular_cylinder() only works for non negative values.&quot;</span>,\n            ),\n        )\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">pi</span> * radius^<span class=\"hljs-number\">2</span> * height\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Shuangchi He",
      "email": "34329208+Yulv-git@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ihjass Thasbekha",
      "email": "44056715+Ihjass@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Snimerjot Singh",
      "email": "snimersingh1729@gmail.com",
      "commits": 1
    },
    {
      "name": "Matteo Messmer",
      "email": "40521259+matteomessmer@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Yurii",
      "email": "33547678+yuriimchg@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Vɪɴᴀʏᴀᴋ Pᴀɴᴅᴇʏ",
      "email": "87496159+Harpia-Vieillot@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    },
    {
      "name": "ErikQQY",
      "email": "2283984853@qq.com",
      "commits": 7
    },
    {
      "name": "leeyan44",
      "email": "86589062+leeyan44@users.noreply.github.com",
      "commits": 11
    }
  ],
  "explanationUrl": {}
}