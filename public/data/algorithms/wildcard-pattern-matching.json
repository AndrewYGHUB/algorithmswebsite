{
  "slug": "wildcard-pattern-matching",
  "name": "Wildcard Pattern Matching",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings/wildcard_pattern_matching.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings/wildcard_pattern_matching.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nImplementation of regular expression matching with support for &#x27;.&#x27; and &#x27;*&#x27;.\n&#x27;.&#x27; Matches any single character.\n&#x27;*&#x27; Matches zero or more of the preceding element.\nThe matching should cover the entire input string (not partial).\n\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">match_pattern</span>(<span class=\"hljs-params\">input_string: <span class=\"hljs-built_in\">str</span>, pattern: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    uses bottom-up dynamic programming solution for matching the input\n    string with a given pattern.\n\n    Runtime: O(len(input_string)*len(pattern))\n\n    Arguments\n    --------\n    input_string: str, any string which should be compared with the pattern\n    pattern: str, the string that represents a pattern and may contain\n    &#x27;.&#x27; for single character matches and &#x27;*&#x27; for zero or more of preceding character\n    matches\n\n    Note\n    ----\n    the pattern cannot start with a &#x27;*&#x27;,\n    because there should be at least one character before *\n\n    Returns\n    -------\n    A Boolean denoting whether the given string follows the pattern\n\n    Examples\n    -------\n    &gt;&gt;&gt; match_pattern(&quot;aab&quot;, &quot;c*a*b&quot;)\n    True\n    &gt;&gt;&gt; match_pattern(&quot;dabc&quot;, &quot;*abc&quot;)\n    False\n    &gt;&gt;&gt; match_pattern(&quot;aaa&quot;, &quot;aa&quot;)\n    False\n    &gt;&gt;&gt; match_pattern(&quot;aaa&quot;, &quot;a.a&quot;)\n    True\n    &gt;&gt;&gt; match_pattern(&quot;aaab&quot;, &quot;aa*&quot;)\n    False\n    &gt;&gt;&gt; match_pattern(&quot;aaab&quot;, &quot;.*&quot;)\n    True\n    &gt;&gt;&gt; match_pattern(&quot;a&quot;, &quot;bbbb&quot;)\n    False\n    &gt;&gt;&gt; match_pattern(&quot;&quot;, &quot;bbbb&quot;)\n    False\n    &gt;&gt;&gt; match_pattern(&quot;a&quot;, &quot;&quot;)\n    False\n    &gt;&gt;&gt; match_pattern(&quot;&quot;, &quot;&quot;)\n    True\n    &quot;&quot;&quot;</span>\n\n    len_string = <span class=\"hljs-built_in\">len</span>(input_string) + <span class=\"hljs-number\">1</span>\n    len_pattern = <span class=\"hljs-built_in\">len</span>(pattern) + <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\"># dp is a 2d matrix where dp[i][j] denotes whether prefix string of</span>\n    <span class=\"hljs-comment\"># length i of input_string matches with prefix string of length j of</span>\n    <span class=\"hljs-comment\"># given pattern.</span>\n    <span class=\"hljs-comment\"># &quot;dp&quot; stands for dynamic programming.</span>\n    dp = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(len_pattern)] <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(len_string)]\n\n    <span class=\"hljs-comment\"># since string of zero length match pattern of zero length</span>\n    dp[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\"># since pattern of zero length will never match with string of non-zero length</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, len_string):\n        dp[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\"># since string of zero length will match with pattern where there</span>\n    <span class=\"hljs-comment\"># is at least one * alternatively</span>\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, len_pattern):\n        dp[<span class=\"hljs-number\">0</span>][j] = dp[<span class=\"hljs-number\">0</span>][j - <span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">if</span> pattern[j - <span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&quot;*&quot;</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\"># now using bottom-up approach to find for all remaining lengths</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, len_string):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, len_pattern):\n            <span class=\"hljs-keyword\">if</span> input_string[i - <span class=\"hljs-number\">1</span>] == pattern[j - <span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">or</span> pattern[j - <span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&quot;.&quot;</span>:\n                dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>]\n\n            <span class=\"hljs-keyword\">elif</span> pattern[j - <span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&quot;*&quot;</span>:\n                <span class=\"hljs-keyword\">if</span> dp[i][j - <span class=\"hljs-number\">2</span>] == <span class=\"hljs-number\">1</span>:\n                    dp[i][j] = <span class=\"hljs-number\">1</span>\n                <span class=\"hljs-keyword\">elif</span> pattern[j - <span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">in</span> (input_string[i - <span class=\"hljs-number\">1</span>], <span class=\"hljs-string\">&quot;.&quot;</span>):\n                    dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j]\n                <span class=\"hljs-keyword\">else</span>:\n                    dp[i][j] = <span class=\"hljs-number\">0</span>\n            <span class=\"hljs-keyword\">else</span>:\n                dp[i][j] = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">bool</span>(dp[-<span class=\"hljs-number\">1</span>][-<span class=\"hljs-number\">1</span>])\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n    <span class=\"hljs-comment\"># inputing the strings</span>\n    <span class=\"hljs-comment\"># input_string = input(&quot;input a string :&quot;)</span>\n    <span class=\"hljs-comment\"># pattern = input(&quot;input a pattern :&quot;)</span>\n\n    input_string = <span class=\"hljs-string\">&quot;aab&quot;</span>\n    pattern = <span class=\"hljs-string\">&quot;c*a*b&quot;</span>\n\n    <span class=\"hljs-comment\"># using function to check whether given string matches the given pattern</span>\n    <span class=\"hljs-keyword\">if</span> match_pattern(input_string, pattern):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{input_string}</span> matches the given pattern <span class=\"hljs-subst\">{pattern}</span>&quot;</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{input_string}</span> does not match with the given pattern <span class=\"hljs-subst\">{pattern}</span>&quot;</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "P U N I T H",
      "email": "55887644+punithbajaj@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}