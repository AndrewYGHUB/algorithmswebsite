{
  "slug": "windowed-median",
  "name": "Windowed Median",
  "categories": [
    "probability"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "probability/windowed_median.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/probability/windowed_median.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief An implementation of a median calculation of a sliding window along a\n * data stream\n *\n * @details\n * Given a stream of integers, the algorithm calculates the median of a fixed\n * size window at the back of the stream. The leading time complexity of this\n * algorithm is O(log(N), and it is inspired by the known algorithm to [find\n * median from (infinite) data\n * stream](https://www.tutorialcup.com/interview/algorithm/find-median-from-data-stream.htm),\n * with the proper modifications to account for the finite window size for which\n * the median is requested\n *\n * ### Algorithm\n * The sliding window is managed by a list, which guarantees O(1) for both\n * pushing and popping. Each new value is pushed to the window back, while a\n * value from the front of the window is popped. In addition, the algorithm\n * manages a multi-value binary search tree (BST), implemented by std::multiset.\n * For each new value that is inserted into the window, it is also inserted to\n * the BST. When a value is popped from the window, it is also erased from the\n * BST. Both insertion and erasion to/from the BST are O(logN) in time, with N\n * the size of the window. Finally, the algorithm keeps a pointer to the root of\n * the BST, and updates its position whenever values are inserted or erased\n * to/from BST. The root of the tree is the median! Hence, median retrieval is\n * always O(1)\n *\n * Time complexity: O(logN). Space complexity: O(N). N - size of window\n * @author [Yaniv Hollander](https://github.com/YanivHollander)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>  <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdlib&gt;</span>  <span class=\"hljs-comment\">/// for std::rand - needed in testing</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctime&gt;</span>    <span class=\"hljs-comment\">/// for std::time - needed in testing</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;list&gt;</span>     <span class=\"hljs-comment\">/// for std::list - used to manage sliding window</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;set&gt;</span>  <span class=\"hljs-comment\">/// for std::multiset - used to manage multi-value sorted sliding window values</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>  <span class=\"hljs-comment\">/// for std::vector - needed in testing</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace probability\n * @brief Probability algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> probability {\n<span class=\"hljs-comment\">/**\n * @namespace windowed_median\n * @brief Functions for the Windowed Median algorithm implementation\n */</span>\n<span class=\"hljs-keyword\">namespace</span> windowed_median {\n<span class=\"hljs-keyword\">using</span> Window = std::list&lt;<span class=\"hljs-type\">int</span>&gt;;\n<span class=\"hljs-keyword\">using</span> size_type = Window::size_type;\n\n<span class=\"hljs-comment\">/**\n * @class WindowedMedian\n * @brief A class to calculate the median of a leading sliding window at the\n * back of a stream of integer values.\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WindowedMedian</span> {\n    <span class=\"hljs-type\">const</span> size_type _windowSize;  <span class=\"hljs-comment\">///&lt; sliding window size</span>\n    Window _window;  <span class=\"hljs-comment\">///&lt; a sliding window of values along the stream</span>\n    std::multiset&lt;<span class=\"hljs-type\">int</span>&gt; _sortedValues;  <span class=\"hljs-comment\">///&lt; a DS to represent a balanced</span>\n                                       <span class=\"hljs-comment\">/// multi-value binary search tree (BST)</span>\n    std::multiset&lt;<span class=\"hljs-type\">int</span>&gt;::const_iterator\n        _itMedian;  <span class=\"hljs-comment\">///&lt; an iterator that points to the root of the multi-value</span>\n                    <span class=\"hljs-comment\">/// BST</span>\n\n    <span class=\"hljs-comment\">/**\n     * @brief Inserts a value to a sorted multi-value BST\n     * @param value Value to insert\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insertToSorted</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span> </span>{\n        _sortedValues.<span class=\"hljs-built_in\">insert</span>(value);  <span class=\"hljs-comment\">/// Insert value to BST - O(logN)</span>\n        <span class=\"hljs-type\">const</span> <span class=\"hljs-keyword\">auto</span> sz = _sortedValues.<span class=\"hljs-built_in\">size</span>();\n        <span class=\"hljs-keyword\">if</span> (sz == <span class=\"hljs-number\">1</span>) {  <span class=\"hljs-comment\">/// For the first value, set median iterator to BST root</span>\n            _itMedian = _sortedValues.<span class=\"hljs-built_in\">begin</span>();\n            <span class=\"hljs-keyword\">return</span>;\n        }\n\n        <span class=\"hljs-comment\">/// If new value goes to left tree branch, and number of elements is</span>\n        <span class=\"hljs-comment\">/// even, the new median in the balanced tree is the left child of the</span>\n        <span class=\"hljs-comment\">/// median before the insertion</span>\n        <span class=\"hljs-keyword\">if</span> (value &lt; *_itMedian &amp;&amp; sz % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) {\n            --_itMedian;  <span class=\"hljs-comment\">// O(1) - traversing one step to the left child</span>\n        }\n\n        <span class=\"hljs-comment\">/// However, if the new value goes to the right branch, the previous</span>\n        <span class=\"hljs-comment\">/// median&#x27;s right child is the new median in the balanced tree</span>\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value &gt;= *_itMedian &amp;&amp; sz % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>) {\n            ++_itMedian;  <span class=\"hljs-comment\">/// O(1) - traversing one step to the right child</span>\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief Erases a value from a sorted multi-value BST\n     * @param value Value to insert\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">eraseFromSorted</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span> </span>{\n        <span class=\"hljs-type\">const</span> <span class=\"hljs-keyword\">auto</span> sz = _sortedValues.<span class=\"hljs-built_in\">size</span>();\n\n        <span class=\"hljs-comment\">/// If the erased value is on the left branch or the median itself and</span>\n        <span class=\"hljs-comment\">/// the number of elements is even, the new median will be the right</span>\n        <span class=\"hljs-comment\">/// child of the current one</span>\n        <span class=\"hljs-keyword\">if</span> (value &lt;= *_itMedian &amp;&amp; sz % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) {\n            ++_itMedian;  <span class=\"hljs-comment\">/// O(1) - traversing one step to the right child</span>\n        }\n\n        <span class=\"hljs-comment\">/// However, if the erased value is on the right branch or the median</span>\n        <span class=\"hljs-comment\">/// itself, and the number of elements is odd, the new median will be</span>\n        <span class=\"hljs-comment\">/// the left child of the current one</span>\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value &gt;= *_itMedian &amp;&amp; sz % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>) {\n            --_itMedian;  <span class=\"hljs-comment\">// O(1) - traversing one step to the left child</span>\n        }\n\n        <span class=\"hljs-comment\">/// Find the (first) position of the value we want to erase, and erase</span>\n        <span class=\"hljs-comment\">/// it</span>\n        <span class=\"hljs-type\">const</span> <span class=\"hljs-keyword\">auto</span> it = _sortedValues.<span class=\"hljs-built_in\">find</span>(value);  <span class=\"hljs-comment\">// O(logN)</span>\n        _sortedValues.<span class=\"hljs-built_in\">erase</span>(it);                    <span class=\"hljs-comment\">// O(logN)</span>\n    }\n\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/**\n     * @brief Constructs a WindowedMedian object\n     * @param windowSize Sliding window size\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">WindowedMedian</span><span class=\"hljs-params\">(size_type windowSize)</span> : _windowSize(windowSize){</span>};\n\n    <span class=\"hljs-comment\">/**\n     * @brief Insert a new value to the stream\n     * @param value New value to insert\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span> </span>{\n        <span class=\"hljs-comment\">/// Push new value to the back of the sliding window - O(1)</span>\n        _window.<span class=\"hljs-built_in\">push_back</span>(value);\n        <span class=\"hljs-built_in\">insertToSorted</span>(value);  <span class=\"hljs-comment\">// Insert value to the multi-value BST - O(logN)</span>\n        <span class=\"hljs-keyword\">if</span> (_window.<span class=\"hljs-built_in\">size</span>() &gt; _windowSize) {  <span class=\"hljs-comment\">/// If exceeding size of window,</span>\n                                             <span class=\"hljs-comment\">/// pop from its left side</span>\n            <span class=\"hljs-built_in\">eraseFromSorted</span>(\n                _window.<span class=\"hljs-built_in\">front</span>());  <span class=\"hljs-comment\">/// Erase from the multi-value BST</span>\n                                   <span class=\"hljs-comment\">/// the window left side value</span>\n            _window.<span class=\"hljs-built_in\">pop_front</span>();   <span class=\"hljs-comment\">/// Pop the left side value from the window -</span>\n                                   <span class=\"hljs-comment\">/// O(1)</span>\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief Gets the median of the values in the sliding window\n     * @return Median of sliding window. For even window size return the average\n     * between the two values in the middle\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">getMedian</span><span class=\"hljs-params\">()</span> <span class=\"hljs-type\">const</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (_sortedValues.<span class=\"hljs-built_in\">size</span>() % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> *_itMedian;  <span class=\"hljs-comment\">// O(1)</span>\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0.5f</span> * *_itMedian + <span class=\"hljs-number\">0.5f</span> * *<span class=\"hljs-built_in\">next</span>(_itMedian);  <span class=\"hljs-comment\">/// O(1)</span>\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief A naive and inefficient method to obtain the median of the sliding\n     * window. Used for testing!\n     * @return Median of sliding window. For even window size return the average\n     * between the two values in the middle\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">getMedianNaive</span><span class=\"hljs-params\">()</span> <span class=\"hljs-type\">const</span> </span>{\n        <span class=\"hljs-keyword\">auto</span> window = _window;\n        window.<span class=\"hljs-built_in\">sort</span>();  <span class=\"hljs-comment\">/// Sort window - O(NlogN)</span>\n        <span class=\"hljs-keyword\">auto</span> median =\n            *<span class=\"hljs-built_in\">next</span>(window.<span class=\"hljs-built_in\">begin</span>(),\n                  window.<span class=\"hljs-built_in\">size</span>() / <span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">/// Find value in the middle - O(N)</span>\n        <span class=\"hljs-keyword\">if</span> (window.<span class=\"hljs-built_in\">size</span>() % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> median;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0.5f</span> * median +\n               <span class=\"hljs-number\">0.5f</span> * *<span class=\"hljs-built_in\">next</span>(window.<span class=\"hljs-built_in\">begin</span>(), window.<span class=\"hljs-built_in\">size</span>() / <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">/// O(N)</span>\n    }\n};\n}  <span class=\"hljs-comment\">// namespace windowed_median</span>\n}  <span class=\"hljs-comment\">// namespace probability</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @param vals Stream of values\n * @param windowSize Size of sliding window\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;vals, <span class=\"hljs-type\">int</span> windowSize)</span> </span>{\n    probability::<span class=\"hljs-function\">windowed_median::WindowedMedian <span class=\"hljs-title\">windowedMedian</span><span class=\"hljs-params\">(windowSize)</span></span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">const</span> <span class=\"hljs-keyword\">auto</span> val : vals) {\n        windowedMedian.<span class=\"hljs-built_in\">insert</span>(val);\n\n        <span class=\"hljs-comment\">/// Comparing medians: efficient function vs. Naive one</span>\n        <span class=\"hljs-built_in\">assert</span>(windowedMedian.<span class=\"hljs-built_in\">getMedian</span>() == windowedMedian.<span class=\"hljs-built_in\">getMedianNaive</span>());\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @param argc command line argument count (ignored)\n * @param argv command line array of arguments (ignored)\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *argv[])</span> </span>{\n    <span class=\"hljs-comment\">/// A few fixed test cases</span>\n    <span class=\"hljs-built_in\">test</span>({<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>},\n         <span class=\"hljs-number\">3</span>);  <span class=\"hljs-comment\">/// Array of sorted values; odd window size</span>\n    <span class=\"hljs-built_in\">test</span>({<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>},\n         <span class=\"hljs-number\">3</span>);  <span class=\"hljs-comment\">/// Array of sorted values - decreasing; odd window size</span>\n    <span class=\"hljs-built_in\">test</span>({<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>}, <span class=\"hljs-number\">4</span>);     <span class=\"hljs-comment\">/// Even window size</span>\n    <span class=\"hljs-built_in\">test</span>({<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>}, <span class=\"hljs-number\">3</span>);  <span class=\"hljs-comment\">/// Array with repeating values</span>\n    <span class=\"hljs-built_in\">test</span>({<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>}, <span class=\"hljs-number\">3</span>);  <span class=\"hljs-comment\">/// Array with same values except one</span>\n    <span class=\"hljs-built_in\">test</span>({<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">-5</span>, <span class=\"hljs-number\">-5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>},\n         <span class=\"hljs-number\">5</span>);  <span class=\"hljs-comment\">/// Array that includes repeating values including negatives</span>\n\n    <span class=\"hljs-comment\">/// Array with large values - sum of few pairs exceeds MAX_INT. Window size</span>\n    <span class=\"hljs-comment\">/// is even - testing calculation of average median between two middle</span>\n    <span class=\"hljs-comment\">/// values</span>\n    <span class=\"hljs-built_in\">test</span>({<span class=\"hljs-number\">470211272</span>, <span class=\"hljs-number\">101027544</span>, <span class=\"hljs-number\">1457850878</span>, <span class=\"hljs-number\">1458777923</span>, <span class=\"hljs-number\">2007237709</span>, <span class=\"hljs-number\">823564440</span>,\n          <span class=\"hljs-number\">1115438165</span>, <span class=\"hljs-number\">1784484492</span>, <span class=\"hljs-number\">74243042</span>, <span class=\"hljs-number\">114807987</span>},\n         <span class=\"hljs-number\">6</span>);\n\n    <span class=\"hljs-comment\">/// Random test cases</span>\n    std::<span class=\"hljs-built_in\">srand</span>(<span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span>&gt;(std::<span class=\"hljs-built_in\">time</span>(<span class=\"hljs-literal\">nullptr</span>)));\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; vals;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">8</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) {\n        <span class=\"hljs-type\">const</span> <span class=\"hljs-keyword\">auto</span> n =\n            <span class=\"hljs-number\">1</span> + std::<span class=\"hljs-built_in\">rand</span>() /\n                    ((RAND_MAX + <span class=\"hljs-number\">5u</span>) / <span class=\"hljs-number\">20</span>);  <span class=\"hljs-comment\">/// Array size in the range [5, 20]</span>\n        <span class=\"hljs-keyword\">auto</span> windowSize =\n            <span class=\"hljs-number\">1</span> + std::<span class=\"hljs-built_in\">rand</span>() / ((RAND_MAX + <span class=\"hljs-number\">3u</span>) /\n                               <span class=\"hljs-number\">10</span>);  <span class=\"hljs-comment\">/// Window size in the range [3, 10]</span>\n        vals.<span class=\"hljs-built_in\">clear</span>();\n        vals.<span class=\"hljs-built_in\">reserve</span>(n);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n            vals.<span class=\"hljs-built_in\">push_back</span>(\n                <span class=\"hljs-built_in\">rand</span>() - RAND_MAX);  <span class=\"hljs-comment\">/// Random array values (positive/negative)</span>\n        }\n        <span class=\"hljs-built_in\">test</span>(vals, windowSize);  <span class=\"hljs-comment\">/// Testing randomized test</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Anuran Roy",
      "email": "76481787+anuran-roy@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Yaniv Hollander",
      "email": "yaniv.hollander@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}