{
  "slug": "word-ladder",
  "name": "Word Ladder",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src/main/java/com/thealgorithms/strings/WordLadder.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src/main/java/com/thealgorithms/strings/WordLadder.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.strings;\n\n<span class=\"hljs-keyword\">import</span> java.util.List;\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n<span class=\"hljs-keyword\">import</span> java.util.LinkedList;\n<span class=\"hljs-keyword\">import</span> java.util.Queue;\n<span class=\"hljs-keyword\">import</span> java.util.HashSet;\n\n<span class=\"hljs-comment\">/*\n    **Problem Statement:**\n    A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -&gt; s1 -&gt; s2 -&gt; ... -&gt; sk such that:\n\n    Every adjacent pair of words differs by a single letter.\n    Every si for 1 &lt;= i &lt;= k is in wordList. Note that beginWord does not need to be in wordList.\n    sk == endWord\n    Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\n\n    **Example 1:**\n    Input: beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n    Output: 5 \n    Explanation: One shortest transformation sequence is &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; cog&quot;, which is 5 words long.\n\n    **Example 2:**\n    Input: beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]\n    Output: 0\n    Explanation: The endWord &quot;cog&quot; is not in wordList, therefore there is no valid transformation sequence.\n\n    **Constraints:**\n    1 &lt;= beginWord.length &lt;= 10\n    endWord.length == beginWord.length\n    1 &lt;= wordList.length &lt;= 5000\n    wordList[i].length == beginWord.length\n    beginWord, endWord, and wordList[i] consist of lowercase English letters.\n    beginWord != endWord\n    All the words in wordList are unique.\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WordLadder</span> {\n\n    <span class=\"hljs-comment\">/**\n     * Driver Code\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">beginWord</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;hit&quot;</span>;\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">endWord</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;cog&quot;</span>;\n        String words[] = {<span class=\"hljs-string\">&quot;hot&quot;</span>, <span class=\"hljs-string\">&quot;dot&quot;</span>, <span class=\"hljs-string\">&quot;dog&quot;</span>, <span class=\"hljs-string\">&quot;lot&quot;</span>, <span class=\"hljs-string\">&quot;log&quot;</span>, <span class=\"hljs-string\">&quot;cog&quot;</span>};\n        List&lt;String&gt; wordList = Arrays.asList(words);\n\n        System.out.println(<span class=\"hljs-string\">&quot;Ladder Length: &quot;</span> + ladderLength(beginWord, endWord, wordList));\n    }\n\n    <span class=\"hljs-comment\">/**\n     * This function finds the ladderLength\n     *\n     * <span class=\"hljs-doctag\">@param</span> beginWord: Starting word of the ladder\n     * <span class=\"hljs-doctag\">@param</span> endWord: Ending word of the ladder\n     * <span class=\"hljs-doctag\">@param</span> wordList: This list contains the words which needs to be included\n     * in ladder.\n     * <span class=\"hljs-doctag\">@return</span> ladderLength: This function will return the ladderLength(level)\n     * if the endword is there. Otherwise, will return the length as 0.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">ladderLength</span><span class=\"hljs-params\">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> {\n        HashSet&lt;String&gt; set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>();\n        <span class=\"hljs-keyword\">for</span> (String word : wordList) {\n            set.add(word);\n        }\n\n        <span class=\"hljs-keyword\">if</span> (!set.contains(endWord)) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        }\n\n        Queue&lt;String&gt; queue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>();\n        queue.offer(beginWord);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">level</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">while</span> (!queue.isEmpty()) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> queue.size();\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\n                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">curr</span> <span class=\"hljs-operator\">=</span> queue.poll();\n                <span class=\"hljs-type\">char</span>[] words_chars = curr.toCharArray();\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; words_chars.length; j++) {\n                    <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">original_chars</span> <span class=\"hljs-operator\">=</span> words_chars[j];\n                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>; c &lt;= <span class=\"hljs-string\">&#x27;z&#x27;</span>; c++) {\n                        <span class=\"hljs-keyword\">if</span> (words_chars[j] == c) {\n                            <span class=\"hljs-keyword\">continue</span>;\n                        }\n                        words_chars[j] = c;\n                        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">new_word</span> <span class=\"hljs-operator\">=</span> String.valueOf(words_chars);\n                        <span class=\"hljs-keyword\">if</span> (new_word.equals(endWord)) {\n                            <span class=\"hljs-keyword\">return</span> level + <span class=\"hljs-number\">1</span>;\n                        }\n                        <span class=\"hljs-keyword\">if</span> (set.contains(new_word)) {\n                            set.remove(new_word);\n                            queue.offer(new_word);\n                        }\n                    }\n                    words_chars[j] = original_chars;\n                }\n            }\n            level++;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Parundeep Singh",
      "email": "52928589+ParundeepSingh@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}