{
  "slug": "z-algorithm",
  "name": "Z Algorithm",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/string/z_algorithm.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/string/z_algorithm.rs",
      "code": "<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">match_with_z_array</span>&lt;T: <span class=\"hljs-built_in\">Eq</span>&gt;(\n    input_string: &amp;[T],\n    pattern: &amp;[T],\n    start_index: <span class=\"hljs-type\">usize</span>,\n    only_full_matches: <span class=\"hljs-type\">bool</span>,\n) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">size</span> = input_string.<span class=\"hljs-title function_ invoke__\">len</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">pattern_size</span> = pattern.<span class=\"hljs-title function_ invoke__\">len</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">last_match</span>: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">match_end</span>: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">array</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0usize</span>; size];\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> start_index..size {\n        <span class=\"hljs-comment\">// getting plain z array of a string requires matching from index</span>\n        <span class=\"hljs-comment\">// 1 instead of 0 (which gives a trivial result instead)</span>\n        <span class=\"hljs-keyword\">if</span> i &lt;= match_end {\n            array[i] = std::cmp::<span class=\"hljs-title function_ invoke__\">min</span>(array[i - last_match], match_end - i + <span class=\"hljs-number\">1</span>);\n        }\n        <span class=\"hljs-title function_ invoke__\">while</span> (i + array[i]) &lt; size &amp;&amp; array[i] &lt; pattern_size {\n            <span class=\"hljs-keyword\">if</span> input_string[i + array[i]] != pattern[array[i]] {\n                <span class=\"hljs-keyword\">break</span>;\n            }\n            array[i] += <span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-title function_ invoke__\">if</span> (i + array[i]) &gt; (match_end + <span class=\"hljs-number\">1</span>) {\n            match_end = i + array[i] - <span class=\"hljs-number\">1</span>;\n            last_match = i;\n        }\n    }\n    <span class=\"hljs-keyword\">if</span> !only_full_matches {\n        array\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">answer</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[];\n        <span class=\"hljs-title function_ invoke__\">for</span> (idx, number) <span class=\"hljs-keyword\">in</span> array.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\n            <span class=\"hljs-keyword\">if</span> *number == pattern_size {\n                answer.<span class=\"hljs-title function_ invoke__\">push</span>(idx);\n            }\n        }\n        answer\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">z_array</span>&lt;T: <span class=\"hljs-built_in\">Eq</span>&gt;(input: &amp;[T]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; {\n    <span class=\"hljs-title function_ invoke__\">match_with_z_array</span>(input, input, <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">false</span>)\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">match_pattern</span>&lt;T: <span class=\"hljs-built_in\">Eq</span>&gt;(input: &amp;[T], pattern: &amp;[T]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; {\n    <span class=\"hljs-title function_ invoke__\">match_with_z_array</span>(input, pattern, <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">true</span>)\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_z_array</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">string</span> = <span class=\"hljs-string\">&quot;aabaabab&quot;</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">array</span> = <span class=\"hljs-title function_ invoke__\">z_array</span>(string.<span class=\"hljs-title function_ invoke__\">as_bytes</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(array, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">pattern_in_text</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">text</span>: &amp;<span class=\"hljs-type\">str</span> = <span class=\"hljs-built_in\">concat!</span>(\n            <span class=\"hljs-string\">&quot;lorem ipsum dolor sit amet, consectetur &quot;</span>,\n            <span class=\"hljs-string\">&quot;adipiscing elit, sed do eiusmod tempor &quot;</span>,\n            <span class=\"hljs-string\">&quot;incididunt ut labore et dolore magna aliqua&quot;</span>\n        );\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">pattern1</span> = <span class=\"hljs-string\">&quot;rem&quot;</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">pattern2</span> = <span class=\"hljs-string\">&quot;em&quot;</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">pattern3</span> = <span class=\"hljs-string\">&quot;;alksdjfoiwer&quot;</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">pattern4</span> = <span class=\"hljs-string\">&quot;m&quot;</span>;\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">match_pattern</span>(text.<span class=\"hljs-title function_ invoke__\">as_bytes</span>(), pattern1.<span class=\"hljs-title function_ invoke__\">as_bytes</span>()), <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">match_pattern</span>(text.<span class=\"hljs-title function_ invoke__\">as_bytes</span>(), pattern2.<span class=\"hljs-title function_ invoke__\">as_bytes</span>()),\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">73</span>]\n        );\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">match_pattern</span>(text.<span class=\"hljs-title function_ invoke__\">as_bytes</span>(), pattern3.<span class=\"hljs-title function_ invoke__\">as_bytes</span>()), <span class=\"hljs-built_in\">vec!</span>[]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">match_pattern</span>(text.<span class=\"hljs-title function_ invoke__\">as_bytes</span>(), pattern4.<span class=\"hljs-title function_ invoke__\">as_bytes</span>()),\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">68</span>, <span class=\"hljs-number\">74</span>, <span class=\"hljs-number\">110</span>]\n        );\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">text2</span> = <span class=\"hljs-string\">&quot;aaaaaaaa&quot;</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">pattern5</span> = <span class=\"hljs-string\">&quot;aaa&quot;</span>;\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">match_pattern</span>(text2.<span class=\"hljs-title function_ invoke__\">as_bytes</span>(), pattern5.<span class=\"hljs-title function_ invoke__\">as_bytes</span>()),\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n        )\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">long_pattern_in_text</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">text</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">65u8</span>; <span class=\"hljs-number\">1e5</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">pattern</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">65u8</span>; <span class=\"hljs-number\">5e4</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>];\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">expected_answer</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0usize</span>; (<span class=\"hljs-number\">1e5</span> - <span class=\"hljs-number\">5e4</span> + <span class=\"hljs-number\">1f64</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>];\n        <span class=\"hljs-title function_ invoke__\">for</span> (idx, i) <span class=\"hljs-keyword\">in</span> expected_answer.<span class=\"hljs-title function_ invoke__\">iter_mut</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\n            *i = idx;\n        }\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">match_pattern</span>(text.<span class=\"hljs-title function_ invoke__\">as_slice</span>(), pattern.<span class=\"hljs-title function_ invoke__\">as_slice</span>()),\n            expected_answer\n        );\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Erfan Khadem",
      "email": "45465346+er888kh@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}