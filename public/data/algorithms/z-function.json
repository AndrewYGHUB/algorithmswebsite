{
  "slug": "z-function",
  "name": "Z Function",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings/z_function.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings/z_function.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nhttps://cp-algorithms.com/string/z-function.html\n\nZ-function or Z algorithm\n\nEfficient algorithm for pattern occurrence in a string\n\nTime Complexity: O(n) - where n is the length of the string\n\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">z_function</span>(<span class=\"hljs-params\">input_str: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    For the given string this function computes value for each index,\n    which represents the maximal length substring starting from the index\n    and is the same as the prefix of the same size\n\n    e.x.  for string &#x27;abab&#x27; for second index value would be 2\n\n    For the value of the first element the algorithm always returns 0\n\n    &gt;&gt;&gt; z_function(&quot;abracadabra&quot;)\n    [0, 0, 0, 1, 0, 1, 0, 4, 0, 0, 1]\n    &gt;&gt;&gt; z_function(&quot;aaaa&quot;)\n    [0, 3, 2, 1]\n    &gt;&gt;&gt; z_function(&quot;zxxzxxz&quot;)\n    [0, 0, 0, 4, 0, 0, 1]\n    &quot;&quot;&quot;</span>\n    z_result = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(input_str))]\n\n    <span class=\"hljs-comment\"># initialize interval&#x27;s left pointer and right pointer</span>\n    left_pointer, right_pointer = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(input_str)):\n        <span class=\"hljs-comment\"># case when current index is inside the interval</span>\n        <span class=\"hljs-keyword\">if</span> i &lt;= right_pointer:\n            min_edge = <span class=\"hljs-built_in\">min</span>(right_pointer - i + <span class=\"hljs-number\">1</span>, z_result[i - left_pointer])\n            z_result[i] = min_edge\n\n        <span class=\"hljs-keyword\">while</span> go_next(i, z_result, input_str):\n            z_result[i] += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># if new index&#x27;s result gives us more right interval,</span>\n        <span class=\"hljs-comment\"># we&#x27;ve to update left_pointer and right_pointer</span>\n        <span class=\"hljs-keyword\">if</span> i + z_result[i] - <span class=\"hljs-number\">1</span> &gt; right_pointer:\n            left_pointer, right_pointer = i, i + z_result[i] - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> z_result\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">go_next</span>(<span class=\"hljs-params\">i: <span class=\"hljs-built_in\">int</span>, z_result: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], s: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Check if we have to move forward to the next characters or not\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> i + z_result[i] &lt; <span class=\"hljs-built_in\">len</span>(s) <span class=\"hljs-keyword\">and</span> s[z_result[i]] == s[i + z_result[i]]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find_pattern</span>(<span class=\"hljs-params\">pattern: <span class=\"hljs-built_in\">str</span>, input_str: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Example of using z-function for pattern occurrence\n    Given function returns the number of times &#x27;pattern&#x27;\n    appears in &#x27;input_str&#x27; as a substring\n\n    &gt;&gt;&gt; find_pattern(&quot;abr&quot;, &quot;abracadabra&quot;)\n    2\n    &gt;&gt;&gt; find_pattern(&quot;a&quot;, &quot;aaaa&quot;)\n    4\n    &gt;&gt;&gt; find_pattern(&quot;xz&quot;, &quot;zxxzxxz&quot;)\n    2\n    &quot;&quot;&quot;</span>\n    answer = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-comment\"># concatenate &#x27;pattern&#x27; and &#x27;input_str&#x27; and call z_function</span>\n    <span class=\"hljs-comment\"># with concatenated string</span>\n    z_result = z_function(pattern + input_str)\n\n    <span class=\"hljs-keyword\">for</span> val <span class=\"hljs-keyword\">in</span> z_result:\n        <span class=\"hljs-comment\"># if value is greater then length of the pattern string</span>\n        <span class=\"hljs-comment\"># that means this index is starting position of substring</span>\n        <span class=\"hljs-comment\"># which is equal to pattern string</span>\n        <span class=\"hljs-keyword\">if</span> val &gt;= <span class=\"hljs-built_in\">len</span>(pattern):\n            answer += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> answer\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "c-plus-plus": {
      "dir": "strings/z_function.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/strings/z_function.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief The [Z function](https://cp-algorithms.com/string/z-function.html) for\n * finding occurences of a pattern within a piece of text with time and space\n * complexity O(n + m)\n * @details\n * 1. The Z-function for a string is an array of length n where the\n * i-th element is equal to the greatest number of characters starting\n * from the position i that coincide with the first characters of s.\n * 2. E.g.: string: ababb then z[2]=2 as s[2]=s[0] and s[3]=s[1] and s[4]!=s[2]\n * @author [Ritika Gupta](https://github.com/RitikaGupta8734)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _MSC_VER</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span>  <span class=\"hljs-comment\">/// for string (use this for MS Visual C++)</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span>  <span class=\"hljs-comment\">/// for string</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>  <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>   <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief Generate the Z-function for the inputted string.\n * \\param[in] pattern text on which to apply the Z-function\n * \\returns the Z-function output as a vector array\n */</span>\n<span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">Z_function</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::string &amp;pattern)</span> </span>{\n    <span class=\"hljs-type\">uint64_t</span> pattern_length = pattern.<span class=\"hljs-built_in\">size</span>();\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">z</span><span class=\"hljs-params\">(pattern_length, <span class=\"hljs-number\">0</span>)</span></span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">1</span>, l = <span class=\"hljs-number\">0</span>, r = <span class=\"hljs-number\">0</span>; i &lt; pattern_length; i++) {\n        <span class=\"hljs-keyword\">if</span> (i &lt;= r) {\n            z[i] = std::<span class=\"hljs-built_in\">min</span>(r - i + <span class=\"hljs-number\">1</span>, z[i - l]);\n        }\n        <span class=\"hljs-keyword\">while</span> (i + z[i] &lt; pattern_length &amp;&amp;\n               pattern[z[i]] == pattern[i + z[i]]) {\n            z[i]++;\n        }\n        <span class=\"hljs-keyword\">if</span> (i + z[i] - <span class=\"hljs-number\">1</span> &gt; r) {\n            r = i + z[i] - <span class=\"hljs-number\">1</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> z;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Using Z_function to find a pattern in a text\n * \\param[in] pattern string pattern to search\n * \\param[in] text text in which to search\n * \\returns a vector of starting indexes where pattern is found in the text\n */</span>\n<span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">find_pat_in_text</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::string &amp;pattern,\n                                       <span class=\"hljs-type\">const</span> std::string &amp;text)</span> </span>{\n    <span class=\"hljs-type\">uint64_t</span> text_length = text.<span class=\"hljs-built_in\">size</span>(), pattern_length = pattern.<span class=\"hljs-built_in\">size</span>();\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; z = <span class=\"hljs-built_in\">Z_function</span>(pattern + <span class=\"hljs-string\">&#x27;#&#x27;</span> + text);\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; matching_indexes;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; text_length; i++) {\n        <span class=\"hljs-keyword\">if</span> (z[i + pattern_length + <span class=\"hljs-number\">1</span>] == pattern_length) {\n            matching_indexes.<span class=\"hljs-built_in\">push_back</span>(i);\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> matching_indexes;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// usual case</span>\n    std::string text1 = <span class=\"hljs-string\">&quot;alskfjaldsabc1abc1abcbksbcdnsdabcabc&quot;</span>;\n    std::string pattern1 = <span class=\"hljs-string\">&quot;abc&quot;</span>;\n\n    <span class=\"hljs-comment\">// matching_indexes1 gets the indexes where pattern1 exists in text1</span>\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; matching_indexes1 = <span class=\"hljs-built_in\">find_pat_in_text</span>(pattern1, text1);\n    <span class=\"hljs-built_in\">assert</span>((matching_indexes1 == std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt;{<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">33</span>}));\n\n    <span class=\"hljs-comment\">// corner case</span>\n    std::string text2 = <span class=\"hljs-string\">&quot;greengrass&quot;</span>;\n    std::string pattern2 = <span class=\"hljs-string\">&quot;abc&quot;</span>;\n\n    <span class=\"hljs-comment\">// matching_indexes2 gets the indexes where pattern2 exists in text2</span>\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; matching_indexes2 = <span class=\"hljs-built_in\">find_pat_in_text</span>(pattern2, text2);\n    <span class=\"hljs-built_in\">assert</span>((matching_indexes2 == std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt;{}));\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "f-sharp": {
      "dir": "Algorithms/Strings/ZFunction.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms/Strings/ZFunction.fs",
      "code": "﻿<span class=\"hljs-comment\">///https://cp-algorithms.com/string/z-function.html</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">///Z-function or Z algorithm</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">///Efficient algorithm for pattern occurrence in a string</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">///Time Complexity: O(n) - where n is the length of the string</span>\r\n<span class=\"hljs-keyword\">namespace</span> Algorithms.Strings\r\n\r\n<span class=\"hljs-keyword\">module</span> ZFunction <span class=\"hljs-operator\">=</span>\r\n\r\n    <span class=\"hljs-keyword\">let</span> goNext (i, zResult<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">array</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-type\">int</span><span class=\"hljs-operator\">&gt;</span>, s<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>) <span class=\"hljs-operator\">=</span>\r\n        i <span class=\"hljs-operator\">+</span> zResult.[i] <span class=\"hljs-operator\">&lt;</span> s.Length\r\n        <span class=\"hljs-operator\">&amp;&amp;</span> s.[zResult.[i]] <span class=\"hljs-operator\">=</span> s.[i <span class=\"hljs-operator\">+</span> zResult.[i]]\r\n\r\n    <span class=\"hljs-comment\">/// &lt;summary&gt;</span>\r\n    <span class=\"hljs-comment\">/// For the given string this function computes value for each index,</span>\r\n    <span class=\"hljs-comment\">/// which represents the maximal length substring starting from the index</span>\r\n    <span class=\"hljs-comment\">/// and is the same as the prefix of the same size</span>\r\n    <span class=\"hljs-comment\">/// &lt;/summary&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;param name=&quot;inputString&quot;&gt;&lt;/param&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\r\n    <span class=\"hljs-keyword\">let</span> zFunction (inputString<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>)<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">list</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-type\">int</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> zResult <span class=\"hljs-operator\">=</span>\r\n            [<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">..</span> inputString.Length <span class=\"hljs-operator\">-&gt;</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">|</span>]\r\n        <span class=\"hljs-comment\">// Initialize interval&#x27;s left pointer and right pointer</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> leftPointer, rightPointer <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>\r\n\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">..</span> inputString.Length <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\r\n            <span class=\"hljs-comment\">// Case when current index is inside the interval</span>\r\n            <span class=\"hljs-keyword\">if</span> i <span class=\"hljs-operator\">&lt;=</span> rightPointer <span class=\"hljs-keyword\">then</span>\r\n                <span class=\"hljs-keyword\">let</span> minEdge <span class=\"hljs-operator\">=</span>\r\n                    min (rightPointer <span class=\"hljs-operator\">-</span> i <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>) (zResult.[i <span class=\"hljs-operator\">-</span> leftPointer])\r\n\r\n                zResult.SetValue(minEdge, i)\r\n\r\n            <span class=\"hljs-keyword\">while</span> goNext (i, zResult, inputString) <span class=\"hljs-keyword\">do</span>\r\n                zResult.[i] <span class=\"hljs-operator\">&lt;-</span> zResult.[i] <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\r\n\r\n            <span class=\"hljs-comment\">// if new index&#x27;s result gives us more right interval,</span>\r\n            <span class=\"hljs-comment\">// we&#x27;ve to update left_pointer and right_pointer</span>\r\n            <span class=\"hljs-keyword\">if</span> i <span class=\"hljs-operator\">+</span> zResult.[i] <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">&gt;</span> rightPointer <span class=\"hljs-keyword\">then</span>\r\n                leftPointer <span class=\"hljs-operator\">&lt;-</span> i\r\n                rightPointer <span class=\"hljs-operator\">&lt;-</span> i <span class=\"hljs-operator\">+</span> zResult.[i] <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>\r\n\r\n        zResult <span class=\"hljs-operator\">|&gt;</span> List.ofArray\r\n\r\n\r\n    <span class=\"hljs-keyword\">let</span> findPattern (pattern<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>, inputString<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>)<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> answer <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-comment\">// Concatenate &#x27;pattern&#x27; and &#x27;input_str&#x27; and call z_function</span>\r\n        <span class=\"hljs-comment\">// with concatenated string</span>\r\n        <span class=\"hljs-keyword\">let</span> zResult <span class=\"hljs-operator\">=</span> zFunction (pattern <span class=\"hljs-operator\">+</span> inputString)\r\n\r\n        <span class=\"hljs-keyword\">for</span> value <span class=\"hljs-keyword\">in</span> zResult <span class=\"hljs-keyword\">do</span>\r\n            <span class=\"hljs-comment\">// If value is greater then length of the pattern string</span>\r\n            <span class=\"hljs-comment\">// that means this index is starting position of substring</span>\r\n            <span class=\"hljs-comment\">// which is equal to pattern string</span>\r\n            <span class=\"hljs-keyword\">if</span> value <span class=\"hljs-operator\">&gt;=</span> pattern.Length <span class=\"hljs-keyword\">then</span>\r\n                answer <span class=\"hljs-operator\">&lt;-</span> answer <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\r\n\r\n        answer\r\n"
    }
  },
  "contributors": [
    {
      "name": "RitikaGupta8734",
      "email": "43800283+RitikaGupta8734@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rohan R Bharadwaj",
      "email": "rohanrbharadwaj@gmail.com",
      "commits": 1
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "vakhokoto",
      "email": "v.kotoreishvili@gmail.com",
      "commits": 2
    },
    {
      "name": "Nika Losaberidze",
      "email": "nlosa16@freeuni.edu.ge",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}